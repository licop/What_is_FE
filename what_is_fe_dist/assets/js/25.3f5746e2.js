(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{391:function(e,t,a){"use strict";a.r(t);var n=a(27),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"webpack-高级概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-高级概念"}},[e._v("#")]),e._v(" webpack 高级概念")]),e._v(" "),a("h2",{attrs:{id:"tree-shaking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[e._v("#")]),e._v(" Tree Shaking")]),e._v(" "),a("p",[a("code",[e._v("tree shaking")]),e._v(" 就是使得 js 文件中没有被引入的代码不被打包到文件中, "),a("code",[e._v("tree shaking")]),e._v(" 只在 ES Module 的引入方式下生效， 例如 "),a("code",[e._v("import")]),e._v(" 和 "),a("code",[e._v("export")]),e._v(", 如果使用"),a("code",[e._v("commonjs")]),e._v("的打包方式则不生效。")]),e._v(" "),a("h3",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),a("p",[e._v("如果 "),a("code",[e._v("mode")]),e._v(" 配置为"),a("code",[e._v("development")]),e._v(" 则 webpack 配置需要添加")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n  mode: 'development',\n  optimization: {\n    usedExports: true, // 找到未引用的代码\n    mininize: true   // 压缩时删掉未引用的代码\n  }\n")])])]),a("p",[e._v("确保项目里没有"),a("strong",[e._v("副作用")]),e._v("（模块执行时除了导出成员之外所做的事情），将"),a("code",[e._v("package.json")]),e._v("里添加"),a("code",[e._v("sideEffects")]),e._v("属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  // package.json\n  {\n    "sideEffects": false // 可以为文件数组，标记那些文件有副作用\n  }\n\n  // webapck.config.js\n  optimization: {\n    "sideEffects": true  //开启功能\n  }\n')])])]),a("p",[e._v("如果是生成环境 "),a("code",[e._v("mode")]),e._v(" 配置为"),a("code",[e._v("production")]),e._v("，则 webpack 不用添加其他配置，webpack 会自动实现"),a("code",[e._v("tree shaking")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://webpack.docschina.org/guides/tree-shaking/",target:"_blank",rel:"noopener noreferrer"}},[e._v("更多关于 Tree Shaking"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"development-和-production-区分打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development-和-production-区分打包"}},[e._v("#")]),e._v(" development 和 production 区分打包")]),e._v(" "),a("p",[e._v("由于开发模式(development)和生产模式(production) 下对打包需求的不一样，所以 webpack 打包的最佳实践是将两种模式下不同的配置抽离出来")]),e._v(" "),a("p",[e._v("比如"),a("code",[e._v("source map")]),e._v("在两种环境下需求不一样; "),a("code",[e._v("development")]),e._v("模式需要"),a("code",[e._v("热模块替换 HMR")]),e._v("和"),a("code",[e._v("Tree Shaking")]),e._v("配置,"),a("code",[e._v("production")]),e._v("则不需要。")]),e._v(" "),a("p",[e._v("所以我们需要三个 webpack 配置，"),a("code",[e._v("webpack.common.js")]),e._v("， "),a("code",[e._v("webpack.dev.js")]),e._v("和"),a("code",[e._v("webpack.prod.js")]),e._v(", 然后使用"),a("code",[e._v("webpack-merge")]),e._v("插件将其不同环境下的特性和公用的部分合并。")]),e._v(" "),a("h2",{attrs:{id:"代码分割-code-splitting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码分割-code-splitting"}},[e._v("#")]),e._v(" 代码分割 code splitting")]),e._v(" "),a("p",[e._v("在最开始使用 Webpack 的时候, 都是将所有的 js 文件全部打包到一个 build.js 文件中(文件名取决与在 webpack.config.js 文件中 output.filename), 但是在大型项目中, build.js 可能过大, 导致页面加载时间过长. 这个时候就需要"),a("code",[e._v("code splitting")]),e._v(", "),a("code",[e._v("code splitting")]),e._v("就是将文件分割成块(chunk), 我们可以定义一些分割点(split point), 根据这些分割点对文件进行分块, 并实现按需加载。")]),e._v(" "),a("p",[e._v("代码分割，也就是 "),a("code",[e._v("Code Splitting")]),e._v(" 一般需要做这些事情：")]),e._v(" "),a("ul",[a("li",[e._v("为 "),a("code",[e._v("Vendor")]),e._v(" 单独打包（Vendor 指第三方的库或者公共的基础组件，因为 Vendor 的变化比较少，单独打包利于缓存）")]),e._v(" "),a("li",[e._v("为 "),a("code",[e._v("Manifest")]),e._v(" （Webpack 的 Runtime 代码）单独打包")]),e._v(" "),a("li",[e._v("为不同入口的业务代码打包，也就是代码分割异步加载（同理，也是为了缓存和加载速度）")]),e._v(" "),a("li",[e._v("为异步公共加载的代码打一个的包")])]),e._v(" "),a("p",[e._v("Webpack 4 下还有一个大改动，就是废弃了 "),a("code",[e._v("CommonsChunkPlugin")]),e._v("，引入了 "),a("code",[e._v("optimization.splitChunks")]),e._v(" 这个选项。\n"),a("code",[e._v("optimization.splitChunks")]),e._v(" 默认是不用设置的。默认情况下"),a("code",[e._v("splitChunks")]),e._v("只对异步代码进行分割，")]),e._v(" "),a("blockquote",[a("p",[e._v("默认 Webpack 4 只会对按需加载的代码做分割。"),a("code",[e._v("splitChunks.chunks")]),e._v("默认为"),a("code",[e._v("async")]),e._v(", 如果我们需要配置初始加载的代码也加入到代码分割中，可以设置 "),a("code",[e._v("splitChunks.chunks")]),e._v(" 为 'all'。")])]),e._v(" "),a("p",[e._v("将所有的公共模块提取到单独的 bundler 当中")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  optimization: {\n\t\tsplitChunks: {\n\t\t\tchunks: 'all'\n\t\t}\n\t}\n")])])]),a("p",[e._v("Webpack 4 的 "),a("code",[e._v("Code Splitting")]),e._v(" 最大的特点就是配置简单（0 配置起步），和"),a("strong",[e._v("基于内置规则自动拆分")]),e._v("。内置的代码切分的规则是这样的：")]),e._v(" "),a("ul",[a("li",[e._v("新 chunk 被两个及以上模块引用，或者来自 "),a("code",[e._v("node_modules")])]),e._v(" "),a("li",[e._v("新 chunk 大于 30kb （压缩之前）")]),e._v(" "),a("li",[e._v("异步加载并发加载的 chunk 数不能大于 5 个")]),e._v(" "),a("li",[e._v("初始加载的 chunk 数不能大于 3 个")])]),e._v(" "),a("p",[e._v("简单的说，Webpack 会把代码中的公共模块自动抽出来，变成一个包，前提是这个包大于 30kb，不然 Webpack 是不会抽出公共代码的，因为增加一次请求的成本是不能忽视的。")]),e._v(" "),a("p",[a("strong",[e._v("更多参考")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://webpack.js.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SplitChunksPlugin 的文档"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/webpack/webpack-4-code-splitting-chunk-graph-and-the-splitchunks-optimization-be739a861366",target:"_blank",rel:"noopener noreferrer"}},[e._v(" webpack 4: Code Splitting, chunk graph and the splitChunks optimization "),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"chunk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunk"}},[e._v("#")]),e._v(" chunk")]),e._v(" "),a("p",[a("code",[e._v("Chunk")]),e._v("不同于"),a("code",[e._v("entry")]),e._v("、 "),a("code",[e._v("output")]),e._v("、"),a("code",[e._v("module")]),e._v("这样的概念，它们对应着 Webpack 配置对象中的一个字段，"),a("code",[e._v("Chunk")]),e._v("没有单独的配置字段，但是这个词出现在"),a("code",[e._v("CommonsChunkPlugin")]),e._v("（Webpack3 以前）、"),a("code",[e._v("optimization.splitChunks")]),e._v("（Webpack4 以后）这样的名称之中。在 webpack 中使用"),a("code",[e._v("code splitting")]),e._v("或者"),a("code",[e._v("entry入口")]),e._v("每生成一个入口就是一个"),a("code",[e._v("chunk")]),e._v(";")]),e._v(" "),a("p",[a("img",{attrs:{src:"/chunk.png",alt:""}})]),e._v(" "),a("p",[e._v("产生 Chunk 有三种途径：")]),e._v(" "),a("ol",[a("li",[e._v("entry 入口")]),e._v(" "),a("li",[e._v("异步加载模块")]),e._v(" "),a("li",[e._v("代码分割（code spliting）")])]),e._v(" "),a("h2",{attrs:{id:"预获取-预加载模块-prefetch-preload-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预获取-预加载模块-prefetch-preload-module"}},[e._v("#")]),e._v(" 预获取/预加载模块(prefetch/preload module)")]),e._v(" "),a("p",[e._v("当使用"),a("code",[e._v("import() 语法")]),e._v("动态引入文件实现"),a("code",[e._v("lazy loading")]),e._v("懒加载时，可以仅在需要的时候才实现加载文件，减少加载时长。")]),e._v(" "),a("p",[e._v('在声明 import 时，使用下面这些内置指令，可以让 webpack 输出 "resource hint(资源提示)"，来告知浏览器：')]),e._v(" "),a("ul",[a("li",[e._v("prefetch(预获取)：将来某些导航下可能需要的资源")]),e._v(" "),a("li",[e._v("preload(预加载)：当前导航下可能需要资源")])]),e._v(" "),a("p",[e._v("下面这个 "),a("code",[e._v("prefetch")]),e._v(" 的简单示例中，有一个 "),a("code",[e._v("HomePage")]),e._v(" 组件，其内部渲染一个 "),a("code",[e._v("LoginButton")]),e._v(" 组件，然后在点击后按需加载 "),a("code",[e._v("LoginModal")]),e._v(" 组件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("LoginButton.js\n\nimport(/* webpackPrefetch: true */ './path/to/LoginModal.js');\n")])])]),a("p",[a("a",{attrs:{href:"https://webpack.docschina.org/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer"}},[e._v("更多 prefetch/preload 关于参考"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"对-css-文件进行代码分割"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对-css-文件进行代码分割"}},[e._v("#")]),e._v(" 对 css 文件进行代码分割")]),e._v(" "),a("p",[e._v("webpack 会默认将 css 打包到 js 文件中，所谓的"),a("code",[e._v("css in js")])]),e._v(" "),a("p",[a("code",[e._v("MiniCssExtractPlugin")]),e._v("插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载。 webpack5 已经支持了热更新，多用于"),a("code",[e._v("production")]),e._v("环境下生成。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [new MiniCssExtractPlugin()],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n\n")])])]),a("p",[e._v("使用"),a("code",[e._v("css-minimizer-webpack-plugin")]),e._v("插件对样式进行压缩")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://webpack.docschina.org/plugins/mini-css-extract-plugin/",target:"_blank",rel:"noopener noreferrer"}},[e._v("更多 mini-css-extract-plugin 参考"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"shimming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shimming"}},[e._v("#")]),e._v(" shimming")]),e._v(" "),a("p",[e._v("使用"),a("code",[e._v("ProvidePlugin")]),e._v("可以全局自动加载模块，而不必在任何地方"),a("code",[e._v("import")]),e._v("或"),a("code",[e._v("require")]),e._v("这些模块")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  plugins: [\n\t\tnew webpack.ProvidePlugin({\n\t\t\t$: 'jquery',\n\t\t\t_join: ['lodash', 'join']\n\t\t}),\n\t]\n")])])]),a("p",[a("a",{attrs:{href:"https://webpack.docschina.org/guides/shimming/",target:"_blank",rel:"noopener noreferrer"}},[e._v("更多关于 shimming 的的参考"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"输出文件名-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出文件名-hash"}},[e._v("#")]),e._v(" 输出文件名 Hash")]),e._v(" "),a("p",[e._v("为了解决客户端静态文件缓存过期时间过长，应用发生更新部署过后，客户端没有改变的问题。建议在生产模式下，文件名使用 Hash。")]),e._v(" "),a("p",[e._v("webpack 对于文件名支持三种 Hash，效果各不相同。")]),e._v(" "),a("p",[e._v("项目级别 Hash，每个文件的 hash 值都项目，一旦项目有任何改变，hash 值都会发生变化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  output: {\n    filename: '[name]-[hash]-bundle.js'\n  }\n}\n")])])]),a("p",[e._v("chunk 级别 Hash，同一 chunk 的 hash 值相同，文件改变时同一个 chunk 的 hash 值会发生变化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  output: {\n    filename: '[name]-[chunkhash]-bundle.js'\n  }\n}\n")])])]),a("p",[e._v("文件 级别 Hash，不同的文件有不同的 hash 值，文件变化更新当前文件的 hash 发生变化，最佳方案")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 将hash长度设置为8\n{\n  output: {\n    filename: '[name]-[contenthash:8]-bundle.js'\n  }\n}\n")])])]),a("h2",{attrs:{id:"webpack-分析工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-分析工具"}},[e._v("#")]),e._v(" webpack 分析工具")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://alexkuz.github.io/webpack-chart/",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-chart"),a("OutboundLink")],1),e._v(": webpack stats 可交互饼图。\n"),a("a",{attrs:{href:"https://chrisbateman.github.io/webpack-visualizer/",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-visualizer"),a("OutboundLink")],1),e._v(": 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。\n"),a("a",{attrs:{href:"https://github.com/webpack-contrib/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-bundle-analyzer"),a("OutboundLink")],1),e._v("：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式。\n"),a("a",{attrs:{href:"https://webpack.docschina.org/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack bundle optimize helper"),a("OutboundLink")],1),e._v("：这个工具会分析你的 bundle，并提供可操作的改进措施，以减少 bundle 的大小。\n"),a("a",{attrs:{href:"https://webpack.docschina.org/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer"}},[e._v("bundle-stats"),a("OutboundLink")],1),e._v("：生成一个 bundle 报告（bundle 大小、资源、模块），并比较不同构建之间的结果。")])])}),[],!1,null,null,null);t.default=s.exports}}]);