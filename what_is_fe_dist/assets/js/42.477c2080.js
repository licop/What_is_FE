(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{409:function(e,n,r){"use strict";r.r(n);var t=r(27),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"promise-race-有哪些具体应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise-race-有哪些具体应用"}},[e._v("#")]),e._v(" Promise.race()有哪些具体应用")]),e._v(" "),r("p",[r("strong",[e._v("Promise.race(iterable)")]),e._v(" 方法返回一个 promise，一旦迭代器中的某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。")]),e._v(" "),r("h2",{attrs:{id:"参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),r("p",[r("strong",[e._v("iterable:")]),e._v(" 一个可迭代的对象，比如"),r("strong",[e._v("Array")]),e._v("和"),r("strong",[e._v("String")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  const promise1 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 500, 'one');\n  });\n\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, 'two');\n});\n\n Promise.race([promise1, promise2]).then((value) => {\n  console.log(value);\n  // Both resolve, but promise2 is faster\n});\n// expected output: \"two\"\n")])])]),r("p",[e._v("描述 race 函数返回一个 Promise，它将与第一个传递的 promise 相同的完成方式被完成。它可以是完成（resolves），也可以是失败（rejects），这要取决于第一个完成的方式是两个中的哪个。")]),e._v(" "),r("h2",{attrs:{id:"实现-promise-race"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现-promise-race"}},[e._v("#")]),e._v(" 实现 promise.race")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function promiseRace(promises) {\n    return new Promise((resolve, reject) => {\n        if(!Array.isArray(promises)) {\n            throw new TypeError(`argument must be a array`)\n        }\n        for (const p of promises) {\n            // 有一个成功就返回成功状态的promise\n            // 有一个失败就返回失败状态的promise\n            p.then(resolve, reject);\n        }\n    })\n}\n")])])]),r("h2",{attrs:{id:"应用场景-1-图片请求资源超时"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-1-图片请求资源超时"}},[e._v("#")]),e._v(" 应用场景 1： 图片请求资源超时")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(' //请求某个图片资源\nfunction requestImg(){\n    var p = new Promise(function(resolve, reject){\n        var img = new Image();\n        img.onload = function(){\n           resolve(img);\n        }\n        //img.src = "https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg"; 正确的\n        img.src = "https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1";\n    });\n    return p;\n}\n\n//延时函数，用于给请求计时\nfunction timeout(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            reject(\'图片请求超时\');\n        }, 5000);\n    });\n    return p;\n}\n\nPromise\n.race([requestImg(), timeout()])\n.then(function(results){\n    console.log(results);\n})\n.catch(function(reason){\n    console.log(reason);\n});\n\n')])])]),r("h2",{attrs:{id:"应用场景-2-请求超时提示"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2-请求超时提示"}},[e._v("#")]),e._v(" 应用场景 2：请求超时提示")]),e._v(" "),r("blockquote",[r("p",[e._v("描述：有些时候，我们前一秒刷着新闻，下一秒进入电梯后，手机页面上就会提示你 “网络不佳”")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("//请求\nfunction request(){\n    return new Promise(function(resolve, reject){\n       setTimeout(()=>{\n            resolve('请求成功')\n       },4000)\n    })\n}\n\n//请求超时提醒\nfunction timeout(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            reject('网络不佳');\n        }, 3000);\n    });\n    return p;\n}\n\nPromise.race([\n    request(),\n    timeout()\n])\n.then(res=>{\n    console.log(res)\n}).catch(err=>{\n    console.log(err)//网络不佳\n})\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);