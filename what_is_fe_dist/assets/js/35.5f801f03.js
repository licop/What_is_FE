(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{404:function(n,e,t){"use strict";t.r(e);var a=t(27),o=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"ecmascript-2015-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-2015-语法"}},[n._v("#")]),n._v(" ECMAScript 2015 语法")]),n._v(" "),t("h2",{attrs:{id:"ecmascript-与-javascript-的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-与-javascript-的关系"}},[n._v("#")]),n._v(" ECMAScript 与 JavaScript 的关系")]),n._v(" "),t("p",[n._v("ECMAScript 通常被看作为 JavaScript 的标准化规范，实际上 JavsScript 是 ECMAScript 的扩展语言。ECMAScript 只提供了基本的语法，约定了我们代码该如何编写，例如该怎么定义变量和函数，或者是实现分支循环之类的语句。只是停留在语言层面，并不能完成实际的功能开发。")]),n._v(" "),t("p",[n._v("JavaScript 在继承了 ECMAScript 语法的基础之上，做了一些扩展，使得我们可以在浏览器环境当中操作 DOM 和 BOM。")]),n._v(" "),t("p",[n._v("JavaScript 语言本身指的就是 ECMAScript。")]),n._v(" "),t("p",[t("img",{attrs:{src:"/syntax&API/es&js1.png",alt:""}})]),n._v(" "),t("p",[t("img",{attrs:{src:"/syntax&API/es&js2.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"ecma-的发展过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecma-的发展过程"}},[n._v("#")]),n._v(" ECMA 的发展过程")]),n._v(" "),t("p",[n._v("2015 年开始 ES 保持每年一个版本的迭代。")]),n._v(" "),t("p",[t("img",{attrs:{src:"/syntax&API/es_version.png",alt:""}})]),n._v(" "),t("p",[n._v("其中 ES2015 值得了解的内容有很多，是最新 ECMAScript 标准的代表版本， 相比上一个版本 ES5.1 变化比较大，自此标准命名规则发生了变化。ES2015 之后开始按照年份命名，很多人也把 ES2015 称之为 ES6，也有很多人用 ES6 泛指所有的新标准，例如"),t("code",[n._v("async")]),n._v("函数是 ES2017 制定的标准，也被称之为 ES6 语法，应该注意分辨资料中的 ES6 是特指还是泛指。")]),n._v(" "),t("h2",{attrs:{id:"ecmascript-2015-新特性特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-2015-新特性特点"}},[n._v("#")]),n._v(" ECMAScript 2015 新特性特点")]),n._v(" "),t("ul",[t("li",[n._v("解决原有语法上的一些问题或者不足")]),n._v(" "),t("li",[n._v("对原有语法进行增强")]),n._v(" "),t("li",[n._v("全新的对象，全新的方法，全新的功能")])]),n._v(" "),t("p",[t("a",{attrs:{href:"https://www.ecma-international.org/ecma-262/6.0/",target:"_blank",rel:"noopener noreferrer"}},[n._v("ECMAScript 特性官方文档"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("下面我们将介绍一些 ECMAScript 2015 新特性")]),n._v(" "),t("h2",{attrs:{id:"let-与块级作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let-与块级作用域"}},[n._v("#")]),n._v(" let 与块级作用域")]),n._v(" "),t("p",[t("strong",[n._v("作用域")]),n._v(": 某个成员能够起作用的范围")]),n._v(" "),t("p",[n._v("在 ES2015 之前，ES 只有两种作用域")]),n._v(" "),t("ul",[t("li",[n._v("全局作用域")]),n._v(" "),t("li",[n._v("函数作用域")])]),n._v(" "),t("p",[n._v("ES2015 新增了"),t("strong",[n._v("块级作用域")]),n._v("和"),t("code",[n._v("let")]),n._v("关键字。")]),n._v(" "),t("p",[t("strong",[n._v("块")]),n._v("： 代码中用一对花括号{...}所包裹起来的范围，例如 if 语句和 for 语句， 以前块没有单独的作用域，到时块中定义的成员外部也可以访问到。")]),n._v(" "),t("p",[n._v("let 关键字可以将变量绑定到所在的任意作用域中（通常是{...}内部）。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// let 声明的成员只会在所声明的块中生效\nif (true) {\n  // var foo = 'zce'\n  let foo = 'zce'\n}\nconsole.log(foo) // ReferenceError:\n")])])]),t("p",[t("code",[n._v("let")]),n._v("可以解决"),t("code",[n._v("var")]),n._v("以前的很多奇怪的行为。")]),n._v(" "),t("h3",{attrs:{id:"let-在-for-循环中的表现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let-在-for-循环中的表现"}},[n._v("#")]),n._v(" let 在 for 循环中的表现")]),n._v(" "),t("p",[n._v("很多时候使用 var 关键字 for 循环中如果变量没有定义清楚，会造成一些意想不到的结果")]),n._v(" "),t("p",[n._v("比如下面例子在双循环的语句中，遍历的过程内外循环声明相同的变量 i，如果使用"),t("code",[n._v("var")]),n._v("内部循环的 i 被外部 for 循环作用域调用,导致外部循环提前结束。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("for (var i = 0; i < 3; i++) {\n  for (var i = 0; i < 3; i++) {\n    console.log(i)\n  }\n  console.log('内层结束 i = ' + i)\n}\n输出：0 1 2 内层结束 i = 3\n")])])]),t("p",[n._v("内部循环使用"),t("code",[n._v("let")]),n._v("声明 i 则可以解决这个错误。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("for (var i = 0; i < 3; i++) {\n  for (let i = 0; i < 3; i++) {\n    console.log(i)\n  }\n  console.log('内层结束 i = ' + i)\n}\n")])])]),t("h3",{attrs:{id:"let-应用场景-循环绑定事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let-应用场景-循环绑定事件"}},[n._v("#")]),n._v(" let 应用场景：循环绑定事件")]),n._v(" "),t("p",[n._v("来看下面这个例子。 我们在 for 循环的头部定义了变量 i，通常是因为只想的 for 循环内部的上下文中使用 i,而忽略了 i 会被绑定在外部作用域（函数或全局）中的事实。因为 i 是全局作用域中的, 所以打印的都是循环后累加的 3。")]),n._v(" "),t("p",[t("strong",[n._v("for 循环会产生两层作用域")]),n._v("，(...)里是外部作用域或者全局作用域，{...}里则是块作用域。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var elements = [{}, {}, {}]\nfor (var i = 0; i < elements.length; i++) {\n  elements[i].onclick = function () {\n    console.log(i)\n  }\n}\nelements[2].onclick() // 3\n\n")])])]),t("p",[n._v("当然我们可以使用"),t("strong",[n._v("闭包")]),n._v("解决这个问题, 借助函数作用域来摆脱全局作用域产生的影响")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var elements = [{}, {}, {}]\nfor (var i = 0; i < elements.length; i++) {\n  elements[i].onclick = (function (i) {\n    return function () {\n      console.log(i)\n    }\n  })(i)\n}\nelements[1].onclick()\n")])])]),t("p",[n._v("使用 "),t("code",[n._v("let")]),n._v(" 可以解决这个问题，让事件处理函数中获取正确索引。 "),t("code",[n._v("let")]),n._v(" 不仅将 i 绑定到了 for 循环的块中，事实上它将其"),t("strong",[n._v("重新绑定")]),n._v("到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值，内部也是可以"),t("strong",[n._v("闭包")]),n._v("机制实现的。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var elements = [{}, {}, {}]\nfor (let i = 0; i < elements.length; i++) {\n  elements[i].onclick = function () {\n    console.log(i)\n  }\n}\nelements[0].onclick()\n")])])]),t("h3",{attrs:{id:"let-与变量声明提升现象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let-与变量声明提升现象"}},[n._v("#")]),n._v(" let 与变量声明提升现象")]),n._v(" "),t("p",[n._v("什么是"),t("strong",[n._v("变量声明提升")]),n._v("？先看下面两个例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  a = 2;\n  var a;\n  console.log(a);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  console.log(a);\n  var a = 2;\n")])])]),t("p",[n._v("第一个例子输出的是 2，第二个例子输出的是"),t("code",[n._v("undefined")]),n._v("。是不是有点出乎意料呢？")]),n._v(" "),t("p",[n._v("这要从 JavaScript 的编译器开始讲起了，JS 编译阶段的一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来。"),t("strong",[n._v("因此包含变量和函数在内的所有声明都会在任何代码被执行前首先被处理。")])]),n._v(" "),t("p",[n._v("当看到 var a = 2;时,可能会认为这是一个声明。但 JavaScript 实际上会将其看成两个声明： var a;和 a = 2;第一个定义声明在编译阶段进行的。第二个赋值声明会被留在原地等待执行任务。")]),n._v(" "),t("p",[n._v("因此以上两个代码会以如下形式处理")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("   var a;\n   a = 2;\n   console.log(a)\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  var a\n  console.log(a)\n  a = 2\n")])])]),t("p",[n._v("就好像变量和函数声明从它们在代码中出现的位置被“移动”到了最上面。这个过程叫做"),t("strong",[n._v("声明提升")]),n._v("。其中函数声明和变量声明都会被提升，但是函数会首先被提升，然后才是变量")]),n._v(" "),t("p",[n._v("再看一个例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nfoo(); // TypeError\nbar(); // ReferenceError\nvar foo = function bar() {\n    // ...\n};\n\n")])])]),t("p",[n._v("foo() 由于对 undefined 值进行函数调用而导致非法操作，因此抛出 "),t("code",[n._v("TypeError")]),n._v(" 异常(类型错误，在作用域中已经声明变量并且找到，但是没有找到确切定义或者引用)。\nbar() 名称标识符在赋值之前也无法在所在作用域中使用")]),n._v(" "),t("p",[n._v("只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。如果提升改变了代码的执行的顺序，会造成非常严重的破坏。")]),n._v(" "),t("p",[t("code",[n._v("let")]),n._v(" 则修复了变量声明提升现象,以上俩个例子使用"),t("code",[n._v("let")]),n._v("声明都会报"),t("code",[n._v("ReferenceError")]),n._v("(引用错误，即在作用域中没有找到该变量)，"),t("code",[n._v("let")]),n._v("默认如果没有声明前就引用变量，则会报引用错误。")]),n._v(" "),t("h3",{attrs:{id:"let-变量不能重复声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let-变量不能重复声明"}},[n._v("#")]),n._v(" let 变量不能重复声明")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let a = 0;\nlet a = 'sss';\n// Uncaught SyntaxError: Identifier 'a' has already been declared\n")])])]),t("h2",{attrs:{id:"const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[n._v("#")]),n._v(" const")]),n._v(" "),t("p",[t("code",[n._v("const")]),n._v("用来声明一个只读的恒量/产量，任何修改值的操作都会引起错误， 其他使用方式和 let 一致。")]),n._v(" "),t("p",[t("code",[n._v("const")]),n._v("只是要求内层指向不允许被修改， 对于数据成员的修改是没有问题的。例如：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const obj = {};\nobj.name = 'zce';\n")])])]),t("p",[t("strong",[n._v("最佳实践： 不用 var，主用 const，配合 let")])]),n._v(" "),t("h2",{attrs:{id:"数组的解构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的解构"}},[n._v("#")]),n._v(" 数组的解构")]),n._v(" "),t("p",[n._v("使用解构可以快速提取数组中的指定成员。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const arr = [100, 200, 300];\n\n// 不使用解构方法提取数组元素\nconst foo = arr[0]\nconst bar = arr[1]\nconst baz = arr[2]\nconsole.log(foo, bar, baz)\n// 使用解构\nconst [foo, bar, baz] = arr\nconsole.log(foo, bar, baz)\n// 只提取单个元素\nconst [, , baz] = arr\nconsole.log(baz)\n\n// 使用...，提取从当前位置往后的所有成员\n// 结果会放在数组当中，输出[200, 300]\n// ...只能在解构位置的最后成员使用\nconst [foo, ...rest] = arr\nconsole.log(rest)\n\n// more 为 undefined\nconst [foo, bar, baz, more] = arr\nconsole.log(more)\n\n// 给元素添加默认值\nconst [foo, bar, baz = 123, more = 'default value'] = arr\nconsole.log(bar, more)\n\n\nconst path = '/foo/bar/baz'\n// const tmp = path.split('/')\n// const rootdir = tmp[1]\n\n// 使用解构可以使我们的代码变得更加简单\nconst [, rootdir] = path.split('/')\nconsole.log(rootdir)\n")])])]),t("p",[n._v("使用...可以对数组进行张开, 可以替代 "),t("code",[n._v("apply")]),n._v(" 方法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const arr = ['foo', 'bar', 'baz']\n\n// 'foo', 'bar', 'baz'\n// console.log.apply(console, arr)\nconsole.log(...arr)\n")])])]),t("h2",{attrs:{id:"对象的解构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的解构"}},[n._v("#")]),n._v(" 对象的解构")]),n._v(" "),t("p",[n._v("除了数组可以被解构，对象也可被解构。对象的解构需要根据"),t("strong",[n._v("属性名")]),n._v("去匹配提取，而不是位置。因为数组中的元素有下标和顺序规则，而对象里的成员没有固定的次序。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const obj = { name: 'zce', age: 18 }\n\n// 输出'zce'\nconst { name } = obj\nconsole.log(name)\n\n// 重名名，防止变量命名冲突\nconst name = 'tom'\nconst { name: objName } = obj\nconsole.log(objName)\n\n// 提取log方法\nconst { log } = console\nlog('foo')\nlog('bar')\nlog('123')\n")])])]),t("h2",{attrs:{id:"模板字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模板字符串"}},[n._v("#")]),n._v(" 模板字符串")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 反引号包裹\nconst str = `hello es2015, this is a string`\n\n// 允许换行\nconst str = `hello es2015,\n\nthis is a \\`string\\``\nconsole.log(str)\n\n// 可以通过 ${} 插入表达式，表达式的执行结果将会输出到对应位置\nconst name = 'tom'\nconst msg = `hey, ${name} --- ${1 + 2} ---- ${Math.random()}`\nconsole.log(msg)\n")])])]),t("p",[n._v("此外我们还可以给模板字符串添加标签，模板字符串的标签就是一个特殊的函数，添加标签就是调用这个函数")]),n._v(" "),t("p",[n._v("看如下例子将"),t("code",[n._v("console.log")]),n._v("赋值给标签打印出一个数组")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// [ 'hello world' ]\nconst tag = console.log;\nconst str = tag`hello ${name}`\n")])])]),t("p",[n._v("一个复杂一点的例子，可以将变量提取出来使用，对模板字符串进行加工")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const name = 'tom'\nconst gender = false\n\nfunction myTagFunc (strings, name, gender) {\n  [ 'hey, ', ' is a ', '.' ] tom false\n  console.log(strings, name, gender)\n\n  const sex = gender ? 'man' : 'woman'\n  return strings[0] + name + strings[1] + sex + strings[2]\n}\n\nconst result = myTagFunc`hey, ${name} is a ${gender}.`\n// hey, tom is a woman.\nconsole.log(result)\n\n")])])]),t("p",[n._v("可以使用这种功能实现多语言化，检查不安全字符之类的需求，甚至可以实现一个小型的模板引擎。")]),n._v(" "),t("h2",{attrs:{id:"字符串的扩展方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串的扩展方法"}},[n._v("#")]),n._v(" 字符串的扩展方法")]),n._v(" "),t("ul",[t("li",[n._v("includes() 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。")]),n._v(" "),t("li",[n._v("startsWith() 用来判断当前字符串是否是以另外一个给定的子字符串“开始”的，根据判断结果返回 true 或 false。")]),n._v(" "),t("li",[n._v("endsWith() 用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const message = 'Error: foo is not defined.'\n\nmessage.startsWith('Error')\nmessage.endsWith('.')\nmessage.includes('foo')\n")])])]),t("p",[n._v("更多字符串扩展方法参考"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"}},[n._v("MDN String"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"函数的形参列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数的形参列表"}},[n._v("#")]),n._v(" 函数的形参列表")]),n._v(" "),t("p",[n._v("可以给参数的默认值")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function foo (enable = true) {\n  console.log('foo invoked - enable: ')\n  console.log(enable)\n}\n\nfoo()\n")])])]),t("p",[n._v("剩余参数，只能出现在最后一位且使用一次")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// [ 2, 3, 4 ]\nfunction foo (first, ...args) {\n  console.log(args)\n}\n\nfoo(1, 2, 3, 4)\n")])])]),t("h2",{attrs:{id:"箭头函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[n._v("#")]),n._v(" 箭头函数")]),n._v(" "),t("p",[t("strong",[n._v("箭头函数")]),n._v("表达式的语法比函数表达式更简洁，并且没有自己的 "),t("code",[n._v("this")]),n._v("，"),t("code",[n._v("arguments")]),n._v("，"),t("code",[n._v("super")]),n._v(" 或 "),t("code",[n._v("new.target")]),n._v("。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。")]),n._v(" "),t("p",[n._v("基础语法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 普通形式\nfunction test (a, b) {\n  return a + b\n}\n\n// 1.箭头函数: 省略 function   函数保存到 fn 变量中\nconst fn1 = (a, b) => {\n  return a + b\n}\n\n// 2.箭头函数: 省略 return , 表示a+b作为返回值 注意不能有 { }\nconst fn2 = (a, b) =>  a + b\n\n// 3.箭头函数: 省略 参数两边小括号, 只有一个形参时才可以\nconst fn3 = x =>  x + 7\n\n// 4.箭头函数 常用场景，简化回调函数的书写\nconst arr = [1, 2, 3, 4, 5, 6, 7]\narr.filter(i => i % 2)\n")])])]),t("p",[n._v("箭头函数不会创建自己的 this,"),t("strong",[n._v("它只会从自己的作用域链的上一层继承 this")])]),n._v(" "),t("p",[n._v("因此，在下面的代码中，传递给 setInterval 的函数内的 this 与封闭函数中的 this 值相同：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(){\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++; // |this| 正确地指向 p 实例\n  }, 1000);\n}\n\nvar p = new Person();\n")])])]),t("p",[n._v("如果使用 function 函数表达式，this 指向 window 对象")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(){\n  this.age = 0;\n\n  setInterval(function() {\n    this.age++; //  this 会指向 window 对象\n  }, 1000);\n}\n\nvar p = new Person();\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const person = {\n  name: 'tom',\n  // tom\n  // sayHi: function () {\n  //   console.log(${this.name})\n  // }\n  // undefined\n  sayHi: () => {\n    console.log(${this.name})\n  },\n  // 需要使用_this的情况，可以使用箭头函数来避免\n  sayHiAsync: function () {\n    // const _this = this\n    // setTimeout(function () {\n    //   console.log(_this.name)\n    // }, 1000)\n\n    // tom\n    setTimeout(() => {\n      console.log(this.name)\n    }, 1000)\n  }\n}\nperson.sayHi()\nperson.sayHiAsync()\n")])])]),t("p",[n._v("更多箭头函数参考"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",target:"_blank",rel:"noopener noreferrer"}},[n._v("MDN 箭头函数"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"对象字面量增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象字面量增强"}},[n._v("#")]),n._v(" 对象字面量增强")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const bar = '345'\n\nconst obj = {\n  foo: 123,\n\n  // bar: bar\n  // 属性名与变量名相同，可以省略 : bar\n  bar,\n\n  // method1: function () {\n  //   console.log('method111')\n  // }\n  // 方法可以省略 : function\n  method1 () {\n    console.log('method111')\n    // 这种方法就是普通的函数，同样影响 this 指向。\n    console.log(this)\n  },\n\n  // Math.random(): 123 // 不允许\n  // 通过 [] 让表达式的结果作为属性名\n  [bar]: 123\n}\n\n// 动态添加属性名\nobj[Math.random()] = 123\n\n")])])]),t("h2",{attrs:{id:"对象扩展方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象扩展方法"}},[n._v("#")]),n._v(" 对象扩展方法")]),n._v(" "),t("ul",[t("li",[n._v("Object.assign")])]),n._v(" "),t("p",[t("code",[n._v("Object.assign()")]),n._v(" 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const source1 = {\n  a: 123,\n  b: 123\n}\n\nconst source2 = {\n  b: 789,\n  d: 789\n}\n\nconst target = {\n  a: 456,\n  c: 456\n}\n// 用后面对象的属性覆盖第一个对象，assign方法的返回值就是第一个对象\nconst result = Object.assign(target, source1, source2)\n// { a: 123, c: 456, b: 789, d: 789 }\nconsole.log(target)\n// true\nconsole.log(result === target)\n")])])]),t("p",[n._v("常用应用场景， 将参数赋值给一个新的对象上面进行修改")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function func (obj) {\n  // obj.name = 'func obj'\n  // console.log(obj)\n\n  const funcObj = Object.assign({}, obj)\n  funcObj.name = 'func obj'\n  console.log(funcObj)\n}\n\nconst obj = { name: 'global obj' }\n\nfunc(obj)\nconsole.log(obj)\n")])])]),t("ul",[t("li",[n._v("Object.is")])]),n._v(" "),t("p",[n._v("Object.is() 方法判断两个值是否为同一个值。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  0 == false              // => true\n  0 === false             // => false\n  +0 === -0               // => true\n  NaN === NaN             // => false\n  Object.is(+0, -0)       // => false\n  Object.is(NaN, NaN)     // => true\n")])])]),t("p",[n._v("更多 Object 参考"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener noreferrer"}},[n._v("MDN Object"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[n._v("#")]),n._v(" Proxy")]),n._v(" "),t("p",[n._v("以前如果我们想监控某个对象的读写，我们可以使用 ES5 的"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"}},[n._v("Object.defineProperty"),t("OutboundLink")],1),n._v("方法来为我们对象添加属性，这样我们就可以捕获对象的读写过程，vue3.0 就是使用这种方法实现双向数据绑定。")]),n._v(" "),t("p",[n._v("ES2015 中新添了 Proxy 类型，专门为对象添加"),t("strong",[n._v("访问代理器")]),n._v("，可以理解为在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。")]),n._v(" "),t("p",[n._v("来看下面这个例子，我们对 person 对象进行监控。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const person = {\n  name: 'zce',\n  age: 20\n}\n\nconst personProxy = new Proxy(person, {\n  // 监视属性读取\n  get (target, property) {\n    // 给不存在的属性添加默认值\n    return property in target ? target[property] : 'default'\n  },\n  // 监视属性设置\n  set (target, property, value) {\n    // target参数表示所要拦截的目标对象\n    // property为监视的属性，当属性有设置操作会被监视\n    // value的值\n    console.log(target, property, value)\n    // 监视age属性当不是ini数字类型是报错\n    if (property === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError(`${value} is not an int`)\n      }\n    }\n\n    target[property] = value\n  }\n})\n\npersonProxy.age = 100\npersonProxy.gender = true\n\nconsole.log(personProxy.age)  // 100\nconsole.log(personProxy.xxx)  // defaul\nconsole.log(person)  // { name: 'zce', age: 100, gender: true }\n")])])]),t("p",[t("code",[n._v("Proxy")]),n._v(" 和相比 "),t("code",[n._v("Object.defineProperty")]),n._v(" 有很优势")]),n._v(" "),t("ul",[t("li",[n._v("优势 1：Proxy 可以监视读写以外的操作")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 监视删除操作\nconst person = {\n  name: 'zce',\n  age: 20\n}\n\nconst personProxy = new Proxy(person, {\n  deleteProperty (target, property) {\n    console.log('delete', property)\n    delete target[property]\n  }\n})\n\ndelete personProxy.age\nconsole.log(person)\n")])])]),t("p",[n._v("除此之外还有很多其他的对象操作都能被监视到")]),n._v(" "),t("p",[t("img",{attrs:{src:"syntax&API/proxy.png",alt:""}})]),n._v(" "),t("ul",[t("li",[n._v("优势 2：Proxy 可以很方便的监视数组操作")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const list = []\n\nconst listProxy = new Proxy(list, {\n  set (target, property, value) {\n    console.log('set', property, value)\n    target[property] = value\n    return true // 表示设置成功\n  }\n})\n\nlistProxy.push(100)\nlistProxy.push(100)\n\n")])])]),t("ul",[t("li",[n._v("优势 3：Proxy 是以非入侵的方式监管的对象的读写")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const person = {}\n\n// 使用 Object.defineProperty\nObject.defineProperty(person, 'name', {\n  get () {\n    console.log('name 被访问')\n    return person._name\n  },\n  set (value) {\n    console.log('name 被设置')\n    person._name = value\n  }\n})\nObject.defineProperty(person, 'age', {\n  get () {\n    console.log('age 被访问')\n    return person._age\n  },\n  set (value) {\n    console.log('age 被设置')\n    person._age = value\n  }\n})\n\nperson.name = 'jack'\nconsole.log(person.name)\n\n// Proxy 方式更为合理\nconst person2 = {\n  name: 'zce',\n  age: 20\n}\n\nconst personProxy = new Proxy(person2, {\n  get (target, property) {\n    console.log('get', property)\n    return target[property]\n  },\n  set (target, property, value) {\n    console.log('set', property, value)\n    target[property] = value\n  }\n})\n\npersonProxy.name = 'jack'\nconsole.log(person.name)\n\n")])])]),t("p",[n._v("更多关于"),t("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proxy",target:"_blank",rel:"noopener noreferrer"}},[n._v("Proxy"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"reflect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[n._v("#")]),n._v(" Reflect")]),n._v(" "),t("p",[t("strong",[t("code",[n._v("Reflect")]),n._v("统一对象操作的 API")]),n._v(","),t("code",[n._v("Reflect")]),n._v("属于一个静态类，不能使用"),t("code",[n._v("new Reflect()")]),n._v("构建一个静态对象，只能够调用静态类的静态方法。")]),n._v(" "),t("p",[t("code",[n._v("Reflect")]),n._v("内部封装了一系列对对象的底层操作，具体有 13 个静态方法，和"),t("code",[n._v("Proxy")]),n._v("处理对象的方法是一一对应的。")]),n._v(" "),t("p",[t("code",[n._v("Reflect")]),n._v("成员方法就是"),t("code",[n._v("Proxy")]),n._v("处理对象方法的默认实现。看下面代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const obj = {\n  foo: '123',\n  bar: '456'\n}\n// 默认get方法实现\nconst proxy = new Proxy(obj, {\n  get (target, property) {\n    console.log('watch logic~')\n\n    return Reflect.get(target, property)\n  }\n})\n\nconsole.log(proxy.foo) // '123'\n")])])]),t("p",[t("code",[n._v("Reflect")]),n._v("提供了一套统一的对象操作的 API")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const obj = {\n  name: 'zce',\n  age: 18\n}\n\nconsole.log('name' in obj)\nconsole.log(delete obj['age'])\nconsole.log(Object.keys(obj))\n\n// 和上面的操作方式一致\nconsole.log(Reflect.has(obj, 'name'))\nconsole.log(Reflect.deleteProperty(obj, 'age'))\nconsole.log(Reflect.ownKeys(obj))\n")])])]),t("h2",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[n._v("#")]),n._v(" Promise")]),n._v(" "),t("p",[n._v("解决了传统异步编程中回调函数嵌套过深的问题， 具体参考 JavaScript 异步编程有更详细的介绍")]),n._v(" "),t("h2",{attrs:{id:"class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[n._v("#")]),n._v(" Class")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Person {\n  constructor (name) {\n    this.name = name\n  }\n\n  say () {\n    console.log(`hi, my name is ${this.name}`)\n  }\n}\n\nconst p = new Person('tom')\np.say()\n")])])]),t("p",[t("code",[n._v("Class")]),n._v("里面的方法分为"),t("strong",[n._v("实例方法")]),n._v("和"),t("strong",[n._v("静态方法")])]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("实例方法")]),n._v("通过构建的实例对象去调用")]),n._v(" "),t("li",[t("strong",[n._v("静态方法")]),n._v("直接通过类本身去调用")])]),n._v(" "),t("p",[n._v("ES2015 中新增添加静态方法的"),t("strong",[n._v("static")]),n._v("关键词")]),n._v(" "),t("p",[n._v("静态方法是挂载到类上面的， 静态方法内的"),t("code",[n._v("this")]),n._v("不会指向某个实例，而是当前的类。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Person {\n  constructor (name) {\n    this.name = name\n  }\n\n  say () {\n    console.log(`hi, my name is ${this.name}`)\n  }\n\n  static create (name) {\n    return new Person(name)\n  }\n}\n\nconst tom = Person.create('tom')\ntom.say()\n\n")])])]),t("p",[n._v("类的继承，在 ES2015 以前我们使用原型的方式实现继承，ES2015 中添加了专门用于类继承的关键字"),t("strong",[n._v("extends")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Student extends Person {\n  constructor (name, number) {\n    super(name) // 父类构造函数\n    this.number = number\n  }\n\n  hello () {\n    super.say() // 调用父类成员\n    console.log(`my school number is ${this.number}`)\n  }\n}\n\nconst s = new Student('jack', '100')\ns.hello()\n")])])]),t("h2",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[n._v("#")]),n._v(" Set")]),n._v(" "),t("p",[n._v("ES2015 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const s = new Set()\n\ns.add(1).add(2).add(3).add(4).add(2)\n\nconsole.log(s) // Set { 1, 2, 3, 4 }\n\n// 遍历\ns.forEach(i => console.log(i))\nfor (let i of s) {\n   console.log(i)\n}\n\n// 长度\nconsole.log(s.size)\n// 是否存在某元素\nconsole.log(s.has(100))  // false\n// 删除元素\nconsole.log(s.delete(3)) // true\nconsole.log(s) // Set { 1, 2, 4 }\n// 清空\ns.clear()\n")])])]),t("p",[n._v("应用场景："),t("strong",[n._v("数组去重")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const arr = [1, 2, 1, 3, 4, 1]\n\n// const result = Array.from(new Set(arr))\nconst result = [...new Set(arr)]\n\nconsole.log(result) //[ 1, 2, 3, 4 ]\n")])])]),t("p",[n._v("还存在弱引用版本 "),t("strong",[n._v("WeakSet")]),n._v(", 差异就是 "),t("strong",[n._v("Set")]),n._v(" 中会对所使用到的数据产生引用,即便这个数据在外面被消耗，但是由于 "),t("strong",[n._v("Set")]),n._v(" 引用了这个数据，所以依然不会回收,而 "),t("strong",[n._v("WeakSet")]),n._v(" 的特点就是不会产生引用，一旦数据销毁，就可以被回收，所以不会产生"),t("strong",[n._v("内存泄漏")]),n._v("问题。")]),n._v(" "),t("h2",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[n._v("#")]),n._v(" Map")]),n._v(" "),t("p",[n._v("JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const obj = {}\nobj[true] = 'value'\nobj[123] = 'value'\nobj[{ a: 1 }] = 'value'\n// 设置的boolean，对象，数字都被转化为字符串\nconsole.log(Object.keys(obj)) // [ '123', 'true', '[object Object]' ]\nconsole.log(obj['[object Object]']) // value\n\n")])])]),t("p",[n._v("为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const m = new Map()\n\nconst tom = { name: 'tom' }\n\nm.set(tom, 90)\n\nconsole.log(m) // Map { { name: 'tom' } => 90 }\nconsole.log(m.get(tom)) // 90\n// 遍历\nm.forEach((value, key) => {\n  console.log(value, key)\n})\n// 是否存在某元素\nm.has()\n// 删除\nm.delete()\n// 清空\nm.clear()\n")])])]),t("p",[n._v("弱引用版本 "),t("code",[n._v("WeakMap")]),n._v("，差异就是 "),t("code",[n._v("Map")]),n._v(" 中会对所使用到的数据产生引用，即便这个数据在外面被消耗，但是由于 "),t("code",[n._v("Map")]),n._v(" 引用了这个数据，所以依然不会回收，而 "),t("code",[n._v("WeakMap")]),n._v(" 的特点就是不会产生引用，一旦数据销毁，就可以被回收，所以不会产生"),t("strong",[n._v("内存泄漏")]),n._v("问题。")]),n._v(" "),t("h2",{attrs:{id:"symbol"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[n._v("#")]),n._v(" Symbol")]),n._v(" "),t("p",[n._v("ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入 "),t("code",[n._v("Symbol")]),n._v(" 的原因。")]),n._v(" "),t("p",[n._v("ES6 引入了一种新的原始数据类型 "),t("code",[n._v("Symbol")]),n._v("，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。")]),n._v(" "),t("p",[t("code",[n._v("Symbol")]),n._v("类型的用法：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// Symbol 值通过Symbol函数生成\nconst s = Symbol()\nconsole.log(s)  // Symbol()\nconsole.log(typeof s) // symbol\n\n// 两个 Symbol 永远不会相等\nconsole.log(\n  Symbol() === Symbol() // false\n)\n\n// Symbol 描述文本\nconsole.log(Symbol('foo')) // Symbol(foo)\n\n// 使用 Symbol 为对象添加用不重复的键\nconst obj = {}\nobj[Symbol()] = '123'\nobj[Symbol()] = '456'\nconsole.log(obj) // { [Symbol()]: '123', [Symbol()]: '456' }\n\n// 也可以在计算属性名中使用\nconst obj1 = {\n  [Symbol()]: 123\n}\nconsole.log(obj1)\n\n// Symbol 全局注册表, 相同的字符串返回相同类型的值\nconst s1 = Symbol.for('foo')\nconst s2 = Symbol.for('foo')\nconsole.log(s1 === s2) // true\n\nconsole.log(\n  Symbol.for(true) === Symbol.for('true') // true\n)\n\n// 内置 Symbol 常量\nconsole.log(Symbol.iterator)\nconsole.log(Symbol.hasInstance)\n// toStringTag为内置Symbol 常量\nconst obj1 = {\n  [Symbol.toStringTag]: 'XObject'\n}\nconsole.log(obj1.toString()) // [object XObject]\n\n\nconst obj = {\n  [Symbol()]: 'symbol value',\n  [Symbol()]: 'symbol value1',\n  foo: 'normal value'\n}\n//\nfor (var key in obj) {\n  console.log(key) // foo\n}\nconsole.log(Object.keys(obj)) // [ 'foo' ]\nconsole.log(JSON.stringify(obj)) // {\"foo\":\"normal value\"}\n\n// 类似于Object.key()方法，只能获取到Symbol类型属性名\nconsole.log(Object.getOwnPropertySymbols(obj)) // [ Symbol(), Symbol() ]\n")])])]),t("p",[t("code",[n._v("Symbol")]),n._v("的使用场景")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 案例：Symbol 模拟实现私有成员\n// a.js ======================================\n\nconst name = Symbol()\nconst person = {\n  [name]: 'licop',\n  say () {\n    console.log(this[name]) // licop\n  }\n}\n// 只对外暴露 person\n\n// b.js =======================================\n\n// 由于无法创建出一样的 Symbol 值，\n// 所以无法直接访问到 person 中的「私有」成员\nconsole.log(person[Symbol()]) // undefined\nperson.say()\n")])])]),t("p",[t("strong",[n._v("Symbol 最主要的作用就是为对象添加独一无二的属性名")])]),n._v(" "),t("h2",{attrs:{id:"for-of-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-of-循环"}},[n._v("#")]),n._v(" for...of 循环")]),n._v(" "),t("p",[n._v("ES2015 引入一种全新的遍历方式，"),t("strong",[n._v("for...of 循环")]),n._v("，可以作为遍历所有数据结构的统一方式。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 遍历数组， 伪数组arguments和nodelist也可以遍历\nconst arr = [100, 200, 300, 400]\n\nfor (const item of arr) {\n  console.log(item)\n}\n\n// for...of 循环可以替代 数组对象的 forEach 方法\narr.forEach(item => {\n    console.log(item)\n})\n\n// 遍历 Set 与遍历数组相同\n\nconst s = new Set(['foo', 'bar'])\nfor (const item of s) {\n  console.log(item)\n}\n\n// 遍历 Map 可以配合数组结构语法，直接获取键值\nconst m = new Map()\nm.set('foo', '123')\nm.set('bar', '345')\n\nfor (const [key, value] of m) {\n  console.log(key, value) // foo 123  bar 345\n}\n\n// 普通对象不能被直接 for...of 遍历\nconst obj = { foo: 123, bar: 456 }\n// TypeError: obj is not iterable\nfor (const item of obj) {\n  console.log(item)\n}\n\n")])])]),t("h2",{attrs:{id:"可迭代接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可迭代接口"}},[n._v("#")]),n._v(" 可迭代接口")]),n._v(" "),t("p",[n._v("ES 中能够表示有结构的数据类型越来越多，为了给各种各样的数据结构提供统一的遍历方式， ES2015 提供了"),t("code",[n._v("Iterable")]),n._v("接口，实现 Iterable 接口就是"),t("code",[n._v("for...of")]),n._v("的前提，也就是说只要实现了"),t("code",[n._v("Iterable")]),n._v("接口的数据结构，就能被"),t("code",[n._v("for...of")]),n._v("遍历。")]),n._v(" "),t("p",[n._v("Array，Set 和 Map 都实现了"),t("code",[n._v("Iterable")]),n._v("接口")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 获取数据结构迭代器（Iterator）\nconst set = new Set(['foo', 'bar', 'baz'])\nconst iterator = set[Symbol.iterator]()\n\nconsole.log(iterator.next()) // { value: 'foo', done: false }\nconsole.log(iterator.next()) // { value: 'bar', done: false }\nconsole.log(iterator.next()) // { value: 'baz', done: false }\nconsole.log(iterator.next()) // { value: undefined, done: true }\nconsole.log(iterator.next()) // { value: undefined, done: true }\n\nwhile (true) {\n  const current = iterator.next()\n  console.log(current, 14)\n  if (current.done) {\n    break // 迭代已经结束了，没必要继续了\n  }\n  console.log(current.value)\n}\n")])])]),t("p",[n._v("实现迭代器接口（Iterable）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 自定义对象实现迭代器接口（Iterable）\n\nconst obj = {\n  store: ['foo', 'bar', 'baz'],\n\n  [Symbol.iterator]: function () {\n    let index = 0\n    const self = this\n\n    return {\n      next: function () {\n        const result = {\n          value: self.store[index],\n          done: index >= self.store.length\n        }\n        index++\n        return result\n      }\n    }\n  }\n}\n\nfor (const item of obj) {\n  console.log('循环体', item)\n}\n\n// 循环体 foo\n// 循环体 bar\n// 循环体 baz\n")])])]),t("p",[n._v("迭代器设计模式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 场景：你我协同开发一个任务清单应用\n\n// 我的代码 ===============================\n\nconst todos = {\n  life: ['吃饭', '睡觉', '打豆豆'],\n  learn: ['语文', '数学', '外语'],\n  work: ['喝茶'],\n\n  // 提供统一遍历访问接口, 让外部不用关心内部的结构\n  each: function (callback) {\n    const all = [].concat(this.life, this.learn, this.work)\n    for (const item of all) {\n      callback(item)\n    }\n  },\n\n  // 提供迭代器（ES2015 统一遍历访问接口）\n  [Symbol.iterator]: function () {\n    const all = [...this.life, ...this.learn, ...this.work]\n    let index = 0\n    return {\n      next: function () {\n        return {\n          value: all[index],\n          done: index++ >= all.length\n        }\n      }\n    }\n  }\n}\n\ntodos.each(function (item) {\n  console.log(item)\n})\n\nconsole.log('-------------------------------')\n\nfor (const item of todos) {\n  console.log(item)\n}\n\n// 你的代码 ===============================\n\nfor (const item of todos.life) {\n  console.log(item)\n}\nfor (const item of todos.learn) {\n  console.log(item)\n}\nfor (const item of todos.work) {\n  console.log(item)\n}\n\n")])])]),t("h2",{attrs:{id:"生成器-generator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成器-generator"}},[n._v("#")]),n._v(" 生成器(Generator)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function * foo1 () {\n  console.log('zce')\n  return 100\n}\n\nconst result = foo1()\nconsole.log(result.next()) // { value: 100, done: true }\n\nfunction * foo2 () {\n  console.log('1111')\n  yield 100\n  console.log('2222')\n  yield 200\n  console.log('3333')\n  yield 300\n}\n\nconst generator = foo2()\n\nconsole.log(generator.next()) // 第一次调用，函数体开始执行，遇到第一个 yield 暂停  { value: 100, done: false }\nconsole.log(generator.next()) // 第二次调用，从暂停位置继续，直到遇到下一个 yield 再次暂停 { value: 200, done: false }\nconsole.log(generator.next()) // 。。。 { value: 300, done: false }\nconsole.log(generator.next()) // 第四次调用，已经没有需要执行的内容了，所以直接得到 undefined { value: undefined, done: true }\n")])])]),t("p",[t("strong",[n._v("Generator")]),n._v("应用")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 案例1：发号器\nfunction * createIdMaker () {\n  let id = 1\n  while (true) {\n    yield id++\n  }\n}\n\nconst idMaker = createIdMaker()\n\nconsole.log(idMaker.next().value) // 1\nconsole.log(idMaker.next().value) // 2\nconsole.log(idMaker.next().value) // 3\nconsole.log(idMaker.next().value) // 4\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 案例2：使用 Generator 函数实现 iterator 方法\n\nconst todos = {\n  life: ['吃饭', '睡觉', '打豆豆'],\n  learn: ['语文', '数学', '外语'],\n  work: ['喝茶'],\n  [Symbol.iterator]: function * () {\n    const all = [...this.life, ...this.learn, ...this.work]\n    for (const item of all) {\n      yield item\n    }\n  }\n}\n\nfor (const item of todos) {\n  console.log(item)\n}\n\n")])])]),t("h2",{attrs:{id:"es-modules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-modules"}},[n._v("#")]),n._v(" ES Modules")]),n._v(" "),t("p",[n._v("语言层面的模块化标准")]),n._v(" "),t("h2",{attrs:{id:"es2016-新增特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es2016-新增特性"}},[n._v("#")]),n._v(" ES2016 新增特性")]),n._v(" "),t("ul",[t("li",[n._v("Array.protoType.includes 查看数组中是否包含某元素")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  const arr = ['foo', 1, NaN, false];\n\n  arr.includes('foo') // ture\n")])])]),t("ul",[t("li",[n._v("指数运算符")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  console.log(2 ** 10) // 1024\n")])])]),t("h2",{attrs:{id:"es2017-新增特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es2017-新增特性"}},[n._v("#")]),n._v(" ES2017 新增特性")]),n._v(" "),t("ul",[t("li",[n._v("Object.values")]),n._v(" "),t("li",[n._v("Object.entries")]),n._v(" "),t("li",[n._v("Object.getOwnPropertyDescriptors")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const obj = {\n    foo: 'value1',\n    bar: 'value2'\n}\n\nObject.values(obj) // ['value1', 'value2']\nObject.entries(obj) // [['foo', 'value1'], ['bar', 'value2']]\n\nfor(const [key, value] of Object.entries(obj)) {\n    console.log(key, value)\n}\n\n// Map{'foo' => 'value1', 'bar' => 'value2', }\nconsole.log(new Map(Object.entries(obj)))\n\n// Object.getOwnPropertyDescriptors\n// 返回指定对象上一个自有属性对应的属性描述符\n// 主要配合getter和setter使用\nconst p1 = {\n  firstName: 'chuang',\n  lastName: 'Li',\n  get fullName() {\n    return this.firstName + ' ' + this.lastName\n  }\n}\n\nconst descriptors = Object.getOwnPropertyDescriptor(p1);\nconst p2 = Object.defineProperties({}, descriptors);\np2.firstName = 'licop';\nconsole.log(p2.fullName); // licop li\n")])])]),t("ul",[t("li",[n._v("String.prototype.padStart")]),n._v(" "),t("li",[n._v("String.prototype.padEnd")])]),n._v(" "),t("p",[n._v("方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const books = {\n  html: 5,\n  css: 6,\n  javascript: 128\n}\n\nfor(const [name, count] of Object.entries(books)) {\n  console.log(`${name.padEnd(16, '-')}|${count.toString().padStart(3, '0')}`)\n}\n\nhtml------------|005\ncss-------------|006\njavascript------|128\n")])])]),t("ul",[t("li",[n._v("在函数参数的末尾添加逗号")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function foo(\n    bar,\n    baz,\n) {\n\n}\n")])])]),t("ul",[t("li",[n._v("async/await")])])])}),[],!1,null,null,null);e.default=o.exports}}]);