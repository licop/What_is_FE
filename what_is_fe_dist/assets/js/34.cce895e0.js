(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{399:function(e,t,r){"use strict";r.r(t);var n=r(27),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"vue-router-实现原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-实现原理"}},[e._v("#")]),e._v(" vue-router 实现原理")]),e._v(" "),r("h2",{attrs:{id:"hash-和-history-模式的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hash-和-history-模式的区别"}},[e._v("#")]),e._v(" Hash 和 History 模式的区别")]),e._v(" "),r("p",[e._v("不管哪种模式都是客户端路由的实现方式的，也就是"),r("strong",[e._v("前端路由")]),e._v("，当路径发生变化时不会对服务器发送请求，由 js 监控路径的变化，然后根据不同的地址渲染不同的内容，如果需要服务端内容的话使用 Ajax 来获取。")]),e._v(" "),r("p",[r("strong",[e._v("表现形式的区别")])]),e._v(" "),r("ul",[r("li",[e._v("Hash 模式\n"),r("ul",[r("li",[e._v("https://music.163.com/#/playlist?id=3102961863")])])]),e._v(" "),r("li",[e._v("History 模式\n"),r("ul",[r("li",[e._v("https://music.163.com/playlist/3102961863")])])])]),e._v(" "),r("p",[r("strong",[e._v("原理的区别")])]),e._v(" "),r("ul",[r("li",[e._v("Hash 模式\n"),r("ul",[r("li",[e._v("Vue Router "),r("strong",[e._v("默认")]),e._v("使用的是 hash 模式，使用 hash 来模拟一个完整的 URL，#号后面的内容作为路径,通过 "),r("code",[e._v("onhashchange")]),e._v(" 监听路径的变化")])])]),e._v(" "),r("li",[e._v("History 模式\n"),r("ul",[r("li",[e._v("基于 DOM window 对象提供的 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API",target:"_blank",rel:"noopener noreferrer"}},[e._v("history"),r("OutboundLink")],1),e._v(" 对象(IE10 以后才兼容)，通过 "),r("code",[e._v("history.pushState()")]),e._v("方法改变地址栏，并把当前地址记录在浏览器访问历史中，并不会想服务器发送请求，监听 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onpopstate",target:"_blank",rel:"noopener noreferrer"}},[e._v("popstate"),r("OutboundLink")],1),e._v(" 事件，根据当前路由地址找到对应组件进行重新渲染。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  history.pushState()\n  history.replaceState()\n  history.go()\n")])])])])]),e._v(" "),r("blockquote",[r("p",[e._v("注意：调用 "),r("code",[e._v("history.pushState()")]),e._v("或者 "),r("code",[e._v("history.replaceState()")]),e._v("不会触发 "),r("code",[e._v("popstate")]),e._v(" 事件. "),r("code",[e._v("popstate")]),e._v(" 事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在 JavaScript 中调用 "),r("code",[e._v("history.back()")]),e._v("、"),r("code",[e._v("history.forward()")]),e._v("、"),r("code",[e._v("history.go()")]),e._v("方法)，此外，a 标签的锚点也会触发该事件.")])]),e._v(" "),r("p",[r("strong",[e._v("History 模式需要服务器的支持")])]),e._v(" "),r("p",[e._v("在单页面应用中，服务只有一个页面 index.html,服务器不存在http://spacex.com/login这样的页面，当使用浏览器"),r("strong",[e._v("刷新")]),e._v("该地址是服务器会找不到该页面，返回404，所以在服务器端应该除了静态资源外都返回单页面应用中的index.html。")]),e._v(" "),r("ul",[r("li",[e._v("nodejs 服务器配置, 使用 "),r("a",{attrs:{href:"https://github.com/bripkens/connect-history-api-fallback",target:"_blank",rel:"noopener noreferrer"}},[e._v("connect-history-api-fallback 中间件"),r("OutboundLink")],1),e._v(",可以解决单页面应用切换路由刷新浏览器后找不到页面的问题。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const path = require('path')\n// 导入处理 history 模式的模块\nconst history = require('connect-history-api-fallback')\n// 导入 express\nconst express = require('express')\n\nconst app = express()\n// 注册处理 history 模式的中间件\napp.use(history())\n// 处理静态资源的中间件，网站根目录 ../web\napp.use(express.static(path.join(__dirname, '../web')))\n\n// 开启服务器，端口是 3000\napp.listen(3000, () => {\n  console.log('服务器开启，端口：3000')\n})\n")])])]),r("ul",[r("li",[e._v("nignx 服务器配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("location / {\n  try_files $uri $uri/ /index.html;\n}\n")])])]),r("h2",{attrs:{id:"vue-router-源码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-源码实现"}},[e._v("#")]),e._v(" vue-router 源码实现")]),e._v(" "),r("h3",{attrs:{id:"需求分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#需求分析"}},[e._v("#")]),e._v(" 需求分析")]),e._v(" "),r("p",[e._v("首先我们来看一下，"),r("code",[e._v("vue-router")]),e._v("如何和"),r("code",[e._v("Vue")]),e._v("结合使用的。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import VueRouter from 'vue-router'\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n\nnew Vue({\n  router\n  ...\n})\n")])])]),r("p",[e._v("可以看出"),r("code",[e._v("vue-router")]),e._v("是"),r("code",[e._v("Vue")]),e._v("的一个"),r("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/plugins.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("插件"),r("OutboundLink")],1),e._v("，首先通过全局方法"),r("code",[e._v("Vue.use( plugin )")]),e._v("来安装插件，然后将一些配置的构建选项传入获取一个"),r("code",[e._v("VueRouter")]),e._v("实例，然后将实例"),r("code",[e._v("router")]),e._v("作为自定义初始化选项传入 Vue 中，Vue 将获得"),r("code",[e._v("$router")]),e._v("实例方法。")]),e._v(" "),r("p",[e._v("所以根据"),r("code",[e._v("Vue")]),e._v("开发插件的方式和"),r("code",[e._v("vue-router")]),e._v("的功能需求, "),r("code",[e._v("vue-router")]),e._v("是需要一个类，而且有一个静态的"),r("code",[e._v("install")]),e._v("方法。")]),e._v(" "),r("h3",{attrs:{id:"vue-router-工作流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-工作流程"}},[e._v("#")]),e._v(" vue-router 工作流程")]),e._v(" "),r("ol",[r("li",[e._v("url 变更")]),e._v(" "),r("li",[e._v("触发不同模式下的监听事件"),r("code",[e._v("popstate")]),e._v("或者"),r("code",[e._v("hashchange")])]),e._v(" "),r("li",[e._v("根据 url 改变响应式数据 "),r("code",[e._v("current")]),e._v(" 属性")]),e._v(" "),r("li",[e._v("根据 "),r("code",[e._v("routeMap")]),e._v(" 找到 "),r("code",[e._v("current")]),e._v(" 对应的组件")]),e._v(" "),r("li",[e._v("渲染")])]),e._v(" "),r("h3",{attrs:{id:"源码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#源码实现"}},[e._v("#")]),e._v(" 源码实现")]),e._v(" "),r("p",[e._v("先整体看下"),r("code",[e._v("vue-router")]),e._v("的属性和方法")]),e._v(" "),r("p",[r("strong",[e._v("vue-router 属性")])]),e._v(" "),r("ul",[r("li",[e._v("options: 记录"),r("code",[e._v("new VueRouter")]),e._v("构造函数中传入的对象")]),e._v(" "),r("li",[e._v("mode: 模式 'hash' | 'history'")]),e._v(" "),r("li",[e._v("data: 响应式对象，属性 current 记录当前地址")]),e._v(" "),r("li",[e._v("routeMap: 记录路由地址和组件的对应关系")])]),e._v(" "),r("p",[r("strong",[e._v("vue-router 方法")])]),e._v(" "),r("ul",[r("li",[e._v("install(Vue)")]),e._v(" "),r("li",[e._v("constructor(options): VueRouter")]),e._v(" "),r("li",[e._v("init(): void")]),e._v(" "),r("li",[e._v("initEvent(): void")]),e._v(" "),r("li",[e._v("createRouteMap(): void")]),e._v(" "),r("li",[e._v("initComponents(Vue): void")]),e._v(" "),r("li",[e._v("push(url): void")]),e._v(" "),r("li",[e._v("replace(url): void")])]),e._v(" "),r("h3",{attrs:{id:"install-方法实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#install-方法实现"}},[e._v("#")]),e._v(" install 方法实现")]),e._v(" "),r("p",[r("code",[e._v("install")]),e._v("方法是一个静态方法，接收一个"),r("code",[e._v("Vue")]),e._v("实例作为参数，通过 "),r("code",[e._v("Vue.mixin()")]),e._v("全局混入 "),r("code",[e._v("beforeCreate")]),e._v(" 生命周期钩子,通过"),r("code",[e._v("this.$options")]),e._v("获取"),r("code",[e._v("Vue")]),e._v("初始化选项将"),r("code",[e._v("router")]),e._v("实例添加为 Vue 的方法。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("static install (Vue) {\n    // 1. 判断当前插件是否已经被安装\n    if (VueRouter.install.installed) {\n      return\n    }\n    VueRouter.install.installed = true\n    // 2. 把Vue构造函数记录到全局变量\n    _Vue = Vue\n    // 3. 把创建Vue实例时候传入的router对象注入到Vue实例上\n    _Vue.mixin({\n      beforeCreate () {\n        // 添加实例方法\n        // $options为Vue初始化选项，用于选项中自定义property\n        // 如果是组件的话不执行，如果是vue实例的话执行\n        if (this.$options.router) {\n          _Vue.prototype.$router = this.$options.router\n        }\n      }\n    })\n  }\n")])])]),r("h3",{attrs:{id:"constructor-实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#constructor-实现"}},[e._v("#")]),e._v(" constructor 实现")]),e._v(" "),r("p",[e._v("初始化"),r("code",[e._v("options")]),e._v("、"),r("code",[e._v("routeMap")]),e._v("、"),r("code",[e._v("mode")]),e._v("和"),r("code",[e._v("data")]),e._v("属性,执行初始化方法"),r("code",[e._v("init()")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("constructor (options) {\n  this.options = options\n  this.routeMap = {}\n  this.mode = options.mode || 'hash'\n  // 让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。\n  this.data = _Vue.observable({\n    current: '/'\n  })\n  this.init()\n}\n")])])]),r("h3",{attrs:{id:"createroutemap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#createroutemap"}},[e._v("#")]),e._v(" createRouteMap")]),e._v(" "),r("p",[e._v("遍历传入 "),r("code",[e._v("vue-router")]),e._v(" 的路由规则，转化成键值对的形式存到 "),r("code",[e._v("routeMap")]),e._v(" 中去,"),r("code",[e._v("routeMap")]),e._v(" key 为路由地址，value 为对应的组件")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("createRouteMap () {\n  this.options.routes.forEach(route => {\n    this.routeMap[route.path] = route.component\n  })\n}\n")])])]),r("h3",{attrs:{id:"initcomponents"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#initcomponents"}},[e._v("#")]),e._v(" initComponents")]),e._v(" "),r("p",[e._v("使用"),r("code",[e._v("Vue.component")]),e._v("定义两个组件"),r("code",[e._v("router-link")]),e._v("和"),r("code",[e._v("router-view")])]),e._v(" "),r("p",[r("code",[e._v("router-link")]),e._v("是一个 a 标签，"),r("code",[e._v("to")]),e._v("属性是一个 url，当点击标签时调用"),r("code",[e._v("push")]),e._v("和"),r("code",[e._v("replace")]),e._v("方法")]),e._v(" "),r("p",[r("code",[e._v("router-view")]),e._v("根据当前的"),r("code",[e._v("current")]),e._v("的路径找到对应组件，然后渲染")]),e._v(" "),r("blockquote",[r("p",[e._v("注意: 这里渲染组件最好使用"),r("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/render-function.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("渲染函数"),r("OutboundLink")],1),e._v("渲染组件而不是"),r("code",[e._v("template")]),e._v(",因为"),r("strong",[e._v("运行时")]),e._v("状态模板不会编译，如果想要使用"),r("code",[e._v("template")]),e._v("则需要将"),r("code",[e._v("vue-cli")]),e._v("中的"),r("a",{attrs:{href:"https://cli.vuejs.org/zh/config/#runtimecompiler",target:"_blank",rel:"noopener noreferrer"}},[e._v("runtimeCompiler"),r("OutboundLink")],1),e._v("设置为 true")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("initComponents (Vue) {\n  const self = this\n  Vue.component('router-link', {\n    props: {\n      to: {\n        type: String,\n        require: true\n      },\n      replace: {\n        type: Boolean,\n        default: false\n      }\n    },\n    // 运行时不能使用template，不会编译\n    // template: '<a :href=\"to\"><slot></slot></a>'\n    render (h) {\n      return h('a', {\n        attrs: {\n          href: this.to\n        },\n        on: {\n          click: this.clickHandler\n        }\n      }, [this.$slots.default])\n    },\n    methods: {\n      clickHandler (e) {\n        if (this.replace) {\n          this.$router.replace(this.to)\n        } else {\n          this.$router.push(this.to)\n        }\n        e.preventDefault()\n      }\n    }\n  })\n  Vue.component('router-view', {\n    render (h) {\n      const component = self.routeMap[self.data.current]\n      return h(component)\n    }\n  })\n}\n")])])]),r("h3",{attrs:{id:"push-和-replace-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#push-和-replace-方法"}},[e._v("#")]),e._v(" push 和 replace 方法")]),e._v(" "),r("p",[r("code",[e._v("push")]),e._v("和"),r("code",[e._v("replace")]),e._v("根据不同模式改变浏览器路径地址，如果是"),r("code",[e._v("mode")]),e._v("为"),r("code",[e._v("hash")]),e._v("改变"),r("code",[e._v("location.hash")]),e._v("的值，如果"),r("code",[e._v("mode")]),e._v("为"),r("code",[e._v("history")]),e._v("调用"),r("code",[e._v("pushState")]),e._v("和"),r("code",[e._v("replaceState")]),e._v("方法，根据 url 改变响应式数据 current 属性")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  push (url) {\n    if (this.mode === 'hash') {\n      location.hash = url\n    } else {\n      pushState(url)\n    }\n    this.data.current = url\n  }\n\n  replace (url) {\n    if (this.mode === 'hash') {\n      location.hash = url\n    } else {\n      pushState(url, true)\n    }\n    this.data.current = url\n  }\n\n  function pushState (url, replace = false) {\n    const history = window.history\n    if (replace) {\n      history.replaceState({ key: history.state.key }, '', url)\n    } else {\n      history.pushState({ key: Date.now() }, '', url)\n    }\n  }\n")])])]),r("h3",{attrs:{id:"initevent-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#initevent-方法"}},[e._v("#")]),e._v(" initEvent 方法")]),e._v(" "),r("p",[e._v("监听事件，hash 模式监听"),r("code",[e._v("load")]),e._v("事件将地址末尾加上'#/',监听"),r("code",[e._v("hashchange")]),e._v("当 hash 改变时，将"),r("code",[e._v("current")]),e._v("设置为当前 hash 地址；history 模式监听 popstate 事件，后退、前进事件改变路径，将"),r("code",[e._v("current")]),e._v("设置为当前 pathname。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("initEvent () {\n  if (this.mode === 'hash') {\n    window.addEventListener('load', () => {\n      // 加载时添加'#/'\n      if (!window.location.hash) {\n        window.location.hash = '/'\n      }\n      this.data.current = getHash()\n    })\n    // 监听hashchange事件\n    window.addEventListener('hashchange', () => {\n      this.data.current = getHash()\n    })\n  } else if (this.mode === 'history') {\n    window.addEventListener('load', () => {\n      this.data.current = getPathname()\n    })\n    // 监听popstate事件，后退、前进事件改变路径\n    window.addEventListener('popstate', () => {\n      this.data.current = getPathname()\n    })\n  }\n}\n")])])]),r("h2",{attrs:{id:"更多参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更多参考"}},[e._v("#")]),e._v(" 更多参考")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/licop/What_is_FE/blob/master/examples/vue-router/06-my-vue-router/src/vuerouter/index.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("完整源码实现"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-router 官方文档"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);