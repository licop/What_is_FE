{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/csso/node_modules/css-tree/CHANGELOG.md?vue&type=template&id=9c7d86c4&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/csso/node_modules/css-tree/CHANGELOG.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0xLTIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18xLTEtMiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDEuMS4yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUm9sbGVkIGJhY2sgdG8gdXNlIHNwcmVhZCBzeW50YXggaW4gb2JqZWN0IGxpdGVyYWxzIHNpbmNlIGl0IG5vdCBzdXBwb3J0ZWQgYnkgbm9kZWpzIDwgOC4zICgjMTQ1KSIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0xLTEtbm92ZW1iZXItMTgtMjAyMCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMS0xLW5vdmVtYmVyLTE4LTIwMjAiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjEuMSAoTm92ZW1iZXIgMTgsIDIwMjApIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCBlZGdlIGNhc2VzIGluIG1pc21hdGNoIGxvY2F0aW9uIGNvbXB1dGF0aW9uIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU3ludGF4TWF0Y2hFcnJvciIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0xLTAtbm92ZW1iZXItMTctMjAyMCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMS0wLW5vdmVtYmVyLTE3LTIwMjAiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjEuMCAoTm92ZW1iZXIgMTcsIDIwMjApIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJCdW1wZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1kbi1kYXRhIildKSwKICAgICAgICAgIF92bS5fdigiIHRvIDIuMC4xNCIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJFeHRlbmRlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9yaygpIildKSwKICAgICAgICAgIF92bS5fdigiIG1ldGhvZCB0byBhbGxvdyBhcHBlbmQgc3ludGF4IGluc3RlYWQgb2Ygb3ZlcnJpZGluZyBmb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInR5cGVzIildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicHJvcGVydGllcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImF0cnVsZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIGUuZy4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJjc3N0cmVlLmZvcmsoeyB0eXBlczogeyBjb2xvcjogJ3wgZm9vIHwgYmFyJyB9IH0pIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJFeHRlbmRlZCBsZXhlciBBUEkgZm9yIHZhbGlkYXRpb25cbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI2NoZWNrQXRydWxlTmFtZShhdHJ1bGVOYW1lKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJMZXhlciNjaGVja0F0cnVsZVByZWx1ZGUoYXRydWxlTmFtZSwgcHJlbHVkZSkiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIkxleGVyI2NoZWNrQXRydWxlRGVzY3JpcHRvck5hbWUoYXRydWxlTmFtZSwgZGVzY3JpcHRvck5hbWUpIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI2NoZWNrUHJvcGVydHlOYW1lKHByb3BlcnR5TmFtZSkiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkxleGVyI2dldEF0cnVsZShhdHJ1bGVOYW1lLCBmYWxsYmFja0Jhc2VuYW1lKSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJFeHRlbmRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI2dldEF0cnVsZVByZWx1ZGUoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjZ2V0UHJvcGVydHkoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kcyB0byB0YWtlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmFsbGJhY2tCYXNlbmFtZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgcGFyYW1ldGVyIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJJbXByb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlN5bnRheE1hdGNoRXJyb3IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGxvY2F0aW9uIGRldGFpbHMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNoYW5nZWQgZXJyb3IgbWVzc2FnZXMiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMS1ub3ZlbWJlci0xMS0yMDIwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTEtbm92ZW1iZXItMTEtMjAyMCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4xIChOb3ZlbWJlciAxMSwgMjAyMCkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaXhlZCBlZGdlIGNhc2VzIGZvciBwYXJzaW5nIG9mIGN1c3RvbSBwcm9wZXJ0eSB2YWx1ZSB3aXRoIGEgc2luZ2xlIHdoaXRlc3BhY2Ugd2hlbiAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwYXJzZUN1c3RvbVByb3BlcnR5OnRydWUiKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLW9jdG9iZXItMjctMjAyMCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLW9jdG9iZXItMjctMjAyMCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wIChPY3RvYmVyIDI3LCAyMDIwKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9uQ29tbWVudCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBvcHRpb24gdG8gcGFyc2VyIGNvbmZpZyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCBzdXBwb3J0IGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYnJlYWsiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJza2lwIildKSwKICAgICAgICAgIF92bS5fdigiIHZhbHVlcyBpbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2FsaygpIildKSwKICAgICAgICAgIF92bS5fdigiIHRvIGNvbnRyb2wgdHJhdmVyc2FsIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMaXN0I3JlZHVjZSgpIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNyZWR1Y2VSaWdodCgpIildKSwKICAgICAgICAgIF92bS5fdigiIG1ldGhvZHMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQnVtcGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtZG4tZGF0YSIpXSksCiAgICAgICAgICBfdm0uX3YoIiB0byAyLjAuMTIiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRXhwb3NlZCB2ZXJzaW9uIG9mIHRoZSBsaWIgKGkuZS4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImltcG9ydCB7IHZlcnNpb24gfSBmcm9tICdjc3MtdHJlZSciKV0pLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMZXhlciNkdW1wKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gZHVtcCBhdHJ1bGVzIHN5bnRheGVzIGFzIHdlbGwiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgbWF0Y2hpbmcgY29tbWEgc2VwYXJhdGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8dXJhbmdlPiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBsaXN0ICgjMTM1KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW5hbWVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJIZXhDb2xvciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgaW50byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSGFzaCIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVsZW1lbnQoKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBzcGVjaWZpYyBwYXJzaW5nIHJ1bGVzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImRpc3QvZGVmYXVsdC1zeW50YXguanNvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmcm9tIHBhY2thZ2UiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMC1hbHBoYS0zOS1kZWNlbWJlci01LTIwMTkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYS0zOS1kZWNlbWJlci01LTIwMTkiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYS4zOSAoRGVjZW1iZXIgNSwgMjAxOSkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkIHdhbGtlciB3aXRoICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCd2aXNpdDogIkRlY2xhcmF0aW9uIicpXSksCiAgICAgICAgICBfdm0uX3YoIiB0byBpdGVyYXRlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJEZWNsYXJhdGlvbkxpc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKCMxMTQpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGEtMzgtbm92ZW1iZXItMjUtMjAxOSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhLTM4LW5vdmVtYmVyLTI1LTIwMTkiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYS4zOCAoTm92ZW1iZXIgMjUsIDIwMTkpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJCdW1wZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1kbi1kYXRhIildKSwKICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIyLjAuNiIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkIGluaXRpYWwgaW1wbG1lbnRhdGlvbiBmb3IgYXQtcnVsZSBtYXRjaGluZyB2aWEgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI21hdGNoQXRydWxlUHJlbHVkZSgpIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjbWF0Y2hBdHJ1bGVEZXNjcmlwdG9yKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbWV0aG9kcyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLW1vei1jb250cm9sLWNoYXJhY3Rlci12aXNpYmlsaXR5IildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLW1zLWdyaWQtY29sdW1ucyIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi1tcy1ncmlkLXJvd3MiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItbXMtaHlwaGVuYXRlLWxpbWl0LWxhc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcHJvcGVydGllcyB0byBwYXRjaCAoIzExMSkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZsb3ciKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmbG93LXJvb3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0YWJsZS1jYXB0aW9uIildKSwKICAgICAgICAgIF92bS5fdigiIHZhbHVlcyB0byBwYXRjaGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkaXNwbGF5IildKSwKICAgICAgICAgIF92bS5fdigiICgjMTEyKSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhLTM3LW9jdG9iZXItMjItMjAxOSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhLTM3LW9jdG9iZXItMjItMjAxOSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhLjM3IChPY3RvYmVyIDIyLCAyMDE5KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQnVtcGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzb3VyY2UtbWFwIildKSwKICAgICAgICAgIF92bS5fdigiIHZlcnNpb24gdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIl4wLjYuMSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gZml4IHNvdXJjZSBtYXAgZ2VuZXJhdGlvbiBpbmNvbnNpc3RlbmN5IGFjcm9zcyBub2RlLmpzIHZlcnNpb25zIGR1ZSB0byBtYXBwaW5ncyBzb3J0aW5nIGJ1ZyBhbmQgdjggbW92aW5nIHRvICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3Y4LmRldi9ibG9nL2FycmF5LXNvcnQiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJhIHN0YWJsZSBBcnJheSNzb3J0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2NvbW1pdC9mMzVhMmU0MjEyZGQwMjVjYjVlMWZjMjE5ZTdhYzhhNGI5NmMyY2M5IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiZml4IGNvbW1pdCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZS1tYXAiKV0pLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGEtMzYtb2N0b2Jlci0xMy0yMDE5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEtMzYtb2N0b2Jlci0xMy0yMDE5IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEuMzYgKE9jdG9iZXIgMTMsIDIwMTkpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRHJvcHBlZCBzdXBwb3J0IGZvciBOb2RlIDwgOCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJVcGRhdGVkIGRldiBkZXBzIChmaXhlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnBtIGF1ZGl0IildKSwKICAgICAgICAgIF92bS5fdigiIGlzc3VlcykiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUmV3b3JrZWQgYnVpbGQgcGlwZWxpbmVcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJQYWNrYWdlIHByb3ZpZGVzICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGlzdC9jc3N0cmVlLmpzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkaXN0L2Nzc3RyZWUubWluLmpzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub3cgKGluc3RlYWQgb2Ygc2luZ2xlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGlzdC9jc3N0cmVlLmpzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0aGF0IHdhcyBhIG1pbiB2ZXJzaW9uKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJCdW5kbGUgc2l6ZSAobWluIHZlcnNpb24pIHJlZHVjZWQgZnJvbSAxOTFLYiB0byAxNThLYiBkdWUgdG8gc29tZSBvcHRpbWlzYXRpb25zIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJEZWZpbml0aW9uIHN5bnRheFxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlbmFtZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJncmFtbWFyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpbnRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGVmaW5pdGlvblN5bnRheCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKG5hbWVkIHBlciBzcGVjKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb21wYWN0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBvcHRpb24gdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJnZW5lcmF0ZSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QgdG8gYXZvaWQgZm9ybWF0dGluZyAoc3BhY2VzKSB3aGVuIHBvc3NpYmxlIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJMZXhlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkdW1wKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCB0byBwcm9kdWNlIHN5bnRheGVzIGluIGNvbXBhY3QgZm9ybSBieSBkZWZhdWx0IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhLTM1LW9jdG9iZXItNy0yMDE5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEtMzUtb2N0b2Jlci03LTIwMTkiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYS4zNSAoT2N0b2JlciA3LCAyMDE5KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiV2Fsa2VyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJDaGFuZ2VkIGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIHJ1bnRpbWUgY29tcGlsYXRpb24gZHVlIHRvIENTUCBpc3N1ZXMgKHNlZSAjOTEsICMxMDkpIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZpbmQoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmluZExhc3QoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmluZEFsbCgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2RzIChlLmcuICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiY3NzdHJlZS5maW5kKGFzdCwgbm9kZSA9PiBub2RlLnR5cGUgPT09ICdDbGFzc1NlbGVjdG9yJykiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhLTM0LWp1bHktMjctMjAxOSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhLTM0LWp1bHktMjctMjAxOSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhLjM0IChKdWx5IDI3LCAyMDE5KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVG9rZW5pemVyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc0JPTSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBmdW5jdGlvbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjaGFyQ29kZUNhdGVnb3J5KCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGZ1bmN0aW9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmlyc3RDaGFyT2Zmc2V0KCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGZ1bmN0aW9uICh1c2UgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc0JPTSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpbnN0ZWFkKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNIQVJDT0RFIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBkaWN0aW9uYXJ5IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSU5QVVRfU1RSRUFNX0NPREUqIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBkaWN0aW9uYXJpZXMiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkxleGVyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJBbGxvd2VkIGNvbW1lbnRzIGluIG1hdGNoaW5nIHZhbHVlIChqdXN0IGlnbm9yZSB0aGVtIGxpa2Ugd2hpdGVzcGFjZXMpIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkluY3JlYXNlZCBpdGVyYXRpb24gY291bnQgaW4gdmFsdWUgbWF0Y2hpbmcgZnJvbSAxMGsgdXAgdG8gMTVrIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJGaXhlZCBtaXNzZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkZWJ1Z2dlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCMxMDQpIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhLTMzLWp1bHktMTEtMjAxOSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhLTMzLWp1bHktMTEtMjAxOSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhLjMzIChKdWx5IDExLCAyMDE5KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTGV4ZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkZpeGVkIGxvdyBwcmlvcml0eSBwcm9kdWN0aW9ucyBtYXRjaGluZyBieSBjaGFuZ2luZyBhbiBhcHByb2FjaCBmb3Igcm9idXN0IG9uZSAoIzEwMykiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGEtMzItanVseS0xMS0yMDE5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEtMzItanVseS0xMS0yMDE5IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEuMzIgKEp1bHkgMTEsIDIwMTkpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJMZXhlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkZpeGVkIGxvdyBwcmlvcml0eSBwcm9kdWN0aW9ucyBtYXRjaGluZyBpbiBsb25nICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigifHwtIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCImJi0iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGdyb3VwcyAoIzEwMykiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGEtMzEtanVseS0xMS0yMDE5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEtMzEtanVseS0xMS0yMDE5IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEuMzEgKEp1bHkgMTEsIDIwMTkpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJCdW1wZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1kbi9kYXRhIildKSwKICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIyLjAuNCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoIzk5KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJMZXhlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtNC8jbnVtZXJpYy1yYW5nZXMiLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoImJyYWNrZXRlZCByYW5nZSBub3RhdGlvbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgc3VwcG9ydCBhbmQgcmVsYXRlZCByZWZhY3RvcmluZyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxudW1iZXItemVyby1vbmU+IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8bnVtYmVyLW9uZS1vci1ncmVhdGVyPiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPHBvc2l0aXZlLWludGVnZXI+IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGZyb20gZ2VuZXJpYyB0eXBlcy4gSW4gZmFjdCwgdHlwZXMgbW92ZWQgdG8gcGF0Y2gsIGJlY2F1c2UgdGhvc2UgdHlwZXMgY2FuIGJlIGV4cHJlc3NlZCBpbiBhIHJlZ3VsYXIgZ3JhbW1hciBkdWUgdG8gYnJhY2tldGVkIHJhbmdlIG5vdGF0aW9uIGltcGxlbWVudGVkIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCBzdXBwb3J0IGZvciBtdWx0aXBsZSB0b2tlbiBzdHJpbmcgbWF0Y2hpbmciKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkltcHJvdmVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGN1c3RvbS1pZGVudD4iKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgcHJvZHVjdGlvbiBtYXRjaGluZyB0byBjbGFpbSB0aGUga2V5d29yZCBvbmx5IGlmIG5vIG90aGVyIHVuZnVsZmlsbGVkIHByb2R1Y3Rpb24gY2FuIGNsYWltIGl0ICgjMTAxKSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiSW1wcm92ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8bGVuZ3RoPiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgJyBwcm9kdWN0aW9uIG1hdGNoaW5nIHRvIGNsYWltICJ1bml0bGVzcyB6ZXJvIiBvbmx5IGlmIG5vIG90aGVyIHVuZnVsZmlsbGVkIHByb2R1Y3Rpb24gY2FuIGNsYWltIGl0JwogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkNoYW5nZWQgbGV4ZXIncyBjb25zdHJ1Y3RvciB0byBwcmV2ZW50IGdlbmVyaWMgdHlwZXMgb3ZlcnJpZGUgd2hlbiB1c2VkIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJGaXhlZCBsYXJnZSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInx8IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi0gYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJiYiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICItZ3JvdXAgbWF0Y2hpbmcsIG1hdGNoaW5nIGNvbnRpbnVlcyBmcm9tIHRoZSBiZWdpbm5pbmcgb24gdGVybSBtYXRjaCAoIzg1KSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiRml4ZWQgY2hlY2tpbmcgdGhhdCB2YWx1ZSBoYXMgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2YXIoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBvY2N1cnJlbmNlcyB3aGVuIHZhbHVlIGlzIGEgc3RyaW5nIChzdWNoIHZhbHVlcyBjYW4ndCBiZSBtYXRjaGVkIG9uIHN5bnRheCBjdXJyZW50bHkgYW5kIGZhaWwgd2l0aCBzcGVjaWZpYyBlcnJvciB0aGF0IGNhbiBiZSB1c2VkIGZvciBpZ25vcmFuY2UgaW4gdmFsaWRhdGlvbiB0b29scykiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkZpeGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGRlY2xhcmF0aW9uLXZhbHVlPiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGFueS12YWx1ZT4iKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgbWF0Y2hpbmcgd2hlbiBhIHZhbHVlIGNvbnRhaW5zIGEgZnVuY3Rpb24sIHBhcmVudGhlc2VzIG9yIGJyYWNlcyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMC1hbHBoYS0zMC1qdWx5LTMtMjAxOSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhLTMwLWp1bHktMy0yMDE5IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEuMzAgKEp1bHkgMywgMjAxOSkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkJ1bXBlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWRuL2RhdGEiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIn4yLjAuMyIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCB0eXBlIHJlbW92YWxzIGZyb20gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtZG4vZGF0YSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBkdWUgdG8gbGFjayBvZiBzb21lIGdlbmVyaWMgdHlwZXMgYW5kIHNwZWNpZmljIGxleGVyIHJlc3RpY3Rpb25zIChzaW5jZSBsZXhlciB3YXMgcmV3b3JrZWQsIHNlZSBiZWxvdykiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlJlZHVjZWQgYW5kIHVwZGF0ZWQgcGF0Y2hlcyIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUb2tlbml6ZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZXdvcmtlZCB0b2tlbml6ZXIgaXRzZWxmIHRvIGNvbXBsaW1lbnQgIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtc3ludGF4LyN0b2tlbml6YXRpb24iLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNTUyBTeW50YXggTW9kdWxlIExldmVsIDMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVG9rZW5pemVyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBjbGFzcyBzcGxpdHRlZCBpbnRvIHNldmVyYWwgYWJzdHJhY3Rpb25zOlxuIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRva2VuU3RyZWFtIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgY2xhc3MiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJPZmZzZXRUb0xvY2F0aW9uIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgY2xhc3MiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0b2tlbml6ZSgpIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZnVuY3Rpb24gdGhhdCBjcmVhdGVzICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRva2VuU3RyZWFtIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgaW5zdGFuY2UgZm9yIGdpdmVuIHN0cmluZyBvciB1cGRhdGVzIGEgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVG9rZW5TdHJlYW0iKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBpbnN0YW5jZSBwYXNzZWQgYXMgc2Vjb25kIHBhcmFtZXRlciIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVG9rZW5pemVyIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgY2xhc3MiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSYXciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRva2VuIHR5cGUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlbmFtZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJJZGVudGlmaWVyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0b2tlbiB0eXBlIHRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSWRlbnQiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgdG9rZW4gdHlwZXM6ICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSGFzaCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQmFkU3RyaW5nIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJCYWRVcmwiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkRlbGltIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQZXJjZW50YWdlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJEaW1lbnNpb24iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNvbG9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTZW1pY29sb24iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNvbW1hIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMZWZ0U3F1YXJlQnJhY2tldCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmlnaHRTcXVhcmVCcmFja2V0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMZWZ0UGFyZW50aGVzaXMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJpZ2h0UGFyZW50aGVzaXMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxlZnRDdXJseUJyYWNrZXQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJpZ2h0Q3VybHlCcmFja2V0IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlcGxhY2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUHVuY3R1YXRvciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgd2l0aCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkRlbGltIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIHRva2VuIHR5cGUsIHRoYXQgZXhjbHVkZXMgc3BlY2lmaWMgY2hhcmFjdGVycyB3aXRoIGl0cyBvd24gdG9rZW4gdHlwZSBsaWtlICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ29sb24iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNlbWljb2xvbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZXRjIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmluZENvbW1lbnRFbmQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZpbmRTdHJpbmdFbmQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZpbmREZWNpbWFsTnVtYmVyRW5kIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaW5kTnVtYmVyRW5kIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaW5kRXNjYXBlRW5kIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaW5kSWRlbnRpZmllckVuZCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmluZFVybFJhd0VuZCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaGVscGVyIGZ1bmN0aW9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU1lNQk9MX1RZUEUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBVTkNUVUFUSU9OIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTVE9QX1VSTF9SQVciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGRpY3Rpb25hcmllcyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc0RpZ2l0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc0hleERpZ2l0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc1VwcGVyY2FzZUxldHRlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaXNMb3dlcmNhc2VMZXR0ZXIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImlzTGV0dGVyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc05vbkFzY2lpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc05hbWVTdGFydCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaXNOYW1lIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc05vblByaW50YWJsZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaXNOZXdsaW5lIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc1doaXRlU3BhY2UiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImlzVmFsaWRFc2NhcGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImlzSWRlbnRpZmllclN0YXJ0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc051bWJlclN0YXJ0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb25zdW1lRXNjYXBlZCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY29uc3VtZU5hbWUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbnN1bWVOdW1iZXIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbnN1bWVCYWRVcmxSZW1uYW50cyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaGVscGVyIGZ1bmN0aW9ucyIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUGFyc2VyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJDaGFuZ2VkIHBhcnNpbmcgYWxnb3JpdGhtcyB0byB3b3JrIHdpdGggbmV3IHRva2VuIHR5cGUgc2V0IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSGV4Q29sb3IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgY29uc3VtcHRpb24gaW4gd2F5IHRvIHJlbGF4IGNoZWNraW5nIGEgdmFsdWUsIGkuZS4gbm93ICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidmFsdWUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGlzIGEgc2VxdWVuY2Ugb2Ygb25lIG9yIG1vcmUgbmFtZSBjaGFycyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCImIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhcyBhIHByb3BlcnR5IGhhY2siKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlbGF4ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2YXIoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBwYXJzaW5nIHRvIG9ubHkgY2hlY2sgdGhhdCBhIGZpcnN0IGFyZ3VtZW50cyBpcyBhbiBpZGVudGlmaWVyIChub3QgYSBjdXN0b20gcHJvcGVydHkgbmFtZSBhcyBiZWZvcmUpIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJMZXhlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiUmV3b3JrZWQgc3ludGF4IG1hdGNoaW5nIHRvIHJlbGF5IG9uIHRva2VuIHNldCBvbmx5IChoYXZpbmcgQVNUIGlzIG9wdGlvbmFsIG5vdykiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkV4dGVuZGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjbWF0Y2goKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjbWF0Y2hUeXBlKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI21hdGNoUHJvcGVydHkoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBtZXRob2RzIHRvIHRha2UgYSBzdHJpbmcgYXMgdmFsdWUsIGJlc2lkZSBBU1QgYXMgYSB2YWx1ZSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiRXh0ZW5kZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMZXhlciNtYXRjaCgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIG1ldGhvZCB0byB0YWtlIGEgc3RyaW5nIGFzIGEgc3ludGF4LCBiZXNpZGUgb2Ygc3ludGF4IGRlc2NyaXB0b3IiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJld29ya2VkIGdlbmVyaWMgdHlwZXM6XG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8YXR0cigpPiIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8dXJsPiIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIChtb3ZlZCB0byBwYXRjaCkgYW5kICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxwcm9naWQ+IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgdHlwZXMiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCB0eXBlczpcbiIpLAogICAgICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZWxhdGVkIHRvIHRva2VuIHR5cGVzOiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGlkZW50LXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxmdW5jdGlvbi10b2tlbj4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8YXQta2V5d29yZC10b2tlbj4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8aGFzaC10b2tlbj4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8c3RyaW5nLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxiYWQtc3RyaW5nLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjx1cmwtdG9rZW4+IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGJhZC11cmwtdG9rZW4+IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGRlbGltLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxudW1iZXItdG9rZW4+IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPHBlcmNlbnRhZ2UtdG9rZW4+IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGRpbWVuc2lvbi10b2tlbj4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8d2hpdGVzcGFjZS10b2tlbj4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8Q0RPLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxDREMtdG9rZW4+IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGNvbG9uLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxzZW1pY29sb24tdG9rZW4+IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGNvbW1hLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxbLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxdLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjwoLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjwpLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjx7LXRva2VuPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjx9LXRva2VuPiIpXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkNvbXBsZXggdHlwZXM6ICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8YW4tcGx1cy1iPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjx1cmFuZ2U+IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGN1c3RvbS1wcm9wZXJ0eS1uYW1lPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxkZWNsYXJhdGlvbi12YWx1ZT4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8YW55LXZhbHVlPiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjx6ZXJvPiIpXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZW5hbWVkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjx1bmljb2RlLXJhbmdlPiIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjx1cmFuZ2U+IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgYXMgcGVyIHNwZWMiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZW5hbWVkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxleHByZXNzaW9uPiIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIChJRSBsZWdhY3kgZXh0ZW5zaW9uKSB0byAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8LW1zLWxlZ2FjeS1leHByZXNzaW9uPiIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIGFuZCBtYXkgdG8gYmUgcmVtb3ZlZCBpbiBuZXh0IHJlbGVhc2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhLTI5LW1heS0zMC0yMDE4IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEtMjktbWF5LTMwLTIwMTgiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYS4yOSAoTWF5IDMwLCAyMDE4KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTGV4ZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlN5bnRheCBtYXRjaGluZyB3YXMgY29tcGxldGVseSByZXdvcmtlZC4gTm93IGl0J3MgdG9rZW4tYmFzZWQgYW5kIHVzZXMgc3RhdGUgbWFjaGluZS4gUHVibGljIEFQSSBoYXMgbm90IGNoYW5nZWQuIEhvd2V2ZXIsIHNvbWUgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmVzIGhhdmUgY2hhbmdlZC4gTW9zdCBzaWduaWZpY2FsIGNoYW5nZSBpbiBzeW50YXggbWF0Y2ggcmVzdWx0IHRyZWUgc3RydWN0dXJlLCBpdCdzIGJlY2FtZSB0b2tlbi1iYXNlZCBpbnN0ZWFkIG9mIG5vZGUtYmFzZWQuIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJHcmFtbWFyXG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCBncmFtbWFyIHRyZWUgZm9ybWF0OlxuIiksCiAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUb2tlbiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgdG8gcmVwcmVzZW50IGEgc2luZ2xlIGNvZGUgcG9pbnQgKCIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8ZGVsaW0tdG9rZW4+IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTXVsdGlwbGllciIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiB0aGF0IHdyYXBzIGEgc2luZ2xlIG5vZGUgKCIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0ZXJtIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIHByb3BlcnR5KSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXRLZXl3b3JkIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIHRvIHJlcHJlc2VudCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGF0LWtleXdvcmQtdG9rZW4+IildKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2xhc2giKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQZXJjZW50IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIG5vZGUgdHlwZXMsIHRoZXkgYXJlIHJlcGxhY2VkIGZvciBhIG5vZGUgd2l0aCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVG9rZW4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgdHlwZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJGdW5jdGlvbiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiB0byByZXByZXNlbnQgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxmdW5jdGlvbi10b2tlbj4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgd2l0aCBubyBjaGlsZHJlbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtdWx0aXBsaWVyIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIHByb3BlcnR5IGZyb20gIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkdyb3VwIildKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ2VuZXJhdGUoKSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZDpcbiIpLAogICAgICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJNZXRob2QgdGFrZXMgYW4gIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9wdGlvbnMiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgYXMgc2Vjb25kIGFyZ3VtZW50IG5vdyAoIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJnZW5lcmF0ZShub2RlLCBmb3JjZUJyYWNlcywgZGVjb3JhdG9yKSIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIC0+ICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJnZW5lcmF0ZShub2RlLCBvcHRpb25zKSIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIikuIFR3byBvcHRpb25zIGFyZSBzdXBwb3J0ZWQ6ICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmb3JjZUJyYWNlcyIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImRlY29yYXRvciIpXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJXaGVuIGEgc2Vjb25kIHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIGl0IHRyZWF0cyBhcyAiCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkZWNvcmF0ZSIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBvcHRpb24gdmFsdWUsIGkuZS4gIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdlbmVyYXRlKG5vZGUsIGZuKSIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAtPiAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ2VuZXJhdGUobm9kZSwgeyBkZWNvcmF0ZTogZm4gfSkiKV0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiRGVjb3JhdGUgZnVuY3Rpb24gaW52b2tlcyB3aXRoIGFkZGl0aW9uYWwgcGFyYW1ldGVyIOKAkyBhIHJlZmVyZW5jZSB0byBhIG5vZGUiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUb2tlbml6ZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW5hbWVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXRydWxlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBjb25zdCB0byAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0S2V5d29yZCIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhLTI4LWZlYnJ1YXJ5LTE5LTIwMTgiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYS0yOC1mZWJydWFyeS0xOS0yMDE4IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEuMjggKEZlYnJ1YXJ5IDE5LCAyMDE4KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUmVuYW1lZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibGV4ZXIuZ3JhbW1hci50cmFuc2xhdGUoKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBtZXRob2QgaW50byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ2VuZXJhdGUoKSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8Jy13ZWJraXQtZm9udC1zbW9vdGhpbmcnPiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjwnLW1vei1vc3gtZm9udC1zbW9vdGhpbmcnPiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBzeW50YXhlcyAoIzc1KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCB2ZW5kb3Iga2V5d29yZHMgZm9yICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8J292ZXJmbG93Jz4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgcHJvcGVydHkgc3ludGF4ICgjNzYpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlBpbm5lZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWRuLWRhdGEiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIn4xLjEuMCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgZml4ZWQgaXNzdWVzIHdpdGggc29tZSB1cGRhdGVkIHByb3BlcnR5IHN5bnRheGVzIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGEtMjctamFudWFyeS0xNC0yMDE4IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEtMjctamFudWFyeS0xNC0yMDE4IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEuMjcgKEphbnVhcnkgMTQsIDIwMTgpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJHZW5lcmF0b3JcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkIG5vZGUncyAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdlbmVyYXRlKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgbWV0aG9kcyBpbnZvY2F0aW9uLCBtZXRob2RzIG5vdyB0YWtlIGEgbm9kZSBhcyBhIHNpbmdsZSBhcmd1bWVudCBhbmQgY29udGV4dCAoaS5lLiAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRoaXMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSB0aGF0IGhhdmUgbWV0aG9kczogIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjaHVuaygpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJub2RlKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNoaWxkcmVuKCkiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVuYW1lZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRyYW5zbGF0ZSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdlbmVyYXRlKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCBjaGFuZ2VkIHRvIHRha2UgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcHRpb25zIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhcmd1bWVudCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRyYW5zbGF0ZU1hcmt1cChhc3QsIGVudGVyLCBsZWF2ZSkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCwgdXNlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJnZW5lcmF0ZShhc3QsIHsgZGVjb3JhdG9yOiAoaGFuZGxlcnMpID0+IHsgLi4uIH19KSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaW5zdGVhZCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRyYW5zbGF0ZVdpdGhTb3VyY2VNYXAoYXN0KSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsIHVzZSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdlbmVyYXRlKGFzdCwgeyBzb3VyY2VNYXA6IHRydWUgfSkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGluc3RlYWQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNoYW5nZWQgdG8gc3VwcG9ydCBmb3IgY2hpbGRyZW4gYXMgYW4gYXJyYXkiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiV2Fsa2VyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndhbGsoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gdGFrZSBhbiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9wdGlvbnMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFyZ3VtZW50IGluc3RlYWQgb2YgaGFuZGxlciwgd2l0aCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVudGVyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsZWF2ZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidmlzaXQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJldmVyc2UiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG9wdGlvbnMgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2Fsayhhc3QsIGZuKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgc3RpbGwgd29ya3MgYW5kIGVxdWl2YWxlbnQgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3YWxrKGFzdCwgeyBlbnRlcjogZm4gfSkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndhbGtVcChhc3QsIGZuKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsIHVzZSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndhbGsoYXN0LCB7IGxlYXZlOiBmbiB9KSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2Fsa1J1bGVzKGFzdCwgZm4pIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgdXNlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2Fsayhhc3QsIHsgdmlzaXQ6ICdSdWxlJywgZW50ZXI6IGZuIH0pIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpbnN0ZWFkIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2Fsa1J1bGVzUmlnaHQoYXN0LCBmbikiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCB1c2UgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIndhbGsoYXN0LCB7IHZpc2l0OiAnUnVsZScsIHJldmVyc2U6IHRydWUsIGVudGVyOiBmbiB9KSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaW5zdGVhZCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndhbGtEZWNsYXJhdGlvbnMoYXN0LCBmbikiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCB1c2UgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIndhbGsoYXN0LCB7IHZpc2l0OiAnRGVjbGFyYXRpb24nLCBlbnRlcjogZm4gfSkiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiIGluc3RlYWQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQ2hhbmdlZCB0byBzdXBwb3J0IGZvciBjaGlsZHJlbiBhcyBhcnJheSBpbiBtb3N0IGNhc2VzICgiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJldmVyc2U6IHRydWUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHdpbGwgZmFpbCBvbiBhcnJheXMgc2luY2UgdGhleSBoYXZlIG5vICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9yRWFjaFJpZ2h0KCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCkiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk1pc2NcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJMaXN0XG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNmb3JFYWNoKCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMaXN0I2ZvckVhY2hSaWdodCgpIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNmaWx0ZXIoKSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNtYXAoKSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCB0byByZXR1cm4gYSAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMaXN0IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgaW5zdGFuY2UgaW5zdGVhZCBvZiAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBcnJheSIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNwdXNoKCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QsIHNpbWlsYXIgdG8gIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNhcHBlbmREYXRhKCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBidXQgcmV0dXJucyBub3RoaW5nIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNwb3AoKSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxpc3QjdW5zaGlmdCgpIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kLCBzaW1pbGFyIHRvICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxpc3QjcHJlcGVuZERhdGEoKSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIGJ1dCByZXR1cm5zIG5vdGhpbmciKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMaXN0I3NoaWZ0KCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMaXN0I3ByZXBlbmRMaXN0KCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxpc3QjaW5zZXJ0KCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNpbnNlcnREYXRhKCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNhcHBlbmRMaXN0KCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGlzdCNpbnNlcnRMaXN0KCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBtZXRob2RzIHRvIHJldHVybiBhIGxpc3QgdGhhdCBwZXJmb3JtZWQgYW4gb3BlcmF0aW9uIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImtleXdvcmQoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kXG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuYW1lIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZmllbGQgdG8gaW5jbHVkZSBhIHZlbmRvciBwcmVmaXgiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiYXNlbmFtZSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIGZpZWxkIHRvIGNvbnRhaW4gYSBuYW1lIHdpdGhvdXQgYSB2ZW5kb3IgcHJlZml4IikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY3VzdG9tIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZmllbGQgdGhhdCBjb250YWluIGEgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidHJ1ZSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHdoZW4ga2V5d29yZCBpcyBhIGN1c3RvbSBwcm9wZXJ0eSByZWZlcmVuY2UiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcm9wZXJ0eSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2RcbiIpLAogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5hbWUiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBmaWVsZCB0byBpbmNsdWRlIGEgdmVuZG9yIHByZWZpeCIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJhc2VuYW1lIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgZmllbGQgdG8gY29udGFpbiBhIG5hbWUgd2l0aG91dCBhbnkgcHJlZml4ZXMsIGkuZS4gYSBoYWNrIGFuZCBhIHZlbmRvciBwcmVmaXgiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInZlbmRvclByZWZpeCgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaXNDdXN0b21Qcm9wZXJ0eSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGEtMjYtbm92ZW1iZXItOS0yMDE3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEtMjYtbm92ZW1iZXItOS0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEuMjYgKE5vdmVtYmVyIDksIDIwMTcpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUb2tlbml6ZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRva2VuaXplciNpc0JhbGFuY2VFZGdlKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRva2VuaXplci5lbmRzV2l0aCgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlBhcnNlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1hZGUgdGhlIHBhcnNlciB0b2xlcmFudCB0byBlcnJvcnMgYnkgZGVmYXVsdCIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG9sZXJhbnQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHBhcnNlciBvcHRpb24gKG5vIHBhcnNpbmcgbW9kZXMgYW55bW9yZSkiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcm9wZXJ0eSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBwYXJzZXIgb3B0aW9uIChhIHZhbHVlIHBhcnNpbmcgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BlcnR5IG5hbWUgYW55bW9yZSkiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNhbmNlbGVkIGVycm9yIGZvciBhIGhhbmRpbmcgc2VtaWNvbG9uIGluIGEgYmxvY2siKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNhbmNlbGVkIGVycm9yIGZvciB1bmNsb3NlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJyYWNrZXRzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJGdW5jdGlvbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGFyZW50aGVzZXMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHdoZW4gRU9GIGlzIHJlYWNoZWQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRml4ZWQgZXJyb3Igd2hlbiBwcmVsdWRlIGVuZHMgd2l0aCBhIGNvbW1lbnQgZm9yIGF0LXJ1bGVzIHdpdGggY3VzdG9tIHByZWx1ZGUgY29uc3VtZXIiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlbGF4ZWQgYXQtcnVsZSBwYXJzaW5nOlxuIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkNhbmNlbGVkIGVycm9yIHdoZW4gRU9GIGlzIHJlYWNoZWQgYWZ0ZXIgYSBwcmVsdWRlIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiQ2FuY2VsZWQgZXJyb3IgZm9yIGFuIGF0LXJ1bGUgd2l0aCBjdXN0b20gYmxvY2sgY29uc3VtZXIgd2hlbiBhdC1ydWxlIGhhcyBubyBibG9jayAoanVzdCBkb24ndCBhcHBseSBjb25zdW1lciBpbiB0aGF0IGNhc2UpIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkNhbmNlbGVkIGVycm9yIG9uIGF0LXJ1bGUgcGFyc2luZyB3aGVuIGl0IG9jY3VycyBvdXRzaWRlIHByZWx1ZGUgb3IgYmxvY2sgKGF0LXJ1bGUgaXMgY29udmVydGluZyB0byAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmF3IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgbm9kZSkiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJBbGxvd2VkIGZvciBhbnkgYXQtcnVsZSB0byBoYXZlIGEgcHJlbHVkZSBhbmQgYSBibG9jaywgZXZlbiBpZiBpdCdzIGludmFsaWQgcGVyIGF0LXJ1bGUgc3ludGF4ICh0aGUgcmVzcG9uc2liaWxpdHkgZm9yIHRoaXMgY2hlY2sgaXMgbW92ZWQgdG8gbGV4ZXIsIHNpbmNlIGl0J3MgcG9zc2libGUgdG8gY29uc3RydWN0IGEgQVNUIHdpdGggc3VjaCBlcnJvcnMpIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJNYWRlIGEgZGVjbGFyYXRpb24gdmFsdWUgYSBzYWZlIHBhcnNpbmcgcG9pbnQgKGkuZS4gZXJyb3Igb24gdmFsdWUgcGFyc2luZyBsZWFkIHRvIGEgdmFsdWUgaXMgdHVybmluZyBpbnRvICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmF3IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlLCBub3QgYSBkZWNsYXJhdGlvbiBhcyBiZWZvcmUpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJFeGNsdWRlZCBzdXJyb3VuZGluZyB3aGl0ZSBzcGFjZXMgYW5kIGNvbW1lbnRzIGZyb20gYSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJhdyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbm9kZSB0aGF0IHJlcHJlc2VudHMgYSBkZWNsYXJhdGlvbiB2YWx1ZSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlZhbHVlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBwYXJzZSBoYW5kbGVyIHRvIHJldHVybiBhIG5vZGUgb25seSB3aXRoIHR5cGUgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJWYWx1ZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKHByZXZpb3VzbHkgaXQgcmV0dXJuZWQgYSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJhdyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbm9kZSBpbiBzb21lIGNhc2VzKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiRml4ZWQgaXNzdWUgd2l0aCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9uUGFyc2VFcnJvcigpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGlzIG5vdCBpbnZva2VkIGZvciBlcnJvcnMgb2NjdXJlZCBvbiBzZWxlY3RvciBvciBkZWNsYXJhdGlvbiB2YWx1ZSBwYXJzaW5nIGluIHNvbWUgY2FzZXMiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgdXNpbmcgb2YgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvblBhcnNlRXJyb3IoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gc3RvcCBwYXJzaW5nIGlmIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTGV4ZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ3JhbW1hci53YWxrKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgdG8gaW52b2tlIHBhc3NlZCBoYW5kbGVyIG9uIGVudGVyaW5nIHRvIG5vZGUgcmF0aGVyIHRoYW4gb24gbGVhdmluZyB0aGUgbm9kZSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiSW1wcm92ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJncmFtbWFyLndhbGsoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gdGFrZSBhIHdhbGsgaGFuZGxlciBwYWlyIGFzIGFuIG9iamVjdCwgaS5lLiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndhbGsobm9kZSwgeyBlbnRlcjogZm4sIGxlYXZlOiBmbiB9KSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjbWF0Y2gqKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZHMgdG8gdGFrZSBhIG5vZGUgb2YgYW55IHR5cGUsIGJ1dCB3aXRoIGEgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjaGlsZHJlbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZmllbGQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjbWF0Y2goc3ludGF4LCBub2RlKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJGaXhlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI21hdGNoVHlwZSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIG1ldGhvZCB0byBzdG9wIHJldHVybiBhIHBvc2l0aXZlIHJlc3VsdCBmb3IgdGhlIENTUyB3aWRlIGtleXdvcmRzIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhMjUtb2N0b2Jlci05LTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYTI1LW9jdG9iZXItOS0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEyNSAoT2N0b2JlciA5LCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUGFyc2VyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgZmFsbGJhY2sgbm9kZSBhcyBhcmd1bWVudCB0byAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9uUGFyc2VFcnJvcigpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBoYW5kbGVyIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkZpeGVkIHJhdyBjb25zdW1pbmcgaW4gdG9sZXJhbnQgbW9kZSB3aGVuIHNlbGVjdG9yIGlzIGludmFsaWQgKGdyZWVkeSBjb25zdW1pbmcgYW5kIHJlZHVuZGFudCB3YXJuaW5ncykiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRml4ZWQgZXhjZXB0aW9uIGluIHRvbGVyYW50IG1vZGUgY2F1c2VkIGJ5IHVua25vd24gYXQtcnVsZSB3aXRoIHVuY2xvc2VkIGJsb2NrIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkIGhhbmRsaW5nIG9mIHNlbWljb2xvbnM6XG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiSGFuZ2luZyBzZW1pY29sb24gaW5zaWRlIGRlY2xhcmF0aW9uIGJsb2NrcyByYWlzZSBhbiBlcnJvciBvciB0dXJucyBpbnRvIGEgIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJhdyIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIG5vZGUgaW4gdG9sZXJhbnQgbW9kZSBpbnN0ZWFkIG9mIGJlaW5nIGlnbm9yZWQiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZW1pY29sb24gb3V0c2lkZSBvZiBkZWNsYXJhdGlvbiBibG9ja3Mgb3BlbnMgYSAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSdWxlIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgbm9kZSBhcyBwYXJ0IG9mIHNlbGVjdG9yIGluc3RlYWQgb2YgYmVpbmcgaWdub3JlZCIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWxpZ25lZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInBhcnNlQXRydWxlUHJlbHVkZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYmVoYXZpb3VyIHRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VSdWxlUHJlbHVkZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmF3IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgbm9kZSB3cmFwaW5nIGludG8gIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXRydWxlUHJlbHVkZSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHdoZW4gIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VBdHJ1bGVQcmVsdWRlIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgZGlzYWJsZWQiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJSZW1vdmVkIGVycm9yIGVtaXR0aW5nIHdoZW4gYXQtcnVsZSBoYXMgYSBjdXN0b20gcHJlbHVkZSBjdXN0b21lciBidXQgbm8gcHJlbHVkZSBpcyBmb3VuZCAoaXQgc2hvdWxkIGJlIHZhbGlkYXRlZCBieSBhIGxleGVyIGxhdGVyKSIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkdlbmVyYXRvclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkZpeGVkIHBlcmZvcm1hbmNlIGlzc3VlIHdpdGggIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0cmFuc2xhdGVXaXRoU291cmNlTWFwKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIsIGZsYXR0ZW5pbmcgdGhlIHN0cmluZyAoYmVjYXVzZSBvZiBtaXhpbmcgYnVpbGRpbmcgc3RyaW5nIGFuZCBpbmRleGluZyBpbnRvIGl0KSB0dXJuZWQgaXQgaW50byBhIHF1YWRyYXRpYyBhbGdvcml0aG0gKGFwcHJveGltYXRlIG51bWJlcnMgY2FuIGJlIGZvdW5kIGluICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbGFobWF0aXkvZWEyNWQwZTYyM2Q4OGNhOTg0ODM4NGI1NzA3ZDUyZDkiLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoInRoZSBxdWl6IGNyZWF0ZWQgYnkgdGhpcyBjYXNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkIHN1cHBvcnQgZm9yIGEgc2luZ2xlIHNvbGlkdXMgaGFjayBmb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByb3BlcnR5KCkiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWlub3IgZml4ZXMgZm9yIGN1c3RvbSBlcnJvcnMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMC1hbHBoYTI0LXNlcHRlbWJlci0xNC0yMDE3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEyNC1zZXB0ZW1iZXItMTQtMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhMjQgKFNlcHRlbWJlciAxNCwgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbXByb3ZlZCBDU1NUcmVlIHRvIGJlIHN0YWJsZSBmb3Igc3RhbmRhcnQgYnVpbGQtaW4gb2JqZWN0cyBleHRlbnNpb24gKCM1OCkiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJQYXJzZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW5hbWVkIHJ1bGUncyAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlbGVjdG9yIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByZWx1ZGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLiBUaGUgcmVhc29uczogIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI3F1YWxpZmllZC1ydWxlIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJzcGVjIG5hbWVzIHRoaXMgcGFydCBzbyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIsIGFuZCB0aGlzIGJyYW5jaCBjYW4gY29udGFpbiBub3Qgb25seSBhIHNlbGVjdG9yICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNlbGVjdG9yTGlzdCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIGJ1dCBhbHNvIGEgcmF3IHBheWxvYWQgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmF3IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIikuIFdoYXQncyBjaGFuZ2VkOlxuIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlJlbmFtZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUnVsZS5zZWxlY3RvciIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJ1bGUucHJlbHVkZSIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiUmVuYW1lZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwYXJzZVNlbGVjdG9yIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgcGFyc2VyIG9wdGlvbiB0byAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwYXJzZVJ1bGVQcmVsdWRlIildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZW1vdmVkIG9wdGlvbiBmb3Igc2VsZWN0b3IgcGFyc2UgaW4gIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2VsZWN0b3JMaXN0IildKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkxleGVyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJGaXhlZCB1bmRlZmluZWQgcG9zaXRpb25zIGluIGEgZXJyb3Igd2hlbiBtYXRjaCBhIHN5bnRheCB0byBlbXB0eSBvciB3aGl0ZSBzcGFjZSBvbmx5IHZhbHVlIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJJbXByb3ZlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI2NoZWNrU3RydWN0dXJlKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJSZXR1cm4gYSB3YXJuaW5nIGFzIGFuIG9iamVjdCB3aXRoIG5vZGUgcmVmZXJlbmNlIGFuZCBtZXNzYWdlIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIk5vIGV4Y2VwdGlvbiBvbiB1bmtub3duIG5vZGUgdHlwZSwgcmV0dXJuIGEgd2FybmluZyBpbnN0ZWFkIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMC1hbHBoYTIzLXNlcHRlbWJlci0xMC0yMDE3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGEyMy1zZXB0ZW1iZXItMTAtMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhMjMgKFNlcHRlbWJlciAxMCwgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUb2tlbml6ZXIjZ2V0UmF3TGVuZ3RoKCkiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiJ3MgZmFsc2UgcG9zaXRpdmUgYmFsYW5jZSBtYXRjaCB0byB0aGUgZW5kIG9mIGlucHV0IGluIHNvbWUgY2FzZXMgKCM1NikiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUmVuYW1lIHdhbGtlcidzIGVudHJ5IHBvaW50IG1ldGhvZHMgdG8gYmUgdGhlIHNhbWUgYXMgQ1NTVHJlZSBleHBvc2VkIG1ldGhvZHMgKGkuZS4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2FsaygpIildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2Fsa1VwKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgZXRjKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW5hbWUgYXQtcnVsZSdzICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJleHByZXNzaW9uIildKSwKICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcmVsdWRlIildKSwKICAgICAgICAgIF92bS5fdigiIChzaW5jZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2F0LXJ1bGUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJzcGVjIG5hbWVzIGl0IHNvIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIilcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBdHJ1bGVFeHByZXNzaW9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUg4oaSICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXRydWxlUHJlbHVkZSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBdHJ1bGUuZXhwcmVzc2lvbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZmllbGQg4oaSICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXRydWxlLnByZWx1ZGUiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VBdHJ1bGVFeHByZXNzaW9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBwYXJzZXIncyBvcHRpb24g4oaSICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VBdHJ1bGVQcmVsdWRlIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImF0cnVsZUV4cHJlc3Npb24iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHBhcnNlIGNvbnRleHQg4oaSICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYXRydWxlUHJlbHVkZSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhdHJ1bGVFeHByZXNzaW9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB3YWxrIGNvbnRleHQgcmVmZXJlbmNlIOKGkiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImF0cnVsZVByZWx1ZGUiKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMC1hbHBoYTIyLXNlcHRlbWJlci04LTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYTIyLXNlcHRlbWJlci04LTIwMTciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYTIyIChTZXB0ZW1iZXIgOCwgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlBhcnNlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkZpeGVkIGV4Y2VwdGlvbiBvbiBwYXJzaW5nIG9mIHVuY2xvc2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigie30tYmxvY2siKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGluIHRvbGVyYW50IG1vZGUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkIHRvbGVyYW50IG1vZGUgc3VwcG9ydCBmb3IgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJEZWNsYXJhdGlvbkxpc3QiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJBZGRlZCBzdGFuZGFsb25lIGVudHJ5IHBvaW50LCBpLmUuIGRlZmF1bHQgcGFyc2VyIGNhbiBiZSB1c2VkIHZpYSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVpcmUoJ2Nzcy10cmVlL2xpYi9wYXJzZXInKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCM0NykiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkdlbmVyYXRvclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgZ2VuZXJhdG9yIHRvIHByb2R1Y2UgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIrbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgd2hlbiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFuUGx1c0IuYSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIrMSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCcgdG8gYmUgInJvdW5kLXRyaXAiIHdpdGggcGFyc2VyJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkFkZGVkIHN0YW5kYWxvbmUgZW50cnkgcG9pbnQsIGkuZS4gZGVmYXVsdCBnZW5lcmF0b3JzIGNhbiBiZSB1c2VkIHZpYSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVpcmUoJ2Nzcy10cmVlL2xpYi9nZW5lcmF0b3InKSIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJXYWxrZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkFkZGVkIHN0YW5kYWxvbmUgZW50cnkgcG9pbnQsIGkuZS4gZGVmYXVsdCB3YWxrZXJzIGNhbiBiZSB1c2VkIHZpYSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVpcmUoJ2Nzcy10cmVlL2xpYi93YWxrZXInKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCM0NykiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkxleGVyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkZWZhdWx0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBrZXl3b3JkIHRvIHRoZSBsaXN0IG9mIGludmFsaWQgdmFsdWVzIGZvciAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxjdXN0b20taWRlbnQ+IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoc2luY2UgaXQgcmV2ZXJzZWQgcGVyICIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXZhbHVlcy8jY3VzdG9tLWlkZW50cyIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigic3BlYyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDb252ZXJ0b3JzICgiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG9QbGFpbk9iamVjdCgpIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZnJvbVBsYWluT2JqZWN0KCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIpIG1vdmVkIHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsaWIvY29udmVydG9yIildKSwKICAgICAgICAgIF92bS5fdigiIChlbnRyeSBwb2ludCBpcyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVxdWlyZSgnY3NzLXRyZWUvbGliL2NvbnZlcnRvcicpIildKSwKICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhMjEtc2VwdGVtYmVyLTUtMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhMjEtc2VwdGVtYmVyLTUtMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhMjEgKFNlcHRlbWJlciA1LCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVG9rZW5pemVyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSYXciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRva2VuIHR5cGUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkltcHJvdmVkIHRva2VuaXphdGlvbiBvZiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInVybCgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB3aXRoIHJhdyBhcyB1cmwgdG8gYmUgbW9yZSBzcGVjIGNvbXBsaWVudCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUb2tlbml6ZXIjYmFsYW5jZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYXJyYXkgY29tcHV0YXRpb24gb24gdG9rZW4gbGF5b3V0IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRva2VuaXplciNnZXRSYXdMZW5ndGgoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gY29tcHV0ZSBhIHJhdyBsZW5ndGggd2l0aCByZXNwZWN0IG9mIGJsb2NrIGJhbGFuY2UiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVG9rZW5pemVyI2dldFRva2VuU3RhcnQob2Zmc2V0KSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kIHRvIGdldCB0b2tlbiBzdGFydCBvZmZzZXQgYnkgdG9rZW4gaW5kZXgiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaWR4IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiYWxhbmNlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBmaWVsZHMgdG8gZWFjaCB0b2tlbiBvZiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRva2VuaXplciNkdW1wKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCByZXN1bHQiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlBhcnNlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib25QYXJzZUVycm9yIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBvcHRpb24iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJld29ya2VkIG5vZGUgcGFyc2VycyB0aGF0IGNvbnN1bWUgYSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJhdyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbm9kZSB0byB1c2UgYSBuZXcgYXBwcm9hY2guIFNpbmNlIG5vdyBhICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmF3IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIGJ1aWxkcyBpbiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInBhcnNlciNSYXcoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZnVuY3Rpb24gb25seSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCBzZW1hbnRpYyBvZiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInBhcnNlciNSYXcoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiwgaXQgdGFrZXMgNSBwYXJhbWV0ZXJzIG5vdyAoaXQgbWlnaHQgdG8gYmUgY2hhbmdlZCBpbiBmdXR1cmUpIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VyI3RvbGVyYW50UGFyc2UoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiB0byBwYXNzIGEgc3RhcnQgdG9rZW4gaW5kZXggdG8gZmFsbGJhY2sgZnVuY3Rpb24gaW5zdGVhZCBvZiBzb3VyY2Ugb2Zmc2V0IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJGaXhlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0cnVsZUV4cHJlc3Npb24iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGNvbnN1bWluZyBpbiB0b2xlcmFudCBtb2RlIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBdHJ1bGUgaGFuZGxlciB0byBjb252ZXJ0IGFuIGVtcHR5ICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXRydWxlRXhwcmVzc2lvbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbm9kZSBpbnRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnVsbCIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXRydWxlRXhwcmVzc2lvbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBoYW5kbGVyIHRvIGFsd2F5cyByZXR1cm4gYSBub2RlIChiZWZvcmUgaXQgY291bGQgcmV0dXJuIGEgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJudWxsIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpbiBzb21lIGNhc2VzKSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTGV4ZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJGaXhlZCBjb21tYSBtYXRjaCBub2RlIGZvciAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG11bHRpcGxpZXIiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkIHJlZmVyZW5jZSBuYW1lIHRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU3ludGF4UmVmZXJlbmNlRXJyb3IiKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkFkZGl0aW9uYWwgZml4ZXMgb24gY3VzdG9tIGVycm9ycyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZWR1Y2VkIHBvc3NpYmxlIGNvcnJ1cHRpb24gb2YgYmFzZSBjb25maWcgYnkgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN5bnRheC5mb3JrKCkiKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhMjAtYXVndXN0LTI4LTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYTIwLWF1Z3VzdC0yOC0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGEyMCAoQXVndXN0IDI4LCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVG9rZW5pemVyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBdHJ1bGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRva2VuIHR5cGUgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGF0LXJ1bGUtdG9rZW4+IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBwZXIgc3BlYykiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRnVuY3Rpb24iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRva2VuIHR5cGUgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPGZ1bmN0aW9uLXRva2VuPiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgcGVyIHNwZWMpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlVybCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG9rZW4gdHlwZSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVwbGFjZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUb2tlbml6ZXIjZ2V0VHlwZXMoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kIHdpdGggIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUb2tlbml6ZXIjZHVtcCgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byBnZXQgYWxsIHRva2VucyBhcyBhbiBhcnJheSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVuYW1lZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRva2VuaXplci5UWVBFLldoaXRlc3BhY2UiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVG9rZW5pemVyLlRZUEUuV2hpdGVTcGFjZSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW5hbWVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVG9rZW5pemVyLmZpbmRXaGl0ZXNwYWNlRW5kKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVG9rZW5pemVyLmZpbmRXaGl0ZVNwYWNlRW5kKCkiKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUGFyc2VyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJBZGRlZCBpbml0aWFsIGltcGxlbWVudGF0aW9uIG9mIHRvbGxlcmFudCBtb2RlICh0dXJuIG9uIGJ5IHBhc3NpbmcgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0b2xlcmFudDogdHJ1ZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBvcHRpb24pLiBJbiB0aGlzIG1vZGUgcGFyc2UgZXJyb3JzIGFyZSBuZXZlciBvY2NvdXIgYW5kIGFueSBpbnZhbGlkIHBhcnQgb2YgQ1NTIHR1cm5zIGludG8gYSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJhdyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbm9kZS4gQ3VycmVudCBzYWZlIHBvaW50czogIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBdHJ1bGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0cnVsZUV4cHJlc3Npb24iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJ1bGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNlbGVjdG9yIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJEZWNsYXJhdGlvbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIi4gRmVhdHVyZSBpcyBleHBlcmltZW50YWwgYW5kIGZ1cnRoZXIgaW1wcm92ZW1lbnRzIGFyZSBwbGFubmVkLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0cnVsZS5leHByZXNzaW9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byBjb250YWluIGEgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBdHJ1bGVFeHByZXNzaW9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIG9yICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnVsbCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgb25seSAob3RoZXIgbm9kZSB0eXBlcyBpcyB3cmFwcGluZyBpbnRvIGEgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBdHJ1bGVFeHByZXNzaW9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVuYW1lZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0dHJpYnV0ZVNlbGVjdG9yLm9wZXJhdG9yIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0dHJpYnV0ZVNlbGVjdG9yLm1hdGNoZXIiKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiR2VuZXJhdG9yXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidHJhbnNsYXRlKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgbWV0aG9kIGlzIG5vdyBjYW4gdGFrZSBhIGZ1bmN0aW9uIGFzIHNlY29uZCBhcmd1bWVudCwgdGhhdCByZWNpZXZlcyBldmVyeSBnZW5lcmF0ZWQgY2h1bmsuIFdoZW4gbm8gZnVuY3Rpb24gaXMgcGFzc2VkLCBkZWZhdWx0IGhhbmRsZXIgaXMgdXNlZCwgaXQgY29uY2F0cyBhbGwgdGhlIGNodW5rcyBhbmQgbWV0aG9kIHJldHVybnMgYSBzdHJpbmcuIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJMZXhlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlVzZWQgIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9tZG4vZGF0YSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigibWRuL2RhdGEiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgcGFja2FnZSBhcyBzb3VyY2Ugb2YgbGV4ZXIncyBncmFtbWFyIGluc3RlYWQgb2YgbG9jYWwgZGljdGlvbmFyaWVzIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIngiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHVuaXQgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8cmVzb2x1dGlvbj4iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGdlbmVyaWMgdHlwZSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiSW1wcm92ZWQgbWF0Y2ggdHJlZTpcbiIpLAogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk9taXRlZCBHcm91cCAoc2VxdWVuY2VzKSBtYXRjaCBub2RlcyIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJPbWl0ZWQgZW1wdHkgbWF0Y2ggbm9kZXMgKGZvciB0ZXJtcyB3aXRoICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInplcm8gb3IgbW9yZSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIG11bHRpcGxpZXJzKSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFTVE5vZGUiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgdG8gY29udGFpbiBhIHJlZmVyZW5jZSB0byBBU1Qgbm9kZSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkZpeGVkIG5vZGUgZHVwbGljYXRpb24gKHVuY29tcGxldGVkIG1hdGNoIHdlcmUgYWRkZWQgdG8gdHJlZSkiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBZGRlZCBBU1Qgbm9kZSByZWZlcmVuY2UgaW4gbWF0Y2ggbm9kZXMiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgY29tbWEgbWF0Y2ggbm9kZSBieSAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIjIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgbXVsdGlwbGllciIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiR3JhbW1hclxuIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidHJhbnNsYXRlKCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBmdW5jdGlvbiB0byBnZXQgYSBoYW5kbGVyIGFzIHRoaXJkIGFyZ3VtZW50IChvcHRpb25hbCkuIFRoYXQgaGFuZGxlciByZWNpZXZlcyByZXN1bHQgb2Ygbm9kZSB0cmFzbGF0aW9uIGFuZCBjYW4gYmUgdXNlZCBmb3IgZGVjb3JhdGlvbiBwdXJwb3Nlcy4gU2VlICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9jc3N0cmVlL2RvY3MvYmxvYi8wNGM2NWFmNDQ0NzdiNWVhMDVmZWIzNzM0ODI4OTgxMjJiMmE0NTI4L2RvY3Mvc3ludGF4Lmh0bWwjTDYxOS1MNjI3IiwKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoImV4YW1wbGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU3ludGF4UGFyc2VFcnJvciIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHRvIGdyYW1tYXIgZXhwb3J0IikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiUmV3b3JrZWQgZ3JvdXAgYW5kIG11bHRpcGxpZXJzIHJlcHJlc2VudGF0aW9uIGluIHN5bnRheCB0cmVlOlxuIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZXBsYWNlZCAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2VxdWVuY2UiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZm9yICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJHcm91cCIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgKCIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTZXF1ZW5jZSIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgcmVtb3ZlZCkiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV4cGxpY2l0IildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGJvb2xlYW4gcHJvcGVydHkgZm9yICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJHcm91cCIpXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJPbmx5IGdyb3VwcyBjYW4gaGF2ZSBhIG11bHRpcGxpZXIgbm93IChvdGhlciBub2RlIHR5cGVzIGlzIHdyYXBwaW5nIGludG8gYSBzaW5nbGUgdGVybSBpbXBsaWNpdCBncm91cCB3aGVuIG11bHRpcGxpZXIgaXMgYXBwbGllZCkiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZW5hbWVkICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJub25FbXB0eSIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHcm91cCdzIHByb3BlcnR5IHRvICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkaXNhbGxvd0VtcHR5IildKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIkFkZGVkIG9wdGltaXNhdGlvbiBmb3Igc3ludGF4IHRyZWUgYnkgZHJvcHBpbmcgcmVkdW5kYW50IHJvb3QgIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiR3JvdXAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgd2hlbiBpdCBjb250YWlucyBhIHNpbmdsZSAiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiR3JvdXAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgdGVybSAocmV0dXJuIHRoaXMgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkdyb3VwIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGFzIGEgcmVzdWx0KSIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkIGxleGVyJ3MgbWF0Y2ggZnVuY3Rpb25hbGl0eVxuIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjbWF0Y2hQcm9wZXJ0eSgpIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI21hdGNoVHlwZSgpIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgdG8gcmV0dXJuIGFuIG9iamVjdCBpbnN0ZWFkIG9mIG1hdGNoIHRyZWUuIEEgbWF0Y2ggdHJlZSBzdG9yZXMgaW4gIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1hdGNoZWQiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBmaWVsZCB3aGVuIEFTVCBpcyBtYXRjaGVkIHRvIGdyYW1tYXIgc3VjY2Vzc2Z1bGx5LCBvdGhlcndpc2UgYW4gZXJyb3IgaW4gIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVycm9yIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgZmllbGQuIFRoZSByZXN1bHQgb2JqZWN0IGFsc28gaGFzIHNvbWUgbWV0aG9kcyB0byB0ZXN0IEFTVCBub2RlIGFnYWluc3QgYSBtYXRjaCB0cmVlOiAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ2V0VHJhY2UoKSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc1R5cGUoKSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpc1Byb3BlcnR5KCkiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaXNLZXl3b3JkKCkiKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxleGVyI21hdGNoRGVjbGFyYXRpb24oKSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIG1ldGhvZCIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjbGFzdE1hdGNoRXJyb3IiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiAoZXJyb3Igc3RvcmVzIGluIG1hdGNoIHJlc3VsdCBvYmplY3QgaW4gIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXJyb3IiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBmaWVsZCkiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQWRkZWQgaW5pdGlhbCBpbXBsZW1lbnRhdGlvbiBvZiBzZWFyY2ggZm9yIEFTVCBzZWdtZW50cyAobmV3IGxleGVyIG1ldGhvZHM6ICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjZmluZFZhbHVlU2VnbWVudHMoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGV4ZXIjZmluZERlY2xhcmF0aW9uVmFsdWVTZWdtZW50cygpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMZXhlciNmaW5kQWxsU2VnbWVudHMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiSW1wbGVtZW50ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTeW50YXhSZWZlcmVuY2VFcnJvciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZm9yIHVua25vd24gcHJvcGVydHkgYW5kIHR5cGUgcmVmZXJlbmNlcyIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUmVuYW1lZCBmaWVsZCBpbiByZXN1bHRpbmcgb2JqZWN0IG9mICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcm9wZXJ0eSgpIildKSwKICAgICAgICAgIF92bS5fdigiIGZ1bmN0aW9uOiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidmFyaWFibGUiKV0pLAogICAgICAgICAgX3ZtLl92KCIg4oaSICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjdXN0b20iKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCBpc3N1ZSB3aXRoIHJlYWRvbmx5IHByb3BlcnRpZXMgKGUuZy4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxpbmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb2x1bW4iKV0pLAogICAgICAgICAgX3ZtLl92KCIpIG9mICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJFcnJvciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgZXhjZXB0aW9uIG9uIGF0dGVtcHQgdG8gd3JpdGUgaW4gaU9TIFNhZmFyaSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhMTktYXByaWwtMjQtMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhMTktYXByaWwtMjQtMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhMTkgKEFwcmlsIDI0LCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRXh0ZW5kZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxpc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgY2xhc3Mgd2l0aCBuZXcgbWV0aG9kczpcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJMaXN0I3ByZXBlbmQoaXRlbSkiKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJMaXN0I3ByZXBlbmREYXRhKGRhdGEpIildKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigiTGlzdCNpbnNlcnREYXRhKGRhdGEpIildKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigiTGlzdCNpbnNlcnRMaXN0KGxpc3QpIildKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigiTGlzdCNyZXBsYWNlKGl0ZW0sIGl0ZW1Pckxpc3QpIildKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMC1hbHBoYTE4LWFwcmlsLTMtMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhMTgtYXByaWwtMy0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGExOCAoQXByaWwgMywgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhdHJ1bGUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgd2FsayBjb250ZXh0ICgjMzkpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgYSByZXN1bHQgb2YgZ2VuZXJhdGUgbWV0aG9kIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQW5QbHVzQiIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0dHJpYnV0ZVNlbGVjdG9yIildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRnVuY3Rpb24iKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJNZWRpYUZlYXR1cmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSYXRpbyIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vY3NzdHJlZS9jc3N0cmVlL2NvbW1pdC8xZTk1ODc3MTBlZmE4ZTkzMzhiY2YwYmM3OTRiNGI0NWYyODYyMzFkIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiMWU5NTg3NyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkIHR5cG8gaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxpc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgZXhjZXB0aW9uIG1lc3NhZ2VzIChAc3RyYXJzaXMsICM0MikiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkltcHJvdmVkIHRva2VuaXplciB0byBjb252ZXJ0IGFuIGlucHV0IHRvIGEgc3RyaW5nIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGExNy1tYXJjaC0xMy0yMDE3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGExNy1tYXJjaC0xMy0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGExNyAoTWFyY2ggMTMsIDIwMTcpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCBuZXcgY29uY2VwdCBvZiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3ludGF4IildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkIG1haW4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJleHBvcnRzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byBleHBvc2UgYSBkZWZhdWx0IHN5bnRheCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiRGVmaW5lZCBpbml0aWFsICIpLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAibGliL3N5bnRheC9kZWZhdWx0LmpzIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ1NTIHN5bnRheCIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNyZWF0ZVN5bnRheCgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IHN5bnRheCBmcm9tIHNjcmF0Y2giKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkltcGxlbWVudGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9yaygpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgc3ludGF4IGJhc2VkIG9uIGdpdmVuIHZpYSBleHRlbnNpb24iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlBhcnNlclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkltcGxlbWVudGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWVkaWFRdWVyeUxpc3QiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1lZGlhUXVlcnkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHBhcnNpbmcgY29udGV4dHMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkltcGxlbWVudGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ0RPIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDREMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG5vZGUgdHlwZXMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiSW1wbGVtZW50ZWQgYWRkaXRpb25hbCBkZWNsYXJhdGlvbiBwcm9wZXJ0eSBwcmVmaXggaGFja3MgKCIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiIyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiKyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBZGRlZCBzdXBwb3J0IGZvciBVVEYtMTZMRSBCT00iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgc3VwcG9ydCBmb3IgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAZm9udC1mYWNlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhdC1ydWxlIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNocm9tYSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byBsZWdhY3kgSUUgZmlsdGVyIGZ1bmN0aW9ucyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiSW1wcm92ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJIZXhDb2xvciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gY29uc3VtZSBoZXggb25seSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiSW1wcm92ZWQgc3VwcG9ydCBmb3IgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJcXDAiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlxcOSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaGFja3MgKCMyKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVsYXhlZCBudW1iZXIgY2hlY2sgZm9yICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmF0aW8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRlcm1zXG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWxsb3dlZCBmcmFjdGFsIHZhbHVlcyBhcyBhICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJhdGlvIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgdGVybSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkRpc2FsbG93ZWQgemVybyBudW1iZXIgYXMgYSAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSYXRpbyIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHRlcm0iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgaW1wb3J0YW50IGNsYXVzZSBwYXJzaW5nXG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiQWxsb3dlZCBhbnkgaWRlbnRpZmllciBmb3IgaW1wb3J0YW50ICh0byBzdXBwb3J0IGhhY2tzIGxpa2UgIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiFpZSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlN0b3JlICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRydWUiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBmb3IgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaW1wb3J0YW50IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZmllbGQgaW4gY2FzZSBpZGVudGlmaWVyIGVxdWFscyB0byAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpbXBvcnRhbnQiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgc3RyaW5nIG90aGVyd2lzZSIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJGaXhlZCBwYXJzZSBlcnJvciBmb3JtYXR0ZWQgbWVzc2FnZSByZW5kZXJpbmcgdG8gdGFrZSBpbnRvIGFjY291bnQgdGFicyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCBleHBvc2luZyBvZiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBhcnNlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgY2xhc3MiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZWFkU2VsZWN0b3JTZXF1ZW5jZSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZWFkU2VxdWVuY2VGYWxsYmFjaygpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZWFkU2VsZWN0b3JTZXF1ZW5jZUZhbGxiYWNrIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2RzIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJVc2VkIHNpbmdsZSB1bml2ZXJzYWwgc2VxdWVuY2UgY29uc3VtZXIgZm9yICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXRydWxlRXhwcmVzc2lvbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2VsZWN0b3IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlZhbHVlIildKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkdlbmVyYXRvclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiUmV3b3JrZWQgZ2VuZXJhdG9yIHRvIHVzZSBhdXRvLWdlbmVyYXRlZCBmdW5jdGlvbnMgYmFzZWQgb24gc3ludGF4IGRlZmluaXRpb24gKGFkZGl0aW9uYWwgd29yayB0byBiZSBkb25lIGluIG5leHQgcmVsZWFzZXMpIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRyYW5zbGF0ZU1hcmt1cChhc3QsIGJlZm9yZSwgYWZ0ZXIpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QgZm9yIGNvbXBsZXggY2FzZXMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJld29ya2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidHJhbnNsYXRlV2l0aFNvdXJjZU1hcCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gYmUgbW9yZSBmbGV4aWJsZSAoYmFzZWQgb24gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0cmFuc2xhdGVNYXJrdXAiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCBhZGRpdGlvbmFsIHdvcmsgdG8gYmUgZG9uZSBpbiBuZXh0IHJlbGVhc2VzKSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiV2Fsa2VyXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJSZXdvcmtlZCB3YWxrZXIgdG8gdXNlIGF1dG8tZ2VuZXJhdGVkIGZ1bmN0aW9uIGJhc2VkIG9uIHN5bnRheCBkZWZpbml0aW9uIChhZGRpdGlvbmFsIHdvcmsgdG8gYmUgZG9uZSBpbiBuZXh0IHJlbGVhc2VzKSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTGV4ZXJcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlByZXBhcmVkIGZvciBiZXR0ZXIgZXh0ZW5zaWJpbGl0eSAoYWRkaXRpb25hbCB3b3JrIHRvIGJlIGRvbmUgaW4gbmV4dCByZWxlYXNlcykiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkltcGxlbWVudGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY2hlY2tTdHJ1Y3R1cmUoYXN0KSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBtZXRob2QgdG8gY2hlY2sgQVNUIHN0cnVjdHVyZSBiYXNlZCBvbiBzeW50YXggZGVmaW5pdGlvbiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiVXBkYXRlIHN5bnRheCBkaWN0aW9uYXJpZXMgdG8gbGF0ZXN0ICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWRuL2RhdGEiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBZGQgbWlzc2luZyAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8J29mZnNldC1wb3NpdGlvbic+IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgc3ludGF4IikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiRXh0ZW5kZWQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPHBvc2l0aW9uPiIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHByb3BlcnR5IHdpdGggIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLXdlYmtpdC1zdGlja3kiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiAoQHNlcmdlam11ZWxsZXIsICMzNykiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkltcHJvdmVkIG1pc21hdGNoIGVycm9yIHBvc2l0aW9uIildKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkltcGxlbWVudGVkIHNjcmlwdCAoIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdlbjpzeW50YXgiKV0pLAogICAgICAgICAgX3ZtLl92KCIpIHRvIGdlbmVyYXRlIEFTVCBmb3JtYXQgcmVmZXJlbmNlIHBhZ2UgKCIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkb2NzL2FzdC5tZCIpXSksCiAgICAgICAgICBfdm0uX3YoIikgdXNpbmcgc3ludGF4IGRlZmluaXRpb24iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMC1hbHBoYTE2LWZlYnJ1YXJ5LTEyLTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYTE2LWZlYnJ1YXJ5LTEyLTIwMTciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYTE2IChGZWJydWFyeSAxMiwgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkV4cG9zZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBhcnNlciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBjbGFzcyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RhcnRPZmZzZXQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgb3B0aW9uIHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUb2tlbml6ZXIiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKGNvbnN0cnVjdG9yIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2V0U291cmNlKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbWV0aG9kKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCBmYWxsYmFjayBmdW5jdGlvbnMgZm9yIGRlZmF1bHQgKCIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZWFkU2VxdWVuY2VGYWxsYmFjayIpXSksCiAgICAgICAgICBfdm0uX3YoIikgYW5kIHNlbGVjdG9yICgiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVhZFNlbGVjdG9yU2VxdWVuY2VGYWxsYmFjayIpXSksCiAgICAgICAgICBfdm0uX3YoIikgc2VxdWVuY2UgcmVhZGVycyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCBlZGdlIGNhc2VzIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQW5QbHVzQiIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkIHdyb25nIHdoaXRlc3BhY2UgaWdub3JpbmcgaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNlbGVjdG9yIildKSwKICAgICAgICAgIF92bS5fdigiIGNvbnN1bWVyIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGExNS1mZWJydWFyeS04LTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYTE1LWZlYnJ1YXJ5LTgtMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhMTUgKEZlYnJ1YXJ5IDgsIDIwMTcpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCBicm9rZW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImF0cnVsZUV4cHJlc3Npb24iKV0pLAogICAgICAgICAgX3ZtLl92KCIgY29udGV4dCIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCB2ZW5kb3IgcHJlZml4IGRldGVjdGlvbiBpbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigia2V5d29yZCgpIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicHJvcGVydHkoKSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcm9wZXJ0eSgpIildKSwKICAgICAgICAgIF92bS5fdigiIHRvIG5vdCBsb3dlcmNhc2UgY3VzdG9tIHByb3BlcnR5IG5hbWVzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2YXJpYWJsZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBib29sZWFuIGZsYWcgaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByb3BlcnR5KCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcmVzdWx0IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbmFtZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNjYW5uZXIiKV0pLAogICAgICAgICAgX3ZtLl92KCIgaW50byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG9rZW5pemVyIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUmFuYW1lZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3ludGF4IildKSwKICAgICAgICAgIF92bS5fdigiIGludG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxleGVyIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTW92ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImRvY3MvKi5odG1sIildKSwKICAgICAgICAgIF92bS5fdigiIGZpbGVzIHRvICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2Nzc3RyZWUvZG9jcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImNzc3RyZWUvZG9jcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgcmVwbyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZWxlbWVudCgpIildKSwKICAgICAgICAgIF92bS5fdigiIGZ1bmN0aW9uIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVmFsdWUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgY29udGV4dCAoIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi1tb3otZWxlbWVudCgpIildKSwKICAgICAgICAgIF92bS5fdigiIHN1cHBvcnRlZCBhcyB3ZWxsKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJNZXJnZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlVuaXZlcnNhbCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgaW50byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHlwZSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbmFtZWQgbm9kZSB0eXBlczpcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJJZCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLT4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJJZFNlbGVjdG9yIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNsYXNzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAtPiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNsYXNzU2VsZWN0b3IiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHlwZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLT4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUeXBlU2VsZWN0b3IiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXR0cmlidXRlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAtPiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0dHJpYnV0ZVNlbGVjdG9yIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBzZXVkb0NsYXNzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAtPiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBzZXVkb0NsYXNzU2VsZWN0b3IiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUHNldWRvRWxlbWVudCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLT4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQc2V1ZG9FbGVtZW50U2VsZWN0b3IiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSGFzaCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLT4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJIZXhDb2xvciIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTcGFjZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLT4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJXaGl0ZVNwYWNlIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFuK0IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIC0+ICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQW5QbHVzQiIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQcm9naWQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm9kZSB0eXBlIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbGF4ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk1lZGlhUXVlcnkiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGNvbnN1bWVyIHRvIG5vdCB2YWxpZGF0ZSBzeW50YXggb24gcGFyc2UgYW5kIHRvIGluY2x1ZGUgd2hpdGVzcGFjZXMgaW4gY2hpbGRyZW4gc2VxdWVuY2UgYXMgaXMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiV2hpdGVTcGFjZS52YWx1ZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwcm9wZXJ0eSB0byBzdG9yZSB3aGl0ZXNwYWNlIHNlcXVlbmNlIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbXBsZW1lbnRlZCBwYXJzZXIgb3B0aW9ucyB0byBzcGVjaWZ5IHdoYXQgc2hvdWxkIGJlIHBhcnNlZCBpbiBkZXRhaWxzICh3aGVuIG9wdGlvbiBpcyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmYWxzZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBzb21lIHBhcnQgb2YgQ1NTIHJlcHJlc2VudHMgYXMgYmFsYW5jZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJhdyIpXSksCiAgICAgICAgICBfdm0uX3YoIik6XG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VBdHJ1bGVFeHByZXNzaW9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiDigJMgdG8gcGFyc2UgYXQtcnVsZSBleHByZXNzaW9ucyAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0cnVlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBieSBkZWZhdWx0KSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VTZWxlY3RvciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIg4oCTIHRvIHBhcnNlIHJ1bGUncyBzZWxlY3RvciAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0cnVlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBieSBkZWZhdWx0KSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VWYWx1ZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLSB0byBwYXJzZSBkZWNsYXJhdGlvbidzIHZhbHVlICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRydWUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGJ5IGRlZmF1bHQpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwYXJzZUN1c3RvbVByb3BlcnR5IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiDigJMgdG8gcGFyc2UgdmFsdWUgYW5kIGZhbGxiYWNrIG9mIGN1c3RvbSBwcm9wZXJ0eSAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmYWxzZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYnkgZGVmYXVsdCkiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJDaGFuZ2VkIHRva2VuaXphdGlvbiB0byBzdGljayBsZWFkaW5nIGh5cGhlbiBtaW51cyB0byBpZGVudGlmaWVyIHRva2VuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCBzZWxlY3RvciBwYXJzaW5nOlxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkRvbid0IGNvbnZlcnQgc3BhY2VzIGludG8gZGVzY2VuZGFudCBjb21iaW5hdG9yIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkRvbid0IHZhbGlkYXRlIHNlbGVjdG9yIHN0cnVjdHVyZSBvbiBwYXJzaW5nIChzZWxlY3RvcnMgbWF5IGJlIGNoZWNrZWQgYnkgbGV4ZXIgbGF0ZXIpIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbml0aWFsIHJlZmFjdG9yaW5nIG9mICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2Nzc3RyZWUvY3NzdHJlZS9ibG9iL21hc3Rlci9kb2NzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiZG9jcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFyaW91cyBpbXByb3ZlbWVudHMgYW5kIGZpeGVzIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGExNC1mZWJydWFyeS0zLTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYTE0LWZlYnJ1YXJ5LTMtMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhMTQgKEZlYnJ1YXJ5IDMsIDIwMTcpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRGVjbGFyYXRpb25MaXN0IildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTWVkaWFRdWVyeUxpc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJNZWRpYVF1ZXJ5IildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTWVkaWFGZWF0dXJlIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmF0aW8iKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm9kZSB0eXBlcyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGVjbGFyYXRpb25MaXN0IildKSwKICAgICAgICAgIF92bS5fdigiIGNvbnRleHQgKHVzZWZ1bCB0byBwYXJzZSBIVE1MICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdHlsZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhdHRyaWJ1dGUgY29udGVudCkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW1wbGVtZW50ZWQgY3VzdG9tIGNvbnN1bWVycyBmb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBpbXBvcnQiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAbWVkaWEiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAcGFnZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBzdXBwb3J0cyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhdC1ydWxlcyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYXRydWxlIildKSwKICAgICAgICAgIF92bS5fdigiIG9wdGlvbiBmb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInBhcnNlKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgY29uZmlnLCBpcyB1c2VkIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYXRydWxlRXhwZXNzaW9uIildKSwKICAgICAgICAgIF92bS5fdigiIGNvbnRleHQgdG8gc3BlY2lmeSBjdXN0b20gY29uc3VtZXIgZm9yIGF0LXJ1bGUgaWYgYW55IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTY2FubmVyI3NraXBXUygpIildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2Nhbm5lciNlYXROb25XUygpIildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2Nhbm5lciNjb25zdW1lKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTY2FubmVyI2NvbnN1bWVOb25XUygpIildKSwKICAgICAgICAgIF92bS5fdigiIGhlbHBlciBtZXRob2RzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBZGRlZCBjdXN0b20gY29uc3VtZXJzIGZvciBrbm93biBmdW5jdGlvbmFsLXBzZXVkb3MsIGNvbnN1bWUgdW5rbm93biBmdW5jdGlvbmFsLXBzZXVkbyBjb250ZW50IGFzIGJhbGFuY2VkICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJhdyIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFsbG93ZWQgYW55ICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQc2V1ZG9FbGVtZW50IildKSwKICAgICAgICAgIF92bS5fdigiIHRvIGJlIGEgZnVuY3Rpb25hbC1wc2V1ZG8gKCMzMykiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkltcHJvdmVkIHdhbGtlciBpbXBsZW1lbnRhdGlvbnMgdG8gcmVkdWNlIEdDIHRocmFzaGluZyBieSByZXVzaW5nIGN1cnNvcnMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBdHJ1bGUuYmxvY2siKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gY29udGFpbiBhICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJCbG9jayIpXSksCiAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgb25seSBpZiBhbnkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQmxvY2subG9jIildKSwKICAgICAgICAgIF92bS5fdigiIHBvc2l0aW9ucyB0byBpbmNsdWRlIGN1cmx5IGJyYWNrZXRzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0cnVsZS5leHByZXNzaW9uIildKSwKICAgICAgICAgIF92bS5fdigiIHRvIHN0b3JlIGEgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51bGwiKV0pLAogICAgICAgICAgX3ZtLl92KCIgaWYgbm8gZXhwcmVzc2lvbiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkIHBhcnNlciB0byB1c2UgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlN0eWxlU2hlZXQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm9kZSB0eXBlIG9ubHkgZm9yIHRvcCBsZXZlbCBub2RlICh3aGVuIGNvbnRleHQgaXMgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN0eWxlc2hlZXQiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIHRoYXQncyBieSBkZWZhdWx0KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQYXJlbnRoZXNlcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJyYWNrZXRzIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRnVuY3Rpb24iKV0pLAogICAgICAgICAgX3ZtLl92KCIgY29uc3VtZXJzIHRvIHVzZSBwYXNzZWQgc2VxdWVuY2UgcmVhZGVyIGluc3RlYWQgb2YgaXRzIG93biIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJWYWx1ZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkF0cnVsZUV4cHJlc3Npb24iKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGNvbnN1bWVycyB0byB1c2UgY29tbW9uIHNlcXVlbmNlIHJlYWRlciAodGhhdCByZWFkZXIgd2FzIHVzZWQgYnkgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVmFsdWUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgY29uc3VtZXIgYmVmb3JlKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ2hhbmdlZCBkZWZhdWx0IHNlcXVlbmNlIHJlYWRlciB0byBleGNsdWRlIHN0b3JhZ2Ugb2Ygc3BhY2VzIGFyb3VuZCAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDb21tYSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgcHJvY2Vzc2luZyBvZiBjdXN0b20gcHJvcGVydGllczpcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDb25zdW1lIGRlY2xhcmF0aW9uIHZhbHVlIGFzIGJhbGFuY2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmF3IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNvbnN1bWUgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2YXIoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZmFsbGJhY2sgdmFsdWUgYXMgYmFsYW5jZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSYXciKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiVmFsaWRhdGUgZmlyc3QgYXJndW1lbnQgb2YgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2YXIoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgc3RhcnRzIHdpdGggZG91YmxlIGRhc2giKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQ3VzdG9tIHByb3BlcnR5J3MgdmFsdWUgYW5kIGZhbGxiYWNrIGluY2x1ZGVzIHNwYWNlcyBhcm91bmQiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJOdGgiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gaGF2ZSBhICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsb2MiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcHJvcGVydHkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNlbGVjdG9yTGlzdC5sb2MiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTZWxlY3Rvci5sb2MiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcG9zaXRpb25zIHRvIGV4Y2x1ZGUgc3BhY2VzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkIGlzc3VlIEJyb3dzZXJpZnkgYnVpbGQgZmFpbCB3aXRoICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkZWZhdWx0LXN5bnRheC5qc29uIildKSwKICAgICAgICAgIF92bS5fdigiIGlzIG5vdCBmb3VuZCBlcnJvciAoIzMyLCBAcGhpbHNjaGF0eikiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRGlzYWxsb3dlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHlwZSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgc2VsZWN0b3Igc3RhcnRpbmcgd2l0aCBkYXNoIChwYXJzZXIgdGhyb3dzIGFuIGVycm9yIGluIHRoaXMgY2FzZSBub3cpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRGlzYWxsb3dlZCBlbXB0eSBzZWxlY3RvcnMgZm9yICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSdWxlIildKSwKICAgICAgICAgIF92bS5fdigiIChub3Qgc3VyZSBpZiBpdCdzIGNvcnJlY3QgYnV0IGxvb2tzIHJlYXNvbmFibGUpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbW92ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIj4+IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBjb21iaW5hdG9yIHN1cHBvcnQgdW50aWwgYW55IGJyb3dzZXIgc3VwcG9ydCAobm8gc2lnbmFscyBhYm91dCB0aGF0IHlldCkiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQc2V1ZG9FbGVtZW50LmxlZ2FjeSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwcm9wZXJ0eSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW1vdmVkIHNwZWNpYWwgY2FzZSBmb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjpiZWZvcmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI6YWZ0ZXIiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI6Zmlyc3QtbGV0dGVyIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOmZpcnN0LWxpbmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gcmVwcmVzZW50IHRoZW0gYXMgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBzZXVkb0VsZW1lbnQiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIG5vdyB0aG9zZSBwc2V1ZG9zIGFyZSByZXByZXNlbnRlZCBhcyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUHNldWRvQ2xhc3MiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm9kZXMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUmVtb3ZlZCBkZXByZWNhdGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTeW50YXgjbWF0Y2goKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBtZXRob2QiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBhcnNlciB3YXMgc3BsaXR0ZWQgaW50byBtb2R1bGVzIGFuZCByZWxhdGVkIGNoYW5nZXMsIG9uZSBzdGVwIGNsb3NlciB0byBhbiBleHRlbnNpYmxlIHBhcnNlciIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJWYXJpb3VzIGZpeGVzIGFuZCBpbXByb3ZlbWVudHMsIGFsbCBjaGFuZ2VzIGhhdmUgbmVnbGlnaWJsZSBpbXBhY3Qgb24gcGVyZm9ybWFuY2UiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhMTMtamFudWFyeS0xOS0yMDE3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGExMy1qYW51YXJ5LTE5LTIwMTciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYTEzIChKYW51YXJ5IDE5LCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCBsb2NhdGlvbiBzdG9yaW5nIGluICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTeW50YXhNYXRjaEVycm9yIildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkIHByb3BlcnR5IHRvIHN0b3JlIG1pc21hdGNoIG9mZnNldCB0byAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1pc21hdGNoT2Zmc2V0IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvZmZzZXQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHByb3BlcnR5IHRvIHN0b3JlIGJhZCBub2RlIG9mZnNldCBpbiBzb3VyY2UgQ1NTIGlmIGFueSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsb2MiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHByb3BlcnR5IHRoYXQgc3RvcmVzIGJhZCBub2RlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibG9jIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpZiBhbnkiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGExMi1qYW51YXJ5LTE5LTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYTEyLWphbnVhcnktMTktMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhMTIgKEphbnVhcnkgMTksIDIwMTcpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU3ludGF4I21hdGNoUHJvcGVydHkoKSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgbWV0aG9kIHRvIGFsd2F5cyByZXR1cm4gYSBwb3NpdGl2ZSByZXN1bHQgZm9yIGN1c3RvbSBwcm9wZXJ0aWVzIHNpbmNlIHN5bnRheCBpcyBuZXZlciBkZWZpbmVkIGZvciB0aGVtICgjMzEpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW1wbGVtZW50ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZyb21QbGFpbk9iamVjdCgpIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG9QbGFpbk9iamVjdCgpIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0byBjb252ZXJ0IHBsYWluIG9iamVjdCB0byBBU1Qgb3IgQVNUIHRvIHBsYWluIG9iamVjdCAoY3VycmVudGx5IGNvbnZlcnRzICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxpc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgPC0+ICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBcnJheSIpXSksCiAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTAtMC1hbHBoYTExLWphbnVhcnktMTgtMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhMTEtamFudWFyeS0xOC0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGExMSAoSmFudWFyeSAxOCwgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkIHN1cHBvcnQgZm9yICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI6bWF0Y2hlcyg8c2VsZWN0b3ItbGlzdD4pIildKSwKICAgICAgICAgIF92bS5fdigiICgjMjgpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkIHN1cHBvcnQgZm9yICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI6aGFzKDxyZWxhdGl2ZS1zZWxlY3Rvci1saXN0PikiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCBzdXBwb3J0IGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOjpzbG90dGVkKDxjb21wb3VuZC1zZWxlY3Rvcj4pIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW1wbGVtZW50ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJyYWNrZXRzIildKSwKICAgICAgICAgIF92bS5fdigiIG5vZGUgdHlwZSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSW1wbGVtZW50ZWQgYmFzaWMgc3VwcG9ydCBmb3IgYXQtcnVsZSBpbnNpZGUgcnVsZSBibG9jayAoIzI0KSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbmFtZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNlbGVjdG9yIildKSwKICAgICAgICAgIF92bS5fdigiIG5vZGUgdHlwZSB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2VsZWN0b3JMaXN0IildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUmVuYW1lZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2ltcGxlU2VsZWN0b3IiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm9kZSB0eXBlIHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTZWxlY3RvciIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbmFtZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlVuaWNvZGVSYW5nZS5uYW1lIildKSwKICAgICAgICAgIF92bS5fdigiIHByb3BlcnR5IHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJVbmljb2RlUmFuZ2UudmFsdWUiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZXBsYWNlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTmVnYXRpb24iKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm9kZSB0eXBlIGZvciByZWd1bGFyICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQc2V1ZG9DbGFzcyIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJVbmlmaWVkIG5hbWUgb2Ygbm9kZSBwcm9wZXJ0eSB0byBzdG9yZSBuZXN0ZWQgbm9kZXMsIGl0IGFsd2F5cyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjaGlsZHJlbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBub3c6XG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU3R5bGVTaGVldC5ydWxlcyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLT4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTdHlsZVNoZWV0LmNoaWxkcmVuIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNlbGVjdG9yTGlzdC5zZWxlY3RvcnMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIC0+ICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2VsZWN0b3JMaXN0LmNoaWxkcmVuIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJsb2NrLmRlY2xhcmF0aW9ucyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLT4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJCbG9jay5jaGlsZHJlbiIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIqLnNlcXVlbmNlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAtPiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiouY2hpbGRyZW4iKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgZWRnZSBjYXNlcyBpbiBwYXJzaW5nICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJIZXgiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJVbmljb2RlUmFuZ2UiKV0pLAogICAgICAgICAgX3ZtLl92KCIgd2hlbiBudW1iZXIgbm90IGFuIGludGVnZXIiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnRoLSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwc2V1ZG9zIHBhcnNpbmdcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFuK0IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG5vZGUgdHlwZSB0byByZXByZXNlbnQgZXhwcmVzc2lvbnMgbGlrZSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjJuICsgMSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItM24iKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiRml4ZWQgZWRnZSBjYXNlcyB3aGVuICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpcyBub3QgYW4gaW50ZWdlciIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9kZCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXZlbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIga2V5d29yZHMgcHJvY2Vzc2luZywga2V5d29yZHMgYXJlIHN0b3JpbmcgYXMgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJJZGVudGlmaWVyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgbm93IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTnRoIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgZm9ybWF0IHRvIHN0b3JlIGEgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJudGgiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLXF1ZXJ5IGFuZCBhbiBvcHRpb25hbCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlbGVjdG9yIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkltcGxlbWVudGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib2YiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGNsYXVzZSBmb3IgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJudGgtIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBwc2V1ZG9zIChhLmUuICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOm50aC1jaGlsZCgybiArIDEgb2YgbGksIGltZykiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiTGltaXRlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk50aCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgcGFyc2luZyBydWxlcyB0byAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjpudGgtY2hpbGQoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOm50aC1sYXN0LWNoaWxkKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjpudGgtb2YtdHlwZSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI6bnRoLWxhc3Qtb2YtdHlwZSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBwc2V1ZG9zIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkIHRoZSB3YXkgdG8gc3RvcmUgbG9jYXRpb25zXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmVuYW1lZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImluZm8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG5vZGUgcHJvcGVydHkgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsb2MiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCBmb3JtYXQgb2YgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsb2MiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRvIHN0b3JlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RhcnQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVuZCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgcG9zaXRpb25zIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhMTAtamFudWFyeS0xMS0yMDE3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGExMC1qYW51YXJ5LTExLTIwMTciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYTEwIChKYW51YXJ5IDExLCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUmV3b3JrZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNjYW5uZXIiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gYmUgYSBzaW5nbGUgcG9pbnQgdG8gaXRzIGZ1bmN0aW9uYWxpdHkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRXhwb3NlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2Nhbm5lciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBjbGFzcyB0byBiZSB1c2VmdWwgZm9yIGV4dGVybmFsIHByb2plY3RzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndhbGsoKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmdW5jdGlvbiBiZWhhdmlvdXIgdG8gdHJhdmVyc2UgQVNUIG5vZGVzIGluIG5hdHVyYWwgb3JkZXIiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW1wbGVtZW50ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndhbGtVcCgpIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBmdW5jdGlvbiB0byB0cmF2ZXJzZSBBU1Qgbm9kZXMgZnJvbSBkZWVwZXN0IHRvIHBhcmVudCAoYmVoYXZlcyBhcyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3YWxrKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYmVmb3JlKSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhOS1kZWNlbWJlci0yMS0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGE5LWRlY2VtYmVyLTIxLTIwMTYiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjAuMC1hbHBoYTkgKERlY2VtYmVyIDIxLCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxhbmdsZT4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgZ2VuZXJpYyBhY2NvcmRpbmcgdG8gc3BlY3MgdGhhdCBhbGxvdyBhICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI8bnVtYmVyPiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBlcXVhbHMgdG8gemVybyB0byBiZSB1c2VkIGFzIHZhbGlkIHZhbHVlICgjMzApIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGE4LW5vdmVtYmVyLTExLTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTAtMC1hbHBoYTgtbm92ZW1iZXItMTEtMjAxNiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhOCAoTm92ZW1iZXIgMTEsIDIwMTYpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU2Nhbm5lciNza2lwKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgaXNzdWUgbWV0aG9kIHdoZW4gY3Vyc29yIGlzIG1vdmluZyB0byB0aGUgZW5kIG9mIHNvdXJjZSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJTaW1wbGlmaWVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQcm9naWQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm9kZSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ2hhbmdlZCBiZWhhdmlvdXIgZm9yIGJhZCBzZWxlY3RvciBwcm9jZXNzaW5nLCBub3cgcGFyc2luZyBmYWlscyBpbnN0ZWFkIG9mIHNlbGVjdG9yIGlnbm9yaW5nIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxpZC1zZWxlY3Rvcj4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgZ2VuZXJpYyBzeW50YXgiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInEiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdW5pdCBmb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxsZW5ndGg+IildKSwKICAgICAgICAgIF92bS5fdigiIGdlbmVyaWMgc3ludGF4IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJSZWZhY3RvcmVkIHN5bnRheCBwYXJzZXIgKHBlcmZvcm1hbmNlKSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUmVkdWNlZCBzdGFydHVwIHRpbWUgYnkgaW1wbGVtZW50aW5nIGxhenkgc3ludGF4IHBhcnNpbmcgKGRlZmF1bHQgc3ludGF4IGRvZXNuJ3QgcGFyc2Ugb24gbW9kdWxlIGxvYWQpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVXBkYXRlZCBzeW50YXggZGljdGlvbmFyaWVzIGFuZCB1c2VkICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL21kbi9kYXRhIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJjb2RlIiwgW192bS5fdigibWRuL2RhdGEiKV0pLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgaW5zdGVhZCBvZiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVGVtcGxhdGU6Q1NTRGF0YSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbmFtZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN5bnRheC5zdHJpbmdpZnkoKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBtZXRob2QgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN5bnRheC50cmFuc2xhdGUoKSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTaW1wbGlmaWVkIGdlbmVyaWMgc3ludGF4IGZ1bmN0aW9ucywgdGhvc2UgZnVuY3Rpb25zIHJlY2VpdmUgYSBzaW5nbGUgQVNUIG5vZGUgZm9yIGNoZWNraW5nIGFuZCBzaG91bGQgcmV0dXJuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRydWUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZhbHNlIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgZXhjZXB0aW9uIGZvciB2YWx1ZXMgdGhhdCBjb250YWlucyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidmFyKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIHRob3NlIHZhbHVlcyBhcmUgYWx3YXlzIHZhbGlkIGZvciBub3ciKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgbW9yZSB0ZXN0cyBhbmQgaW5jcmVhc2UgY29kZSBjb3ZlcmFnZSB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOTguNSUiKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMC0wLWFscGhhNy1vY3RvYmVyLTctMjAxNiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMC0wLWFscGhhNy1vY3RvYmVyLTctMjAxNiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMC4wLWFscGhhNyAoT2N0b2JlciA3LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgc3VwcG9ydCBmb3IgZXhwbGljaXQgZGVzY2VuZGFudCBjb21iaW5hdG9yICgiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPj4iKV0pLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkltcGxlbWVudGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUeXBlIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVW5pdmVyc2FsIildKSwKICAgICAgICAgIF92bS5fdigiIHR5cGUgbm9kZXMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW1wcm92ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk51bWJlciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwYXJzaW5nIGJ5IGluY2x1ZGluZyBzaWduIGFuZCBleHBvbmVudCAoIzI2KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJQYXJzZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYmVmb3JlIildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYWZ0ZXIiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaXJzdC1sZXR0ZXIiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaXJzdC1saW5lIildKSwKICAgICAgICAgIF92bS5fdigiIHBzZXVkb3Mgd2l0aCBzaW5nbGUgY29sb24gYXMgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBzZXVkb0VsZW1lbnQiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDaGFuZ2VkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJGdW5jdGlvbmFsUHNldWRvIildKSwKICAgICAgICAgIF92bS5fdigiIG5vZGUgdHlwZSB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUHNldWRvQ2xhc3MiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCBhdHRyaWJ1dGUgc2VsZWN0b3IgbmFtZSBwYXJzaW5nIChuYW1lc3BhY2UgZWRnZSBjYXNlcykiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgbG9jYXRpb24gY2FsY3VsYXRpb24gZm9yIHNwZWNpZmllZCBvZmZzZXQgd2hlbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZW9mIildKSwKICAgICAgICAgIF92bS5fdigiIGlzIHJlYWNoZWQiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkFkZGVkIG1vcmUgbm9uLXN0YW5kYXJkIGNvbG9ycyAoIzI1KSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW1vdmVkIG9ic29sZXRlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTeW50YXgjZ2V0QWxsKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbWV0aG9kIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaXhlZCB2YXJpb3VzIGVkZ2UgY2FzZXMsIGNvZGUgY2xlYW4gdXAgYW5kIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0wLTAtYWxwaGE2LXNlcHRlbWJlci0yMy0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0wLTAtYWxwaGE2LXNlcHRlbWJlci0yMy0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4wLjAtYWxwaGE2IChTZXB0ZW1iZXIgMjMsIDIwMTYpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJNb3JlIGFjY3VyYXRlIHBvc2l0aW9ucyBmb3Igc3ludGF4IG1pc21hdGNoIGVycm9ycyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd2Via2l0Lm9yZy9ibG9nLzM3MDkvdXNpbmctdGhlLXN5c3RlbS1mb250LWluLXdlYi1jb250ZW50LyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiY29kZSIsIFtfdm0uX3YoImFwcGxlIildKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHNwZWNpZmljIGZvbnQga2V5d29yZHMgKCMyMCkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2hhbmdlZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUHJvcGVydHkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm9kZSBzdHVjdHVyZSBmcm9tIG9iamVjdCB0byBzdHJpbmciKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUmVuYW1lZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUnVsZXNldCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJ1bGUiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW1vdmVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBcmd1bWVudCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBub2RlIHR5cGUiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkRpbWVuc2lvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBlcmNlbnRhZ2UiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcG9zaXRpb24gY29tcHV0YXRpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkZpeGVkIGJhZCBzZWxlY3RvciBwYXJzaW5nICh0ZW1wb3Jhcnkgc29sdXRpb24pIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaXhlZCBsb2NhdGlvbiBjb21wdXRhdGlvbiBmb3IgQ1NTIHdpdGggdmVyeSBsb25nIGxpbmVzIHRoYXQgbWF5IGxlYWQgdG8gcmVhbGx5IGxvbmcgcGFyc2luZyB3aXRoICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInBvc2l0aW9uczp0cnVlIildKSwKICAgICAgICAgIF92bS5fdigiIChldmVuIGZyZWV6ZSkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxpbmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb2x1bW4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgY29tcHV0YXRpb24gZm9yICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTeW50YXhNYXRjaCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBlcnJvciIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSW1wcm92ZWQgcGVyZm9ybWFuY2Ugb2YgcGFyc2luZyBhbmQgdHJhbnNsYXRpb24uIE5vdyBDU1NUcmVlIGlzIHVuZGVyIDEwbXMgaW4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2JlbmNobWFyayIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlBvc3RDU1MgYmVuY2htYXJrIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}