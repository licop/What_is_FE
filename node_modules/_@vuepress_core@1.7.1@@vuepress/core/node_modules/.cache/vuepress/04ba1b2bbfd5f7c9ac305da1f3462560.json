{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/nan/doc/scopes.md?vue&type=template&id=2cb6cfe3&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/nan/doc/scopes.md","mtime":1587495543000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzY29wZXMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Njb3BlcyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFNjb3BlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImxvY2FsIGhhbmRsZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyBhIHBvaW50ZXIgdG8gYW4gb2JqZWN0LiBBbGwgVjggb2JqZWN0cyBhcmUgYWNjZXNzZWQgdXNpbmcgaGFuZGxlcywgdGhleSBhcmUgbmVjZXNzYXJ5IGJlY2F1c2Ugb2YgdGhlIHdheSB0aGUgVjggZ2FyYmFnZSBjb2xsZWN0b3Igd29ya3MuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBoYW5kbGUgc2NvcGUgY2FuIGJlIHRob3VnaHQgb2YgYXMgYSBjb250YWluZXIgZm9yIGFueSBudW1iZXIgb2YgaGFuZGxlcy4gV2hlbiB5b3UndmUgZmluaXNoZWQgd2l0aCB5b3VyIGhhbmRsZXMsIGluc3RlYWQgb2YgZGVsZXRpbmcgZWFjaCBvbmUgaW5kaXZpZHVhbGx5IHlvdSBjYW4gc2ltcGx5IGRlbGV0ZSB0aGVpciBzY29wZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIGNyZWF0aW9uIG9mICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSGFuZGxlU2NvcGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgb2JqZWN0cyBpcyBkaWZmZXJlbnQgYWNyb3NzIHRoZSBzdXBwb3J0ZWQgdmVyc2lvbnMgb2YgVjguIFRoZXJlZm9yZSwgTkFOIHByb3ZpZGVzIGl0cyBvd24gaW1wbGVtZW50YXRpb25zIHRoYXQgY2FuIGJlIHVzZWQgc2FmZWx5IGFjcm9zcyB0aGVzZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNhcGlfbmFuX2hhbmRsZV9zY29wZSIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJiIiwgW19jKCJjb2RlIiwgW192bS5fdigiTmFuOjpIYW5kbGVTY29wZSIpXSldKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNhcGlfbmFuX2VzY2FwYWJsZV9oYW5kbGVfc2NvcGUiIH0gfSwgWwogICAgICAgICAgICBfYygiYiIsIFtfYygiY29kZSIsIFtfdm0uX3YoIk5hbjo6RXNjYXBhYmxlSGFuZGxlU2NvcGUiKV0pXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFsc28gc2VlIHRoZSBWOCBFbWJlZGRlcnMgR3VpZGUgc2VjdGlvbiBvbiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS92OC92OC93aWtpL0VtYmVkZGVyJTI3cyUyMEd1aWRlI2hhbmRsZXMtYW5kLWdhcmJhZ2UtY29sbGVjdGlvbiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiSGFuZGxlcyBhbmQgR2FyYmFnZSBDb2xsZWN0aW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJhIiwgeyBhdHRyczogeyBuYW1lOiAiYXBpX25hbl9oYW5kbGVfc2NvcGUiIH0gfSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJuYW4taGFuZGxlc2NvcGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25hbi1oYW5kbGVzY29wZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTmFuOjpIYW5kbGVTY29wZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vdjhkb2NzLm5vZGVzb3VyY2UuY29tL25vZGUtOC4xNi9kMy9kOTUvY2xhc3N2OF8xXzFfaGFuZGxlX3Njb3BlLmh0bWwiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiY29kZSIsIFtfdm0uX3YoInY4OjpIYW5kbGVTY29wZSIpXSksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiRGVmaW5pdGlvbjoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1jKysgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJjbGFzcyBOYW46OkhhbmRsZVNjb3BlIHtcbiBwdWJsaWM6XG4gIE5hbjo6SGFuZGxlU2NvcGUoKTtcbiAgc3RhdGljIGludCBOdW1iZXJPZkhhbmRsZXMoKTtcbn07XG4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQWxsb2NhdGUgYSBuZXcgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJOYW46OkhhbmRsZVNjb3BlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdoZW5ldmVyIHlvdSBhcmUgY3JlYXRpbmcgbmV3IFY4IEphdmFTY3JpcHQgb2JqZWN0cy4gTm90ZSB0aGF0IGFuIGltcGxpY2l0ICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSGFuZGxlU2NvcGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgY3JlYXRlZCBmb3IgeW91IG9uIEphdmFTY3JpcHQtYWNjZXNzaWJsZSBtZXRob2RzIHNvIHlvdSBkbyBub3QgbmVlZCB0byBpbnNlcnQgb25lIHlvdXJzZWxmLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJFeGFtcGxlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWMrKyBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIi8vIG5ldyBvYmplY3QgaXMgY3JlYXRlZCwgaXQgbmVlZHMgYSBuZXcgc2NvcGU6XG52b2lkIFBvaW50bGVzcygpIHtcbiAgTmFuOjpIYW5kbGVTY29wZSBzY29wZTtcbiAgdjg6OkxvY2FsPHY4OjpPYmplY3Q+IG9iaiA9IE5hbjo6TmV3PHY4OjpPYmplY3Q+KCk7XG59XG5cbi8vIEphdmFTY3JpcHQtYWNjZXNzaWJsZSBtZXRob2QgYWxyZWFkeSBoYXMgYSBIYW5kbGVTY29wZVxuTkFOX01FVEhPRChQb2ludGxlc3MyKSB7XG4gIHY4OjpMb2NhbDx2ODo6T2JqZWN0PiBvYmogPSBOYW46Ok5ldzx2ODo6T2JqZWN0PigpO1xufVxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfYygiYSIsIHsgYXR0cnM6IHsgbmFtZTogImFwaV9uYW5fZXNjYXBhYmxlX2hhbmRsZV9zY29wZSIgfSB9KV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5hbi1lc2NhcGFibGVoYW5kbGVzY29wZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbmFuLWVzY2FwYWJsZWhhbmRsZXNjb3BlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTmFuOjpFc2NhcGFibGVIYW5kbGVTY29wZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTaW1pbGFyIHRvICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2FwaV9uYW5faGFuZGxlX3Njb3BlIiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTmFuOjpIYW5kbGVTY29wZSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGJ1dCBzaG91bGQgYmUgdXNlZCBpbiBjYXNlcyB3aGVyZSBhIGZ1bmN0aW9uIG5lZWRzIHRvIHJldHVybiBhIFY4IEphdmFTY3JpcHQgdHlwZSB0aGF0IGhhcyBiZWVuIGNyZWF0ZWQgd2l0aGluIGl0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJEZWZpbml0aW9uOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWMrKyBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImNsYXNzIE5hbjo6RXNjYXBhYmxlSGFuZGxlU2NvcGUge1xuIHB1YmxpYzpcbiAgTmFuOjpFc2NhcGFibGVIYW5kbGVTY29wZSgpO1xuICBzdGF0aWMgaW50IE51bWJlck9mSGFuZGxlcygpO1xuICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPiB2ODo6TG9jYWw8VD4gRXNjYXBlKHY4OjpMb2NhbDxUPiB2YWx1ZSk7XG59XG4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVXNlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRXNjYXBlKHZhbHVlKSIpXSksCiAgICAgICAgX3ZtLl92KCIgdG8gcmV0dXJuIHRoZSBvYmplY3QuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkV4YW1wbGU6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtYysrIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAidjg6OkxvY2FsPHY4OjpPYmplY3Q+IEVtcHR5T2JqKCkge1xuICBOYW46OkVzY2FwYWJsZUhhbmRsZVNjb3BlIHNjb3BlO1xuICB2ODo6TG9jYWw8djg6Ok9iamVjdD4gb2JqID0gTmFuOjpOZXc8djg6Ok9iamVjdD4oKTtcbiAgcmV0dXJuIHNjb3BlLkVzY2FwZShvYmopO1xufVxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}