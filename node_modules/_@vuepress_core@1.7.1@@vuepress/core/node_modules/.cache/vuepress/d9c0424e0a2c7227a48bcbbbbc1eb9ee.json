{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/es5-ext/README.md?vue&type=template&id=6d4a860b&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/es5-ext/README.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href: "https://semaphoreci.com/medikoo-org/es5-ext",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("img", {
              attrs: {
                src:
                  "https://semaphoreci.com/api/v1/medikoo-org/es5-ext/branches/master/shields_badge.svg",
                alt: "Build status"
              }
            }),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "a",
          {
            attrs: {
              href: "https://ci.appveyor.com/project/medikoo/es5-ext",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("img", {
              attrs: {
                src:
                  "https://ci.appveyor.com/api/projects/status/3jox67ksw3p8hkwh/branch/master?svg=true",
                alt: "Windows status"
              }
            }),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(" "),
        _c("img", {
          attrs: {
            src:
              "https://img.shields.io/badge/transpilation-free-brightgreen.svg",
            alt: "Transpilation status"
          }
        }),
        _vm._v(" "),
        _c(
          "a",
          {
            attrs: {
              href: "https://www.npmjs.com/package/es5-ext",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("img", {
              attrs: {
                src: "https://img.shields.io/npm/v/es5-ext.svg",
                alt: "npm version"
              }
            }),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("h1", { attrs: { id: "es5-ext" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#es5-ext" } }, [
          _vm._v("#")
        ]),
        _vm._v(" es5-ext")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "ecmascript-5-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#ecmascript-5-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" ECMAScript 5 extensions")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "with-respect-to-ecmascript-6-standard" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#with-respect-to-ecmascript-6-standard" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" (with respect to ECMAScript 6 standard)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Shims for upcoming ES6 standard and other goodies implemented strictly with ECMAScript conventions in mind."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It's designed to be used in compliant ECMAScript 5 or ECMAScript 6 environments. Older environments are not supported, although most of the features should work with correct ECMAScript 5 shim on board."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "When used in ECMAScript 6 environment, native implementation (if valid) takes precedence over shims."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "installation" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#installation" } },
          [_vm._v("#")]
        ),
        _vm._v(" Installation")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", [_c("code", [_vm._v("$ npm install es5-ext\n")])])
      ]),
      _c("p", [
        _vm._v(
          "To port it to Browser or any other (non CJS) environment, use your favorite CJS bundler. No favorite yet? Try: "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "http://browserify.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Browserify"), _c("OutboundLink")],
          1
        ),
        _vm._v(", "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/medikoo/modules-webmake",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Webmake"), _c("OutboundLink")],
          1
        ),
        _vm._v(" or "),
        _c(
          "a",
          {
            attrs: {
              href: "http://webpack.github.io/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Webpack"), _c("OutboundLink")],
          1
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "usage" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#usage" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Usage")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "ecmascript-6-features" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#ecmascript-6-features" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" ECMAScript 6 features")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "You can force ES6 features to be implemented in your environment, e.g. following will assign "
        ),
        _c("code", [_vm._v("from")]),
        _vm._v(" function to "),
        _c("code", [_vm._v("Array")]),
        _vm._v(" (only if it's not implemented already).")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-javascript extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-javascript" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/array/from/implement"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\nArray"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("from")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"foo"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ['f', 'o', 'o']")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "You can also access shims directly, without fixing native objects. Following will return native "
        ),
        _c("code", [_vm._v("Array.from")]),
        _vm._v(" if it's available and fallback to shim if it's not.")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-javascript extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-javascript" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" aFrom "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/array/from"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("aFrom")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"foo"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ['f', 'o', 'o']")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "If you want to use shim unconditionally (even if native implementation exists) do:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-javascript extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-javascript" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" aFrom "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/array/from/shim"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("aFrom")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"foo"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ['f', 'o', 'o']")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("h5", { attrs: { id: "list-of-es6-shims" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#list-of-es6-shims" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" List of ES6 shims")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It's about properties introduced with ES6 and those that have been updated in new spec."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("Array.from")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/from')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.of")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/of')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.concat")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/concat')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.copyWithin")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/copy-within')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.entries")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/entries')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.fill")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/fill')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.filter")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/filter')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.find")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/find')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.findIndex")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/find-index')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.keys")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/keys')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.map")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/map')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.slice")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/slice')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.splice")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/splice')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype.values")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/values')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Array.prototype[@@iterator]")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/array/#/@@iterator')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.acosh")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/acosh')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.asinh")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/asinh')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.atanh")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/atanh')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.cbrt")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/cbrt')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.clz32")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/clz32')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.cosh")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/cosh')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.exmp1")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/expm1')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.fround")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/fround')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.hypot")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/hypot')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.imul")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/imul')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.log1p")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/log1p')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.log2")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/log2')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.log10")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/log10')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.sign")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/sign')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.signh")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/signh')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.tanh")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/tanh')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Math.trunc")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/math/trunc')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Number.EPSILON")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/number/epsilon')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Number.MAX_SAFE_INTEGER")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/number/max-safe-integer')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Number.MIN_SAFE_INTEGER")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/number/min-safe-integer')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Number.isFinite")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/number/is-finite')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Number.isInteger")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/number/is-integer')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Number.isNaN")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/number/is-nan')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Number.isSafeInteger")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/number/is-safe-integer')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Object.assign")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/object/assign')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Object.keys")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/object/keys')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Object.setPrototypeOf")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/object/set-prototype-of')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Promise.prototype.finally")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/promise/#/finally')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RegExp.prototype.match")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/reg-exp/#/match')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RegExp.prototype.replace")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/reg-exp/#/replace')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RegExp.prototype.search")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/reg-exp/#/search')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RegExp.prototype.split")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/reg-exp/#/split')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RegExp.prototype.sticky")]),
          _vm._v(" -> Implement with "),
          _c("code", [_vm._v("require('es5-ext/reg-exp/#/sticky/implement')")]),
          _vm._v(", use as function with "),
          _c("code", [_vm._v("require('es5-ext/reg-exp/#/is-sticky')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RegExp.prototype.unicode")]),
          _vm._v(" -> Implement with "),
          _c("code", [
            _vm._v("require('es5-ext/reg-exp/#/unicode/implement')")
          ]),
          _vm._v(", use as function with "),
          _c("code", [_vm._v("require('es5-ext/reg-exp/#/is-unicode')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.fromCodePoint")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/from-code-point')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.raw")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/raw')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.prototype.codePointAt")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/#/code-point-at')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.prototype.contains")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/#/contains')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.prototype.endsWith")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/#/ends-with')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.prototype.normalize")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/#/normalize')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.prototype.repeat")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/#/repeat')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.prototype.startsWith")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/#/starts-with')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("String.prototype[@@iterator]")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("require('es5-ext/string/#/@@iterator')")])
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "non-ecmascript-standard-features" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#non-ecmascript-standard-features" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Non ECMAScript standard features")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("es5-ext")]),
        _vm._v(
          " provides also other utils, and implements them as if they were proposed for a standard. It mostly offers methods (not functions) which can directly be assigned to native prototypes:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-javascript extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-javascript" } }, [
          _c("code", [
            _vm._v("Object"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("defineProperty")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("prototype"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"partial"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n  value"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/function/#/partial"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  configurable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("true")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  enumerable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("false")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  writable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("true")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\nObject"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("defineProperty")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Array")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("prototype"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"flatten"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n  value"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/array/#/flatten"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  configurable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("true")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  enumerable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("false")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  writable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("true")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\nObject"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("defineProperty")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("String")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("prototype"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"capitalize"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n  value"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/string/#/capitalize"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  configurable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("true")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  enumerable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("false")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  writable"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("true")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("See "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/wookieb/es5-extend#es5-extend",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("es5-extend"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ", a great utility that automatically will extend natives for you."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Important:")]),
        _vm._v(" Remember to "),
        _c("strong", [_vm._v("not")]),
        _vm._v(
          " extend natives in scope of generic reusable packages (e.g. ones you intend to publish to npm). Extending natives is fine "
        ),
        _c("strong", [_vm._v("only")]),
        _vm._v(" if you're the "),
        _c("em", [_vm._v("owner")]),
        _vm._v(
          " of the global scope, so e.g. in final project you lead development of."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "When you're in situation when native extensions are not good idea, then you should use methods indirectly:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-javascript extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-javascript" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" flatten "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/array/#/flatten"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("flatten")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("call")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("3")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// [1, 2, 3, 4]")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("for better convenience you can turn methods into functions:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-javascript extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-javascript" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" call "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("prototype"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("call"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" flatten "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("call")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("bind")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/array/#/flatten"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("flatten")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("3")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// [1, 2, 3, 4]")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("You can configure custom toolkit (like "),
        _c(
          "a",
          {
            attrs: {
              href: "http://underscorejs.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("underscorejs"), _c("OutboundLink")],
          1
        ),
        _vm._v("), and use it throughout your application")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-javascript extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-javascript" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" util "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\nutil"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("partial "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("call")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("bind")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/function/#/partial"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\nutil"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("flatten "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("call")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("bind")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/array/#/flatten"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\nutil"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("startsWith "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("call")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("bind")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("require")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"es5-ext/string/#/starts-with"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\nutil"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("flatten")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("3")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// [1, 2, 3, 4]")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "As with native ones most methods are generic and can be run on any type of object."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "api" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#api" } }, [
          _vm._v("#")
        ]),
        _vm._v(" API")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "global-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#global-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Global extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "global-es5-ext-global" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#global-es5-ext-global" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" global "),
        _c("em", [_vm._v("(es5-ext/global)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Object that represents global scope")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "array-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#array-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Array Constructor extensions")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "from-arraylike-mapfn-thisarg-es5-ext-array-from" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#from-arraylike-mapfn-thisarg-es5-ext-array-from"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" from(arrayLike[, mapFn[, thisArg]]) "),
          _c("em", [_vm._v("(es5-ext/array/from)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nReturns array representation of "),
        _c("em", [_vm._v("iterable")]),
        _vm._v(" or "),
        _c("em", [_vm._v("arrayLike")]),
        _vm._v(". If "),
        _c("em", [_vm._v("arrayLike")]),
        _vm._v(" is an instance of array, its copy is returned.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "generate-length-fill-es5-ext-array-generate" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#generate-length-fill-es5-ext-array-generate" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" generate([length[, …fill]]) "),
          _c("em", [_vm._v("(es5-ext/array/generate)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Generate an array of pre-given "),
        _c("em", [_vm._v("length")]),
        _vm._v(" built of repeated arguments.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "isplainarray-x-es5-ext-array-is-plain-array" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#isplainarray-x-es5-ext-array-is-plain-array" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" isPlainArray(x) "),
          _c("em", [_vm._v("(es5-ext/array/is-plain-array)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns true if object is plain array (not instance of one of the Array's extensions)."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "of-items-es5-ext-array-of" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#of-items-es5-ext-array-of" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" of([…items]) "),
        _c("em", [_vm._v("(es5-ext/array/of)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.of",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nCreate an array from given arguments.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "toarray-obj-es5-ext-array-to-array" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#toarray-obj-es5-ext-array-to-array" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" toArray(obj) "),
        _c("em", [_vm._v("(es5-ext/array/to-array)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns array representation of "),
        _c("code", [_vm._v("obj")]),
        _vm._v(". If "),
        _c("code", [_vm._v("obj")]),
        _vm._v(" is already an array, "),
        _c("code", [_vm._v("obj")]),
        _vm._v(" is returned back.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "validarray-obj-es5-ext-array-valid-array" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#validarray-obj-es5-ext-array-valid-array" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" validArray(obj) "),
        _c("em", [_vm._v("(es5-ext/array/valid-array)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns "),
        _c("code", [_vm._v("obj")]),
        _vm._v(" if it's an array, otherwise throws "),
        _c("code", [_vm._v("TypeError")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "array-prototype-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#array-prototype-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Array Prototype extensions")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "arr-binarysearch-comparefn-es5-ext-array-binary-search"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#arr-binarysearch-comparefn-es5-ext-array-binary-search"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.binarySearch(compareFn) "),
          _c("em", [_vm._v("(es5-ext/array/#/binary-search)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("In "),
        _c("strong", [_vm._v("sorted")]),
        _vm._v(" list search for index of item for which "),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(" returns value closest to "),
        _c("em", [_vm._v("0")]),
        _vm._v(".\nIt's variant of binary search algorithm")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-clear-es5-ext-array-clear" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-clear-es5-ext-array-clear" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.clear() "),
        _c("em", [_vm._v("(es5-ext/array/#/clear)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Clears the array")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-compact-es5-ext-array-compact" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-compact-es5-ext-array-compact" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.compact() "),
        _c("em", [_vm._v("(es5-ext/array/#/compact)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns a copy of the context with all non-values ("),
        _c("code", [_vm._v("null")]),
        _vm._v(" or "),
        _c("code", [_vm._v("undefined")]),
        _vm._v(") removed.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-concat-es5-ext-array-concat" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-concat-es5-ext-array-concat" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.concat() "),
        _c("em", [_vm._v("(es5-ext/array/#/concat)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.concat",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("Updated with ECMAScript 6")]), _c("OutboundLink")],
          1
        ),
        _vm._v(".\nES6's version of "),
        _c("code", [_vm._v("concat")]),
        _vm._v(". Supports "),
        _c("code", [_vm._v("isConcatSpreadable")]),
        _vm._v(" symbol, and returns array of same type as the context.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "arr-contains-searchelement-position-es5-ext-array-contains"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#arr-contains-searchelement-position-es5-ext-array-contains"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.contains(searchElement[, position]) "),
          _c("em", [_vm._v("(es5-ext/array/#/contains)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Whether list contains the given value.")]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "arr-copywithin-target-start-end-es5-ext-array-copy-within"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#arr-copywithin-target-start-end-es5-ext-array-copy-within"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.copyWithin(target, start[, end]) "),
          _c("em", [_vm._v("(es5-ext/array/#/copy-within)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.copywithin",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-diff-other-es5-ext-array-diff" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-diff-other-es5-ext-array-diff" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.diff(other) "),
        _c("em", [_vm._v("(es5-ext/array/#/diff)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns the array of elements that are present in context list but not present in other list."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "arr-eindexof-searchelement-fromindex-es5-ext-array-e-index-of"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#arr-eindexof-searchelement-fromindex-es5-ext-array-e-index-of"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.eIndexOf(searchElement[, fromIndex]) "),
          _c("em", [_vm._v("(es5-ext/array/#/e-index-of)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("egal")]),
        _vm._v(" version of "),
        _c("code", [_vm._v("indexOf")]),
        _vm._v(" method. "),
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("SameValueZero")]), _c("OutboundLink")],
          1
        ),
        _vm._v(" logic is used for comparision")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id:
              "arr-elastindexof-searchelement-fromindex-es5-ext-array-e-last-index-of"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#arr-elastindexof-searchelement-fromindex-es5-ext-array-e-last-index-of"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.eLastIndexOf(searchElement[, fromIndex]) "),
          _c("em", [_vm._v("(es5-ext/array/#/e-last-index-of)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("egal")]),
        _vm._v(" version of "),
        _c("code", [_vm._v("lastIndexOf")]),
        _vm._v(" method. "),
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("SameValueZero")]), _c("OutboundLink")],
          1
        ),
        _vm._v(" logic is used for comparision")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-entries-es5-ext-array-entries" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-entries-es5-ext-array-entries" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.entries() "),
        _c("em", [_vm._v("(es5-ext/array/#/entries)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.entries",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          ".\nReturns iterator object, which traverses the array. Each value is represented with an array, where first value is an index and second is corresponding to index value."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-exclusion-lists-es5-ext-array-exclusion" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#arr-exclusion-lists-es5-ext-array-exclusion" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.exclusion([…lists]]) "),
          _c("em", [_vm._v("(es5-ext/array/#/exclusion)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns the array of elements that are found only in one of the lists (either context list or list provided in arguments)."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-fill-value-start-end-es5-ext-array-fill" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#arr-fill-value-start-end-es5-ext-array-fill" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.fill(value[, start, end]) "),
          _c("em", [_vm._v("(es5-ext/array/#/fill)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.fill",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-filter-callback-thisarg-es5-ext-array-filter" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#arr-filter-callback-thisarg-es5-ext-array-filter"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.filter(callback[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/array/#/filter)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.filter",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("Updated with ECMAScript 6")]), _c("OutboundLink")],
          1
        ),
        _vm._v(".\nES6's version of "),
        _c("code", [_vm._v("filter")]),
        _vm._v(", returns array of same type as the context.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-find-predicate-thisarg-es5-ext-array-find" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#arr-find-predicate-thisarg-es5-ext-array-find" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.find(predicate[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/array/#/find)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.find",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nReturn first element for which given function returns true")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "arr-findindex-predicate-thisarg-es5-ext-array-find-index"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#arr-findindex-predicate-thisarg-es5-ext-array-find-index"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.findIndex(predicate[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/array/#/find-index)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.findindex",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nReturn first index for which given function returns true")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-first-es5-ext-array-first" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-first-es5-ext-array-first" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.first() "),
        _c("em", [_vm._v("(es5-ext/array/#/first)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Returns value for first defined index")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-firstindex-es5-ext-array-first-index" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-firstindex-es5-ext-array-first-index" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.firstIndex() "),
        _c("em", [_vm._v("(es5-ext/array/#/first-index)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Returns first declared index of the array")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-flatten-es5-ext-array-flatten" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-flatten-es5-ext-array-flatten" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.flatten() "),
        _c("em", [_vm._v("(es5-ext/array/#/flatten)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Returns flattened version of the array")]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "arr-foreachright-cb-thisarg-es5-ext-array-for-each-right"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#arr-foreachright-cb-thisarg-es5-ext-array-for-each-right"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.forEachRight(cb[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/array/#/for-each-right)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("forEach")]),
        _vm._v(" starting from last element")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-group-cb-thisarg-es5-ext-array-group" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-group-cb-thisarg-es5-ext-array-group" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.group(cb[, thisArg]) "),
        _c("em", [_vm._v("(es5-ext/array/#/group)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Group list elements by value returned by "),
        _c("em", [_vm._v("cb")]),
        _vm._v(" function")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "arr-indexesof-searchelement-fromindex-es5-ext-array-indexes-of"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#arr-indexesof-searchelement-fromindex-es5-ext-array-indexes-of"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.indexesOf(searchElement[, fromIndex]) "),
          _c("em", [_vm._v("(es5-ext/array/#/indexes-of)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Returns array of all indexes of given value")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-intersection-lists-es5-ext-array-intersection" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#arr-intersection-lists-es5-ext-array-intersection"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.intersection([…lists]) "),
          _c("em", [_vm._v("(es5-ext/array/#/intersection)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Computes the array of values that are the intersection of all lists (context list and lists given in arguments)"
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-iscopy-other-es5-ext-array-is-copy" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-iscopy-other-es5-ext-array-is-copy" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.isCopy(other) "),
        _c("em", [_vm._v("(es5-ext/array/#/is-copy)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns true if both context and "),
        _c("em", [_vm._v("other")]),
        _vm._v(" lists have same content")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-isuniq-es5-ext-array-is-uniq" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-isuniq-es5-ext-array-is-uniq" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.isUniq() "),
        _c("em", [_vm._v("(es5-ext/array/#/is-uniq)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Returns true if all values in array are unique")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-keys-es5-ext-array-keys" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-keys-es5-ext-array-keys" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.keys() "),
        _c("em", [_vm._v("(es5-ext/array/#/keys)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.keys",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nReturns iterator object, which traverses all array indexes.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-last-es5-ext-array-last" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-last-es5-ext-array-last" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.last() "),
        _c("em", [_vm._v("(es5-ext/array/#/last)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Returns value of last defined index")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-lastindex-es5-ext-array-last" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-lastindex-es5-ext-array-last" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.lastIndex() "),
        _c("em", [_vm._v("(es5-ext/array/#/last)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Returns last defined index of the array")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-map-callback-thisarg-es5-ext-array-map" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#arr-map-callback-thisarg-es5-ext-array-map" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.map(callback[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/array/#/map)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.map",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("Updated with ECMAScript 6")]), _c("OutboundLink")],
          1
        ),
        _vm._v(".\nES6's version of "),
        _c("code", [_vm._v("map")]),
        _vm._v(", returns array of same type as the context.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-remove-value-valuen-es5-ext-array-remove" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#arr-remove-value-valuen-es5-ext-array-remove" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.remove(value[, …valuen]) "),
          _c("em", [_vm._v("(es5-ext/array/#/remove)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Remove values from the array")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-separate-sep-es5-ext-array-separate" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-separate-sep-es5-ext-array-separate" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.separate(sep) "),
        _c("em", [_vm._v("(es5-ext/array/#/separate)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns array with items separated with "),
        _c("code", [_vm._v("sep")]),
        _vm._v(" value")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-slice-callback-thisarg-es5-ext-array-slice" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#arr-slice-callback-thisarg-es5-ext-array-slice" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.slice(callback[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/array/#/slice)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.slice",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("Updated with ECMAScript 6")]), _c("OutboundLink")],
          1
        ),
        _vm._v(".\nES6's version of "),
        _c("code", [_vm._v("slice")]),
        _vm._v(", returns array of same type as the context.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-someright-cb-thisarg-es5-ext-array-someright" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#arr-someright-cb-thisarg-es5-ext-array-someright"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.someRight(cb[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/array/#/someRight)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("some")]),
        _vm._v(" starting from last element")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "arr-splice-callback-thisarg-es5-ext-array-splice" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#arr-splice-callback-thisarg-es5-ext-array-splice"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" arr.splice(callback[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/array/#/splice)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.splice",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("Updated with ECMAScript 6")]), _c("OutboundLink")],
          1
        ),
        _vm._v(".\nES6's version of "),
        _c("code", [_vm._v("splice")]),
        _vm._v(", returns array of same type as the context.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-uniq-es5-ext-array-uniq" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-uniq-es5-ext-array-uniq" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.uniq() "),
        _c("em", [_vm._v("(es5-ext/array/#/uniq)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Returns duplicate-free version of the array")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-values-es5-ext-array-values" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-values-es5-ext-array-values" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr.values() "),
        _c("em", [_vm._v("(es5-ext/array/#/values)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.values",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nReturns iterator object which traverses all array values.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "arr-iterator-es5-ext-array-iterator" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#arr-iterator-es5-ext-array-iterator" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" arr[@@iterator] "),
        _c("em", [_vm._v("(es5-ext/array/#/@@iterator)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype-@@iterator",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nReturns iterator object which traverses all array values.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "boolean-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#boolean-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Boolean Constructor extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isboolean-x-es5-ext-boolean-is-boolean" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isboolean-x-es5-ext-boolean-is-boolean" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isBoolean(x) "),
        _c("em", [_vm._v("(es5-ext/boolean/is-boolean)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Whether value is boolean")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "date-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#date-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Date Constructor extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isdate-x-es5-ext-date-is-date" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isdate-x-es5-ext-date-is-date" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isDate(x) "),
        _c("em", [_vm._v("(es5-ext/date/is-date)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Whether value is date instance")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "validdate-x-es5-ext-date-valid-date" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#validdate-x-es5-ext-date-valid-date" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" validDate(x) "),
        _c("em", [_vm._v("(es5-ext/date/valid-date)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If given object is not date throw TypeError in other case return it."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "date-prototype-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#date-prototype-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Date Prototype extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "date-copy-date-es5-ext-date-copy" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#date-copy-date-es5-ext-date-copy" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" date.copy(date) "),
        _c("em", [_vm._v("(es5-ext/date/#/copy)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Returns a copy of the date object")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "date-daysinmonth-es5-ext-date-days-in-month" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#date-daysinmonth-es5-ext-date-days-in-month" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" date.daysInMonth() "),
          _c("em", [_vm._v("(es5-ext/date/#/days-in-month)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Returns number of days of date's month")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "date-floorday-es5-ext-date-floor-day" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#date-floorday-es5-ext-date-floor-day" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" date.floorDay() "),
        _c("em", [_vm._v("(es5-ext/date/#/floor-day)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Sets the date time to 00:00:00.000")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "date-floormonth-es5-ext-date-floor-month" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#date-floormonth-es5-ext-date-floor-month" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" date.floorMonth() "),
        _c("em", [_vm._v("(es5-ext/date/#/floor-month)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Sets date day to 1 and date time to 00:00:00.000")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "date-flooryear-es5-ext-date-floor-year" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#date-flooryear-es5-ext-date-floor-year" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" date.floorYear() "),
        _c("em", [_vm._v("(es5-ext/date/#/floor-year)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Sets date month to 0, day to 1 and date time to 00:00:00.000")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "date-format-pattern-es5-ext-date-format" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#date-format-pattern-es5-ext-date-format" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" date.format(pattern) "),
        _c("em", [_vm._v("(es5-ext/date/#/format)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Formats date up to given string. Supported patterns:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("%Y")]),
          _vm._v(" - Year with century, 1999, 2003")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("%y")]),
          _vm._v(" - Year without century, 99, 03")
        ]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("%m")]), _vm._v(" - Month, 01..12")]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("%d")]),
          _vm._v(" - Day of the month 01..31")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("%H")]),
          _vm._v(" - Hour (24-hour clock), 00..23")
        ]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("%M")]), _vm._v(" - Minute, 00..59")]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("%S")]), _vm._v(" - Second, 00..59")]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("%L")]),
          _vm._v(" - Milliseconds, 000..999")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "error-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#error-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Error Constructor extensions")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "custom-message-code-ext-es5-ext-error-custom" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#custom-message-code-ext-es5-ext-error-custom" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" custom(message/"),
          _c("em", [_vm._v(", code, ext")]),
          _vm._v("/) "),
          _c("em", [_vm._v("(es5-ext/error/custom)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Creates custom error object, optinally extended with "),
        _c("code", [_vm._v("code")]),
        _vm._v(" and other extension properties (provided with "),
        _c("code", [_vm._v("ext")]),
        _vm._v(" object)")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "iserror-x-es5-ext-error-is-error" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#iserror-x-es5-ext-error-is-error" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isError(x) "),
        _c("em", [_vm._v("(es5-ext/error/is-error)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Whether value is an error (instance of "),
        _c("code", [_vm._v("Error")]),
        _vm._v(").")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "validerror-x-es5-ext-error-valid-error" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#validerror-x-es5-ext-error-valid-error" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" validError(x) "),
        _c("em", [_vm._v("(es5-ext/error/valid-error)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If given object is not error throw TypeError in other case return it."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "error-prototype-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#error-prototype-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Error Prototype extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "err-throw-es5-ext-error-throw" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#err-throw-es5-ext-error-throw" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" err.throw() "),
        _c("em", [_vm._v("(es5-ext/error/#/throw)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Throws error")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "function-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#function-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Function Constructor extensions")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Some of the functions were inspired by "),
        _c(
          "a",
          {
            attrs: {
              href: "http://osteele.com/sources/javascript/functional/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Functional JavaScript"), _c("OutboundLink")],
          1
        ),
        _vm._v(" project by Olivier Steele")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "constant-x-es5-ext-function-constant" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#constant-x-es5-ext-function-constant" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" constant(x) "),
        _c("em", [_vm._v("(es5-ext/function/constant)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns a constant function that returns pregiven argument")
      ]),
      _vm._v(" "),
      _c("p", [_c("em", [_vm._v("k(x)(y) =def x")])]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "identity-x-es5-ext-function-identity" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#identity-x-es5-ext-function-identity" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" identity(x) "),
        _c("em", [_vm._v("(es5-ext/function/identity)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Identity function. Returns first argument")]),
      _vm._v(" "),
      _c("p", [_c("em", [_vm._v("i(x) =def x")])]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "invoke-name-args-es5-ext-function-invoke" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#invoke-name-args-es5-ext-function-invoke" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" invoke(name[, …args]) "),
        _c("em", [_vm._v("(es5-ext/function/invoke)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns a function that takes an object as an argument, and applies object's\n"
        ),
        _c("em", [_vm._v("name")]),
        _vm._v(" method to arguments.\n"),
        _c("em", [_vm._v("name")]),
        _vm._v(" can be name of the method or method itself.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v(
            "invoke(name, …args)(object, …args2) =def object[name](…args, …args2)"
          )
        ])
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "isarguments-x-es5-ext-function-is-arguments" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#isarguments-x-es5-ext-function-is-arguments" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" isArguments(x) "),
          _c("em", [_vm._v("(es5-ext/function/is-arguments)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Whether value is arguments object")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "isfunction-arg-es5-ext-function-is-function" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#isfunction-arg-es5-ext-function-is-function" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" isFunction(arg) "),
          _c("em", [_vm._v("(es5-ext/function/is-function)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Whether value is instance of function")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "noop-es5-ext-function-noop" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#noop-es5-ext-function-noop" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" noop() "),
        _c("em", [_vm._v("(es5-ext/function/noop)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("No operation function")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "pluck-name-es5-ext-function-pluck" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#pluck-name-es5-ext-function-pluck" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" pluck(name) "),
        _c("em", [_vm._v("(es5-ext/function/pluck)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns a function that takes an object, and returns the value of its "
        ),
        _c("em", [_vm._v("name")]),
        _vm._v("\nproperty")
      ]),
      _vm._v(" "),
      _c("p", [_c("em", [_vm._v("pluck(name)(obj) =def obj[name]")])]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "validfunction-arg-es5-ext-function-valid-function" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#validfunction-arg-es5-ext-function-valid-function"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" validFunction(arg) "),
          _c("em", [_vm._v("(es5-ext/function/valid-function)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If given object is not function throw TypeError in other case return it."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "function-prototype-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#function-prototype-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Function Prototype extensions")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Some of the methods were inspired by "),
        _c(
          "a",
          {
            attrs: {
              href: "http://osteele.com/sources/javascript/functional/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Functional JavaScript"), _c("OutboundLink")],
          1
        ),
        _vm._v(" project by Olivier Steele")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "fn-compose-fns-es5-ext-function-compose" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fn-compose-fns-es5-ext-function-compose" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" fn.compose([…fns]) "),
        _c("em", [_vm._v("(es5-ext/function/#/compose)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Applies the functions in reverse argument-list order.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v("f1.compose(f2, f3, f4)(…args) =def f1(f2(f3(f4(…arg))))")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("compose")]),
        _vm._v(" can also be used in plain function form as:")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v("compose(f1, f2, f3, f4)(…args) =def f1(f2(f3(f4(…arg))))")
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "fn-copy-es5-ext-function-copy" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fn-copy-es5-ext-function-copy" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" fn.copy() "),
        _c("em", [_vm._v("(es5-ext/function/#/copy)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Produces copy of given function")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "fn-curry-n-es5-ext-function-curry" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fn-curry-n-es5-ext-function-curry" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" fn.curry([n]) "),
        _c("em", [_vm._v("(es5-ext/function/#/curry)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Invoking the function returned by this function only "),
        _c("em", [_vm._v("n")]),
        _vm._v(
          " arguments are passed to the underlying function. If the underlying function is not saturated, the result is a function that passes all its arguments to the underlying function.\nIf "
        ),
        _c("em", [_vm._v("n")]),
        _vm._v(" is not provided then it defaults to context function length")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v(
            "f.curry(4)(arg1, arg2)(arg3)(arg4) =def f(arg1, args2, arg3, arg4)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "fn-lock-args-es5-ext-function-lock" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fn-lock-args-es5-ext-function-lock" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" fn.lock([…args]) "),
        _c("em", [_vm._v("(es5-ext/function/#/lock)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns a function that applies the underlying function to "),
        _c("em", [_vm._v("args")]),
        _vm._v(", and ignores its own arguments.")
      ]),
      _vm._v(" "),
      _c("p", [_c("em", [_vm._v("f.lock(…args)(…args2) =def f(…args)")])]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("Named after it's counterpart in Google Closure")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "fn-not-es5-ext-function-not" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fn-not-es5-ext-function-not" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" fn.not() "),
        _c("em", [_vm._v("(es5-ext/function/#/not)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns a function that returns boolean negation of value returned by underlying function."
        )
      ]),
      _vm._v(" "),
      _c("p", [_c("em", [_vm._v("f.not()(…args) =def !f(…args)")])]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "fn-partial-args-es5-ext-function-partial" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fn-partial-args-es5-ext-function-partial" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" fn.partial([…args]) "),
        _c("em", [_vm._v("(es5-ext/function/#/partial)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns a function that when called will behave like context function called with initially passed arguments. If more arguments are suplilied, they are appended to initial args."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("f.partial(…args1)(…args2) =def f(…args1, …args2)")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "fn-spread-es5-ext-function-spread" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fn-spread-es5-ext-function-spread" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" fn.spread() "),
        _c("em", [_vm._v("(es5-ext/function/#/spread)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns a function that applies underlying function with first list argument"
        )
      ]),
      _vm._v(" "),
      _c("p", [_c("em", [_vm._v("f.match()(args) =def f.apply(null, args)")])]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: { id: "fn-tostringtokens-es5-ext-function-to-string-tokens" }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#fn-tostringtokens-es5-ext-function-to-string-tokens"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" fn.toStringTokens() "),
          _c("em", [_vm._v("(es5-ext/function/#/to-string-tokens)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Serializes function into two (arguments and body) string tokens. Result is plain object with "
        ),
        _c("code", [_vm._v("args")]),
        _vm._v(" and "),
        _c("code", [_vm._v("body")]),
        _vm._v(" properties.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "math-extensions" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#math-extensions" } },
          [_vm._v("#")]
        ),
        _vm._v(" Math extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "acosh-x-es5-ext-math-acosh" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#acosh-x-es5-ext-math-acosh" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" acosh(x) "),
        _c("em", [_vm._v("(es5-ext/math/acosh)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.acosh",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "asinh-x-es5-ext-math-asinh" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#asinh-x-es5-ext-math-asinh" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" asinh(x) "),
        _c("em", [_vm._v("(es5-ext/math/asinh)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.asinh",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "atanh-x-es5-ext-math-atanh" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#atanh-x-es5-ext-math-atanh" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" atanh(x) "),
        _c("em", [_vm._v("(es5-ext/math/atanh)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.atanh",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "cbrt-x-es5-ext-math-cbrt" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#cbrt-x-es5-ext-math-cbrt" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" cbrt(x) "),
        _c("em", [_vm._v("(es5-ext/math/cbrt)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.cbrt",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "clz32-x-es5-ext-math-clz32" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#clz32-x-es5-ext-math-clz32" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" clz32(x) "),
        _c("em", [_vm._v("(es5-ext/math/clz32)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.clz32",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "cosh-x-es5-ext-math-cosh" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#cosh-x-es5-ext-math-cosh" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" cosh(x) "),
        _c("em", [_vm._v("(es5-ext/math/cosh)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.cosh",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "expm1-x-es5-ext-math-expm1" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#expm1-x-es5-ext-math-expm1" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" expm1(x) "),
        _c("em", [_vm._v("(es5-ext/math/expm1)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.expm1",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "fround-x-es5-ext-math-fround" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fround-x-es5-ext-math-fround" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" fround(x) "),
        _c("em", [_vm._v("(es5-ext/math/fround)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.fround",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "hypot-values-es5-ext-math-hypot" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#hypot-values-es5-ext-math-hypot" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" hypot([…values]) "),
        _c("em", [_vm._v("(es5-ext/math/hypot)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.hypot",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "imul-x-y-es5-ext-math-imul" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#imul-x-y-es5-ext-math-imul" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" imul(x, y) "),
        _c("em", [_vm._v("(es5-ext/math/imul)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.imul",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "log1p-x-es5-ext-math-log1p" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#log1p-x-es5-ext-math-log1p" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" log1p(x) "),
        _c("em", [_vm._v("(es5-ext/math/log1p)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log1p",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "log2-x-es5-ext-math-log2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#log2-x-es5-ext-math-log2" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" log2(x) "),
        _c("em", [_vm._v("(es5-ext/math/log2)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log2",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "log10-x-es5-ext-math-log10" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#log10-x-es5-ext-math-log10" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" log10(x) "),
        _c("em", [_vm._v("(es5-ext/math/log10)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log10",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "sign-x-es5-ext-math-sign" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#sign-x-es5-ext-math-sign" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" sign(x) "),
        _c("em", [_vm._v("(es5-ext/math/sign)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.sign",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "sinh-x-es5-ext-math-sinh" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#sinh-x-es5-ext-math-sinh" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" sinh(x) "),
        _c("em", [_vm._v("(es5-ext/math/sinh)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.sinh",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tanh-x-es5-ext-math-tanh" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tanh-x-es5-ext-math-tanh" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" tanh(x) "),
        _c("em", [_vm._v("(es5-ext/math/tanh)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.tanh",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "trunc-x-es5-ext-math-trunc" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#trunc-x-es5-ext-math-trunc" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" trunc(x) "),
        _c("em", [_vm._v("(es5-ext/math/trunc)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.trunc",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "number-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#number-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Number Constructor extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "epsilon-es5-ext-number-epsilon" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#epsilon-es5-ext-number-epsilon" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" EPSILON "),
        _c("em", [_vm._v("(es5-ext/number/epsilon)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.epsilon",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The difference between 1 and the smallest value greater than 1 that is representable as a Number value, which is approximately 2.2204460492503130808472633361816 x 10-16."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isfinite-x-es5-ext-number-is-finite" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isfinite-x-es5-ext-number-is-finite" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isFinite(x) "),
        _c("em", [_vm._v("(es5-ext/number/is-finite)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          ".\nWhether value is finite. Differs from global isNaN that it doesn't do type coercion."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isinteger-x-es5-ext-number-is-integer" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isinteger-x-es5-ext-number-is-integer" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isInteger(x) "),
        _c("em", [_vm._v("(es5-ext/number/is-integer)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isinteger",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nWhether value is integer.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isnan-x-es5-ext-number-is-nan" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isnan-x-es5-ext-number-is-nan" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isNaN(x) "),
        _c("em", [_vm._v("(es5-ext/number/is-nan)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isnan",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          ".\nWhether value is NaN. Differs from global isNaN that it doesn't do type coercion."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isnumber-x-es5-ext-number-is-number" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isnumber-x-es5-ext-number-is-number" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isNumber(x) "),
        _c("em", [_vm._v("(es5-ext/number/is-number)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Whether given value is number")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "issafeinteger-x-es5-ext-number-is-safe-integer" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#issafeinteger-x-es5-ext-number-is-safe-integer" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" isSafeInteger(x) "),
          _c("em", [_vm._v("(es5-ext/number/is-safe-integer)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.issafeinteger",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "max-safe-integer-es5-ext-number-max-safe-integer" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#max-safe-integer-es5-ext-number-max-safe-integer"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" MAX*SAFE_INTEGER *(es5-ext/number/max-safe-integer)_")
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.maxsafeinteger",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nThe value of Number.MAX_SAFE_INTEGER is 9007199254740991.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "min-safe-integer-es5-ext-number-min-safe-integer" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#min-safe-integer-es5-ext-number-min-safe-integer"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" MIN*SAFE_INTEGER *(es5-ext/number/min-safe-integer)_")
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.minsafeinteger",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          ".\nThe value of Number.MIN_SAFE_INTEGER is -9007199254740991 (253-1)."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tointeger-x-es5-ext-number-to-integer" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tointeger-x-es5-ext-number-to-integer" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" toInteger(x) "),
        _c("em", [_vm._v("(es5-ext/number/to-integer)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Converts value to integer")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "toposinteger-x-es5-ext-number-to-pos-integer" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#toposinteger-x-es5-ext-number-to-pos-integer" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" toPosInteger(x) "),
          _c("em", [_vm._v("(es5-ext/number/to-pos-integer)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Converts value to positive integer. If provided value is less than 0, then 0 is returned"
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "touint32-x-es5-ext-number-to-uint32" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#touint32-x-es5-ext-number-to-uint32" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" toUint32(x) "),
        _c("em", [_vm._v("(es5-ext/number/to-uint32)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Converts value to unsigned 32 bit integer. This type is used for array lengths.\nSee: http://www.2ality.com/2012/02/js-integers.html"
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "number-prototype-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#number-prototype-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Number Prototype extensions")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "num-pad-length-precision-es5-ext-number-pad" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#num-pad-length-precision-es5-ext-number-pad" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" num.pad(length[, precision]) "),
          _c("em", [_vm._v("(es5-ext/number/#/pad)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Pad given number with zeros. Returns string")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "object-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#object-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Object Constructor extensions")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "assign-target-source-sourcen-es5-ext-object-assign" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#assign-target-source-sourcen-es5-ext-object-assign"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" assign(target, source[, …sourcen]) "),
          _c("em", [_vm._v("(es5-ext/object/assign)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nExtend "),
        _c("em", [_vm._v("target")]),
        _vm._v(
          " by enumerable own properties of other objects. If properties are already set on target object, they will be overwritten."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "clear-obj-es5-ext-object-clear" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#clear-obj-es5-ext-object-clear" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" clear(obj) "),
        _c("em", [_vm._v("(es5-ext/object/clear)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Remove all enumerable own properties of the object")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "compact-obj-es5-ext-object-compact" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#compact-obj-es5-ext-object-compact" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" compact(obj) "),
        _c("em", [_vm._v("(es5-ext/object/compact)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns copy of the object with all enumerable properties that have no falsy values"
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "compare-obj1-obj2-es5-ext-object-compare" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#compare-obj1-obj2-es5-ext-object-compare" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" compare(obj1, obj2) "),
        _c("em", [_vm._v("(es5-ext/object/compare)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Universal cross-type compare function. To be used for e.g. array sort."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "copy-obj-es5-ext-object-copy" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#copy-obj-es5-ext-object-copy" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" copy(obj) "),
        _c("em", [_vm._v("(es5-ext/object/copy)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns copy of the object with all enumerable properties.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "copydeep-obj-es5-ext-object-copy-deep" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#copydeep-obj-es5-ext-object-copy-deep" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" copyDeep(obj) "),
        _c("em", [_vm._v("(es5-ext/object/copy-deep)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns deep copy of the object with all enumerable properties."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "count-obj-es5-ext-object-count" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#count-obj-es5-ext-object-count" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" count(obj) "),
        _c("em", [_vm._v("(es5-ext/object/count)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Counts number of enumerable own properties on object")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "create-obj-properties-es5-ext-object-create" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#create-obj-properties-es5-ext-object-create" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" create(obj[, properties]) "),
          _c("em", [_vm._v("(es5-ext/object/create)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("Object.create")]),
        _vm._v(" alternative that provides workaround for "),
        _c(
          "a",
          {
            attrs: {
              href: "http://code.google.com/p/v8/issues/detail?id=2804",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("V8 issue"), _c("OutboundLink")],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("When "),
        _c("code", [_vm._v("null")]),
        _vm._v(
          " is provided as a prototype, it's substituted with specially prepared object that derives from Object.prototype but has all Object.prototype properties shadowed with undefined."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It's quirky solution that allows us to have plain objects with no truthy properties but with turnable prototype."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Use only for objects that you plan to switch prototypes of and be aware of limitations of this workaround."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "eq-x-y-es5-ext-object-eq" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#eq-x-y-es5-ext-object-eq" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" eq(x, y) "),
        _c("em", [_vm._v("(es5-ext/object/eq)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Whether two values are equal, using "),
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("SameValueZero")]), _c("OutboundLink")],
          1
        ),
        _vm._v(" algorithm.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: { id: "every-obj-cb-thisarg-comparefn-es5-ext-object-every" }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#every-obj-cb-thisarg-comparefn-es5-ext-object-every"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" every(obj, cb[, thisArg[, compareFn]]) "),
          _c("em", [_vm._v("(es5-ext/object/every)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Analogous to Array.prototype.every. Returns true if every key-value pair in this object satisfies the provided testing function.\nOptionally "
        ),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(
          " can be provided which assures that keys are tested in given order. If provided "
        ),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(" is equal to "),
        _c("code", [_vm._v("true")]),
        _vm._v(", then order is alphabetical (by key).")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "filter-obj-cb-thisarg-es5-ext-object-filter" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#filter-obj-cb-thisarg-es5-ext-object-filter" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" filter(obj, cb[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/object/filter)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Analogous to Array.prototype.filter. Returns new object with properites for which "
        ),
        _c("em", [_vm._v("cb")]),
        _vm._v(" function returned truthy value.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "firstkey-obj-es5-ext-object-first-key" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#firstkey-obj-es5-ext-object-first-key" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" firstKey(obj) "),
        _c("em", [_vm._v("(es5-ext/object/first-key)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns first enumerable key of the object, as keys are unordered by specification, it can be any key of an object."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "flatten-obj-es5-ext-object-flatten" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#flatten-obj-es5-ext-object-flatten" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" flatten(obj) "),
        _c("em", [_vm._v("(es5-ext/object/flatten)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns new object, with flatten properties of input object")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v("flatten({ a: { b: 1 }, c: { d: 1 } }) =def { b: 1, d: 1 }")
        ])
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "foreach-obj-cb-thisarg-comparefn-es5-ext-object-for-each"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#foreach-obj-cb-thisarg-comparefn-es5-ext-object-for-each"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" forEach(obj, cb[, thisArg[, compareFn]]) "),
          _c("em", [_vm._v("(es5-ext/object/for-each)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Analogous to Array.prototype.forEach. Calls a function for each key-value pair found in object\nOptionally "
        ),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(
          " can be provided which assures that properties are iterated in given order. If provided "
        ),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(" is equal to "),
        _c("code", [_vm._v("true")]),
        _vm._v(", then order is alphabetical (by key).")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "getpropertynames-es5-ext-object-get-property-names" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#getpropertynames-es5-ext-object-get-property-names"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" getPropertyNames() "),
          _c("em", [_vm._v("(es5-ext/object/get-property-names)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Get all (not just own) property names of the object")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "is-x-y-es5-ext-object-is" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#is-x-y-es5-ext-object-is" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" is(x, y) "),
        _c("em", [_vm._v("(es5-ext/object/is)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Whether two values are equal, using "),
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("SameValue")]), _c("OutboundLink")],
          1
        ),
        _vm._v(" algorithm.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "isarraylike-x-es5-ext-object-is-array-like" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#isarraylike-x-es5-ext-object-is-array-like" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" isArrayLike(x) "),
          _c("em", [_vm._v("(es5-ext/object/is-array-like)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Whether object is array-like object")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "iscopy-x-y-es5-ext-object-is-copy" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#iscopy-x-y-es5-ext-object-is-copy" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isCopy(x, y) "),
        _c("em", [_vm._v("(es5-ext/object/is-copy)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Two values are considered a copy of same value when all of their own enumerable properties have same values."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "iscopydeep-x-y-es5-ext-object-is-copy-deep" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#iscopydeep-x-y-es5-ext-object-is-copy-deep" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" isCopyDeep(x, y) "),
          _c("em", [_vm._v("(es5-ext/object/is-copy-deep)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Deep comparision of objects")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isempty-obj-es5-ext-object-is-empty" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isempty-obj-es5-ext-object-is-empty" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isEmpty(obj) "),
        _c("em", [_vm._v("(es5-ext/object/is-empty)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("True if object doesn't have any own enumerable property")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isobject-arg-es5-ext-object-is-object" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isobject-arg-es5-ext-object-is-object" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isObject(arg) "),
        _c("em", [_vm._v("(es5-ext/object/is-object)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Whether value is not primitive")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "isplainobject-arg-es5-ext-object-is-plain-object" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#isplainobject-arg-es5-ext-object-is-plain-object"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" isPlainObject(arg) "),
          _c("em", [_vm._v("(es5-ext/object/is-plain-object)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Whether object is plain object, its protototype should be Object.prototype and it cannot be host object."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "keyof-obj-searchvalue-es5-ext-object-key-of" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#keyof-obj-searchvalue-es5-ext-object-key-of" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" keyOf(obj, searchValue) "),
          _c("em", [_vm._v("(es5-ext/object/key-of)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Search object for value")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "keys-obj-es5-ext-object-keys" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#keys-obj-es5-ext-object-keys" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" keys(obj) "),
        _c("em", [_vm._v("(es5-ext/object/keys)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("em", [_vm._v("Updated with ECMAScript 6")]), _c("OutboundLink")],
          1
        ),
        _vm._v(".\nES6's version of "),
        _c("code", [_vm._v("keys")]),
        _vm._v(", doesn't throw on primitive input")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "map-obj-cb-thisarg-es5-ext-object-map" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#map-obj-cb-thisarg-es5-ext-object-map" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" map(obj, cb[, thisArg]) "),
        _c("em", [_vm._v("(es5-ext/object/map)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Analogous to Array.prototype.map. Creates a new object with properties which values are results of calling a provided function on every key-value pair in this object."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "mapkeys-obj-cb-thisarg-es5-ext-object-map-keys" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#mapkeys-obj-cb-thisarg-es5-ext-object-map-keys" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" mapKeys(obj, cb[, thisArg]) "),
          _c("em", [_vm._v("(es5-ext/object/map-keys)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Create new object with same values, but remapped keys")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "mixin-target-source-es5-ext-object-mixin" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#mixin-target-source-es5-ext-object-mixin" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" mixin(target, source) "),
        _c("em", [_vm._v("(es5-ext/object/mixin)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Extend "),
        _c("em", [_vm._v("target")]),
        _vm._v(
          " by all own properties of other objects. Properties found in both objects will be overwritten (unless they're not configurable and cannot be overwritten).\n"
        ),
        _c("em", [_vm._v("It was for a moment part of ECMAScript 6 draft.")])
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "mixinprototypes-target-source-es5-ext-object-mixin-prototypes"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#mixinprototypes-target-source-es5-ext-object-mixin-prototypes"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" mixinPrototypes(target, …source]) "),
          _c("em", [_vm._v("(es5-ext/object/mixin-prototypes)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Extends "),
        _c("em", [_vm._v("target")]),
        _vm._v(
          ", with all source and source's prototype properties.\nUseful as an alternative for "
        ),
        _c("code", [_vm._v("setPrototypeOf")]),
        _vm._v(" in environments in which it cannot be shimmed (no "),
        _c("code", [_vm._v("__proto__")]),
        _vm._v(" support).")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "normalizeoptions-options-es5-ext-object-normalize-options"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#normalizeoptions-options-es5-ext-object-normalize-options"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" normalizeOptions(options) "),
          _c("em", [_vm._v("(es5-ext/object/normalize-options)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Normalizes options object into flat plain object.")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Useful for functions in which we either need to keep options object for future reference or need to modify it for internal use."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("It never returns input "),
          _c("code", [_vm._v("options")]),
          _vm._v(" object back (always a copy is created)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("options")]),
          _vm._v(
            " can be undefined in such case empty plain object is returned."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Copies all enumerable properties found down prototype chain.")
        ])
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "primitiveset-names-es5-ext-object-primitive-set" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#primitiveset-names-es5-ext-object-primitive-set"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" primitiveSet([…names]) "),
          _c("em", [_vm._v("(es5-ext/object/primitive-set)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Creates "),
        _c("code", [_vm._v("null")]),
        _vm._v(
          " prototype based plain object, and sets on it all property names provided in arguments to true."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: { id: "safetraverse-obj-names-es5-ext-object-safe-traverse" }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#safetraverse-obj-names-es5-ext-object-safe-traverse"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" safeTraverse(obj[, …names]) "),
          _c("em", [_vm._v("(es5-ext/object/safe-traverse)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Safe navigation of object properties. See http://wiki.ecmascript.org/doku.php?id=strawman:existential_operator"
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "serialize-value-es5-ext-object-serialize" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#serialize-value-es5-ext-object-serialize" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" serialize(value) "),
        _c("em", [_vm._v("(es5-ext/object/serialize)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Serialize value into string. Differs from "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("JSON.stringify"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " that it serializes also dates, functions and regular expresssions."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "setprototypeof-object-proto-es5-ext-object-set-prototype-of"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#setprototypeof-object-proto-es5-ext-object-set-prototype-of"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" setPrototypeOf(object, proto) "),
          _c("em", [_vm._v("(es5-ext/object/set-prototype-of)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.setprototypeof",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          ".\nIf native version is not provided, it depends on existence of "
        ),
        _c("code", [_vm._v("__proto__")]),
        _vm._v(" functionality, if it's missing, "),
        _c("code", [_vm._v("null")]),
        _vm._v(" instead of function is exposed.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "some-obj-cb-thisarg-comparefn-es5-ext-object-some" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#some-obj-cb-thisarg-comparefn-es5-ext-object-some"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" some(obj, cb[, thisArg[, compareFn]]) "),
          _c("em", [_vm._v("(es5-ext/object/some)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Analogous to Array.prototype.some Returns true if any key-value pair satisfies the provided\ntesting function.\nOptionally "
        ),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(
          " can be provided which assures that keys are tested in given order. If provided "
        ),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(" is equal to "),
        _c("code", [_vm._v("true")]),
        _vm._v(", then order is alphabetical (by key).")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "toarray-obj-cb-thisarg-comparefn-es5-ext-object-to-array"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#toarray-obj-cb-thisarg-comparefn-es5-ext-object-to-array"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" toArray(obj[, cb[, thisArg[, compareFn]]]) "),
          _c("em", [_vm._v("(es5-ext/object/to-array)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Creates an array of results of calling a provided function on every key-value pair in this object.\nOptionally "
        ),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(
          " can be provided which assures that results are added in given order. If provided "
        ),
        _c("em", [_vm._v("compareFn")]),
        _vm._v(" is equal to "),
        _c("code", [_vm._v("true")]),
        _vm._v(", then order is alphabetical (by key).")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "unserialize-str-es5-ext-object-unserialize" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#unserialize-str-es5-ext-object-unserialize" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" unserialize(str) "),
          _c("em", [_vm._v("(es5-ext/object/unserialize)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Userializes value previously serialized with "),
        _c("a", { attrs: { href: "#serializevalue-es5-extobjectserialize" } }, [
          _vm._v("serialize")
        ])
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "validcallable-x-es5-ext-object-valid-callable" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#validcallable-x-es5-ext-object-valid-callable" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" validCallable(x) "),
          _c("em", [_vm._v("(es5-ext/object/valid-callable)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If given object is not callable throw TypeError in other case return it."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "validobject-x-es5-ext-object-valid-object" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#validobject-x-es5-ext-object-valid-object" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" validObject(x) "),
        _c("em", [_vm._v("(es5-ext/object/valid-object)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Throws error if given value is not an object, otherwise it is returned."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "validvalue-x-es5-ext-object-valid-value" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#validvalue-x-es5-ext-object-valid-value" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" validValue(x) "),
        _c("em", [_vm._v("(es5-ext/object/valid-value)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Throws error if given value is "),
        _c("code", [_vm._v("null")]),
        _vm._v(" or "),
        _c("code", [_vm._v("undefined")]),
        _vm._v(", otherwise returns value.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "promise-prototype-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#promise-prototype-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Promise Prototype extensions")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "promise-finally-onfinally-es5-ext-promise-finally" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#promise-finally-onfinally-es5-ext-promise-finally"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" promise.finally(onFinally) "),
          _c("em", [_vm._v("(es5-ext/promise/#/finally)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "https://tc39.github.io/ecma262/#sec-promise.prototype.finally",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 2018")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "regexp-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#regexp-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" RegExp Constructor extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "escape-str-es5-ext-reg-exp-escape" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#escape-str-es5-ext-reg-exp-escape" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" escape(str) "),
        _c("em", [_vm._v("(es5-ext/reg-exp/escape)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Escapes string to be used in regular expression")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isregexp-x-es5-ext-reg-exp-is-reg-exp" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isregexp-x-es5-ext-reg-exp-is-reg-exp" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isRegExp(x) "),
        _c("em", [_vm._v("(es5-ext/reg-exp/is-reg-exp)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Whether object is regular expression")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "validregexp-x-es5-ext-reg-exp-valid-reg-exp" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#validregexp-x-es5-ext-reg-exp-valid-reg-exp" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" validRegExp(x) "),
          _c("em", [_vm._v("(es5-ext/reg-exp/valid-reg-exp)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If object is regular expression it is returned, otherwise TypeError is thrown."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "regexp-prototype-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#regexp-prototype-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" RegExp Prototype extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "re-issticky-x-es5-ext-reg-exp-is-sticky" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#re-issticky-x-es5-ext-reg-exp-is-sticky" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" re.isSticky(x) "),
        _c("em", [_vm._v("(es5-ext/reg-exp/#/is-sticky)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Whether regular expression has "),
        _c("code", [_vm._v("sticky")]),
        _vm._v(" flag.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("It's to be used as counterpart to "),
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.sticky",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("regExp.sticky"), _c("OutboundLink")],
          1
        ),
        _vm._v(" if it's not implemented.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "re-isunicode-x-es5-ext-reg-exp-is-unicode" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#re-isunicode-x-es5-ext-reg-exp-is-unicode" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" re.isUnicode(x) "),
        _c("em", [_vm._v("(es5-ext/reg-exp/#/is-unicode)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Whether regular expression has "),
        _c("code", [_vm._v("unicode")]),
        _vm._v(" flag.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("It's to be used as counterpart to "),
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.unicode",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("regExp.unicode"), _c("OutboundLink")],
          1
        ),
        _vm._v(" if it's not implemented.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "re-match-string-es5-ext-reg-exp-match" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#re-match-string-es5-ext-reg-exp-match" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" re.match(string) "),
        _c("em", [_vm._v("(es5-ext/reg-exp/#/match)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.match",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "re-replace-string-replacevalue-es5-ext-reg-exp-replace"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#re-replace-string-replacevalue-es5-ext-reg-exp-replace"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" re.replace(string, replaceValue) "),
          _c("em", [_vm._v("(es5-ext/reg-exp/#/replace)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.replace",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "re-search-string-es5-ext-reg-exp-search" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#re-search-string-es5-ext-reg-exp-search" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" re.search(string) "),
        _c("em", [_vm._v("(es5-ext/reg-exp/#/search)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.search",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "re-split-string-es5-ext-reg-exp-search" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#re-split-string-es5-ext-reg-exp-search" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" re.split(string) "),
        _c("em", [_vm._v("(es5-ext/reg-exp/#/search)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.split",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "re-sticky-es5-ext-reg-exp-sticky-implement" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#re-sticky-es5-ext-reg-exp-sticky-implement" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" re.sticky "),
          _c("em", [_vm._v("(es5-ext/reg-exp/#/sticky/implement)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.sticky",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nIt's a getter, so only "),
        _c("code", [_vm._v("implement")]),
        _vm._v(" and "),
        _c("code", [_vm._v("is-implemented")]),
        _vm._v(" modules are provided.")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "re-unicode-es5-ext-reg-exp-unicode-implement" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#re-unicode-es5-ext-reg-exp-unicode-implement" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" re.unicode "),
          _c("em", [_vm._v("(es5-ext/reg-exp/#/unicode/implement)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.unicode",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nIt's a getter, so only "),
        _c("code", [_vm._v("implement")]),
        _vm._v(" and "),
        _c("code", [_vm._v("is-implemented")]),
        _vm._v(" modules are provided.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "string-constructor-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#string-constructor-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" String Constructor extensions")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "formatmethod-fmap-es5-ext-string-format-method" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#formatmethod-fmap-es5-ext-string-format-method" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" formatMethod(fMap) "),
          _c("em", [_vm._v("(es5-ext/string/format-method)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Creates format method. It's used e.g. to create "),
        _c("code", [_vm._v("Date.prototype.format")]),
        _vm._v(" method")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "fromcodepoint-codepoints-es5-ext-string-from-code-point"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#fromcodepoint-codepoints-es5-ext-string-from-code-point"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" fromCodePoint([…codePoints]) "),
          _c("em", [_vm._v("(es5-ext/string/from-code-point)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.fromcodepoint",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "isstring-x-es5-ext-string-is-string" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#isstring-x-es5-ext-string-is-string" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" isString(x) "),
        _c("em", [_vm._v("(es5-ext/string/is-string)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Whether object is string")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "randomuniq-es5-ext-string-random-uniq" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#randomuniq-es5-ext-string-random-uniq" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" randomUniq() "),
        _c("em", [_vm._v("(es5-ext/string/random-uniq)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns randomly generated id, with guarantee of local uniqueness (no same id will be returned twice)"
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "raw-callsite-substitutions-es5-ext-string-raw" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#raw-callsite-substitutions-es5-ext-string-raw" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" raw(callSite[, …substitutions]) "),
          _c("em", [_vm._v("(es5-ext/string/raw)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.raw",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "string-prototype-extensions" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#string-prototype-extensions" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" String Prototype extensions")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "str-at-pos-es5-ext-string-at" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#str-at-pos-es5-ext-string-at" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" str.at(pos) "),
        _c("em", [_vm._v("(es5-ext/string/#/at)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v(
            "Proposed for ECMAScript 6/7 standard, but not (yet) in a draft"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Returns a string at given position in Unicode-safe manner.\nBased on "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/mathiasbynens/String.prototype.at",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("implementation by Mathias Bynens"), _c("OutboundLink")],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "str-cameltohyphen-es5-ext-string-camel-to-hyphen" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#str-cameltohyphen-es5-ext-string-camel-to-hyphen"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.camelToHyphen() "),
          _c("em", [_vm._v("(es5-ext/string/#/camel-to-hyphen)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Convert camelCase string to hyphen separated, e.g. one-two-three -> oneTwoThree.\nUseful when converting names from js property convention into filename convention."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "str-capitalize-es5-ext-string-capitalize" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#str-capitalize-es5-ext-string-capitalize" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" str.capitalize() "),
        _c("em", [_vm._v("(es5-ext/string/#/capitalize)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Capitalize first character of a string")]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id:
              "str-caseinsensitivecompare-str-es5-ext-string-case-insensitive-compare"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#str-caseinsensitivecompare-str-es5-ext-string-case-insensitive-compare"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.caseInsensitiveCompare(str) "),
          _c("em", [_vm._v("(es5-ext/string/#/case-insensitive-compare)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Case insensitive compare")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "str-codepointat-pos-es5-ext-string-code-point-at" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#str-codepointat-pos-es5-ext-string-code-point-at"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.codePointAt(pos) "),
          _c("em", [_vm._v("(es5-ext/string/#/code-point-at)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.codepointat",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Based on "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/mathiasbynens/String.prototype.codePointAt",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("implementation by Mathias Bynens"), _c("OutboundLink")],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "str-contains-searchstring-position-es5-ext-string-contains"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#str-contains-searchstring-position-es5-ext-string-contains"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.contains(searchString[, position]) "),
          _c("em", [_vm._v("(es5-ext/string/#/contains)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.contains",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Whether string contains given string.")]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "str-endswith-searchstring-endposition-es5-ext-string-ends-with"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#str-endswith-searchstring-endposition-es5-ext-string-ends-with"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.endsWith(searchString[, endPosition]) "),
          _c("em", [_vm._v("(es5-ext/string/#/ends-with)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.endswith",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nWhether strings ends with given string")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "str-hyphentocamel-es5-ext-string-hyphen-to-camel" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#str-hyphentocamel-es5-ext-string-hyphen-to-camel"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.hyphenToCamel() "),
          _c("em", [_vm._v("(es5-ext/string/#/hyphen-to-camel)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Convert hyphen separated string to camelCase, e.g. one-two-three -> oneTwoThree.\nUseful when converting names from filename convention to js property name convention."
        )
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "str-indent-str-count-es5-ext-string-indent" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#str-indent-str-count-es5-ext-string-indent" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.indent(str[, count]) "),
          _c("em", [_vm._v("(es5-ext/string/#/indent)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Indents each line with provided "),
        _c("em", [_vm._v("str")]),
        _vm._v(" (if "),
        _c("em", [_vm._v("count")]),
        _vm._v(" given then "),
        _c("em", [_vm._v("str")]),
        _vm._v(" is repeated "),
        _c("em", [_vm._v("count")]),
        _vm._v(" times).")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "str-last-es5-ext-string-last" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#str-last-es5-ext-string-last" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" str.last() "),
        _c("em", [_vm._v("(es5-ext/string/#/last)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Return last character")]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "str-normalize-form-es5-ext-string-normalize" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#str-normalize-form-es5-ext-string-normalize" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.normalize([form]) "),
          _c("em", [_vm._v("(es5-ext/string/#/normalize)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          ".\nReturns the Unicode Normalization Form of a given string.\nBased on Matsuza's version. Code used for integrated shim can be found at "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/walling/unorm/blob/master/lib/unorm.js",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("github.com/walling/unorm"), _c("OutboundLink")],
          1
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "str-pad-fill-length-es5-ext-string-pad" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#str-pad-fill-length-es5-ext-string-pad" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" str.pad(fill[, length]) "),
        _c("em", [_vm._v("(es5-ext/string/#/pad)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Pad string with "),
        _c("em", [_vm._v("fill")]),
        _vm._v(".\nIf "),
        _c("em", [_vm._v("length")]),
        _vm._v(" si given than "),
        _c("em", [_vm._v("fill")]),
        _vm._v(" is reapated "),
        _c("em", [_vm._v("length")]),
        _vm._v(" times.\nIf "),
        _c("em", [_vm._v("length")]),
        _vm._v(" is negative then pad is applied from right.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "str-repeat-n-es5-ext-string-repeat" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#str-repeat-n-es5-ext-string-repeat" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" str.repeat(n) "),
        _c("em", [_vm._v("(es5-ext/string/#/repeat)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.repeat",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nRepeat given string "),
        _c("em", [_vm._v("n")]),
        _vm._v(" times")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id: "str-plainreplace-search-replace-es5-ext-string-plain-replace"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#str-plainreplace-search-replace-es5-ext-string-plain-replace"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.plainReplace(search, replace) "),
          _c("em", [_vm._v("(es5-ext/string/#/plain-replace)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Simple "),
        _c("code", [_vm._v("replace")]),
        _vm._v(
          " version. Doesn't support regular expressions. Replaces just first occurrence of search string. Doesn't support insert patterns, therefore it is safe to replace text with text obtained programmatically (there's no need for additional "
        ),
        _c("em", [_vm._v("$")]),
        _vm._v(" characters escape in such case).")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id:
              "str-plainreplaceall-search-replace-es5-ext-string-plain-replace-all"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#str-plainreplaceall-search-replace-es5-ext-string-plain-replace-all"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.plainReplaceAll(search, replace) "),
          _c("em", [_vm._v("(es5-ext/string/#/plain-replace-all)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Simple "),
        _c("code", [_vm._v("replace")]),
        _vm._v(
          " version. Doesn't support regular expressions. Replaces all occurrences of search string. Doesn't support insert patterns, therefore it is safe to replace text with text obtained programmatically (there's no need for additional "
        ),
        _c("em", [_vm._v("$")]),
        _vm._v(" characters escape in such case).")
      ]),
      _vm._v(" "),
      _c(
        "h4",
        {
          attrs: {
            id:
              "str-startswith-searchstring-position-es5-ext-string-starts-with"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#str-startswith-searchstring-position-es5-ext-string-starts-with"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" str.startsWith(searchString[, position]) "),
          _c("em", [_vm._v("(es5-ext/string/#/starts-with)")])
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.startswith",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(".\nWhether strings starts with given string")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "str-iterator-es5-ext-string-iterator" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#str-iterator-es5-ext-string-iterator" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" str[@@iterator] "),
        _c("em", [_vm._v("(es5-ext/string/#/@@iterator)")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype-@@iterator",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("em", [_vm._v("Introduced with ECMAScript 6")]),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          ".\nReturns iterator object which traverses all string characters (with respect to unicode symbols)"
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "tests" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#tests" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Tests")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", [_c("code", [_vm._v("$ npm test\n")])])
      ]),
      _c("h2", { attrs: { id: "security-contact-information" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#security-contact-information" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Security contact information")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("To report a security vulnerability, please use the "),
        _c(
          "a",
          {
            attrs: {
              href: "https://tidelift.com/security",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Tidelift security contact"), _c("OutboundLink")],
          1
        ),
        _vm._v(". Tidelift will coordinate the fix and disclosure.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "es5-ext-for-enterprise" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#es5-ext-for-enterprise" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" es5-ext for enterprise")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Available as part of the Tidelift Subscription")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The maintainers of es5-ext and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. "
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://tidelift.com/subscription/pkg/npm-es5-ext?utm_source=npm-es5-ext&utm_medium=referral&utm_campaign=enterprise&utm_term=repo",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Learn more."), _c("OutboundLink")],
          1
        )
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}