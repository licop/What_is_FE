{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/istanbul-lib-source-maps/node_modules/source-map/CHANGELOG.md?vue&type=template&id=360c0112&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/istanbul-lib-source-maps/node_modules/source-map/CHANGELOG.md","mtime":1492467890000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2UtbG9nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjaGFuZ2UtbG9nIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDaGFuZ2UgTG9nIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtNS02IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC01LTYiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjUuNiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeCBmb3IgcmVncmVzc2lvbiB3aGVuIHBlb3BsZSB3ZXJlIHVzaW5nIG51bWJlcnMgYXMgbmFtZXMgaW4gc291cmNlIG1hcHMuIFNlZVxuIzIzNi4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtNS01IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC01LTUiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjUuNSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJ0ZpeCAicmVncmVzc2lvbiIgb2YgdW5zdXBwb3J0ZWQsIGltcGxlbWVudGF0aW9uIGJlaGF2aW9yIHRoYXQgaGFsZiB0aGUgd29ybGRcbmhhcHBlbnMgdG8gaGF2ZSBjb21lIHRvIGRlcGVuZCBvbi4gU2VlICMyMzUuJwogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkZpeCByZWdyZXNzaW9uIGludm9sdmluZyBmdW5jdGlvbiBob2lzdGluZyBpbiBTcGlkZXJNb25rZXkuIFNlZSAjMjMzLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC01LTQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTUtNCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuNS40IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTGFyZ2UgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIHRvIHNvdXJjZS1tYXAgc2VyaWFsaXphdGlvbi4gU2VlICMyMjggYW5kICMyMjkuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTUtMyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtNS0zIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC41LjMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJEbyBub3QgaW5jbHVkZSB1bm5lY2Vzc2FyeSBkaXN0cmlidXRpb24gZmlsZXMuIFNlZVxuY29tbWl0IGVmNzAwNmY4ZDE2NDdlMGE4M2ZkYzYwZjA0ZjVhN2NhNTQ4ODZmODYuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTUtMiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtNS0yIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC41LjIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbmNsdWRlIGJyb3dzZXIgZGlzdHJpYnV0aW9ucyBvZiB0aGUgbGlicmFyeSBpbiBwYWNrYWdlLmpzb24ncyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaWxlcyIpXSksCiAgICAgICAgICBfdm0uX3YoIi4gU2VlXG5pc3N1ZSAjMjEyLiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtNS0xIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC01LTEiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjUuMSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeCBsYXRlbnQgYnVncyBpbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzLiBTZWVcbmZmMDUyNzRiZWNjOWU2ZTEyOTVlZDYwZjNlYTA5MGQzMWQ4NDMzNzkuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTUtMCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtNS0wIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC41LjAiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX2MoInAiLCBbX3ZtLl92KCJOb2RlIDAuOCBpcyBubyBsb25nZXIgc3VwcG9ydGVkLiIpXSldKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIlVzZSB3ZWJwYWNrIGluc3RlYWQgb2YgZHJ5aWNlIGZvciBidW5kbGluZy4iKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQmlnIHNwZWVkdXBzIHNlcmlhbGl6aW5nIHNvdXJjZSBtYXBzLiBTZWUgcHVsbCByZXF1ZXN0ICMyMDMuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkZpeCBhIGJ1ZyB3aXRoICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGFuZCBzb3VyY2VzIHRoYXRcbmV4cGxpY2l0bHkgc3RhcnQgd2l0aCB0aGUgc291cmNlIHJvb3QuIFNlZSBpc3N1ZSAjMTk5LiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC00LTQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTQtNCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuNC40IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiRml4IGFuIGlzc3VlIHdoZXJlIHVzaW5nIGEgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTWFwR2VuZXJhdG9yIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgYWZ0ZXIgaGF2aW5nIGNyZWF0ZWQgYVxuIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTWFwQ29uc3VtZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBmcm9tIGl0IHZpYSAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgZmFpbGVkLiBTZWVcbmlzc3VlICMxOTEuIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiRml4IGFuIGlzc3VlIHdpdGggd2hlcmUgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTWFwR2VuZXJhdG9yIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgd291bGQgbWlzdGFrZW5seSBjb25zaWRlclxuZGlmZmVyZW50IG1hcHBpbmdzIGFzIGR1cGxpY2F0ZXMgb2YgZWFjaCBvdGhlciBhbmQgYXZvaWQgZ2VuZXJhdGluZyB0aGVtLiBTZWVcbmlzc3VlICMxOTIuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTQtMyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtNC0zIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC40LjMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJBIHZlcnkgbGFyZ2UgbnVtYmVyIG9mIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cywgcGFydGljdWxhcmx5IHdoZW4gcGFyc2luZ1xuc291cmNlIG1hcHMuIENvbGxlY3RpdmVseSBhYm91dCA3NSUgb2YgdGltZSBzaGF2ZWQgb2ZmIG9mIHRoZSBzb3VyY2UgbWFwXG5wYXJzaW5nIGJlbmNobWFyayEiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiRml4IGEgYnVnIGluICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgYW5kIGZ1enp5XG5zZWFyY2hpbmcgaW4gdGhlIHByZXNlbmNlIG9mIGEgY29sdW1uIG9wdGlvbi4gU2VlIGlzc3VlICMxNzcuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkZpeCBhIGJ1ZyB3aXRoIGpvaW5pbmcgYSBzb3VyY2UgYW5kIGl0cyBzb3VyY2Ugcm9vdCB3aGVuIHRoZSBzb3VyY2UgaXMgYWJvdmVcbnRoZSByb290LiBTZWUgaXNzdWUgIzE4Mi4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiQWRkIHRoZSAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgbWV0aG9kIHRvXG5kZXRlcm1pbmUgd2hlbiBhbGwgc291cmNlcycgY29udGVudHMgYXJlIGlubGluZWQgaW50byB0aGUgc291cmNlIG1hcC4gU2VlXG5pc3N1ZSAjMTkwLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC00LTIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTQtMiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuNC4yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiQWRkIGFuICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5ucG1pZ25vcmUiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBmaWxlIHNvIHRoYXQgdGhlIGJlbmNobWFya3MgYXJlbid0IHB1bGxlZCBkb3duIGJ5XG5kZXBlbmRlbnQgcHJvamVjdHMuIElzc3VlICMxNjkuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkFkZCBhbiBvcHRpb25hbCAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb2x1bW4iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBhcmd1bWVudCB0b1xuIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICAgIF92bS5fdigiU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBhbmQgYmV0dGVyIGhhbmRsZSBsaW5lc1xud2l0aCBubyBtYXBwaW5ncy4gSXNzdWVzICMxNzIgYW5kICMxNzMuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTQtMSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtNC0xIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC40LjEiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJGaXggYWNjaWRlbnRhbGx5IGRlZmluaW5nIGEgZ2xvYmFsIHZhcmlhYmxlLiAjMTcwLiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtNC0wIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC00LTAiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjQuMCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBkZWZhdWx0IGRpcmVjdGlvbiBmb3IgZnV6enkgc2VhcmNoaW5nIHdhcyBjaGFuZ2VkIGJhY2sgdG8gaXRzIG9yaWdpbmFsXG5kaXJlY3Rpb24uIFNlZSAjMTY0LiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJUaGVyZSBpcyBub3cgYSAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiaWFzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgb3B0aW9uIHlvdSBjYW4gc3VwcGx5IHRvICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNvdXJjZU1hcENvbnN1bWVyIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgdG8gY29udHJvbFxudGhlIGZ1enp5IHNlYXJjaGluZyBkaXJlY3Rpb24uIFNlZSAjMTY3LiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkFib3V0IGFuIDglIHNwZWVkIHVwIGluIHBhcnNpbmcgc291cmNlIG1hcHMuIFNlZSAjMTU5LiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkFkZGVkIGEgYmVuY2htYXJrIGZvciBwYXJzaW5nIGFuZCBnZW5lcmF0aW5nIHNvdXJjZSBtYXBzLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTMtMCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMy0wIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC4zLjAiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJDaGFuZ2UgdGhlIGRlZmF1bHQgZGlyZWN0aW9uIHRoYXQgc2VhcmNoaW5nIGZvciBwb3NpdGlvbnMgZnV6emVzIHdoZW4gdGhlcmUgaXNcbm5vdCBhbiBleGFjdCBtYXRjaC4gU2VlICMxNTQuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlN1cHBvcnQgZm9yIGVudmlyb25tZW50cyB1c2luZyBqc29uMi5qcyBmb3IgSlNPTiBzZXJpYWxpemF0aW9uLiBTZWUgIzE1Ni4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMi0wIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC0yLTAiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjIuMCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJ1N1cHBvcnQgZm9yIGNvbnN1bWluZyAiaW5kZXhlZCIgc291cmNlIG1hcHMgd2hpY2ggZG8gbm90IGhhdmUgYW55IHJlbW90ZVxuc2VjdGlvbnMuIFNlZSBwdWxsIHJlcXVlc3QgIzEyNy4gVGhpcyBpbnRyb2R1Y2VzIGEgbWlub3IgYmFja3dhcmRzXG5pbmNvbXBhdGliaWxpdHkgaWYgeW91IGFyZSBtb25rZXkgcGF0Y2hpbmcgJwogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlIildKSwKICAgICAgICAgIF92bS5fdigiXG5tZXRob2RzLiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS00MyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS00MyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS40MyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTWFwR2VuZXJhdG9yIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTm9kZSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIFNlZSBpc3N1ZVxuIzE0OCBmb3Igc29tZSBkaXNjdXNzaW9uIGFuZCBpc3N1ZXMgIzE1MCwgIzE1MSwgYW5kICMxNTIgZm9yIGltcGxlbWVudGF0aW9ucy4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS00MiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS00MiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS40MiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4IGFuIGlzc3VlIHdoZXJlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTb3VyY2VOb2RlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgInMgZnJvbSBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHNvdXJjZS1tYXBcbmxpYnJhcnkgY291bGRuJ3QgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGVhY2ggb3RoZXIuIFNlZSBpc3N1ZSAjMTQyLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC0xLTQxIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC0xLTQxIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC4xLjQxIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAnRml4IGEgYnVnIHdpdGggZ2V0dGluZyB0aGUgc291cmNlIGNvbnRlbnQgb2YgcmVsYXRpdmUgc291cmNlcyB3aXRoIGEgIi4vIlxucHJlZml4LiBTZWUgaXNzdWUgIzE0NSBhbmQgJwogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogImJ1Z3ppbC5sYS8xMDkwNzY4IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkJ1ZyAxMDkwNzY4IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkFkZCB0aGUgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICAgIF92bS5fdigiU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbXB1dGVDb2x1bW5TcGFucyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBtZXRob2QgdG8gY29tcHV0ZSB0aGVcbmNvbHVtbiBzcGFuIG9mIGVhY2ggbWFwcGluZy4iKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJBZGQgdGhlICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgbWV0aG9kIHRvIGZpbmRcbmFsbCBnZW5lcmF0ZWQgcG9zaXRpb25zIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIG9yaWdpbmFsIHNvdXJjZSBhbmQgbGluZS4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS00MCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS00MCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS40MCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyBmb3IgcGFyc2luZyBzb3VyY2UgbWFwcyBpbiBTb3VyY2VNYXBDb25zdW1lci4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0zOSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0zOSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4zOSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeCBhIGJ1ZyB3aGVyZSBzZXR0aW5nIGEgc291cmNlJ3MgY29udGVudHMgdG8gbnVsbCBiZWZvcmUgYW55IHNvdXJjZSBjb250ZW50XG5oYWQgYmVlbiBzZXQgYmVmb3JlIHRocmV3IGEgVHlwZUVycm9yLiBTZWUgaXNzdWUgIzEzMS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0zOCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0zOCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4zOCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeCBhIGJ1ZyB3aGVyZSBmaW5kaW5nIHJlbGF0aXZlIHBhdGhzIGZyb20gYW4gZW1wdHkgcGF0aCB3ZXJlIGNyZWF0aW5nXG5hYnNvbHV0ZSBwYXRocy4gU2VlIGlzc3VlICMxMjkuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMzciIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMzciIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMzciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaXggYSBidWcgd2hlcmUgaWYgdGhlIHNvdXJjZSByb290IHdhcyBhbiBlbXB0eSBzdHJpbmcsIHJlbGF0aXZlIHNvdXJjZSBwYXRoc1xud291bGQgdHVybiBpbnRvIGFic29sdXRlIHNvdXJjZSBwYXRocy4gSXNzdWUgIzEyNC4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0zNiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0zNiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4zNiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWxsb3cgdGhlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuYW1lcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBtYXBwaW5nIHByb3BlcnR5IHRvIGJlIGFuIGVtcHR5IHN0cmluZy4gSXNzdWUgIzEyMS4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMzUiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMzUiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMzUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJBIHRoaXJkIG9wdGlvbmFsIHBhcmFtZXRlciB3YXMgYWRkZWQgdG8gIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTm9kZS5mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiXG50byBzcGVjaWZ5IGEgcGF0aCB0aGF0IHJlbGF0aXZlIHNvdXJjZXMgaW4gdGhlIHNlY29uZCBwYXJhbWV0ZXIgc2hvdWxkIGJlXG5yZWxhdGl2ZSB0by4gSXNzdWUgIzEwNS4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiSWYgbm8gZmlsZSBwcm9wZXJ0eSBpcyBnaXZlbiB0byBhICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNvdXJjZU1hcEdlbmVyYXRvciIpXSksCiAgICAgICAgICAgIF92bS5fdigiLCB0aGVuIHRoZSByZXN1bHRpbmdcbnNvdXJjZSBtYXAgd2lsbCBubyBsb25nZXIgaGF2ZSBhICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51bGwiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBmaWxlIHByb3BlcnR5LiBUaGUgcHJvcGVydHkgd2lsbFxuc2ltcGx5IG5vdCBleGlzdC4gSXNzdWUgIzEwNC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiRml4ZWQgYSBidWcgd2hlcmUgY29uc2VjdXRpdmUgbmV3bGluZXMgd2VyZSBpZ25vcmVkIGluICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNvdXJjZU5vZGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoInMuXG5Jc3N1ZSAjMTE2LiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMzQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMzQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMzQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJNYWtlICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlNvdXJjZU5vZGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoJyB3b3JrIHdpdGggd2luZG93cyBzdHlsZSAoIlxcclxcbiIpIG5ld2xpbmVzLiBJc3N1ZSAjMTAzLicpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkZpeCBidWcgaW52b2x2aW5nIHNvdXJjZSBjb250ZW50cyBhbmQgdGhlXG4iKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIElzc3VlICMxMDAuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0zMyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0zMyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4zMyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkZpeCBzb21lIGVkZ2UgY2FzZXMgc3Vycm91bmRpbmcgcGF0aCBqb2luaW5nIGFuZCBVUkwgcmVzb2x1dGlvbi4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiQWRkIGEgdGhpcmQgcGFyYW1ldGVyIGZvciByZWxhdGl2ZSBwYXRoIHRvXG4iKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW19jKCJwIiwgW192bS5fdigiRml4IGlzc3VlcyB3aXRoIG1hcHBpbmdzIGFuZCBFT0xzLiIpXSldKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC0xLTMyIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC0xLTMyIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC4xLjMyIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRml4ZWQgYSBidWcgd2hlcmUgU291cmNlTWFwQ29uc3VtZXIgY291bGRuJ3QgaGFuZGxlIG5lZ2F0aXZlIHJlbGF0aXZlIGNvbHVtbnNcbihpc3N1ZSA5MikuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkZpeGVkIHRlc3QgcnVubmVyIHRvIGFjdHVhbGx5IHJlcG9ydCBudW1iZXIgb2YgZmFpbGVkIHRlc3RzIGFzIGl0cyBwcm9jZXNzXG5leGl0IGNvZGUuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkZpeGVkIGEgdHlwbyB3aGVuIHJlcG9ydGluZyBiYWQgbWFwcGluZ3MgKGlzc3VlIDg3KS4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC0xLTMxIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC0xLTMxIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC4xLjMxIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVsYXkgcGFyc2luZyB0aGUgbWFwcGluZ3MgaW4gU291cmNlTWFwQ29uc3VtZXIgdW50aWwgcXVlcmllZCBmb3IgYSBzb3VyY2VcbmxvY2F0aW9uLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJTdXBwb3J0IFNhc3Mgc291cmNlIG1hcHMgKHdoaWNoIGF0IHRoZSB0aW1lIG9mIHdyaXRpbmcgZGV2aWF0ZSBmcm9tIHRoZSBzcGVjXG5pbiBzbWFsbCB3YXlzKSBpbiBTb3VyY2VNYXBDb25zdW1lci4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0zMCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0zMCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4zMCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRvIG5vdCBqb2luIHNvdXJjZSByb290IHdpdGggYSBzb3VyY2UsIHdoZW4gdGhlIHNvdXJjZSBpcyBhIGRhdGEgVVJJLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJFeHRlbmQgdGhlIHRlc3QgcnVubmVyIHRvIGFsbG93IHJ1bm5pbmcgc2luZ2xlIHNwZWNpZmljIHRlc3QgZmlsZXMgYXQgYSB0aW1lLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJQZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMgaW4gIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTm9kZS5wcm90b3R5cGUud2FsayIpXSksCiAgICAgICAgICAgIF92bS5fdigiIGFuZFxuIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmVhY2hNYXBwaW5nIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiU291cmNlIG1hcCBicm93c2VyIGJ1aWxkcyB3aWxsIG5vdyB3b3JrIGluc2lkZSBXb3JrZXJzLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkJldHRlciBlcnJvciBtZXNzYWdlcyB3aGVuIGF0dGVtcHRpbmcgdG8gYWRkIGFuIGludmFsaWQgbWFwcGluZyB0byBhXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU291cmNlTWFwR2VuZXJhdG9yIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0yOSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0yOSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4yOSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWxsb3cgZHVwbGljYXRlIGVudHJpZXMgaW4gdGhlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuYW1lcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZXMiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGFycmF5cyBvZiBzb3VyY2UgbWFwc1xuKHVzdWFsbHkgZnJvbSBUeXBlU2NyaXB0KSB3ZSBhcmUgcGFyc2luZy4gRml4ZXMgZ2l0aHViIGlzc3VlIDcyLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC0xLTI4IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC0xLTI4IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC4xLjI4IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiU2tpcCBkdXBsaWNhdGUgbWFwcGluZ3Mgd2hlbiBjcmVhdGluZyBzb3VyY2UgbWFwcyBmcm9tIFNvdXJjZU5vZGU7IGdpdGh1YlxuaXNzdWUgNzUuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMjciIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMjciIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMjciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkRvbid0IHRocm93IGFuIGVycm9yIHdoZW4gdGhlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaWxlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBwcm9wZXJ0eSBpcyBtaXNzaW5nIGluIFNvdXJjZU1hcENvbnN1bWVyLFxud2UgZG9uJ3QgdXNlIGl0IGFueXdheS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0yNiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0yNiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4yNiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeCBTb3VyY2VOb2RlLmZyb21TdHJpbmdXaXRoU291cmNlTWFwIGZvciBlbXB0eSBtYXBzLiBGaXhlcyBnaXRodWIgaXNzdWUgNzAuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMjUiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMjUiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMjUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFtfYygibGkiLCBbX3ZtLl92KCJNYWtlIGNvbXBhdGlibGUgd2l0aCBicm93c2VyaWZ5IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMjQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMjQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMjQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeCBpc3N1ZSB3aXRoIGFic29sdXRlIHBhdGhzIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmlsZTovLyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgVVJJcy4gU2VlXG5odHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODU1OTciCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0yMyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0yMyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4yMyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeCBpc3N1ZSB3aXRoIGFic29sdXRlIHBhdGhzIGFuZCBzb3VyY2VzQ29udGVudCwgZ2l0aHViIGlzc3VlIDY0LiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC0xLTIyIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC0xLTIyIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC4xLjIyIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSWdub3JlIGR1cGxpY2F0ZSBtYXBwaW5ncyBpbiBTb3VyY2VNYXBHZW5lcmF0b3IuIEZpeGVzIGdpdGh1YiBpc3N1ZSAyMS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0yMSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0yMSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4yMSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeGVkIGhhbmRsaW5nIG9mIHNvdXJjZXMgdGhhdCBzdGFydCB3aXRoIGEgc2xhc2ggc28gdGhhdCB0aGV5IGFyZSByZWxhdGl2ZSB0b1xudGhlIHNvdXJjZSByb290J3MgaG9zdC4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0yMCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0yMCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4yMCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeGVkIGdpdGh1YiBpc3N1ZSAjNDM6IGFic29sdXRlIFVSTHMgYXJlbid0IGpvaW5lZCB3aXRoIHRoZSBzb3VyY2Ugcm9vdFxuYW55bW9yZS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0xOSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0xOSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4xOSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgW19jKCJsaSIsIFtfdm0uX3YoIlVzaW5nIFRyYXZpcyBDSSB0byBydW4gdGVzdHMuIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMTgiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMTgiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMTgiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJGaXhlZCBhIGJ1ZyBpbiB0aGUgaGFuZGxpbmcgb2Ygc291cmNlUm9vdC4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMTciIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMTciIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMTciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBZGRlZCBTb3VyY2VOb2RlLmZyb21TdHJpbmdXaXRoU291cmNlTWFwLiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0xNiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0xNiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4xNiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfYygicCIsIFtfdm0uX3YoIkFkZGVkIG1pc3NpbmcgZG9jdW1lbnRhdGlvbi4iKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiRml4ZWQgdGhlIGdlbmVyYXRpbmcgb2YgZW1wdHkgbWFwcGluZ3MgaW4gU291cmNlTm9kZS4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC0xLTE1IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC0xLTE1IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC4xLjE1IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQWRkZWQgU291cmNlTWFwR2VuZXJhdG9yLmFwcGx5U291cmNlTWFwLiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0xNCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0xNCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4xNCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRoZSBzb3VyY2VSb290IGlzIG5vdyBoYW5kbGVkIGNvbnNpc3RlbnRseS4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMTMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMTMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMTMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFtfYygibGkiLCBbX3ZtLl92KCJBZGRlZCBTb3VyY2VNYXBHZW5lcmF0b3IuZnJvbVNvdXJjZU1hcC4iKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzAtMS0xMiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzAtMS0xMiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIDAuMS4xMiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNvdXJjZU5vZGUgbm93IGdlbmVyYXRlcyBlbXB0eSBtYXBwaW5ncyB0b28uIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMC0xLTExIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMC0xLTExIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgMC4xLjExIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbX2MoImxpIiwgW192bS5fdigiQWRkZWQgbmFtZSBzdXBwb3J0IHRvIFNvdXJjZU5vZGUuIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8wLTEtMTAiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18wLTEtMTAiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAwLjEuMTAiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkIHNvdXJjZXNDb250ZW50IHN1cHBvcnQgdG8gdGhlIGN1c3RvbWVyIGFuZCBnZW5lcmF0b3IuIikKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}