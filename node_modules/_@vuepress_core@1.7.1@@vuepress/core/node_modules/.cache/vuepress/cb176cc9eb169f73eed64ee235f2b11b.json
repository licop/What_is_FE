{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/type-fest/readme.md?vue&type=template&id=4ba85b83&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/type-fest/readme.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("div", { attrs: { align: "center" } }, [
        _c("br"),
        _vm._v(" "),
        _c("br"),
        _vm._v(" "),
        _c("img", {
          attrs: { src: "media/logo.svg", alt: "type-fest", height: "300" }
        }),
        _vm._v(" "),
        _c("br"),
        _vm._v(" "),
        _c("br"),
        _vm._v(" "),
        _c("b", [_vm._v("A collection of essential TypeScript types")]),
        _vm._v(" "),
        _c("br"),
        _vm._v(" "),
        _c("hr")
      ]),
      _vm._v(" "),
      _c("br"),
      _vm._v(" "),
      _c("br"),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href: "https://travis-ci.com/sindresorhus/type-fest",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("img", {
              attrs: {
                src:
                  "https://travis-ci.com/sindresorhus/type-fest.svg?branch=master",
                alt: "Build Status"
              }
            }),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "a",
          {
            attrs: {
              href: "https://www.youtube.com/watch?v=9auOCbH5Ns4",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("img", {
              attrs: {
                src: "https://img.shields.io/badge/unicorn-approved-ff69b4.svg",
                alt: ""
              }
            }),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Many of the types here should have been built-in. You can help by suggesting some of them to the "
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/Microsoft/TypeScript/blob/master/CONTRIBUTING.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("TypeScript project"), _c("OutboundLink")],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Either add this package as a dependency or copy-paste the needed types. No credit required. 👌"
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "PR welcome for additional commonly needed types and docs improvements. Read the "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to:
                  "/前端框架/react/hook/react-hook-demo/node_modules/type-fest/.github/contributing.html"
              }
            },
            [_vm._v("contributing guidelines")]
          ),
          _vm._v(" first.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "install" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#install" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Install")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [_vm._v("$ npm install type-fest\n")])
        ])
      ]),
      _c("p", [_c("em", [_vm._v("Requires TypeScript >=3.2")])]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "usage" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#usage" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Usage")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-ts extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("import")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("Except"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("from")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'type-fest'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("type")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Foo")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\tunicorn"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("string")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\trainbow"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("boolean")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("type")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("FooWithoutRainbow")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" Except"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _vm._v("Foo"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'rainbow'")
            ]),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(">")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("//=> {unicorn: string}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("h2", { attrs: { id: "api" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#api" } }, [
          _vm._v("#")
        ]),
        _vm._v(" API")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Click the type names for complete docs.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "basic" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#basic" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Basic")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("a", { attrs: { href: "source/basic.d.ts" } }, [
            _c("code", [_vm._v("Primitive")])
          ]),
          _vm._v(" - Matches any "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://developer.mozilla.org/en-US/docs/Glossary/Primitive",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("primitive value"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/basic.d.ts" } }, [
            _c("code", [_vm._v("Class")])
          ]),
          _vm._v(" - Matches a "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _c("code", [_vm._v("class")]),
              _vm._v(" constructor"),
              _c("OutboundLink")
            ],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/basic.d.ts" } }, [
            _c("code", [_vm._v("TypedArray")])
          ]),
          _vm._v(" - Matches any "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("typed array"), _c("OutboundLink")],
            1
          ),
          _vm._v(", like "),
          _c("code", [_vm._v("Uint8Array")]),
          _vm._v(" or "),
          _c("code", [_vm._v("Float64Array")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/basic.d.ts" } }, [
            _c("code", [_vm._v("JsonObject")])
          ]),
          _vm._v(" - Matches a JSON object.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/basic.d.ts" } }, [
            _c("code", [_vm._v("JsonArray")])
          ]),
          _vm._v(" - Matches a JSON array.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/basic.d.ts" } }, [
            _c("code", [_vm._v("JsonValue")])
          ]),
          _vm._v(" - Matches any valid JSON value.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/basic.d.ts" } }, [
            _c("code", [_vm._v("ObservableLike")])
          ]),
          _vm._v(" - Matches a value that is like an "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/tc39/proposal-observable",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Observable"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "utilities" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#utilities" } },
          [_vm._v("#")]
        ),
        _vm._v(" Utilities")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("a", { attrs: { href: "source/except.d.ts" } }, [
            _c("code", [_vm._v("Except")])
          ]),
          _vm._v(
            " - Create a type from an object type without certain keys. This is a stricter version of "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("Omit")]), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/mutable.d.ts" } }, [
            _c("code", [_vm._v("Mutable")])
          ]),
          _vm._v(" - Convert an object with "),
          _c("code", [_vm._v("readonly")]),
          _vm._v(" keys into a mutable object. The inverse of "),
          _c("code", [_vm._v("Readonly<T>")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/merge.d.ts" } }, [
            _c("code", [_vm._v("Merge")])
          ]),
          _vm._v(
            " - Merge two types into a new type. Keys of the second type overrides keys of the first type."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/merge-exclusive.d.ts" } }, [
            _c("code", [_vm._v("MergeExclusive")])
          ]),
          _vm._v(" - Create a type that has mutually exclusive keys.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/require-at-least-one.d.ts" } }, [
            _c("code", [_vm._v("RequireAtLeastOne")])
          ]),
          _vm._v(
            " - Create a type that requires at least one of the given keys."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/require-one.d.ts" } }, [
            _c("code", [_vm._v("RequireExactlyOne")])
          ]),
          _vm._v(
            " - Create a type that requires exactly a single key of the given keys and disallows more."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/partial-deep.d.ts" } }, [
            _c("code", [_vm._v("PartialDeep")])
          ]),
          _vm._v(" - Create a deeply optional version of another type. Use "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1401-L1406",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("Partial<T>")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" if you only need one level deep.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/readonly-deep.d.ts" } }, [
            _c("code", [_vm._v("ReadonlyDeep")])
          ]),
          _vm._v(" - Create a deeply immutable version of an "),
          _c("code", [_vm._v("object")]),
          _vm._v("/"),
          _c("code", [_vm._v("Map")]),
          _vm._v("/"),
          _c("code", [_vm._v("Set")]),
          _vm._v("/"),
          _c("code", [_vm._v("Array")]),
          _vm._v(" type. Use "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1415-L1420",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("Readonly<T>")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" if you only need one level deep.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/literal-union.d.ts" } }, [
            _c("code", [_vm._v("LiteralUnion")])
          ]),
          _vm._v(
            " - Create a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union. Workaround for "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/Microsoft/TypeScript/issues/29729",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Microsoft/TypeScript#29729"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/promisable.d.ts" } }, [
            _c("code", [_vm._v("Promisable")])
          ]),
          _vm._v(
            " - Create a type that represents either the value or the value wrapped in "
          ),
          _c("code", [_vm._v("PromiseLike")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/opaque.d.ts" } }, [
            _c("code", [_vm._v("Opaque")])
          ]),
          _vm._v(" - Create an "),
          _c(
            "a",
            {
              attrs: {
                href: "https://codemix.com/opaque-types-in-javascript/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("opaque type"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/set-optional.d.ts" } }, [
            _c("code", [_vm._v("SetOptional")])
          ]),
          _vm._v(" - Create a type that makes the given keys optional.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "source/set-required.d.ts" } }, [
            _c("code", [_vm._v("SetRequired")])
          ]),
          _vm._v(" - Create a type that makes the given keys required.")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "miscellaneous" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#miscellaneous" } },
          [_vm._v("#")]
        ),
        _vm._v(" Miscellaneous")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("a", { attrs: { href: "source/package-json.d.ts" } }, [
            _c("code", [_vm._v("PackageJson")])
          ]),
          _vm._v(" - Type for "),
          _c(
            "a",
            {
              attrs: {
                href: "https://docs.npmjs.com/creating-a-package-json-file",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _vm._v("npm's "),
              _c("code", [_vm._v("package.json")]),
              _vm._v(" file"),
              _c("OutboundLink")
            ],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "declined-types" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#declined-types" } },
          [_vm._v("#")]
        ),
        _vm._v(" Declined types")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v(
            "If we decline a type addition, we will make sure to document the better solution here."
          )
        ])
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/sindresorhus/type-fest/pull/7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _c("code", [_vm._v("Diff")]),
              _vm._v(" and "),
              _c("code", [_vm._v("Spread")]),
              _c("OutboundLink")
            ],
            1
          ),
          _vm._v(
            " - The PR author didn't provide any real-world use-cases and the PR went stale. If you think this type is useful, provide some real-world use-cases and we might reconsider."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/sindresorhus/type-fest/issues/33",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("Dictionary")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" - You only save a few characters ("),
          _c("code", [_vm._v("Dictionary<number>")]),
          _vm._v(" vs "),
          _c("code", [_vm._v("Record<string, number>")]),
          _vm._v(") from "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1429-L1434",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("Record")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ", which is more flexible and well-known. Also, you shouldn't use an object as a dictionary. We have "
          ),
          _c("code", [_vm._v("Map")]),
          _vm._v(" in JavaScript now.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "tips" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#tips" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Tips")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "built-in-types" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#built-in-types" } },
          [_vm._v("#")]
        ),
        _vm._v(" Built-in types")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("There are many advanced types most users don't know about.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1401-L1406",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Partial<T>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - Make all properties in "),
            _c("code", [_vm._v("T")]),
            _vm._v(" optional.\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/KYOwrgtgBAMg9gcxsAbsANlA3gKClAeQDMiAaPKAEWACMwFz8BRAJxbhcagDEBDAF17ocAXxw4AliH7AWRXgGNgUAHJwAJsADCcEEQkJsFXgAcTK3hGAAuKAGd+LKQgDcFEx363wEGrLf46IjIaOi28EioGG5iOArovHZ2qhrAAIJmAEJgEuiaLEb4Jk4oAsoKuvoIYCwCErq2apo6egZQALyF+FCm5pY2UABETelmg1xFnrYAzAAM8xNQQZGh4cFR6AB0xEQUIm4UFa0IABRHVbYACrws-BJCADwjLVUAfACUXfhEHFBnug4oABrYAATygcCIhBoACtgAp+JsQaC7P9ju9Prhut0joCwCZ1GUAGpCMDKTrnAwAbWRPWSyMhKWalQMAF0Dtj8BIoSd8YSZCT0GSOu1OmAQJp9CBgOpPkc7uBgBzOfwABYSOybSnVWp3XQ0sF04FgxnPFkIVkdKB84mkpUUfCxbEsYD8GogKBqjUBKBiWIAen9UGut3u6CeqReBlePXQQQA7skwMl+HAoMU4CgJJoISB0ODeOmbvwIVC1cAcIGmdpzVApDI5IpgJscNL49WMiZsrl8id3lrzScsD0zBYrLZBgAVOCUOCdwa+95uIA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("NodeConfig")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\tappName"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tport"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("class")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("NodeAppBuilder")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("private")
                  ]),
                  _vm._v(" configuration"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" NodeConfig "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\tappName"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'NodeApp'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\t\t\tport"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("3000")
                  ]),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("config")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Partial"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("NodeConfig"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("type")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("NodeConfigKey")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("keyof")
                  ]),
                  _vm._v(" NodeConfig"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("for")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" key "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("of")
                  ]),
                  _vm._v(" Object"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("keys")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("as")
                  ]),
                  _vm._v(" NodeConfigKey"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" updateValue "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _vm._v("key"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("if")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("updateValue "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("===")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("undefined")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("continue")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t\t\t\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t\t\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("configuration"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _vm._v("key"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" updateValue"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// `Partial<NodeConfig>`` allows us to provide only a part of the"
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// NodeConfig interface.")
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("NodeAppBuilder")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("config")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("appName"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'ToDoApp'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1408-L1413",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Required<T>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - Make all properties in "),
            _c("code", [_vm._v("T")]),
            _vm._v(" required.\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/AQ4SwOwFwUwJwGYEMDGNgGED21VQGJZwC2wA3gFCjXAzFJgA2A-AFzADOUckA5gNxUaIYjA4ckvGG07c+g6gF8KQkAgCuEFFDA5O6gEbEwUbLm2ESwABQIixACJIoSdgCUYAR3Vg4MACYAPGYuFvYAfACU5Ko0APRxwADKMBD+wFAAFuh2Vv7OSBlYGdmc8ABu8LHKsRyGxqY4oQT21pTCIHQMjOwA5DAAHgACxAAOjDAAdChYxL0ANLHUouKSMH0AEmAAhJhY6ozpAJ77GTCMjMCiV0ToSAb7UJPPC9WRgrEJwAAqR6MwSRQPFGUFocDgRHYxnEfGAowh-zgUCOwF6KwkUl6tXqJhCeEsxDaS1AXSYfUGI3GUxmc0WSneQA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("ContactForm")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\temail"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("?")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tmessage"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("?")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("submitContactForm")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("formData"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Required"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("ContactForm"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// Send the form data to the server.")
                  ]),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("submitContactForm")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\temail"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'ex@mple.com'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\tmessage"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'Hi! Could you tell me more about…'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// TypeScript error: missing property 'message'")
                  ]),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("submitContactForm")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\temail"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'ex@mple.com'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1415-L1420",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Readonly<T>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - Make all properties in "),
            _c("code", [_vm._v("T")]),
            _vm._v(" readonly.\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/AQ4UwOwVwW2AZA9gc3mAbmANsA3gKFCOAHkAzMgGkOJABEwAjKZa2kAUQCcvEu32AMQCGAF2FYBIAL4BufDRABLCKLBcywgMZgEKZOoDCiCGSXI8i4hGEwwALmABnUVxXJ57YFgzZHSVF8sT1BpBSItLGEnJz1kAy5LLy0TM2RHACUwYQATEywATwAeAITjU3MAPnkrCJMXLigtUT4AClxgGztKbyDgaX99I1TzAEokr1BRAAslJwA6FIqLAF48TtswHp9MHDla9hJGACswZvmyLjAwAC8wVpm5xZHkUZDaMKIwqyWXYCW0oN4sNlsA1h0ug5gAByACyBQAggAHJHQ7ZBIFoXbzBjMCz7OoQP5YIaJNYQMAAdziCVaALGNSIAHomcAACoFJFgADKWjcSNEwG4vC4ji0wggEEQguiTnMEGALWAV1yAFp8gVgEjeFyuKICvMrCTgVxnst5jtsGC4ljsPNhXxGaAWcAAOq6YRXYDCRg+RWIcA5JSC+kWdCepQ+v3RYCU3RInzRMCGwlpC19NYBW1Ye08R1AA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("enum")
                  ]),
                  _vm._v(" LogLevel "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\tOff"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\tDebug"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\tError"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\tFatal\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("LoggerConfig")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\tname"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tlevel"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" LogLevel"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("class")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Logger")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\tconfig"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Readonly"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("LoggerConfig"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("constructor")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("name"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" level"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" LoggerConfig"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("config "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("name"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" level"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t\t\tObject"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("freeze")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" LoggerConfig "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\tname"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'MyApp'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\tlevel"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" LogLevel"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("Debug\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" logger "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Logger")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// TypeScript Error: cannot assign to read-only property."
                    )
                  ]),
                  _vm._v("\nlogger"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("level "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" LogLevel"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("Error"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// We are able to edit config variable as we please."
                    )
                  ]),
                  _vm._v("\nconfig"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("level "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" LogLevel"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("Error"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1422-L1427",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Pick<T, K>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - From "),
            _c("code", [_vm._v("T")]),
            _vm._v(", pick a set of properties whose keys are in the union "),
            _c("code", [_vm._v("K")]),
            _vm._v(".\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/AQ4SwOwFwUwJwGYEMDGNgEE5TCgNugN4BQoZwOUBAXMAM5RyQDmA3KeSFABYCuAtgCMISMHloMmENh04oA9tBjQJjFuzIBfYrOAB6PcADCcGElh1gEGAHcKATwAO6ebyjB5CTNlwFwSxFR0BX5HeToYABNgBDh5fm8cfBg6AHIKG3ldA2BHOOcfFNpUygJ0pAhokr4hETFUgDpswywkggAFUwA3MFtgAF5gQgowKhhVKTYKGuFRcXo1aVZgbTIoJ3RW3xhOmB6+wfbcAGsAHi3kgBpgEtGy4AAfG54BWfqAPnZm4AAlZUj4MAkMA8GAGB4vEgfMlLLw6CwPBA8PYRmMgZVgAC6CgmI4cIommQELwICh8RBgKZKvALh1ur0bHQABR5PYMui0Wk7em2ADaAF0AJS0AASABUALIAGQAogR+Mp3CROCAFBBwVC2ikBpj5CgBIqGjizLA5TAFdAmalImAuqlBRoVQh5HBgEy1eDWfs7J5cjzGYKhroVfpDEhHM4MV6GRR5NN0JrtnRg6BVirTFBeHAKYmYY6QNpdB73LmCJZBlSAXAubtvczeSmQMNSuMbmKNgBlHFgPEUNwusBIPAAQlS1xetTmxT0SDoESgdD0C4aACtHMwxytLrohawgA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Article")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\ttitle"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tthumbnail"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tcontent"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Creates new type out of the `Article` interface composed"
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// from the Articles' two properties: `title` and `thumbnail`."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// `ArticlePreview = {title: string; thumbnail: string}`"
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("type")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("ArticlePreview")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" Pick"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("Article"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'title'")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("|")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'thumbnail'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Render a list of articles using only title and description."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("renderArticlePreviews")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("previews"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" ArticlePreview"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" HTMLElement "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" articles "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" document"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("createElement")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'div'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("for")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" preview "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("of")
                  ]),
                  _vm._v(" previews"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// Append preview to the articles.")
                  ]),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" articles"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" articles "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("renderArticlePreviews")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\ttitle"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'TypeScript tutorial!'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\t\tthumbnail"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'/assets/ts.jpg'")
                  ]),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1429-L1434",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Record<K, T>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - Construct a type with a set of properties "),
            _c("code", [_vm._v("K")]),
            _vm._v(" of type "),
            _c("code", [_vm._v("T")]),
            _vm._v(".\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/AQ4ejYAUHsGcCWAXBMB2dgwGbAKYC2ADgDYwCeeemCaWArgE7ADGMxAhmuQHQBQoYEnJE8wALKEARnkaxEKdMAC8wAOS0kstGuAAfdQBM8ANzxlRjXQbVaWACwC0JPB0NqA3HwGgIwAJJoWozYHCxixnAsjAhStADmwESMMJYo1Fi4HMCIaPEu+MRklHj8gpqyoeHAAKJFFFTAAN4+giDYCIxwSAByHAR4AFw5SDF5Xm2gJBzdfQPD3WPxE5PAlBxdAPLYNQAelgh4aOHDaPQEMowrIAC+3oJ+AMKMrlrAXFhSAFZ4LEhC9g4-0BmA4JBISXgiCkBQABpILrJ5MhUGhYcATGD6Bk4Hh-jNgABrPDkOBlXyQAAq9ngYmJpOAAHcEOCRjAXqwYODfoo6DhakUSph+Uh7GI4P0xER4Cj0OSQGwMP8tP1hgAlX7swwAHgRl2RvIANALSA08ABtAC6AD4VM1Wm0Kow0MMrYaHYJjGYLLJXZb3at1HYnC43Go-QHQDcvA6-JsmEJXARgCDgMYWAhjIYhDAU+YiMAAFIwex0ZmilMITCGF79TLAGRsAgJYAAZRwSEZGzEABFTOZUrJ5Yn+jwnWgeER6HB7AAKJrADpdXqS4ZqYultTG6azVfqHswPBbtauLY7fayQ7HIbAAAMwBuAEoYw9IBq2Ixs9h2eFMOQYPQObALQKJgggABeYhghCIpikkKRpOQRIknAsZUiIeCttECBEP8NSMCkjDDAARMGziuIYxHwYOjDCMBmDNnAuTxA6irdCOBB1Lh5Dqpqn66tISIykawBnOCtqqC0gbjqc9DgpGkxegOliyfJDrRkAA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// Positions of employees in our company.")
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("type")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("MemberPosition")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'intern'")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("|")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'developer'")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("|")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'tech-lead'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Interface describing properties of a single employee."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Employee")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\tfirstName"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tlastName"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tyearsOfExperience"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Create an object that has all possible `MemberPosition` values set as keys."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Those keys will store a collection of Employees of the same position."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" team"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Record"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("MemberPosition"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" Employee"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\tintern"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\tdeveloper"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'tech-lead'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Our team has decided to help John with his dream of becoming Software Developer."
                    )
                  ]),
                  _vm._v("\nteam"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("intern"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("push")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\tfirstName"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'John'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\tlastName"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'Doe'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\tyearsOfExperience"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("0")
                  ]),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// `Record` forces you to initialize all of the property keys."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      '// TypeScript Error: "tech-lead" property is missing'
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" teamEmpty"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Record"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("MemberPosition"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\tintern"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\tdeveloper"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1436-L1439",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Exclude<T, U>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - Exclude from "),
            _c("code", [_vm._v("T")]),
            _vm._v(" those types that are assignable to "),
            _c("code", [_vm._v("U")]),
            _vm._v(".\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/JYOwLgpgTgZghgYwgAgMrQG7QMIHsQzADmyA3gFDLIAOuUYAXMiAK4A2byAPsgM5hRQJHqwC2AI2gBucgF9y5MAE9qKAEoQAjiwj8AEnBAATNtGQBeZAAooWphu26wAGmS3e93bRC8IASgsAPmRDJRlyAHoI5ABRAA8ENhYjFFYOZGVVZBgoXFFkAAM0zh5+QRBhZhYJaAKAOkjogEkQZAQ4X2QAdwALCFbaemRgXmQtFjhOMFwq9K6ULuB0lk6U+HYwZAxJnQaYFhAEMGB8ZCIIMAAFOjAANR2IK0HGWISklIAedCgsKDwCYgAbQA5M9gQBdVzFQJ+JhiSRQMiUYYwayZCC4VHPCzmSzAspCYEBWxgFhQAZwKC+FpgJ43VwARgADH4ZFQSWSBjcZPJyPtDsdTvxKWBvr8rD1DCZoJ5HPopaYoK4EPhCEQmGKcKriLCtrhgEYkVQVT5Nr4fmZLLZtMBbFZgT0wGBqES6ghbHBIJqoBKFdBWQpjfh+DQbhY2tqiHVsbjLMVkAB+ZAAZiZaeQTHOVxu9ySjxNaujNwDVHNvzqbBGkBAdPoAfkQA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("ServerConfig")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\tport"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("|")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("|")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("type")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("RequestHandler")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("request"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Request"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" response"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Response"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=>")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("void")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Exclude `null` type from `null | string | number`."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// In case the port is equal to `null`, we will use default value."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("getPortValue")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("port"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Exclude"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("ServerConfig"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'port'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("if")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("typeof")
                  ]),
                  _vm._v(" port "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("===")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'string'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("parseInt")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("port"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("10")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" port"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("startServer")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("handler"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" RequestHandler"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" ServerConfig"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("void")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" server "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("require")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'http'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("createServer")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("handler"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" port "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("port "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("===")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("?")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("3000")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("getPortValue")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("config"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("port"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\tserver"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("listen")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("port"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1441-L1444",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Extract<T, U>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - Extract from "),
            _c("code", [_vm._v("T")]),
            _vm._v(" those types that are assignable to "),
            _c("code", [_vm._v("U")]),
            _vm._v(".\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXzSwEdkQBJYACgEoAueVZAWwCMQYBuAKDDwGcM8MgBF4AXngBlAJ6scESgHIRi6ty5ZUGdoihgEABXZ888AN5d48ANoiAuvUat23K6ihMQ9ATE0BzV3goPy8GZjZOLgBfLi4Aejj4AEEICBwAdz54MAALKFQQ+BxEeAAHY1NgKAwoIKy0grr4DByEUpgccpgMaXgAaxBerCzi+B9-ZulygDouFHRsU1z8kKMYE1RhaqgAHkt4AHkWACt4EAAPbVRgLLWNgBp9gGlBs8uQa6yAUUuYPQwdgNpKM7nh7mMML4CgA+R5WABqUAgpDeVxuhxO1he0jsXGh8EoOBO9COx3BQPo2PBADckaR6IjkSA6PBqTgsMBzPsicdrEC7OJWXSQNwYvFEgAVTS9JLXODpeDpKBZFg4GCoWa8VACIJykAKiQWKy2YQOAioYikCg0OEMDyhRSy4DyxS24KhAAMjyi6gS8AAwjh5OD0iBFHAkJoEOksC1mnkMJq8gUQKDNttKPlnfrwYp3J5XfBHXqoKpfYkAOI4ansTxaeDADmoRSCCBYAbxhC6TDx6rwYHIRX5bScjA4bLJwoDmDwDkfbA9JMrVMVdM1TN69LgkTgwgkchUahqIA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("declare")
                  ]),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("uniqueId")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("ID")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("Symbol")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'ID'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Person")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("ID")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\tname"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\tage"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Allows changing the person data as long as the property key is of string type."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token generic-function" } },
                    [
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token function" } },
                        [_vm._v("changePersonData")]
                      ),
                      _c(
                        "span",
                        {
                          pre: true,
                          attrs: { class: "token generic class-name" }
                        },
                        [
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v("<")]
                          ),
                          _vm._v("\n\tObj "),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token keyword" } },
                            [_vm._v("extends")]
                          ),
                          _vm._v(" Person"),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v(",")]
                          ),
                          _vm._v("\n\tKey "),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token keyword" } },
                            [_vm._v("extends")]
                          ),
                          _vm._v(" Extract"),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v("<")]
                          ),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token keyword" } },
                            [_vm._v("keyof")]
                          ),
                          _vm._v(" Person"),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v(",")]
                          ),
                          _vm._v(" "),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token builtin" } },
                            [_vm._v("string")]
                          ),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v(">")]
                          ),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v(",")]
                          ),
                          _vm._v("\n\tValue "),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token keyword" } },
                            [_vm._v("extends")]
                          ),
                          _vm._v(" Obj"),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v("[")]
                          ),
                          _vm._v("Key"),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v("]")]
                          ),
                          _vm._v("\n"),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v(">")]
                          )
                        ]
                      )
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("obj"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Obj"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" key"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Key"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" value"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Value"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("void")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\tobj"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _vm._v("key"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" value"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// Tiny Andrew was born.")
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" andrew "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("ID")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("uniqueId")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\tname"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'Andrew'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\tage"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("0")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// Cool, we're fine with that.")
                  ]),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("changePersonData")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("andrew"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'name'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'Pony'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Goverment didn't like the fact that you wanted to change your identity."
                    )
                  ]),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("changePersonData")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("andrew"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("ID")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("uniqueId")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1446-L1449",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("NonNullable<T>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - Exclude "),
            _c("code", [_vm._v("null")]),
            _vm._v(" and "),
            _c("code", [_vm._v("undefined")]),
            _vm._v(" from "),
            _c("code", [_vm._v("T")]),
            _vm._v(".\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _vm._v("\nWorks with "),
            _c("code", [_vm._v("strictNullChecks")]),
            _vm._v(" set to "),
            _c("code", [_vm._v("true")]),
            _vm._v(". (Read more "),
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html"
                }
              },
              [_vm._v("here")]
            ),
            _vm._v(")"),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/C4TwDgpgBACg9gJ2AOQK4FsBGEFQLxQDOwCAlgHYDmUAPlORtrnQwDasDcAUFwPQBU-WAEMkUOADMowqAGNWwwoSgATCBIqlgpOOSjAAFsOBRSy1IQgr9cKJlSlW1mZYQA3HFH68u8xcoBlHA8EACEHJ08Aby4oKDBUTFZSWXjEFEYcAEIALihkXTR2YSSIAB54JDQsHAA+blj4xOTUsHSACkMzPKD3HHDHNQQAGjSkPMqMmoQASh7g-oihqBi4uNIpdraxPAI2VhmVxrX9AzMAOm2ppnwoAA4ABifuE4BfKAhWSyOTuK7CS7pao3AhXF5rV48E4ICDAVAIPT-cGQyG+XTEIgLMJLTx7CAAdygvRCA0iCHaMwarhJOIQjUBSHaACJHk8mYdeLwxtdcVAAOSsh58+lXdr7Dlcq7A3n3J4PEUdADMcspUE53OluAIUGVTx46oAKuAIAFZGQwCYAKIIBCILjUxaDHAMnla+iodjcIA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("type")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("PortNumber")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("|")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("|")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "/** Part of a class definition that is used to build a server */"
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("class")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("ServerBuilder")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\tportNumber"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("!")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" NonNullable"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("PortNumber"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("port")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" ServerBuilder"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" port"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" PortNumber"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" ServerBuilder "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("if")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("port "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("==")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("portNumber "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("8000")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("else")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("portNumber "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" port"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" serverBuilder "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("ServerBuilder")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\nserverBuilder\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("port")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'8000'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v("   "),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// portNumber = '8000'")
                  ]),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("port")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v("     "),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// portNumber =  8000")
                  ]),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("port")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("3000")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("    "),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// portNumber =  3000")
                  ]),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// TypeScript error")
                  ]),
                  _vm._v("\nserverBuilder"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("portNumber "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("null")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1451-L1454",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Parameters<T>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" - Obtain the parameters of a function type in a tuple.\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/GYVwdgxgLglg9mABAZwBYmMANgUwBQxgAOIUAXIgIZgCeA2gLoCUFAbnDACaIDeAUIkQB6IYgCypSlBxUATrMo1ECsJzgBbLEoipqAc0J7EMKMgDkiHLnU4wp46pwAPHMgB0fAL58+oSLARECEosLAA5ABUYG2QAHgAxJGdpVWREPDdMylk9ZApqemZEAF4APipacrw-CApEgBogkKwAYThwckQwEHUAIxxZJl4BYVEImiIZKF0oZRwiWVdbeygJmThgOYgcGFYcbhqApCJsyhtpWXcR1cnEePBoeDAABVPzgbTixFeFd8uEsClADcIxGiygIFkSEOT3SmTc2VydQeRx+ZxwF2QQ34gkEwDgsnSuFmMBKiAADEDjIhYk1Qm0OlSYABqZnYka4xA1DJZHJYkGc7yCbyeRA+CAIZCzNAYbA4CIAdxg2zJwVCkWirjwMswuEaACYmCCgA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("shuffle")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("input"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("any")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("void")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Mutate array randomly changing its' elements indexes."
                    )
                  ]),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" callNTimes"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("Fn "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("extends")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("any")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=>")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("any")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("func"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Fn"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" callCount"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Type that represents the type of the received function parameters."
                    )
                  ]),
                  _vm._v("\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("type")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("FunctionParameters")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" Parameters"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("Fn"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" FunctionParameters"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("for")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("let")
                  ]),
                  _vm._v(" i "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("0")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v(" i "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v(" callCount"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v(" i"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("++")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("func")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" shuffleTwice "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("callNTimes")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("shuffle"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("2")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1456-L1459",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [
                _c("code", [_vm._v("ConstructorParameters<T>")]),
                _c("OutboundLink")
              ],
              1
            ),
            _vm._v(
              " - Obtain the parameters of a constructor function type in a tuple.\n"
            )
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/MYGwhgzhAECCBOAXAlqApgWQPYBM0mgG8AoaaFRENALmgkXmQDsBzAblOmCycTV4D8teo1YdO3JiICuwRFngAKClWENmLAJRFOZRAAtkEAHQq00ALzlklNBzIBfYk+KhIMAJJTEYJsDQAwmDA+mgAPAAq0GgAHnxMODCKTGgA7tCKxllg8CwQtL4AngDaALraFgB80EWa1SRkAA6MAG5gfNAB4FABPDJyCrQR9tDNyG0dwMGhtBhgjWEiGgA00F70vv4RhY3hEZXVVinpc42KmuJkkv3y8Bly8EPaDWTkhiZd7r3e8LK3llwGCMXGQWGhEOsfH5zJlsrl8p0+gw-goAAo5MAAW3BaHgEEilU0tEhmzQ212BJ0ry4SOg+kg+gBBiMximIGA0nAfAQLGk2N4EAAEgzYcYcnkLsRdDTvNEYkYUKwSdCme9WdM0MYwYhFPSIPpJdTkAAzDKxBUaZX+aAAQgsVmkCTQxuYaBw2ng4Ok8CYcotSu8pMur09iG9vuObxZnx6SN+AyUWTF8MN0CcZE4Ywm5jZHK5aB5fP4iCFIqT4oRRTKRLo6lYVNeAHpG50wOzOe1zHr9NLQ+HoABybsD4HOKXXRA1JCoKhBELmI5pNaB6Fz0KKBAodDYPAgSUTmqYsAALx4m5nC6nW9nGq14KtaEUA9gR9PvuNCjQ9BgACNvcwNBtAcLiAA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("class")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("ArticleModel")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\ttitle"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\tcontent"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("?")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("constructor")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("title"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("title "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" title"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("class")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [
                      _vm._v("InstanceCache"),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token operator" } },
                        [_vm._v("<")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token constant" } },
                        [_vm._v("T")]
                      ),
                      _vm._v(" "),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token keyword" } },
                        [_vm._v("extends")]
                      ),
                      _vm._v(" "),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token punctuation" } },
                        [_vm._v("(")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token keyword" } },
                        [_vm._v("new")]
                      ),
                      _vm._v(" "),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token punctuation" } },
                        [_vm._v("(")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token operator" } },
                        [_vm._v("...")]
                      ),
                      _vm._v("args"),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token operator" } },
                        [_vm._v(":")]
                      ),
                      _vm._v(" "),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token builtin" } },
                        [_vm._v("any")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token punctuation" } },
                        [_vm._v("[")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token punctuation" } },
                        [_vm._v("]")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token punctuation" } },
                        [_vm._v(")")]
                      ),
                      _vm._v(" "),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token operator" } },
                        [_vm._v("=>")]
                      )
                    ]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("any")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("private")
                  ]),
                  _vm._v(" ClassConstructor"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("T")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("private")
                  ]),
                  _vm._v(" cache"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Map"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" InstanceType"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("T")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">>")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Map")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("constructor")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("ctr"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("T")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("ClassConstructor "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" ctr"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("getInstance")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" ConstructorParameters"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("T")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" InstanceType"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token constant" } },
                    [_vm._v("T")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" hash "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("calculateArgumentsHash")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" existingInstance "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("cache"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("get")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("hash"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("if")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("existingInstance "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("!==")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("undefined")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" existingInstance"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token keyword" } },
                        [_vm._v("this")]
                      )
                    ]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("ClassConstructor")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("private")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("calculateArgumentsHash")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("any")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// Calculate hash.")
                  ]),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'hash'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" articleCache "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("InstanceCache")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("ArticleModel"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" amazonArticle "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" articleCache"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("getInstance")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'Amazon forests burining!'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1461-L1464",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("ReturnType<T>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(" – Obtain the return type of a function type.\n")
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/MYGwhgzhAECSAmICmBlJAnAbgS2E6A3gFDTTwD2AcuQC4AW2AdgOYAUAlAFzSbnbyEAvkWFFQkGJSQB3GMVI1sNZNwg10TZgG4S0YOUY0kh1es07d+xmvQBXYDXLpWi5UlMaWAGj0GjJ6BtNdkJdBQYIADpXZGgAXmgYpB1ScOwoq38aeN9DYxoU6GFRKzVoJjUwRjwAYXJbPPRuAFkwAAcAHgAxBodsAx9GWwBbACMMAD4cxhloVraOCyYjdAAzMDxoOut1e0d0UNIZ6WhWSPOwdGYIbiqATwBtAF0uaHudUQB6ACpv6ABpJBINqJdAbADW0Do5BOw3u5R2VTwMHIq2gAANtjZ0bkbHsnFCwJh8ONjHp0EgwEZ4JFoN9PkRVr1FAZoMwkDRYIjqkgOrosepoEgAB7+eAwAV2BxOLy6ACCVxgIrFEoMeOl6AACpcwMMORgIB1JRMiBNWKVdhruJKfOdIpdrtwFddXlzKjyACp3Nq842HaDIbL6BrZBIVGhIpB1EMYSLsmjmtWW-YhAA+qegAAYLKQLQj3ZsEsdccmnGcLor2Dn8xGedHGpEIBzEzspfsfMHDNAANTQACMVaIljV5GQkRA5DYmIpVKQAgAJARO9le33BDXIyi0YuLW2nJFGLqkOvxFB0YPdBSaLZ0IwNzyPkO8-xkGgsLh8Al427a3hWAhXwwHA8EHT5PmgAB1bAQBAANJ24adKWpft72RaBUTgRBUCAj89HAM8xCTaBjggABRQx0DuHJv25P9dCkWRZVIAAiBjoFImpmjlFBgA0NpsjadByDacgIDAEAIAAQmYpjoGYgAZSBsmGPw6DtZiiFA8CoJguDmAQmoZ2QvtUKQLdoAYmBTwgdEiCAA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "/** Provides every element of the iterable `iter` into the `callback` function and stores the results in an array. */"
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" mapIter"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("\n\t\tElem"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\tFunc "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("extends")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("elem"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Elem"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=>")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("any")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v("\n\t\tRet "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("extends")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [
                      _vm._v("ReturnType"),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token operator" } },
                        [_vm._v("<")]
                      ),
                      _vm._v("Func"),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token operator" } },
                        [_vm._v(">")]
                      )
                    ]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("iter"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Iterable"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("Elem"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" callback"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Func"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Ret"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" mapped"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Ret"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("for")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" elem "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("of")
                  ]),
                  _vm._v(" iter"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\tmapped"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("push")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("callback")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("elem"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" mapped"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" setObject"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Set"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Set")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" mapObject"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Map"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Map")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("mapIter")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("setObject"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("value"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=>")]
                  ),
                  _vm._v(" value"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("indexOf")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'Foo'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// number[]")
                  ]),
                  _vm._v("\n\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("mapIter")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("mapObject"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _vm._v("key"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" value"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=>")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" key "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("%")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("2")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("===")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("0")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("?")]
                  ),
                  _vm._v(" value "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'Odd'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// string[]")
                  ]),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1466-L1469",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("InstanceType<T>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(
              " – Obtain the instance type of a constructor function type.\n"
            )
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/MYGwhgzhAECSAmICmBlJAnAbgS2E6A3gFDTTwD2AcuQC4AW2AdgOYAUAlAFzSbnbyEAvkWFFQkGJSQB3GMVI1sNZNwg10TZgG4S0YOUY0kh1es07d+xmvQBXYDXLpWi5UlMaWAGj0GjJ6BtNdkJdBQYIADpXZGgAXmgYpB1ScOwoq38aeN9DYxoU6GFRKzVoJjUwRjwAYXJbPPRuAFkwAAcAHgAxBodsAx9GWwBbACMMAD4cxhloVraOCyYjdAAzMDxoOut1e0d0UNIZ6WhWSPOwdGYIbiqATwBtAF0uaHudUQB6ACpv6ABpJBINqJdAbADW0Do5BOw3u5R2VTwMHIq2gAANtjZ0bkbHsnFCwJh8ONjHp0EgwEZ4JFoN9PkRVr1FAZoMwkDRYIjqkgOrosepoEgAB7+eAwAV2BxOLy6ACCVxgIrFEoMeOl6AACpcwMMORgIB1JRMiBNWKVdhruJKfOdIpdrtwFddXlzKjyACp3Nq842HaDIbL6BrZBIVGhIpB1EMYSLsmjmtWW-YhAA+qegAAYLKQLQj3ZsEsdccmnGcLor2Dn8xGedHGpEIBzEzspfsfMHDNAANTQACMVaIljV5GQkRA5DYmIpVKQAgAJARO9le33BDXIyi0YuLW2nJFGLqkOvxFB0YPdBSaLZ0IwNzyPkO8-xkGgsLh8Al427a3hWAhXwwHA8EHT5PmgAB1bAQBAANJ24adKWpft72RaBUTgRBUCAj89HAM8xCTaBjggABRQx0DuHJv25P9dCkWRZVIAAiBjoFImpmjlFBgA0NpsjadByDacgIDAEAIAAQmYpjoGYgAZSBsmGPw6DtZiiFA8CoJguDmAQmoZ2QvtUKQLdoAYmBTwgdEiCAA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("class")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("IdleService")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("doNothing")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("void")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("class")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("News")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\ttitle"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tcontent"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("constructor")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("title"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" content"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("title "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" title"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("this")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _vm._v("content "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" content"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" instanceCounter"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Map"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("Function")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("number")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Map")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Constructor")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("any")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("any")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Keep track how many instances of `Constr` constructor have been created."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token generic-function" } },
                    [
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token function" } },
                        [_vm._v("getInstance")]
                      ),
                      _c(
                        "span",
                        {
                          pre: true,
                          attrs: { class: "token generic class-name" }
                        },
                        [
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v("<")]
                          ),
                          _vm._v("\n\t\tConstr "),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token keyword" } },
                            [_vm._v("extends")]
                          ),
                          _vm._v(" Constructor"),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v(",")]
                          ),
                          _vm._v("\n\t\tArgs "),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token keyword" } },
                            [_vm._v("extends")]
                          ),
                          _vm._v(" ConstructorParameters"),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v("<")]
                          ),
                          _vm._v("Constr"),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v(">")]
                          ),
                          _vm._v("\n"),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v(">")]
                          )
                        ]
                      )
                    ]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("constructor")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Constr"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" Args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" InstanceType"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("Constr"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("let")
                  ]),
                  _vm._v(" count "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" instanceCounter"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("get")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("constructor")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("||")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("0")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" instance "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("new")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token keyword" } },
                        [_vm._v("constructor")]
                      )
                    ]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("...")]
                  ),
                  _vm._v("args"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\tinstanceCounter"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("set")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("constructor")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" count "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("+")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token number" } }, [
                    _vm._v("1")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("console")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("log")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token template-string" } },
                    [
                      _c(
                        "span",
                        {
                          pre: true,
                          attrs: { class: "token template-punctuation string" }
                        },
                        [_vm._v("`")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token string" } },
                        [_vm._v("Created ")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token interpolation" } },
                        [
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: {
                                class:
                                  "token interpolation-punctuation punctuation"
                              }
                            },
                            [_vm._v("${")]
                          ),
                          _vm._v("count "),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token operator" } },
                            [_vm._v("+")]
                          ),
                          _vm._v(" "),
                          _c(
                            "span",
                            { pre: true, attrs: { class: "token number" } },
                            [_vm._v("1")]
                          ),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: {
                                class:
                                  "token interpolation-punctuation punctuation"
                              }
                            },
                            [_vm._v("}")]
                          )
                        ]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token string" } },
                        [_vm._v(" instances of ")]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token interpolation" } },
                        [
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: {
                                class:
                                  "token interpolation-punctuation punctuation"
                              }
                            },
                            [_vm._v("${")]
                          ),
                          _vm._v("Constr"),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: { class: "token punctuation" }
                            },
                            [_vm._v(".")]
                          ),
                          _vm._v("name"),
                          _c(
                            "span",
                            {
                              pre: true,
                              attrs: {
                                class:
                                  "token interpolation-punctuation punctuation"
                              }
                            },
                            [_vm._v("}")]
                          )
                        ]
                      ),
                      _c(
                        "span",
                        { pre: true, attrs: { class: "token string" } },
                        [_vm._v(" class")]
                      ),
                      _c(
                        "span",
                        {
                          pre: true,
                          attrs: { class: "token template-punctuation string" }
                        },
                        [_vm._v("`")]
                      )
                    ]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" instance"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" idleService "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("getInstance")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("IdleService"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Will log: `Created 1 instances of IdleService class`"
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" newsEntry "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("getInstance")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("News"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'New ECMAScript proposals!'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'Last month...'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// Will log: `Created 1 instances of News class`")
                  ]),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/microsoft/TypeScript/blob/71af02f7459dc812e85ac31365bfe23daf14b4e4/src/lib/es5.d.ts#L1446",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_c("code", [_vm._v("Omit<T, K>")]), _c("OutboundLink")],
              1
            ),
            _vm._v(
              " – Constructs a type by picking all properties from T and then removing K.\n"
            )
          ]),
          _c("details", [
            _c("summary", [_vm._v("\nExample\n")]),
            _c("p"),
            _vm._v(" "),
            _c("p", [
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://typescript-play.js.org/?target=6#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChlks4BzCAVShwC5kBnMKUcgbmKYAcIFgIjBs1YgOXMpSFMWbANoBdTiW5woFddwAW0kfKWEAvoUIB6U8gDCUCHEiNkICAHdkYAJ69kz4GC3JcPG4oAHteKDABBxCYNAxsPFBIWEQUCAAPJG4wZABySUFcgJAAEzMLXNV1ck0dIuCw6EjBADpy5AB1FAQ4EGQAV0YUP2AHDy8wEOQbUugmBLwtEIA3OcmQnEjuZBgQqE7gAGtgZAhwKHdkHFGwNvGUdDIcAGUliIBJEF3kAF5kAHlML4ADyPBIAGjyBUYRQAPnkqho4NoYQA+TiEGD9EAISIhPozErQMG4AASK2gn2+AApek9pCSXm8wFSQooAJQMUkAFQAsgAZACiOAgmDOOSIJAQ+OYyGl4DgoDmf2QJRCCH6YvALQQNjsEGFovF1NyJWAy1y7OUyHMyE+yRAuFImG4Iq1YDswHxbRINjA-SgfXlHqVUE4xiAA",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("Playground"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "language-ts extra-class" }, [
              _c("pre", { pre: true, attrs: { class: "language-ts" } }, [
                _c("code", [
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("interface")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("Animal")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\timageUrl"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tspecies"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\timages"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\tparagraphs"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token builtin" } }, [
                    _vm._v("string")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// Creates new type with all properties of the `Animal` interface"
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// except 'images' and 'paragraphs' properties. We can use this"
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v(
                      "// type to render small hover tooltip for a wiki entry list."
                    )
                  ]),
                  _vm._v("\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("type")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token class-name" } },
                    [_vm._v("AnimalShortInfo")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v(" Omit"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("<")]
                  ),
                  _vm._v("Animal"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(",")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'images'")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("|")]
                  ),
                  _vm._v(" "),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'paragraphs'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(">")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\n"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("function")
                  ]),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("renderAnimalHoverInfo")]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _vm._v("animals"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" AnimalShortInfo"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("[")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("]")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v(":")]
                  ),
                  _vm._v(" HTMLElement "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("{")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("const")
                  ]),
                  _vm._v(" container "),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token operator" } },
                    [_vm._v("=")]
                  ),
                  _vm._v("  document"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(".")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token function" } },
                    [_vm._v("createElement")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("(")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token string" } }, [
                    _vm._v("'div'")
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(")")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token comment" } }, [
                    _vm._v("// Internal implementation.")
                  ]),
                  _vm._v("\n\t\t"),
                  _c("span", { pre: true, attrs: { class: "token keyword" } }, [
                    _vm._v("return")
                  ]),
                  _vm._v(" container"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v(";")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("}")]
                  ),
                  _vm._v("\n")
                ])
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("You can find some examples in the "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://www.typescriptlang.org/docs/handbook/advanced-types.html#predefined-conditional-types",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("TypeScript docs"), _c("OutboundLink")],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "maintainers" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#maintainers" } },
          [_vm._v("#")]
        ),
        _vm._v(" Maintainers")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/sindresorhus",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Sindre Sorhus"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/CvX",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Jarek Radosz"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/BendingBender",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Dimitri Benin"), _c("OutboundLink")],
            1
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "license" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#license" } }, [
          _vm._v("#")
        ]),
        _vm._v(" License")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("(MIT OR CC0-1.0)")]),
      _vm._v(" "),
      _c("hr"),
      _vm._v(" "),
      _c("div", { attrs: { align: "center" } }, [
        _c("b", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://tidelift.com/subscription/pkg/npm-type-fest?utm_source=npm-type-fest&utm_medium=referral&utm_campaign=readme"
              }
            },
            [
              _vm._v(
                "Get professional support for this package with a Tidelift subscription"
              )
            ]
          )
        ]),
        _vm._v(" "),
        _c("br"),
        _vm._v(" "),
        _c("sub", [
          _vm._v(
            "\n\t\tTidelift helps make open source sustainable for maintainers while giving companies"
          ),
          _c("br"),
          _vm._v(
            "assurances about security, maintenance, and licensing for their dependencies.\n\t"
          )
        ])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}