{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/upath/readme.md?vue&type=template&id=f9a1f26c&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/upath/readme.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxDb250ZW50U2xvdHNEaXN0cmlidXRvciA6c2xvdC1rZXk9IiRwYXJlbnQuc2xvdEtleSI+PGgxIGlkPSJ1cGF0aC12MS0yLTAiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjdXBhdGgtdjEtMi0wIj4jPC9hPiB1cGF0aCB2MS4yLjA8L2gxPgo8cD48YSBocmVmPSJodHRwczovL3RyYXZpcy1jaS5vcmcvYW5vZHlub3MvdXBhdGgiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPjxpbWcgc3JjPSJodHRwczovL3RyYXZpcy1jaS5vcmcvYW5vZHlub3MvdXBhdGguc3ZnP2JyYW5jaD1tYXN0ZXIiIGFsdD0iQnVpbGQgU3RhdHVzIj48T3V0Ym91bmRMaW5rLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZGF2aWQtZG0ub3JnL2Fub2R5bm9zL3VwYXRoIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIj48aW1nIHNyYz0iaHR0cHM6Ly9kYXZpZC1kbS5vcmcvYW5vZHlub3MvdXBhdGgucG5nIiBhbHQ9IlVwIHRvIGRhdGUgU3RhdHVzIj48T3V0Ym91bmRMaW5rLz48L2E+PC9wPgo8cD5BIGRyb3AtaW4gcmVwbGFjZW1lbnQgLyBwcm94eSB0byBub2RlanMncyA8Y29kZT5wYXRoPC9jb2RlPiB0aGF0OjwvcD4KPHVsPgo8bGk+CjxwPlJlcGxhY2VzIHRoZSB3aW5kb3dzIDxjb2RlPlw8L2NvZGU+IHdpdGggdGhlIHVuaXggPGNvZGU+LzwvY29kZT4gaW4gYWxsIHN0cmluZyBwYXJhbXMgJmFtcDsgcmVzdWx0cy4gVGhpcyBoYXMgc2lnbmlmaWNhbnQgcG9zaXRpdmVzIC0gc2VlIGJlbG93LjwvcD4KPC9saT4KPGxpPgo8cD5BZGRzIDxzdHJvbmc+ZmlsZW5hbWUgZXh0ZW5zaW9uczwvc3Ryb25nPiBmdW5jdGlvbnMgPGNvZGU+YWRkRXh0PC9jb2RlPiwgPGNvZGU+dHJpbUV4dDwvY29kZT4sIDxjb2RlPnJlbW92ZUV4dDwvY29kZT4sIDxjb2RlPmNoYW5nZUV4dDwvY29kZT4sIGFuZCA8Y29kZT5kZWZhdWx0RXh0PC9jb2RlPi48L3A+CjwvbGk+CjxsaT4KPHA+QWRkIGEgPGNvZGU+bm9ybWFsaXplU2FmZTwvY29kZT4gZnVuY3Rpb24gdG8gcHJlc2VydmUgYW55IG1lYW5pbmdmdWwgbGVhZGluZyA8Y29kZT4uLzwvY29kZT4gJmFtcDsgYSA8Y29kZT5ub3JtYWxpemVUcmltPC9jb2RlPiB3aGljaCBhZGRpdGlvbmFsbHkgdHJpbXMgYW55IHVzZWxlc3MgZW5kaW5nIDxjb2RlPi88L2NvZGU+LjwvcD4KPC9saT4KPGxpPgo8cD5QbHVzIGEgaGVscGVyIDxjb2RlPnRvVW5peDwvY29kZT4gdGhhdCBzaW1wbHkgY29udmVydHMgPGNvZGU+XDwvY29kZT4gdG8gPGNvZGU+LzwvY29kZT4gYW5kIGNvbnNvbGlkYXRlcyBkdXBsaWNhdGVzLjwvcD4KPC9saT4KPC91bD4KPHA+PHN0cm9uZz5Vc2VmdWwgbm90ZTogdGhlc2UgZG9jcyBhcmUgYWN0dWFsbHkgYXV0byBnZW5lcmF0ZWQgZnJvbSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYW5vZHlub3MvdXBhdGgvYmxvYi9tYXN0ZXIvc291cmNlL3NwZWMvdXBhdGgtc3BlYy5jb2ZmZWUiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPnNwZWNzPE91dGJvdW5kTGluay8+PC9hPiwgcnVubmluZyBvbiBMaW51eC48L3N0cm9uZz48L3A+CjxwPk5vdGVzOjwvcD4KPHVsPgo8bGk+CjxwPjxjb2RlPnVwYXRoLnNlcDwvY29kZT4gaXMgc2V0IHRvIDxjb2RlPicvJzwvY29kZT4gZm9yIHNlYW1sZXNzIHJlcGxhY2VtZW50IChhcyBvZiAxLjAuMykuPC9wPgo8L2xpPgo8bGk+CjxwPnVwYXRoIGhhcyBubyBydW50aW1lIGRlcGVuZGVuY2llcywgZXhjZXB0IGJ1aWx0LWluIDxjb2RlPnBhdGg8L2NvZGU+IChhcyBvZiAxLjAuNCk8L3A+CjwvbGk+CjxsaT4KPHA+dHJhdmlzLWNpIHRlc3RlZCBpbiBub2RlIHZlcnNpb25zIDQgdG8gMTI8L3A+CjwvbGk+CjwvdWw+CjxoMiBpZD0id2h5Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3doeSI+IzwvYT4gV2h5ID88L2gyPgo8cD5Ob3JtYWwgPGNvZGU+cGF0aDwvY29kZT4gZG9lc24ndCBjb252ZXJ0IHBhdGhzIHRvIGEgdW5pZmllZCBmb3JtYXQgKGllIDxjb2RlPi88L2NvZGU+KSBiZWZvcmUgY2FsY3VsYXRpbmcgcGF0aHMgKDxjb2RlPm5vcm1hbGl6ZTwvY29kZT4sIDxjb2RlPmpvaW48L2NvZGU+KSwgd2hpY2ggY2FuIGxlYWQgdG8gbnVtZXJvdXMgcHJvYmxlbXMuCkFsc28gcGF0aCBqb2luaW5nLCBub3JtYWxpemF0aW9uIGV0YyBvbiB0aGUgdHdvIGZvcm1hdHMgaXMgbm90IGNvbnNpc3RlbnQsIGRlcGVuZGluZyBvbiB3aGVyZSBpdCBydW5zLiBSdW5uaW5nIDxjb2RlPnBhdGg8L2NvZGU+IG9uIFdpbmRvd3MgeWllbGRzIGRpZmZlcmVudCByZXN1bHRzIHRoYW4gd2hlbiBpdCBydW5zIG9uIExpbnV4IC8gTWFjLjwvcD4KPHA+SW4gZ2VuZXJhbCwgaWYgeW91IGNvZGUgeW91ciBwYXRocyBsb2dpYyB3aGlsZSBkZXZlbG9waW5nIG9uIFVuaXgvTWFjIGFuZCBpdCBydW5zIG9uIFdpbmRvd3MsIHlvdSBtYXkgcnVuIGludG8gcHJvYmxlbXMgd2hlbiB1c2luZyA8Y29kZT5wYXRoPC9jb2RlPi48L3A+CjxwPk5vdGUgdGhhdCB1c2luZyA8c3Ryb25nPlVuaXggPGNvZGU+LzwvY29kZT4gb24gV2luZG93czwvc3Ryb25nPiB3b3JrcyBwZXJmZWN0bHkgaW5zaWRlIG5vZGVqcyAoYW5kIG90aGVyIGxhbmd1YWdlcyksIHNvIHRoZXJlJ3Mgbm8gcmVhc29uIHRvIHN0aWNrIHRvIHRoZSBXaW5kb3dzIGxlZ2FjeSBhdCBhbGwuPC9wPgo8aDUgaWQ9ImV4YW1wbGVzLXNwZWNzIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2V4YW1wbGVzLXNwZWNzIj4jPC9hPiBFeGFtcGxlcyAvIHNwZWNzPC9oNT4KPHA+Q2hlY2sgb3V0IHRoZSBkaWZmZXJlbnQgKGltcHJvdmVkKSBiZWhhdmlvciB0byB2YW5pbGxhIDxjb2RlPnBhdGg8L2NvZGU+OjwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+YHVwYXRoLm5vcm1hbGl6ZShwYXRoKWAgICAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgICAg4pyTIGAnYzovd2luZG93cy9ub2RlanMvcGF0aCdgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgYCdjOi93aW5kb3dzL25vZGVqcy9wYXRoJ2AgIC8vIGVxdWFsIHRvIGBwYXRoLm5vcm1hbGl6ZSgpYAogICAgICDinJMgYCdjOi93aW5kb3dzLy4uL25vZGVqcy9wYXRoJ2AgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgIGAnYzovbm9kZWpzL3BhdGgnYCAgLy8gZXF1YWwgdG8gYHBhdGgubm9ybWFsaXplKClgCiAgICAgIOKckyBgJ2M6XFx3aW5kb3dzXFxub2RlanNcXHBhdGgnYCAgICAgICAgLS0tJmd0OyAgICAgIGAnYzovd2luZG93cy9ub2RlanMvcGF0aCdgICAvLyBgcGF0aC5ub3JtYWxpemUoKWAgZ2l2ZXMgYCdjOlx3aW5kb3dzXG5vZGVqc1xwYXRoJ2AKICAgICAg4pyTIGAnYzpcXHdpbmRvd3NcXC4uXFxub2RlanNcXHBhdGgnYCAgICAtLS0mZ3Q7ICAgICAgICAgICAgICBgJ2M6L25vZGVqcy9wYXRoJ2AgIC8vIGBwYXRoLm5vcm1hbGl6ZSgpYCBnaXZlcyBgJ2M6XHdpbmRvd3NcLi5cbm9kZWpzXHBhdGgnYAogICAgICDinJMgYCcvL3dpbmRvd3NcXHVuaXgvbWl4ZWQnYCAgICAgICAgICAgIC0tLSZndDsgICAgICAgICBgJy93aW5kb3dzL3VuaXgvbWl4ZWQnYCAgLy8gYHBhdGgubm9ybWFsaXplKClgIGdpdmVzIGAnL3dpbmRvd3NcdW5peC9taXhlZCdgCiAgICAgIOKckyBgJ1xcd2luZG93cy8vdW5peC9taXhlZCdgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgIGAnL3dpbmRvd3MvdW5peC9taXhlZCdgICAvLyBgcGF0aC5ub3JtYWxpemUoKWAgZ2l2ZXMgYCdcd2luZG93cy91bml4L21peGVkJ2AKICAgICAg4pyTIGAnLy8vL1xcd2luZG93c1xcLi5cXHVuaXgvbWl4ZWQvJ2AgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgIGAnL3VuaXgvbWl4ZWQvJ2AgIC8vIGBwYXRoLm5vcm1hbGl6ZSgpYCBnaXZlcyBgJy9cd2luZG93c1wuLlx1bml4L21peGVkLydgCjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxwPkpvaW5pbmcgcGF0aHMgY2FuIGFsc28gYmUgYSBwcm9ibGVtOjwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+YHVwYXRoLmpvaW4ocGF0aHMuLi4pYCAgICAgICAgLS1yZXR1cm5zLS0mZ3Q7CgogICAgICDinJMgYCdzb21lL25vZGVqcy9kZWVwJywgJy4uL3BhdGgnYCAgICAgICAtLS0mZ3Q7ICAgICAgIGAnc29tZS9ub2RlanMvcGF0aCdgICAvLyBlcXVhbCB0byBgcGF0aC5qb2luKClgCiAgICAgIOKckyBgJ3NvbWUvbm9kZWpzXFx3aW5kb3dzJywgJy4uL3BhdGgnYCAgIC0tLSZndDsgICAgICAgYCdzb21lL25vZGVqcy9wYXRoJ2AgIC8vIGBwYXRoLmpvaW4oKWAgZ2l2ZXMgYCdzb21lL3BhdGgnYAogICAgICDinJMgYCdzb21lXFx3aW5kb3dzXFxvbmx5JywgJy4uXFxwYXRoJ2AgICAtLS0mZ3Q7ICAgICAgYCdzb21lL3dpbmRvd3MvcGF0aCdgICAvLyBgcGF0aC5qb2luKClgIGdpdmVzIGAnc29tZVx3aW5kb3dzXG9ubHkvLi5ccGF0aCdgCjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxwPlBhcnNpbmcgd2l0aCA8Y29kZT5wYXRoLnBhcnNlKCk8L2NvZGU+IHNob3VsZCBhbHNvIGJlIGNvbnNpc3RlbnQgYWNyb3NzIE9TZXM6PC9wPgo8cD48Y29kZT51cGF0aC5wYXJzZShwYXRoKTwvY29kZT4gICAgICAgIC0tcmV0dXJucy0tJmd0OzwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+ICAgICAg4pyTIGAnYzpcV2luZG93c1xEaXJlY3Rvcnlcc29tZWZpbGUuZXh0J2AgICAgICAtLS0mZ3Q7IGB7IHJvb3Q6ICcnLCBkaXI6ICdjOi9XaW5kb3dzL0RpcmVjdG9yeScsIGJhc2U6ICdzb21lZmlsZS5leHQnLCBleHQ6ICcuZXh0JywgbmFtZTogJ3NvbWVmaWxlJyB9YAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBwYXRoLnBhcnNlKClgIGdpdmVzIGAneyByb290OiAnJywgZGlyOiAnJywgYmFzZTogJ2M6XFxXaW5kb3dzXFxEaXJlY3RvcnlcXHNvbWVmaWxlLmV4dCcsIGV4dDogJy5leHQnLCBuYW1lOiAnYzpcXFdpbmRvd3NcXERpcmVjdG9yeVxcc29tZWZpbGUnIH0nYAogICAgICDinJMgYCcvcm9vdC9vZi91bml4L3NvbWVmaWxlLmV4dCdgICAgICAgICAgICAgIC0tLSZndDsgYHsgcm9vdDogJy8nLCBkaXI6ICcvcm9vdC9vZi91bml4JywgYmFzZTogJ3NvbWVmaWxlLmV4dCcsIGV4dDogJy5leHQnLCBuYW1lOiAnc29tZWZpbGUnIH1gICAvLyBlcXVhbCB0byBgcGF0aC5wYXJzZSgpYAo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48aDIgaWQ9ImFkZGVkLWZ1bmN0aW9ucyI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNhZGRlZC1mdW5jdGlvbnMiPiM8L2E+IEFkZGVkIGZ1bmN0aW9uczwvaDI+CjxoNCBpZD0idXBhdGgtdG91bml4LXBhdGgiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjdXBhdGgtdG91bml4LXBhdGgiPiM8L2E+IDxjb2RlPnVwYXRoLnRvVW5peChwYXRoKTwvY29kZT48L2g0Pgo8cD5KdXN0IGNvbnZlcnRzIGFsbCBgYCB0byA8Y29kZT4vPC9jb2RlPiBhbmQgY29uc29saWRhdGVzIGR1cGxpY2F0ZXMsIHdpdGhvdXQgcGVyZm9ybWluZyBhbnkgbm9ybWFsaXphdGlvbi48L3A+CjxoNSBpZD0iZXhhbXBsZXMtc3BlY3MtMiI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNleGFtcGxlcy1zcGVjcy0yIj4jPC9hPiBFeGFtcGxlcyAvIHNwZWNzPC9oNT4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+YHVwYXRoLnRvVW5peChwYXRoKWAgICAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgIOKckyBgJy4vL3dpbmRvd3NcLy91bml4Ly9taXhlZC8vLy8nYCAgICAgIC0tLSZndDsgICAgICAgICBgJy4vd2luZG93cy91bml4L21peGVkLydgCiAgICDinJMgYCcuLi8vL3dpbmRvd3NcLi5cXHVuaXgvbWl4ZWQnYCAgICAgICAtLS0mZ3Q7ICAgICAgYCcuLi93aW5kb3dzLy4uL3VuaXgvbWl4ZWQnYAo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48aDQgaWQ9InVwYXRoLW5vcm1hbGl6ZXNhZmUtcGF0aCI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiN1cGF0aC1ub3JtYWxpemVzYWZlLXBhdGgiPiM8L2E+IDxjb2RlPnVwYXRoLm5vcm1hbGl6ZVNhZmUocGF0aCk8L2NvZGU+PC9oND4KPHA+RXhhY3RseSBsaWtlIDxjb2RlPnBhdGgubm9ybWFsaXplKHBhdGgpPC9jb2RlPiwgYnV0IGl0IGtlZXBzIHRoZSBmaXJzdCBtZWFuaW5nZnVsIDxjb2RlPi4vPC9jb2RlPi48L3A+CjxwPk5vdGUgdGhhdCB0aGUgdW5peCA8Y29kZT4vPC9jb2RlPiBpcyByZXR1cm5lZCBldmVyeXdoZXJlLCBzbyB3aW5kb3dzIDxjb2RlPlw8L2NvZGU+IGlzIGFsd2F5cyBjb252ZXJ0ZWQgdG8gdW5peCA8Y29kZT4vPC9jb2RlPi48L3A+CjxoNSBpZD0iZXhhbXBsZXMtc3BlY3MtaG93LWl0LWRpZmZlcnMtZnJvbS12YW5pbGxhLXBhdGgiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjZXhhbXBsZXMtc3BlY3MtaG93LWl0LWRpZmZlcnMtZnJvbS12YW5pbGxhLXBhdGgiPiM8L2E+IEV4YW1wbGVzIC8gc3BlY3MgJmFtcDsgaG93IGl0IGRpZmZlcnMgZnJvbSB2YW5pbGxhIDxjb2RlPnBhdGg8L2NvZGU+PC9oNT4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+YHVwYXRoLm5vcm1hbGl6ZVNhZmUocGF0aClgICAgICAgICAtLXJldHVybnMtLSZndDsKCiAgICDinJMgYCcnYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgICBgJy4nYCAgLy8gZXF1YWwgdG8gYHBhdGgubm9ybWFsaXplKClgCiAgICDinJMgYCcuJ2AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgICBgJy4nYCAgLy8gZXF1YWwgdG8gYHBhdGgubm9ybWFsaXplKClgCiAgICDinJMgYCcuLydgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgIGAnLi8nYCAgLy8gZXF1YWwgdG8gYHBhdGgubm9ybWFsaXplKClgCiAgICDinJMgYCcuLy8nYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgIGAnLi8nYCAgLy8gZXF1YWwgdG8gYHBhdGgubm9ybWFsaXplKClgCiAgICDinJMgYCcuXFwnYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgIGAnLi8nYCAgLy8gYHBhdGgubm9ybWFsaXplKClgIGdpdmVzIGAnLlwnYAogICAg4pyTIGAnLlxcLy8nYCAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICAgICAgICBgJy4vJ2AgIC8vIGBwYXRoLm5vcm1hbGl6ZSgpYCBnaXZlcyBgJy5cLydgCiAgICDinJMgYCcuLy4uJ2AgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgIGAnLi4nYCAgLy8gZXF1YWwgdG8gYHBhdGgubm9ybWFsaXplKClgCiAgICDinJMgYCcuLy8uLidgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgIGAnLi4nYCAgLy8gZXF1YWwgdG8gYHBhdGgubm9ybWFsaXplKClgCiAgICDinJMgYCcuLy4uLydgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgYCcuLi8nYCAgLy8gZXF1YWwgdG8gYHBhdGgubm9ybWFsaXplKClgCiAgICDinJMgYCcuXFwuLlxcJ2AgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgYCcuLi8nYCAgLy8gYHBhdGgubm9ybWFsaXplKClgIGdpdmVzIGAnLlwuLlwnYAogICAg4pyTIGAnLi8uLi9kZXAnYCAgICAgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICAgIGAnLi4vZGVwJ2AgIC8vIGVxdWFsIHRvIGBwYXRoLm5vcm1hbGl6ZSgpYAogICAg4pyTIGAnLi4vZGVwJ2AgICAgICAgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICAgIGAnLi4vZGVwJ2AgIC8vIGVxdWFsIHRvIGBwYXRoLm5vcm1hbGl6ZSgpYAogICAg4pyTIGAnLi4vcGF0aC9kZXAnYCAgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICBgJy4uL3BhdGgvZGVwJ2AgIC8vIGVxdWFsIHRvIGBwYXRoLm5vcm1hbGl6ZSgpYAogICAg4pyTIGAnLi4vcGF0aC8uLi9kZXAnYCAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICAgIGAnLi4vZGVwJ2AgIC8vIGVxdWFsIHRvIGBwYXRoLm5vcm1hbGl6ZSgpYAogICAg4pyTIGAnZGVwJ2AgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICAgICAgIGAnZGVwJ2AgIC8vIGVxdWFsIHRvIGBwYXRoLm5vcm1hbGl6ZSgpYAogICAg4pyTIGAncGF0aC8vZGVwJ2AgICAgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICBgJ3BhdGgvZGVwJ2AgIC8vIGVxdWFsIHRvIGBwYXRoLm5vcm1hbGl6ZSgpYAogICAg4pyTIGAnLi9kZXAnYCAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICAgICBgJy4vZGVwJ2AgIC8vIGBwYXRoLm5vcm1hbGl6ZSgpYCBnaXZlcyBgJ2RlcCdgCiAgICDinJMgYCcuL3BhdGgvZGVwJ2AgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICBgJy4vcGF0aC9kZXAnYCAgLy8gYHBhdGgubm9ybWFsaXplKClgIGdpdmVzIGAncGF0aC9kZXAnYAogICAg4pyTIGAnLi9wYXRoLy4uL2RlcCdgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICAgICBgJy4vZGVwJ2AgIC8vIGBwYXRoLm5vcm1hbGl6ZSgpYCBnaXZlcyBgJ2RlcCdgCiAgICDinJMgYCcuLy93aW5kb3dzXFx1bml4L21peGVkLydgICAgICAgICAtLS0mZ3Q7ICAgICAgYCcuL3dpbmRvd3MvdW5peC9taXhlZC8nYCAgLy8gYHBhdGgubm9ybWFsaXplKClgIGdpdmVzIGAnd2luZG93c1x1bml4L21peGVkLydgCiAgICDinJMgYCcuLi8vd2luZG93c1xcdW5peC9taXhlZCdgICAgICAgICAtLS0mZ3Q7ICAgICAgYCcuLi93aW5kb3dzL3VuaXgvbWl4ZWQnYCAgLy8gYHBhdGgubm9ybWFsaXplKClgIGdpdmVzIGAnLi4vd2luZG93c1x1bml4L21peGVkJ2AKICAgIOKckyBgJ3dpbmRvd3NcXHVuaXgvbWl4ZWQvJ2AgICAgICAgICAgIC0tLSZndDsgICAgICAgIGAnd2luZG93cy91bml4L21peGVkLydgICAvLyBgcGF0aC5ub3JtYWxpemUoKWAgZ2l2ZXMgYCd3aW5kb3dzXHVuaXgvbWl4ZWQvJ2AKICAgIOKckyBgJy4uLy93aW5kb3dzXFwuLlxcdW5peC9taXhlZCdgICAgIC0tLSZndDsgICAgICAgICAgICAgIGAnLi4vdW5peC9taXhlZCdgICAvLyBgcGF0aC5ub3JtYWxpemUoKWAgZ2l2ZXMgYCcuLi93aW5kb3dzXC4uXHVuaXgvbWl4ZWQnYAo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48aDQgaWQ9InVwYXRoLW5vcm1hbGl6ZXRyaW0tcGF0aCI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiN1cGF0aC1ub3JtYWxpemV0cmltLXBhdGgiPiM8L2E+IDxjb2RlPnVwYXRoLm5vcm1hbGl6ZVRyaW0ocGF0aCk8L2NvZGU+PC9oND4KPHA+RXhhY3RseSBsaWtlIDxjb2RlPnBhdGgubm9ybWFsaXplU2FmZShwYXRoKTwvY29kZT4sIGJ1dCBpdCB0cmltcyBhbnkgdXNlbGVzcyBlbmRpbmcgPGNvZGU+LzwvY29kZT4uPC9wPgo8aDUgaWQ9ImV4YW1wbGVzLXNwZWNzLTMiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjZXhhbXBsZXMtc3BlY3MtMyI+IzwvYT4gRXhhbXBsZXMgLyBzcGVjczwvaDU+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLSBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlPjxjb2RlPmB1cGF0aC5ub3JtYWxpemVUcmltKHBhdGgpYCAgICAgICAgLS1yZXR1cm5zLS0mZ3Q7CgogICAg4pyTIGAnLi8nYCAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICAgICAgICBgJy4nYCAgLy8gYHVwYXRoLm5vcm1hbGl6ZVNhZmUoKWAgZ2l2ZXMgYCcuLydgCiAgICDinJMgYCcuLy4uLydgICAgICAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICAgICAgYCcuLidgICAvLyBgdXBhdGgubm9ybWFsaXplU2FmZSgpYCBnaXZlcyBgJy4uLydgCiAgICDinJMgYCcuLy4uL2RlcC8nYCAgICAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgICBgJy4uL2RlcCdgICAvLyBgdXBhdGgubm9ybWFsaXplU2FmZSgpYCBnaXZlcyBgJy4uL2RlcC8nYAogICAg4pyTIGAncGF0aC8vZGVwXFwnYCAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgIGAncGF0aC9kZXAnYCAgLy8gYHVwYXRoLm5vcm1hbGl6ZVNhZmUoKWAgZ2l2ZXMgYCdwYXRoL2RlcC8nYAogICAg4pyTIGAnLi8vd2luZG93c1xcdW5peC9taXhlZC8nYCAgICAgLS0tJmd0OyAgICAgIGAnLi93aW5kb3dzL3VuaXgvbWl4ZWQnYCAgLy8gYHVwYXRoLm5vcm1hbGl6ZVNhZmUoKWAgZ2l2ZXMgYCcuL3dpbmRvd3MvdW5peC9taXhlZC8nYAo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48aDQgaWQ9InVwYXRoLWpvaW5zYWZlLXBhdGgxLXBhdGgyIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3VwYXRoLWpvaW5zYWZlLXBhdGgxLXBhdGgyIj4jPC9hPiA8Y29kZT51cGF0aC5qb2luU2FmZShbcGF0aDFdWywgcGF0aDJdWywgLi4uXSk8L2NvZGU+PC9oND4KPHA+RXhhY3RseSBsaWtlIDxjb2RlPnBhdGguam9pbigpPC9jb2RlPiwgYnV0IGl0IGtlZXBzIHRoZSBmaXJzdCBtZWFuaW5nZnVsIDxjb2RlPi4vPC9jb2RlPi48L3A+CjxwPk5vdGUgdGhhdCB0aGUgdW5peCA8Y29kZT4vPC9jb2RlPiBpcyByZXR1cm5lZCBldmVyeXdoZXJlLCBzbyB3aW5kb3dzIDxjb2RlPlw8L2NvZGU+IGlzIGFsd2F5cyBjb252ZXJ0ZWQgdG8gdW5peCA8Y29kZT4vPC9jb2RlPi48L3A+CjxoNSBpZD0iZXhhbXBsZXMtc3BlY3MtaG93LWl0LWRpZmZlcnMtZnJvbS12YW5pbGxhLXBhdGgtMiI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNleGFtcGxlcy1zcGVjcy1ob3ctaXQtZGlmZmVycy1mcm9tLXZhbmlsbGEtcGF0aC0yIj4jPC9hPiBFeGFtcGxlcyAvIHNwZWNzICZhbXA7IGhvdyBpdCBkaWZmZXJzIGZyb20gdmFuaWxsYSA8Y29kZT5wYXRoPC9jb2RlPjwvaDU+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLSBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlPjxjb2RlPmB1cGF0aC5qb2luU2FmZShwYXRoKWAgICAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgIOKckyBgJ3NvbWUvbm9kZWpzL2RlZXAnLCAnLi4vcGF0aCdgICAgICAgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgIGAnc29tZS9ub2RlanMvcGF0aCdgICAvLyBlcXVhbCB0byBgcGF0aC5qb2luKClgCiAgICDinJMgYCcuL3NvbWUvbG9jYWwvdW5peC8nLCAnLi4vcGF0aCdgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgIGAnLi9zb21lL2xvY2FsL3BhdGgnYCAgLy8gYHBhdGguam9pbigpYCBnaXZlcyBgJ3NvbWUvbG9jYWwvcGF0aCdgCiAgICDinJMgYCcuL3NvbWVcXGN1cnJlbnRcXG1peGVkJywgJy4uXFxwYXRoJ2AgICAgICAgICAtLS0mZ3Q7ICAgICAgICBgJy4vc29tZS9jdXJyZW50L3BhdGgnYCAgLy8gYHBhdGguam9pbigpYCBnaXZlcyBgJ3NvbWVcY3VycmVudFxtaXhlZC8uLlxwYXRoJ2AKICAgIOKckyBgJy4uL3NvbWUvcmVsYXRpdmUvZGVzdGluYXRpb24nLCAnLi5cXHBhdGgnYCAgIC0tLSZndDsgICAgICBgJy4uL3NvbWUvcmVsYXRpdmUvcGF0aCdgICAvLyBgcGF0aC5qb2luKClgIGdpdmVzIGAnLi4vc29tZS9yZWxhdGl2ZS9kZXN0aW5hdGlvbi8uLlxwYXRoJ2AKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PGgyIGlkPSJhZGRlZC1mdW5jdGlvbnMtZm9yLWZpbGVuYW1lLWV4dGVuc2lvbi1tYW5pcHVsYXRpb24iPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjYWRkZWQtZnVuY3Rpb25zLWZvci1maWxlbmFtZS1leHRlbnNpb24tbWFuaXB1bGF0aW9uIj4jPC9hPiBBZGRlZCBmdW5jdGlvbnMgZm9yIDxlbT5maWxlbmFtZSBleHRlbnNpb248L2VtPiBtYW5pcHVsYXRpb24uPC9oMj4KPHA+PHN0cm9uZz5IYXBweSBub3Rlczo8L3N0cm9uZz48L3A+CjxwPkluIGFsbCBmdW5jdGlvbnMgeW91IGNhbjo8L3A+Cjx1bD4KPGxpPgo8cD51c2UgYm90aCA8Y29kZT4uZXh0PC9jb2RlPiAmYW1wOyA8Y29kZT5leHQ8L2NvZGU+IC0gdGhlIGRvdCA8Y29kZT4uPC9jb2RlPiBvbiB0aGUgZXh0ZW5zaW9uIGlzIGFsd2F5cyBhZGp1c3RlZCBjb3JyZWN0bHkuPC9wPgo8L2xpPgo8bGk+CjxwPm9taXQgdGhlIDxjb2RlPmV4dDwvY29kZT4gcGFyYW0gKHBhc3MgbnVsbC91bmRlZmluZWQvZW1wdHkgc3RyaW5nKSBhbmQgdGhlIGNvbW1vbiBzZW5zZSB0aGluZyB3aWxsIGhhcHBlbi48L3A+CjwvbGk+CjxsaT4KPHA+aWdub3JlIHNwZWNpZmljIGV4dGVuc2lvbnMgZnJvbSBiZWluZyBjb25zaWRlcmVkIGFzIHZhbGlkIG9uZXMgKGVnIDxjb2RlPi5taW48L2NvZGU+LCA8Y29kZT4uZGV2PC9jb2RlPiA8Y29kZT4uYUxvbmdFeHRJc05vdEFuRXh0PC9jb2RlPiBldGMpLCBoZW5jZSBubyB0cmltbWluZyBvciByZXBsYWNlbWVudCB0YWtlcyBwbGFjZSBvbiB0aGVtLjwvcD4KPC9saT4KPC91bD4KPGg0IGlkPSJ1cGF0aC1hZGRleHQtZmlsZW5hbWUtZXh0Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3VwYXRoLWFkZGV4dC1maWxlbmFtZS1leHQiPiM8L2E+IDxjb2RlPnVwYXRoLmFkZEV4dChmaWxlbmFtZSwgW2V4dF0pPC9jb2RlPjwvaDQ+CjxwPkFkZHMgPGNvZGU+LmV4dDwvY29kZT4gdG8gPGNvZGU+ZmlsZW5hbWU8L2NvZGU+LCBidXQgb25seSBpZiBpdCBkb2Vzbid0IGFscmVhZHkgaGF2ZSB0aGUgZXhhY3QgZXh0ZW5zaW9uLjwvcD4KPGg1IGlkPSJleGFtcGxlcy1zcGVjcy00Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2V4YW1wbGVzLXNwZWNzLTQiPiM8L2E+IEV4YW1wbGVzIC8gc3BlY3M8L2g1Pgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZT48Y29kZT5gdXBhdGguYWRkRXh0KGZpbGVuYW1lLCAnanMnKWAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgIOKckyBgJ215ZmlsZS9hZGRFeHQnYCAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgYCdteWZpbGUvYWRkRXh0LmpzJ2AKICAgIOKckyBgJ215ZmlsZS9hZGRFeHQudHh0J2AgICAgICAgLS0tJmd0OyAgICAgICBgJ215ZmlsZS9hZGRFeHQudHh0LmpzJ2AKICAgIOKckyBgJ215ZmlsZS9hZGRFeHQuanMnYCAgICAgICAgLS0tJmd0OyAgICAgICAgICAgYCdteWZpbGUvYWRkRXh0LmpzJ2AKICAgIOKckyBgJ215ZmlsZS9hZGRFeHQubWluLidgICAgICAgLS0tJmd0OyAgICAgIGAnbXlmaWxlL2FkZEV4dC5taW4uLmpzJ2AKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+SXQgYWRkcyBub3RoaW5nIGlmIG5vIDxjb2RlPmV4dDwvY29kZT4gcGFyYW0gaXMgcGFzc2VkLjwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+YHVwYXRoLmFkZEV4dChmaWxlbmFtZSlgICAgICAgICAgICAtLXJldHVybnMtLSZndDsKCiAgICAgIOKckyBgJ215ZmlsZS9hZGRFeHQnYCAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgYCdteWZpbGUvYWRkRXh0J2AKICAgICAg4pyTIGAnbXlmaWxlL2FkZEV4dC50eHQnYCAgICAgICAtLS0mZ3Q7ICAgICAgICAgIGAnbXlmaWxlL2FkZEV4dC50eHQnYAogICAgICDinJMgYCdteWZpbGUvYWRkRXh0LmpzJ2AgICAgICAgIC0tLSZndDsgICAgICAgICAgIGAnbXlmaWxlL2FkZEV4dC5qcydgCiAgICAgIOKckyBgJ215ZmlsZS9hZGRFeHQubWluLidgICAgICAgLS0tJmd0OyAgICAgICAgIGAnbXlmaWxlL2FkZEV4dC5taW4uJ2AKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PGg0IGlkPSJ1cGF0aC10cmltZXh0LWZpbGVuYW1lLWlnbm9yZWV4dHMtbWF4c2l6ZS03Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3VwYXRoLXRyaW1leHQtZmlsZW5hbWUtaWdub3JlZXh0cy1tYXhzaXplLTciPiM8L2E+IDxjb2RlPnVwYXRoLnRyaW1FeHQoZmlsZW5hbWUsIFtpZ25vcmVFeHRzXSwgW21heFNpemU9N10pPC9jb2RlPjwvaDQ+CjxwPlRyaW1zIGEgZmlsZW5hbWUncyBleHRlbnNpb24uPC9wPgo8dWw+CjxsaT4KPHA+RXh0ZW5zaW9ucyBhcmUgY29uc2lkZXJlZCB0byBiZSB1cCB0byA8Y29kZT5tYXhTaXplPC9jb2RlPiBjaGFycyBsb25nLCBjb3VudGluZyB0aGUgZG90IChkZWZhdWx0cyB0byA3KS48L3A+CjwvbGk+CjxsaT4KPHA+QW4gPGNvZGU+QXJyYXk8L2NvZGU+IG9mIDxjb2RlPmlnbm9yZUV4dHM8L2NvZGU+IChlZyA8Y29kZT5bJy5taW4nXTwvY29kZT4pIHByZXZlbnRzIHRoZXNlIGZyb20gYmVpbmcgY29uc2lkZXJlZCBhcyBleHRlbnNpb24sIHRodXMgYXJlIG5vdCB0cmltbWVkLjwvcD4KPC9saT4KPC91bD4KPGg1IGlkPSJleGFtcGxlcy1zcGVjcy01Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2V4YW1wbGVzLXNwZWNzLTUiPiM8L2E+IEV4YW1wbGVzIC8gc3BlY3M8L2g1Pgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZT48Y29kZT5gdXBhdGgudHJpbUV4dChmaWxlbmFtZSlgICAgICAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgIOKckyBgJ215L3RyaW1lZEV4dC50eHQnYCAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICBgJ215L3RyaW1lZEV4dCdgCiAgICDinJMgYCdteS90cmltZWRFeHQnYCAgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgYCdteS90cmltZWRFeHQnYAogICAg4pyTIGAnbXkvdHJpbWVkRXh0Lm1pbidgICAgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgICAgIGAnbXkvdHJpbWVkRXh0J2AKICAgIOKckyBgJ215L3RyaW1lZEV4dC5taW4uanMnYCAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgIGAnbXkvdHJpbWVkRXh0Lm1pbidgCiAgICDinJMgYCcuLi9teS90cmltZWRFeHQubG9uZ0V4dCdgICAgICAgLS0tJmd0OyAgICAgIGAnLi4vbXkvdHJpbWVkRXh0LmxvbmdFeHQnYAo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48cD5JdCBpcyBpZ25vcmluZyA8Y29kZT4ubWluPC9jb2RlPiAmYW1wOyA8Y29kZT4uZGV2PC9jb2RlPiBhcyBleHRlbnNpb25zLCBhbmQgY29uc2lkZXJzIGV4dHMgd2l0aCB1cCB0byA4IGNoYXJzLjwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+YHVwYXRoLnRyaW1FeHQoZmlsZW5hbWUsIFsnbWluJywgJy5kZXYnXSwgOClgICAgICAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgICAg4pyTIGAnbXkvdHJpbWVkRXh0LnR4dCdgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgYCdteS90cmltZWRFeHQnYAogICAgICDinJMgYCdteS90cmltZWRFeHQubWluJ2AgICAgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgIGAnbXkvdHJpbWVkRXh0Lm1pbidgCiAgICAgIOKckyBgJ215L3RyaW1lZEV4dC5kZXYnYCAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgYCdteS90cmltZWRFeHQuZGV2J2AKICAgICAg4pyTIGAnLi4vbXkvdHJpbWVkRXh0LmxvbmdFeHQnYCAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgYCcuLi9teS90cmltZWRFeHQnYAogICAgICDinJMgYCcuLi9teS90cmltZWRFeHQubG9uZ1JFeHQnYCAgICAgIC0tLSZndDsgICAgICBgJy4uL215L3RyaW1lZEV4dC5sb25nUkV4dCdgCjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxoNCBpZD0idXBhdGgtcmVtb3ZlZXh0LWZpbGVuYW1lLWV4dCI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiN1cGF0aC1yZW1vdmVleHQtZmlsZW5hbWUtZXh0Ij4jPC9hPiA8Y29kZT51cGF0aC5yZW1vdmVFeHQoZmlsZW5hbWUsIGV4dCk8L2NvZGU+PC9oND4KPHA+UmVtb3ZlcyB0aGUgc3BlY2lmaWMgPGNvZGU+ZXh0PC9jb2RlPiBleHRlbnNpb24gZnJvbSBmaWxlbmFtZSwgaWYgaXQgaGFzIGl0LiBPdGhlcndpc2UgaXQgbGVhdmVzIGl0IGFzIGlzLgpBcyBpbiBhbGwgdXBhdGggZnVuY3Rpb25zLCBpdCBiZSA8Y29kZT4uZXh0PC9jb2RlPiBvciA8Y29kZT5leHQ8L2NvZGU+LjwvcD4KPGg1IGlkPSJleGFtcGxlcy1zcGVjcy02Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2V4YW1wbGVzLXNwZWNzLTYiPiM8L2E+IEV4YW1wbGVzIC8gc3BlY3M8L2g1Pgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZT48Y29kZT5gdXBhdGgucmVtb3ZlRXh0KGZpbGVuYW1lLCAnLmpzJylgICAgICAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgIOKckyBgJ3JlbW92ZWRFeHQuanMnYCAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgIGAncmVtb3ZlZEV4dCdgCiAgICDinJMgYCdyZW1vdmVkRXh0LnR4dC5qcydgICAgICAgLS0tJmd0OyAgICAgIGAncmVtb3ZlZEV4dC50eHQnYAogICAg4pyTIGAnbm90UmVtb3ZlZC50eHQnYCAgICAgICAgIC0tLSZndDsgICAgICBgJ25vdFJlbW92ZWQudHh0J2AKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+SXQgZG9lcyBub3QgY2FyZSBhYm91dCB0aGUgbGVuZ3RoIG9mIGV4dHMuPC9wPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZT48Y29kZT5gdXBhdGgucmVtb3ZlRXh0KGZpbGVuYW1lLCAnLmxvbmdFeHQnKWAgICAgICAgICAgLS1yZXR1cm5zLS0mZ3Q7CgogICAg4pyTIGAncmVtb3ZlZEV4dC5sb25nRXh0J2AgICAgICAgICAgLS0tJmd0OyAgICAgICAgICBgJ3JlbW92ZWRFeHQnYAogICAg4pyTIGAncmVtb3ZlZEV4dC50eHQubG9uZ0V4dCdgICAgICAgLS0tJmd0OyAgICAgIGAncmVtb3ZlZEV4dC50eHQnYAogICAg4pyTIGAnbm90UmVtb3ZlZC50eHQnYCAgICAgICAgICAgICAgLS0tJmd0OyAgICAgIGAnbm90UmVtb3ZlZC50eHQnYAo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48aDQgaWQ9InVwYXRoLWNoYW5nZWV4dC1maWxlbmFtZS1leHQtaWdub3JlZXh0cy1tYXhzaXplLTciPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjdXBhdGgtY2hhbmdlZXh0LWZpbGVuYW1lLWV4dC1pZ25vcmVleHRzLW1heHNpemUtNyI+IzwvYT4gPGNvZGU+dXBhdGguY2hhbmdlRXh0KGZpbGVuYW1lLCBbZXh0XSwgW2lnbm9yZUV4dHNdLCBbbWF4U2l6ZT03XSk8L2NvZGU+PC9oND4KPHA+Q2hhbmdlcyBhIGZpbGVuYW1lJ3MgZXh0ZW5zaW9uIHRvIDxjb2RlPmV4dDwvY29kZT4uIElmIGl0IGhhcyBubyAodmFsaWQpIGV4dGVuc2lvbiwgaXQgYWRkcyBpdC48L3A+Cjx1bD4KPGxpPgo8cD5WYWxpZCBleHRlbnNpb25zIGFyZSBjb25zaWRlcmVkIHRvIGJlIHVwIHRvIDxjb2RlPm1heFNpemU8L2NvZGU+IGNoYXJzIGxvbmcsIGNvdW50aW5nIHRoZSBkb3QgKGRlZmF1bHRzIHRvIDcpLjwvcD4KPC9saT4KPGxpPgo8cD5BbiA8Y29kZT5BcnJheTwvY29kZT4gb2YgPGNvZGU+aWdub3JlRXh0czwvY29kZT4gKGVnIDxjb2RlPlsnLm1pbiddPC9jb2RlPikgcHJldmVudHMgdGhlc2UgZnJvbSBiZWluZyBjb25zaWRlcmVkIGFzIGV4dGVuc2lvbiwgdGh1cyBhcmUgbm90IGNoYW5nZWQgLSB0aGUgbmV3IGV4dGVuc2lvbiBpcyBhZGRlZCBpbnN0ZWFkLjwvcD4KPC9saT4KPC91bD4KPGg1IGlkPSJleGFtcGxlcy1zcGVjcy03Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2V4YW1wbGVzLXNwZWNzLTciPiM8L2E+IEV4YW1wbGVzIC8gc3BlY3M8L2g1Pgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZT48Y29kZT5gdXBhdGguY2hhbmdlRXh0KGZpbGVuYW1lLCAnLmpzJylgICAtLXJldHVybnMtLSZndDsKCiAgICDinJMgYCdteS9tb2R1bGUubWluJ2AgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgIGAnbXkvbW9kdWxlLmpzJ2AKICAgIOKckyBgJ215L21vZHVsZS5jb2ZmZWUnYCAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgICAgYCdteS9tb2R1bGUuanMnYAogICAg4pyTIGAnbXkvbW9kdWxlJ2AgICAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICBgJ215L21vZHVsZS5qcydgCiAgICDinJMgYCdmaWxlL3dpdGhEb3QuJ2AgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgIGAnZmlsZS93aXRoRG90LmpzJ2AKICAgIOKckyBgJ2ZpbGUvY2hhbmdlLmxvbmdFeHQnYCAgICAgIC0tLSZndDsgICAgICBgJ2ZpbGUvY2hhbmdlLmxvbmdFeHQuanMnYAo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48cD5JZiBubyA8Y29kZT5leHQ8L2NvZGU+IHBhcmFtIGlzIGdpdmVuLCBpdCB0cmltcyB0aGUgY3VycmVudCBleHRlbnNpb24gKGlmIGFueSkuPC9wPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZT48Y29kZT5gdXBhdGguY2hhbmdlRXh0KGZpbGVuYW1lKWAgICAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgICAg4pyTIGAnbXkvbW9kdWxlLm1pbidgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgICBgJ215L21vZHVsZSdgCiAgICAgIOKckyBgJ215L21vZHVsZS5jb2ZmZWUnYCAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgICAgICAgYCdteS9tb2R1bGUnYAogICAgICDinJMgYCdteS9tb2R1bGUnYCAgICAgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICAgICAgIGAnbXkvbW9kdWxlJ2AKICAgICAg4pyTIGAnZmlsZS93aXRoRG90LidgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICBgJ2ZpbGUvd2l0aERvdCdgCiAgICAgIOKckyBgJ2ZpbGUvY2hhbmdlLmxvbmdFeHQnYCAgICAgIC0tLSZndDsgICAgICAgICBgJ2ZpbGUvY2hhbmdlLmxvbmdFeHQnYAo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48cD5JdCBpcyBpZ25vcmluZyA8Y29kZT4ubWluPC9jb2RlPiAmYW1wOyA8Y29kZT4uZGV2PC9jb2RlPiBhcyBleHRlbnNpb25zLCBhbmQgY29uc2lkZXJzIGV4dHMgd2l0aCB1cCB0byA4IGNoYXJzLjwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+YHVwYXRoLmNoYW5nZUV4dChmaWxlbmFtZSwgJ2pzJywgWydtaW4nLCAnLmRldiddLCA4KWAgICAgICAgIC0tcmV0dXJucy0tJmd0OwoKICAgICAg4pyTIGAnbXkvbW9kdWxlLmNvZmZlZSdgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgICAgIGAnbXkvbW9kdWxlLmpzJ2AKICAgICAg4pyTIGAnZmlsZS9ub3RWYWxpZEV4dC5taW4nYCAgICAgIC0tLSZndDsgICAgICBgJ2ZpbGUvbm90VmFsaWRFeHQubWluLmpzJ2AKICAgICAg4pyTIGAnZmlsZS9ub3RWYWxpZEV4dC5kZXYnYCAgICAgIC0tLSZndDsgICAgICBgJ2ZpbGUvbm90VmFsaWRFeHQuZGV2LmpzJ2AKICAgICAg4pyTIGAnZmlsZS9jaGFuZ2UubG9uZ0V4dCdgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgICBgJ2ZpbGUvY2hhbmdlLmpzJ2AKICAgICAg4pyTIGAnZmlsZS9jaGFuZ2UubG9uZ1JFeHQnYCAgICAgIC0tLSZndDsgICAgICBgJ2ZpbGUvY2hhbmdlLmxvbmdSRXh0LmpzJ2AKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PGg0IGlkPSJ1cGF0aC1kZWZhdWx0ZXh0LWZpbGVuYW1lLWV4dC1pZ25vcmVleHRzLW1heHNpemUtNyI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiN1cGF0aC1kZWZhdWx0ZXh0LWZpbGVuYW1lLWV4dC1pZ25vcmVleHRzLW1heHNpemUtNyI+IzwvYT4gPGNvZGU+dXBhdGguZGVmYXVsdEV4dChmaWxlbmFtZSwgW2V4dF0sIFtpZ25vcmVFeHRzXSwgW21heFNpemU9N10pPC9jb2RlPjwvaDQ+CjxwPkFkZHMgPGNvZGU+LmV4dDwvY29kZT4gdG8gPGNvZGU+ZmlsZW5hbWU8L2NvZGU+LCBvbmx5IGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBoYXZlIDxlbT5hbnk8L2VtPiA8ZW0+b2xkPC9lbT4gZXh0ZW5zaW9uLjwvcD4KPHVsPgo8bGk+CjxwPihPbGQpIGV4dGVuc2lvbnMgYXJlIGNvbnNpZGVyZWQgdG8gYmUgdXAgdG8gPGNvZGU+bWF4U2l6ZTwvY29kZT4gY2hhcnMgbG9uZywgY291bnRpbmcgdGhlIGRvdCAoZGVmYXVsdHMgdG8gNykuPC9wPgo8L2xpPgo8bGk+CjxwPkFuIDxjb2RlPkFycmF5PC9jb2RlPiBvZiA8Y29kZT5pZ25vcmVFeHRzPC9jb2RlPiAoZWcgPGNvZGU+WycubWluJ108L2NvZGU+KSB3aWxsIGZvcmNlIGFkZGluZyBkZWZhdWx0IDxjb2RlPi5leHQ8L2NvZGU+IGV2ZW4gaWYgb25lIG9mIHRoZXNlIGlzIHByZXNlbnQuPC9wPgo8L2xpPgo8L3VsPgo8aDUgaWQ9ImV4YW1wbGVzLXNwZWNzLTgiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjZXhhbXBsZXMtc3BlY3MtOCI+IzwvYT4gRXhhbXBsZXMgLyBzcGVjczwvaDU+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLSBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlPjxjb2RlPmB1cGF0aC5kZWZhdWx0RXh0KGZpbGVuYW1lLCAnanMnKWAgICAtLXJldHVybnMtLSZndDsKCiAgICDinJMgYCdmaWxlV2l0aC9kZWZhdWx0RXh0J2AgICAgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgIGAnZmlsZVdpdGgvZGVmYXVsdEV4dC5qcydgCiAgICDinJMgYCdmaWxlV2l0aC9kZWZhdWx0RXh0LmpzJ2AgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgIGAnZmlsZVdpdGgvZGVmYXVsdEV4dC5qcydgCiAgICDinJMgYCdmaWxlV2l0aC9kZWZhdWx0RXh0Lm1pbidgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgYCdmaWxlV2l0aC9kZWZhdWx0RXh0Lm1pbidgCiAgICDinJMgYCdmaWxlV2l0aC9kZWZhdWx0RXh0LmxvbmdFeHQnYCAgICAgIC0tLSZndDsgICAgICBgJ2ZpbGVXaXRoL2RlZmF1bHRFeHQubG9uZ0V4dC5qcydgCjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxwPklmIG5vIDxjb2RlPmV4dDwvY29kZT4gcGFyYW0gaXMgcGFzc2VkLCBpdCBsZWF2ZXMgZmlsZW5hbWUgaW50YWN0LjwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmU+PGNvZGU+YHVwYXRoLmRlZmF1bHRFeHQoZmlsZW5hbWUpYCAgICAgICAtLXJldHVybnMtLSZndDsKCiAgICAgIOKckyBgJ2ZpbGVXaXRoL2RlZmF1bHRFeHQnYCAgICAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgICAgICAgYCdmaWxlV2l0aC9kZWZhdWx0RXh0J2AKICAgICAg4pyTIGAnZmlsZVdpdGgvZGVmYXVsdEV4dC5qcydgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICAgICBgJ2ZpbGVXaXRoL2RlZmF1bHRFeHQuanMnYAogICAgICDinJMgYCdmaWxlV2l0aC9kZWZhdWx0RXh0Lm1pbidgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgYCdmaWxlV2l0aC9kZWZhdWx0RXh0Lm1pbidgCiAgICAgIOKckyBgJ2ZpbGVXaXRoL2RlZmF1bHRFeHQubG9uZ0V4dCdgICAgICAgLS0tJmd0OyAgICAgICAgIGAnZmlsZVdpdGgvZGVmYXVsdEV4dC5sb25nRXh0J2AKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+SXQgaXMgaWdub3JpbmcgPGNvZGU+Lm1pbjwvY29kZT4gJmFtcDsgPGNvZGU+LmRldjwvY29kZT4gYXMgZXh0ZW5zaW9ucywgYW5kIGNvbnNpZGVycyBleHRzIHdpdGggdXAgdG8gOCBjaGFycy48L3A+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLSBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlPjxjb2RlPmB1cGF0aC5kZWZhdWx0RXh0KGZpbGVuYW1lLCAnanMnLCBbJ21pbicsICcuZGV2J10sIDgpYCAtLXJldHVybnMtLSZndDsKCiAgICAgIOKckyBgJ2ZpbGVXaXRoL2RlZmF1bHRFeHQnYCAgICAgICAgICAgICAgIC0tLSZndDsgICAgICAgICAgICAgICBgJ2ZpbGVXaXRoL2RlZmF1bHRFeHQuanMnYAogICAgICDinJMgYCdmaWxlV2l0aC9kZWZhdWx0RXh0Lm1pbidgICAgICAgICAgICAtLS0mZ3Q7ICAgICAgICAgICBgJ2ZpbGVXaXRoL2RlZmF1bHRFeHQubWluLmpzJ2AKICAgICAg4pyTIGAnZmlsZVdpdGgvZGVmYXVsdEV4dC5kZXYnYCAgICAgICAgICAgLS0tJmd0OyAgICAgICAgICAgYCdmaWxlV2l0aC9kZWZhdWx0RXh0LmRldi5qcydgCiAgICAgIOKckyBgJ2ZpbGVXaXRoL2RlZmF1bHRFeHQubG9uZ0V4dCdgICAgICAgIC0tLSZndDsgICAgICAgICAgYCdmaWxlV2l0aC9kZWZhdWx0RXh0LmxvbmdFeHQnYAogICAgICDinJMgYCdmaWxlV2l0aC9kZWZhdWx0RXh0LmxvbmdSZXh0J2AgICAgICAtLS0mZ3Q7ICAgICAgYCdmaWxlV2l0aC9kZWZhdWx0RXh0LmxvbmdSZXh0LmpzJ2AKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+Q29weXJpZ2h0KGMpIDIwMTQtMjAxOSBBbmdlbG9zIFBpa291bGFzIChhZ2Vsb3MucGlrb3VsYXNAZ21haWwuY29tKTwvcD4KPHA+UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24Kb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24KZmlsZXMgKHRoZSAmcXVvdDtTb2Z0d2FyZSZxdW90OyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQKcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsCmNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZQpTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZwpjb25kaXRpb25zOjwvcD4KPHA+VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUKaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuPC9wPgo8cD5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgJnF1b3Q7QVMgSVMmcXVvdDssIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsCkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUwpPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORApOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVApIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwKV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HCkZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IKT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLjwvcD4KPC9Db250ZW50U2xvdHNEaXN0cmlidXRvcj4K"},null]}