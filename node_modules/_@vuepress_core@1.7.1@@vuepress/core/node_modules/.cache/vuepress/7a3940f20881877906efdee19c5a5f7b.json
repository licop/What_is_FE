{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/eslint/CHANGELOG.md?vue&type=template&id=2671bad2&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/eslint/CHANGELOG.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("p", [_vm._v("v7.15.0 - December 5, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5c11aabbe8249aeb8cad29bc6a33fc20c8c683ef",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5c11aab")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: @eslint/esintrc and espree for bug fixes (refs #13878) (#13908) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0eb7957e27fd521317bd5c8479ce7abc1399169c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0eb7957")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: file-entry-cache@6.0.0 (#13877) (Rouven Weßling)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/683ad00c41e1ae4d889deff82b2a94318e8c2129",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("683ad00")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: no-unsafe-optional-chaining rule (fixes #13431) (#13859) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cbc57fb7d07c00663ed5781f5e6bc8f534cc2d76",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cbc57fb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: one-var autofixing for export (fixes #13834) (#13891) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/110cf962d05625a8a1bf7b5f4ec2194db150eb32",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("110cf96")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix a broken link in working-with-rules.md (#13875) (Anton Niklasson)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.14.0 - November 20, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5f0907399a9666dec78c74384c8969c01483c30e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5f09073")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix 'skip' options in no-irregular-whitespace (fixes #13852) (#13853) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1861b4086f1018f43ab19744d866d5da986c500d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1861b40")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: correct the function-call-argument-newline 'default' descriptions (#13866) (Trevin Hofmann)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/98c00c41d2aecb3a990393d430694f4ce6b47de5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("98c00c4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-nonoctal-decimal-escape rule (fixes #13765) (#13845) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/95d2fe6057498fc1cc2193d28c8c2d1593224b33",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("95d2fe6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove eslint comment from no-octal-escape tests (#13846) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2004b7ecd3db0d4e7376cc3344246f7b9ada5801",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2004b7e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: enable debug logs for @eslint/eslintrc (fixes #13850) (#13861) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d2239a1fdec452e24ede04e990d16d42516fa538",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d2239a1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-useless-constructor crash on bodyless constructor (fixes #13830) (#13842) (Ari Perkkiö)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/eda0aa18498dd85eb618873e8e0f4ac97032cfca",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("eda0aa1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: no-restricted-imports is only for static imports (#13863) (Robat Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/042ae44682a8a6c5037d920689124e2304056dd8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("042ae44")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix JS syntax and doc URL in working-with-custom-formatters.md (#13828) (Raphael LANG)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/038dc73c99ae68eae2035ef303f3a947053c8f05",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("038dc73")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Test on Node.js 15 (#13844) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/37a06d633d3669f0f43236141dc43465b8bc7ec5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("37a06d6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.13.0 - November 6, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/254e00fea8745ff5a8bcc8cb874fcfd02996d81b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("254e00f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Configurable List Size For Per-Rule Performance Metrics (#13812) (Bryan Mishkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6c3c710ade7cd8654990f1adb55b58f038eab92d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6c3c710")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix broken url in docs (#13815) (SaintMalik)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4a091495a236d231a5065ece972719a0c4dd1b77",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4a09149")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fb6fcbfe0a8c41b92f0a33ab90f159037bd195e2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fb6fcbf")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix reference to Code of Conduct (#13797) (Tobias Nießen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1b89ebe1bdbef7de6001100945b8f71429df302c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1b89ebe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.12.1 - October 26, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/08f33e8b9a353c3183be6f937785db7a30fb90eb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("08f33e8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: @eslint/eslintrc to fix rule schema validation (fixes #13793) (#13794) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aeef485dc790571b1a82ac09904329e0226b66a9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aeef485")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Pass internal config paths in FileEnumerator default (fixes #13789) (#13792) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/631ae8b50e5f7975f10860e9e763b70b4f25182e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("631ae8b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.12.0 - October 23, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cbf3585f1d6c60414c07380367a8b4505ee3538d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cbf3585")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: skip keyword check for fns in space-before-blocks (fixes #13553) (#13712) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/256f656455b47bcf9ed3fc30fbf72532678f97da",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("256f656")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: autofix shouldn't produce template literals with "),
          _c("code", [_vm._v("\\8")]),
          _vm._v(" or "),
          _c("code", [_vm._v("\\9")]),
          _vm._v(" (#13737) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b165aa5f4d4d19328f13ab80e5f058cbce94c3a6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b165aa5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: yoda rule autofix produces syntax errors with adjacent tokens (#13760) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3175316db26aebef4b19e269aca90c8ce3955363",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3175316")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-destructuring invalid autofix with comma operator (#13761) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1a9f17151a4e93eb17c8a2bf4f0a5320cce616de",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1a9f171")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Remove more ESLintRC-related files (refs #13481) (#13762) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfddcedace5587d662c840c2edf33062b54a178e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfddced")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: remove suggestion if it didn't provide a fix (fixes #13723) (#13772) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5183b14a2420b42b4089fb134a61ae57142f31fd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5183b14")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check template literal in no-script-url (#13775) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfe97d2332e711ca76b1fd2e7f8548b0cc84cb1c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfe97d2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6c51adeb86f1de292cd02d2ee19f7b56182e358b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6c51ade")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/603de04cab5e700df12999af2918decd4da9d11b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("603de04")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: treat all literals like boolean literal in no-constant-condition (#13245) (Zen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/289aa6fcef3874ba5f86455f9302dc4209ea83e5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("289aa6f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9a1f6694e59eb3e584d4c5a98b98675c895a9783",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9a1f669")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/637f8187404ded600fb3d4013b3cd495d5ae675b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("637f818")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add more examples for no-func-assign (fixes #13705) (#13777) (Nitin Kumar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/17cc0dd9b5d2d500359c36881cd3e5637443c133",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("17cc0dd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add test case for no-func-assign (refs #13705) (#13783) (Nitin Kumar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dee0f7764a1d5a323c89b22c4db94acee2b3c718",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dee0f77")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add TOC to user-guide/configuring.md (#13727) (metasean)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/05106212985cb1ffa1e6fa996a57f6fd2fc3c970",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0510621")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Fix && vs || short-circuiting false negatives (fixes #13634) (#13769) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8b6ed691c48189b7d096339441a78cb5874d4137",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8b6ed69")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/145750991b04fd4cfb3fff3c5d4211a4428e011c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1457509")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix broken links in Node.js API docs (#13771) (Laura Barluzzi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7c813d458f9aedf7a94351d137728a4647542879",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7c813d4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix typo in v7 migration page (#13778) (Yusuke Sasaki)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b0257953be704d0bb387fc15afd7859fd6f19ba5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b025795")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix the format option name in the document (#13770) (Hideki Igarashi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/84fd591c234accc41bb5af555f178825012fd35d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("84fd591")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Increase Mocha timeout for copying fixtures (#13768) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1faeb84e663d88c5d85a3cb3f15cd224cc552c2d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1faeb84")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify that space-unary-ops doesn't apply when space is required (#13767) (Taylor Morgan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/67c06059dd1ddcee6f369c650ce71220da1510c3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("67c0605")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check computed keys in no-prototype-builtins (fixes #13088) (#13755) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b5e011c865e95d700d29cb9a4ba71c671d99e423",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b5e011c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.11.0 - October 9, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/23e966f6cf2a6c6b699dff5d6950ece3cc396498",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("23e966f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Refactor CLIEngine tests (refs #13481) (#13709) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fa9429aac0ffed505f3f02e8fc75f646c69f5c61",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fa9429a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: don't count line after EOF in max-lines (#13735) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d973675a5c06a2bd4f8ce640c78b67842cfebfd4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d973675")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update anchor links to use existing linkrefs (refs #13715) (#13741) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2c6d774c89dcd14f386bd9d73d451fa2a892c3ef",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2c6d774")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix typos (#13730) (Frieder Bluemle)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cc468c01021385a028de727eefcd442e7f34875c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cc468c0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: eslint-visitor-keys@2.0.0 (#13732) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ab0ac6c532fb7b7d49779c8913146244d680743b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ab0ac6c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix anchor links (#13715) (Gary Moore)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/27f0de62e6281c28043be38ef051818c9edc15cd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("27f0de6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: account for linebreaks before postfix "),
          _c("code", [_vm._v("++")]),
          _vm._v("/"),
          _c("code", [_vm._v("--")]),
          _vm._v(" in no-extra-parens (#13731) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/da78fa11632a2908db4ac494012a16f5d5a88a64",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("da78fa1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support async arrow fn in function-paren-newline (fixes #13728) (#13729) (Michal Dziekonski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fe301b8cc0762d7f4edd59603ca51ed0ec0c2a43",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fe301b8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add configuration comments in examples (#13738) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/504408cd65e9d8827b2b8bbeb8f589df90eee523",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("504408c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/390065985b2289ad4412a83598e3e833c382d27e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3900659")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c1974b3f7169a8e5fab7007df92d02d8c1a8d5a3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c1974b3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6f4abe5d5ade2711cc4c21bc8485af952763c2d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6f4abe5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.10.0 - September 26, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6919fbb83f86552b0f49ae749da866e4edc7c46a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6919fbb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Clarify that ignorePattern should be a string (refs #13029) (#13718) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/07d9bea7c6f953e8f754afffc9752edcee799431",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("07d9bea")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add ignorePattern to no-inline-comments (#13029) (Edie Lemoine)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d79bbe982930b53358d34ad91cc6e5eaac8ddede",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d79bbe9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix typo (#13717) (Alexander Liu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9b8490ee6391c986b1314540a92b71d8c1e0efc4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9b8490e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: grammatical error (#13687) (rajdeep)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cb44e93f4780e925a75a68ce2f7f6d065b5f756c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cb44e93")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-destructuring invalid autofix with computed property access (#13704) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/46c73b159a5ceed2f7f26f254fd97e459fb0e81a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("46c73b1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: eslint-scope@5.1.1 (#13716) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b7b12ba0bd4e9c66883f11e97de8ed84b600cdaa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b7b12ba")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Move comment to make tests more organized (#13707) (Yusuke Tanaka)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/51674a4113a1ca877094606bbf4938ab06cc1aad",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("51674a4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Add missing quotes (#13714) (Lucio Paiva)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7c34a982aaf93a02348f56c9ce887c7dcf51b5bd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7c34a98")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove mistakenly added file (#13710) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/30b76c9a13fae3dff59f7db406d6c66f11152973",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("30b76c9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Clarify package.json requirement in Getting Started (refs #13549) (#13696) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/044560dcc74db98b28e293da2e2f3b41ecbf5884",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("044560d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/54000d13f27d5255851b5ac0606ad027e2b8d331",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("54000d1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.9.0 - September 12, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3ca27004ece5016ba7aed775f01ad13bc9282296",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3ca2700")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Corrected notice for invalid (😃 plugin names (#13473) (Josh Goldberg)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fc5783d2ff9e3b0d7a1f9664928d49270b4a6c01",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fc5783d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix leaky anchors in v4 migration page (#13635) (Timo Tijhof)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f1d07f112be96c64dfdaa154aa9ac81985b16238",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f1d07f1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Provide install commands for Yarn (#13661) (Nikita Baksalyar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/29d1cdceedd6c056a39149723cf9ff2fbb260cbf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("29d1cdc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-destructuring removes comments (refs #13678) (#13682) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b4da0a7ca7995435bdfc116fd374eb0649470131",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b4da0a7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix typo in working with plugins docs (#13683) (啸生)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6f87db7c318225e48ccbbf0bec8b3758ea839b82",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6f87db7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix id-length false negatives on Object.prototype property names (#13670) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/361ac4d895c15086fb4351d4dca1405b2fdc4bd5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("361ac4d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: NonOctalDecimalIntegerLiteral is decimal integer (fixes #13588) (#13664) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f260716695064e4b4193337107b60401bd4b3f20",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f260716")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: update outdated link (#13677) (klkhan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5138c913c256e4266ffb68278783af45bf70af84",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5138c91")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add missing eslint directive comments in no-await-in-loop (#13673) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/17b58b528df62bf96813d50c087cafdf83306810",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("17b58b5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify correct example in no-return-await (fixes #13656) (#13657) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9171f0a99bb4d7c53f109b1c2b215004a7c27713",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9171f0a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: fix typo (#13660) (Nitin Kumar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6d9f8fbb7ed4361b475fb50d04e6d25744d5b1a2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6d9f8fb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/97b0dd9a1af1ae4ae3857adcfe6eeac7837101ed",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("97b0dd9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/deab125fc9220dab43baeb32c6cf78942ad25a83",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("deab125")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bf2e367bf4f6fde9930af9de8b8d8bc3d8b5782f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bf2e367")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/89292084bf91ba5ae5bf966c6c56fa3da139ce57",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8929208")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.8.1 - September 1, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f542b5d0679b73326ad249fc44a54c3f848bd3e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f542b5d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Update broken @eslint/eslintrc version (fixes #13641) (#13647) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c1b56966c2354e12d16e8394443de49fa54f4290",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c1b5696")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8ddeda01afdb1e9656a43853b8e25c9c4582e6ad",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8ddeda0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e02e2fe019a1ed9a34a7b96e4c8961c35093b0ce",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e02e2fe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.8.0 - August 31, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/58abd9311900a8af5a3c0963daaf64675bdd8383",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("58abd93")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support logical assignments in code path analysis (refs #13569) (#13612) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/db7488e6326fd1b7ea04c5062beb1c5f75fc15ed",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("db7488e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support logical assignments in core rules (refs #13569) (#13618) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/372921924778f2e525535985e17c97b988546210",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3729219")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update Step 1 of Development Environment documentation (klkhan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a32032430a0779a4e3b2d137d4d0682844084b82",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a320324")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Test formatted integers in no-dupe-keys (refs #13568) (#13626) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/88a9ade7643bb166efbab45cee15f3269496f4be",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("88a9ade")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: add es2021 environment (refs #13602) (#13603) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0003dc0f966f2b47555595586f84eb3163cb0179",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0003dc0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support numeric separators (refs #13568) (#13581) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/96b11a0717bf32b94ec768611574372320fb774b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("96b11a0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add exceptionPatterns to id-length rule (fixes #13094) (#13576) (sodam)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3439fea5c0ed330d01d874b0c9df51dd51ae792c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3439fea")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support numeric-separator in no-loss-of-precision (refs #13568) (#13574) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ed64767859d776145d68145419a61f5379b4dd63",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ed64767")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: add comment to message in no-warning-comments (fixes #12327) (#13522) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e60ec07fad0c1d4c966f28d214c5379da753ff4e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e60ec07")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/483bf7f3cc40e0d866798d6ca9ee1c19aa77ddd2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("483bf7f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix examples in object-curly-newline (#13605) (Soobin Bak)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1c35d57b0a5f374cc55f1727a7561bcab1962e83",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1c35d57")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Remove stale Keybase 2FA instructions (#13622) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/82669fa66670a00988db5b1d10fe8f3bf30be84e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("82669fa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Extract some functionality to eslintrc (refs #13481) (#13613) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4111d21a046b73892e2c84f92815a21ef4db63e1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4111d21")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix typo and missing article before noun in docs (#13611) (Patrice Sandhu)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/091e52ae1ca408f3e668f394c14d214c9ce806e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("091e52a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: espree@7.3.0 (refs #13568) (#13609) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/05074fb2c243e904e8c09d714ad9d084acdd80d2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("05074fb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bdb65ec2e672c9815bee356b61d1cd60a1072152",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bdb65ec")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add 3rd party parsers in BUG_REPORT template (#13606) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f954476fb6b0664679c73babd5e8a0647572b81f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f954476")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add common 3rd party parsers to issue template (#13596) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2bee6d256ae0516c9a9003bb3fdca24ff93253b5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2bee6d2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Mark config-related files (refs #13481) (#13597) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/66442a9faf9872db4a40f56dde28c48f4d02fc7b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("66442a9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add no-magic-numbers 'ignoreDefaultValues' option (#12611) (Dieter Luypaert)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b487164d01dd0bf66fdf2df0e374ce1c3bdb0339",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b487164")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add exponentiation operators to operator-assignment documentation (#13577) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2f27836e989f3dfe236e34054b490febc359bc48",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2f27836")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/60eafc15075f38955cb6816bf1f0bcf6e6e6d3a6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("60eafc1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.7.0 - August 14, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b46f3ee0dae4add9df99cae940b641ad8de58b9e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b46f3ee")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: allowFunctionParams option in no-underscore-dangle (fixes 12579) (#13545) (Sunghyun Cho)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/26aa2452b5f407fabc25dad21182180e4d3be532",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("26aa245")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Docs: clarify "case" specifier in padding-line-between-statements (#13562) (Milos Djermanovic)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/082891c042d72953fe86cd3ce9c96e661760793d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("082891c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update semantic versioning policy (#13563) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4e0b672eb4bf39f7502a550b08b25a56a196f19f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4e0b672")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Fix: revert "Update: disallow multiple options in comma-dangle schema" (#13564) (Kai Cataldo)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/254990e87914457ca25ea2d7ee012964e56fc9e5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("254990e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: indent for async arrow functions (fixes #13497) (#13544) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/28ca339259b07c96c73f2ef28cbf112b96395855",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("28ca339")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2e4158d3ec9cfed6400bf70795fd7171e96ff9b3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2e4158d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/488d1595aef43c4d52cccdb2c97977884f0375a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("488d159")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c44306e52778309a79232ceab8b55a9aa0f2dfda",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c44306e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6677180495e16a02d150d0552e7e5d5f6b77fcc5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6677180")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/07db7b8080c2f68ee28e7d447db356c33e6fddce",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("07db7b8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d4ce4d3b8492c3e4654ed1f51f2c48e6c0ad272f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d4ce4d3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/284e954f93126c50e0aa9b88f42afb03a47ad967",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("284e954")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ae9b54e59b01aa9f50ee31f5b6787d86e6b59de6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ae9b54e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9124a1599638a1caf4b7e252d1cb66abdc5e51c6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9124a15")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: remove leche (fixes #13287) (#13533) (Mark de Dios)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5c4c7f515c2e8e83f2186a66ddce75d6477abeb0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5c4c7f5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/48d8ec8cf320c69aed17c6b6c78f19e7c1e587ca",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("48d8ec8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.6.0 - July 31, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ecb2b7343a0d14fb57d297a16be6c1b176fb3dbf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ecb2b73")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: require "),
          _c("code", [_vm._v("meta")]),
          _vm._v(
            " for fixable rules in RuleTester (refs #13349) (#13489) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6fb4edde3b7a7ae2faf8ac956a7342fbf80865fc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6fb4edd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix broken links in developer guide (#13518) (Sam Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/318fe103dbf2548eee293ff456ef0b829dbe3db3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("318fe10")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: Do not output "),
          _c("code", [_vm._v("undefined")]),
          _vm._v(
            " as line and column when it's unavailable (#13519) (haya14busa)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/493b5b40cae7a076fdeb19740f8c88fb4ae9c1fb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("493b5b4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f100143fa5f529aacb2b50e650a00d2697ca4c54",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f100143")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/16b10fe8ba3c78939d5ada4a25caf2f0c9e6a058",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("16b10fe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Update the chatroom link to go directly to help channel (#13536) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f937eb95407f60d3772bcb956e227aaf99e48777",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f937eb9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e71e2980cd2e319afc70d8c859c7ffd59cf4157b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e71e298")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Change no-duplicate-case to comparing tokens (fixes #13485) (#13494) (Yosuke Ota)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6c4aea44fd78e1eecea5fe3c37e1921e3b1e98a6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6c4aea4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add ECMAScript 2020 to README (#13510) (Milos Djermanovic)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.5.0 - July 18, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6ea3178776eae0e40c3f5498893e8aab0e23686b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6ea3178")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: optional chaining support (fixes #12642) (#13416) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/540b1af77278ae649b621aa8d4bf8d6de03c3155",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("540b1af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: enable consistent-meta-messages internal rule (#13487) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/885a1455691265db88dc0befe9b48a69d69e8b9c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("885a145")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: clarify behavior if "),
          _c("code", [_vm._v("meta.fixable")]),
          _vm._v(" is omitted (refs #13349) (#13493) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1a01b420eaab0de03dab5cc190a9f2a860c21a84",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1a01b42")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update technology sponsors in README (#13478) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6ed9e8e4ff038c0259b0e7fe7ab7f4fd4ec55801",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6ed9e8e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: lodash@4.17.19 (#13499) (Yohan Siguret)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/45cdf00da6aeff3d584d37b0710fc8d6ad9456d6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("45cdf00")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f1cc725ba1b8646dcf06a83716d96ad9bb726172",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f1cc725")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix linebreaks between versions in changelog (#13488) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f4d7b9e1a599346b2f21ff9de003b311b51411e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f4d7b9e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: deprecate id-blacklist rule (#13465) (Dimitri Mitropoulos)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e14a645aa495558081490f990ba221e21aa6b27c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e14a645")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: use espree.latestEcmaVersion in fuzzer (#13484) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/61097fe5cc275d414a0c8e19b31c6060cb5568b7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("61097fe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update int rule level to string (#13483) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c8f9c8210cf4b9da8f07922093d7b219abad9f10",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c8f9c82")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location no-irregular-whitespace (refs #12334) (#13462) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f2e68ec1d6cee6299e8a5cdf76c522c11d3008dd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f2e68ec")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: update webpack resolve.mainFields to match website config (#13457) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a96bc5ec06f3a48bfe458bccd68d4d3b2a280ed9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a96bc5e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: arrow-body-style fixer for "),
          _c("code", [_vm._v("in")]),
          _vm._v(" wrap (fixes #11849) (#13228) (Anix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/748734fdd497fbf61f3a616ff4a09169135b9396",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("748734f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: Updated puppeteer version to v4.0.0 (#13444) (odidev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e951457b7aaa1b12b135588d36e3f4db4d7b8463",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e951457")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix wording in configuring.md (#13469) (Piper)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0af1d2828d27885483737867653ba1659af72005",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0af1d28")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: add allowSeparatedGroups option to sort-imports (fixes #12951) (#13455) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1050ee78a95da9484ff333dc1c74dac64c05da6f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1050ee7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for no-unneeded-ternary (refs #12334) (#13456) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b77b4202bd1d5d1306f6f645e88d7a41a51715db",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b77b420")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for max-len (refs #12334) (#13458) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/095194c0fc0eb02aa69fde6b4280696e0e4de214",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("095194c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to reports in object-curly-newline (refs #12334) (#13460) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/10251bbaeba80ac15244f385fc42cf2f2a30e5d2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("10251bb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to reports in keyword-spacing (refs #12334) (#13461) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2ea7ee51a4e05ee76a6dae5954c3b6263b0970a3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2ea7ee5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b55fd3b8c05a29a465a794a524b06c1a28cddf0c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b55fd3b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.4.0 - July 3, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f21bad2680406a2671b877f8dba47f4475d0cc64",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f21bad2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix description for "),
          _c("code", [_vm._v("never")]),
          _vm._v(
            " in multiline-ternary (fixes #13368) (#13452) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ada2c891298382f82dfabf37cacd59a1057b2bb7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ada2c89")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: support typescript generics in arrow-parens (fixes #12570) (#13451) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/89ee01e083f1e02293bf8d1447f9b0fdb3cb9384",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("89ee01e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Revert config cloning (fixes #13447) (#13449) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0a463dbf7cc5a77d442879c9117204d4d38db972",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0a463db")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix no-multiple-empty-lines examples (fixes #13432) (#13433) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ff5317e93425f93cfdf808609551ee67b2032543",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ff5317e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve array-callback-return report message (#13395) (Philip (flip) Kromer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3f51930eea7cddc921a9ee3cb0328c7b649c0f83",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3f51930")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: false positive new with member in no-extra-parens (fixes #12740) (#13375) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/825a5b98d3d84f6eb72b75f7d8519de763cc8898",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("825a5b9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Clarify documentation on implicit ignore behavior (fixes #12348) (#12600) (Scott Hardin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c1391566a5f765f25716527de7b5cdee16c0ce36",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c139156")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0c17e9d2ac307cc288eea6ed7971bd5a7d33321a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0c17e9d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c680387ba61f6dccf0390d24a85d871fa83e9fea",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c680387")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bf3939bbd9a33d0eb96cebe6a53bf61c855f9ba6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bf3939b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7baf02e983af909800261263f125cca901a5bd0f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7baf02e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5c4c3fdfbda18a13223ad36f44283adbfee8c496",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5c4c3fd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/53912aab1856327b399cca26cbb2ba81fd01bfa2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("53912aa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/51e42eca3e87d8259815d736ffe81e604f184057",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("51e42ec")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Update: Add option "ignoreGlobals" to camelcase rule (fixes #11716) (#12782) (David Gasperoni)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0655f66525d167ca1288167b79a77087cfc8fcf6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0655f66")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve report location in arrow-body-style (refs #12334) (#13424) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d53d69af08cfe55f42e0a0ca725b1014dabccc21",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d53d69a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: prefer-regex-literal detect regex literals (fixes #12840) (#12842) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/004adae3f959414f56e44e5884f6221e9dcda142",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("004adae")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: rename id-blacklist to id-denylist (fixes #13407) (#13408) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.3.1 - June 22, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de77c11e7515f2097ff355ddc0d7b6db9c83c892",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de77c11")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Replace Infinity with Number.MAX_SAFE_INTEGER (fixes #13427) (#13435) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.3.0 - June 19, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/638a6d6be18b4a37cfdc7223e1f5acd3718694be",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("638a6d6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: add missing "),
          _c("code", [_vm._v("additionalProperties: false")]),
          _vm._v(" to some rules' schema (#13198) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/949a5cd741c2e930cfb43d80a9b6b084f9d677c3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("949a5cd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix operator-linebreak overrides schema (#13199) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9e1414ee16b8caf582920f8fdf3b6ee1eb0b7cd5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9e1414e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-promise-executor-return rule (fixes #12640) (#12648) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/09cc0a2bb5bcf3bcb0766a3c989871f268518437",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("09cc0a2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: max-lines reporting loc improvement (refs #12334) (#13318) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ee2fc2e90d0f9dfcdba852b0609156bee5280b92",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ee2fc2e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: object-property-newline end location (refs #12334) (#13399) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d98152a3d8c72e4f5ac4c6fa10a615b12090c8f7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d98152a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: added empty error array check for false negative (#13200) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7fb45cf13e9908d489bd6d5fba3b7243c01508b9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7fb45cf")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: clone config before validating (fixes #12592) (#13034) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aed46f69d54da167d9838149954ceeb4b02be5fd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aed46f6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7686d7feaccc7b8fee927eda6602d641d8de1e5c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7686d7f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: semi-spacing should check do-while statements (#13358) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cbd0d00a1ec2824d7e025bbbc084855ed0bf08bb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cbd0d00")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: disallow multiple options in comma-dangle schema (fixes #13165) (#13166) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b550330d739c73a7a8f887064e7c911d05a95f9a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b550330")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-unreachable-loop rule (fixes #12381) (#12660) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/13999d292080f814fa4fb266e011d61c184197c4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("13999d2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: curly should check consequent "),
          _c("code", [_vm._v("if")]),
          _vm._v(" statements (#12947) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c42e54893b79b470ca7745bd2a626ffd069e017b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c42e548")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: enable exceptRange option in the yoda rule (#12857) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6cfbd03b3f22edb4d1c9c61c64eea7c129da71aa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6cfbd03")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: Drop @typescript-eslint/eslint-recommended from "),
          _c("code", [_vm._v("eslint --init")]),
          _vm._v(" (#13340) (Minh Nguyen)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/796f269e448fdcbf8a5a62edf1990bd857efd1af",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("796f269")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update eslint-config-eslint's required node version (#13379) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9d0186e55bee769ea6aa08dc5a62682f58316412",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9d0186e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix changelog versions (#13410) (Tony Brix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1ee3c42ceeee56b650bcc4206ed783b795f65643",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1ee3c42")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: On maxEOF with eol-last (fixes #12742) (#13374) (Arthur Dias)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2a210499288ed14ec9a6fd72decabfb77504c197",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2a21049")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: key-spacing loc changes for extra space (refs #12334) (#13362) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7ce7988f411da64248a64a9d9d2b7884d5ba39e0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7ce7988")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Replace the inquirer dependency with enquirer (#13254) (Selwyn)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0f1f5ed2a20b8fb575d4360316861cf4c2b9b7bc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0f1f5ed")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add security policy link to README (#13403) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9e9ba897c566601cfe90522099c635ea316b235f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9e9ba89")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ca59fb95a395c0a02ed23768a70e086480ab1f6d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ca59fb9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.2.0 - June 5, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b735a485e77bcc791e4c4c6b8716801d94e98b2c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b735a48")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: add enforceForFunctionPrototypeMethods option to no-extra-parens (#12895) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/27ef73ffb7428d5eff792d443186a2313e417bda",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("27ef73f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: reporter locr of func-call-spacing (refs #12334) (#13311) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/353bfe9760ec640f470859855d4018df084a4e88",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("353bfe9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: handle parentheses in multiline-ternary (fixes #13195) (#13367) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a7fd343991cde99d8a219e3b25616db5792fe9a9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a7fd343")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: keyword-spacing unexpected space loc improve (refs #12334) (#13377) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e49732eb41bff6347ca7718c3c5ca1d13f1cd2d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e49732e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Ignore import expressions in no-unused-expressions rule (#13387) (Veniamin Krol)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/220349f5404060effe02fb5ec176a92e1383c3b5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("220349f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Remove duplicate health files (#13380) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dd949aedb81fa772e10568920156daf075d25ea2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dd949ae")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: support "),
          _c("code", [_vm._v("??")]),
          _vm._v(" operator, import.meta, and "),
          _c("code", [_vm._v("export * as ns")]),
          _vm._v(" (#13196) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d5fce9fa07e37ce61010a1fbb65964f1f7aefd82",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d5fce9f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: enable es2020 environment in --init (#13357) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/21b15832e326f96d349c063cd7e85e72c3abb670",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("21b1583")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fixed broken hash link for working-with-rules.md (#13386) (Yosuke Ota)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b76aef778befb32afe7ad249934b132dc49713d2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b76aef7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for template-tag-spacing (refs #12334) (#13203) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/578efad331b797e28c0f5f1547ce4769d2ea23ee",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("578efad")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update no-unused-vars caughtErrors in eslint-config-eslint (#13351) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/426088c966dc79dc338b33100f3adf827b147d69",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("426088c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-unused-vars updated location to last reference (fixes #13181) (#13354) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cb50b69c08d4393e32d5c42c537d769c51dd34d8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cb50b69")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve location for no-mixed-spaces-and-tabs (refs #12334) (#13365) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f858f2a8f83232484491bd90b0bc5001b5056ad0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f858f2a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add Tidelift to funding.yml (#13371) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ee30e5d8bb1a4c82a2a3fbe1b9ee9f979b55c5c4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ee30e5d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c29bd9f75582e5b1a403a8ffd0aafd1ffc8c58e1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c29bd9f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add breaking/core change link to issue templates (#13344) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d55490fa73ff69416de375e4c1cd67b6edba531c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d55490f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.1.0 - May 22, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a93083af89c6f9714dcdd4a7f27c8655a0b0dba6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a93083a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: astUtils.getNextLocation returns invalid location after CRLF (#13275) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/df01af184d93b3d64b37cee786cad59bd0d7aacb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("df01af1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: padded-blocks loc position changes (refs #12334) (#13328) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bd3f092efa579944f75bfbc277b35f85e6d966ed",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bd3f092")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: max-lines-per-function flagging arrow IIFEs (fixes #13332) (#13336) (cherryblossom000)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/25462b23eac4ed1ded97eeae6187b5d8baa58e78",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("25462b2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: block-spacing changed loc for extra (refs #12334) (#13314) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de0aab95005f172db72196fc3fd18e91ee9a5880",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de0aab9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: report end loc in one-var-declaration-per-line (refs #12334) (#13326) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1710296082083602a904b080908657bb431fb56c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1710296")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-new-symbol false positive with Symbol as an argument (#13337) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cc014514c29626e556acb0a528e3478b3725e284",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cc01451")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: arrow-parens no reporting for comments inside (fixes #12995) (#13312) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a19514193a42f4f00732559ff828b33a6ec9d7c5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a195141")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: reporting location for semi-spacing (refs #12334) (#13285) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e3e4c41ab625a5af8d4614d1c6d32c656f104f6b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e3e4c41")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: fix false positives of no-new-func (#13333) (Pig Fang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/611c676dfd671013d81810724f184e2a9c5ad5d7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("611c676")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update new rules policies (#13343) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3a5fbb3d634be688615950c0a5fa8aead6ff08b5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3a5fbb3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: correct fileoverview doc in accessor-pairs (#13335) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b0a6b8134e3b399beeb69432a02232a1037f7c46",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b0a6b81")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for rest-spread-spacing (refs #12334) (#13313) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/68c8ee3ab70187972aef4c4e866bcf29da70a207",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("68c8ee3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Stop path analyzer on unknown nodes (#13305) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/89e10811c4df666216aae58bff5f855cd9df738b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("89e1081")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for linebreak-style (refs #12334) (#13317) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/08913798b4ec420b261b8fbc470504f9f248c840",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0891379")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Docs: Document the "correct" way to build an array with values (#13246) (Ed S)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/88127d74d56b88cc5a0758856995716050021131",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("88127d7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove checkbox from PR template prerequesites (#13330) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c636d5708c461a8ff1ea55e5df56d4f76f9c4044",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c636d57")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: no-loss-of-precision (fixes #11279) (#12747) (jmoore914)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/72a4e1044592057c4a3f39dbb1dbe61b00ea8af6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("72a4e10")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Mark SourceCode getComments() method as deprecated (fixes #13293) (#13296) (SuperOleg39)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7f1484690665b4f4b9cd9680ca8bb7b5cf56e48a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7f14846")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix broken link in Node.js API docs (#13307) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/02aeba19afb301140514097235a9f2a00a9acb2a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("02aeba1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1f175338cba29960aab67a540f516051f9d428c8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1f17533")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Gitter -> Discord URL (refs #13039) (#13308) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/82a448a7deff24e9207f60dfe77622c00102bd99",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("82a448a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: improve documentation of no-return-await (#13215) (Linus Unnebäck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/742941d7fdc3fd79ff8c5d2588413e0d3a5a525b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("742941d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: added typescript-eslint/recommended configs for init (#13235) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3d03df08c8000403a85baffe2a000287f3335114",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3d03df0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f44a6b4fd92602af8e2c75d5852f796ec064aa8e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f44a6b4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: fix invalid syntax in require-await tests (#13277) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2c778fb6e31b7943bb27a47a6e15dcbfd8336f39",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2c778fb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: remove custom plugins from replacedBy metadata (#13274) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0db3b1d5cc5e4e1de21462679581b7a4d89ff36e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0db3b1d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.0.0 - May 8, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b98d8bda4630fe8278c5aa2b6650630770568fe5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b98d8bd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: eslint-release@2.0.0 (#13271) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4c0b028c55fc1674b374efe0bc6dd22c02b4ac88",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4c0b028")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: remove Node.js and CommonJS category from build process (#13242) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/401a68799d9d15145e1c7d92ee04644abec2f15a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("401a687")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: fix rules list for prereleases (#13230) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4ef61580736353f700ab9e4e29f005b5ac552c78",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4ef6158")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: espree@7.0.0 (#13270) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b5c8d7389bb2c5d4eae850b866832d099187818b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b5c8d73")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: update 7.0.0 migration guide for consistency (#13267) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/356fdb46aa118ba3d81cee93e8c058a7c98acaf9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("356fdb4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: add migration guide (#12692) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/015edf6467e33c67b904db037a674d71957a6865",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("015edf6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fdfa364c1b0d88689d02cbe8ae848a3e323209aa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fdfa364")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" 7.0.0-rc.0 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8d1b4db9932cf7c3289187afbb3866a83f9b3f8c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8d1b4db")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: changelog update for 7.0.0-rc.0 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0b1d65a45aa5dfe08cd596c420490e81b546317e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0b1d65a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for array-callback-return (refs #12334) (#13109) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d85e291d1b56960373031f2562547df7285444f7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d85e291")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: yoda left string fix for exceptRange (fixes #12883) (#13052) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2ce6bed04cad376003f70447ece4b6578c142bfd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2ce6bed")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: added tests for nested arrays (#13145) (Anix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d3aac532f6a24c633f85dedf0e552eabd22d0956",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d3aac53")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report backtick loc in no-unexpected-multiline (refs #12334) (#13142) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8e7a2d93595cfe0c1597af0e7873853369251c0b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8e7a2d9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Fix: func-call-spacing "never" reports wrong message (fixes #13190) (#13193) (Milos Djermanovic)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bcafd0f8508e19ab8087a35fac7b97fc4295df3e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bcafd0f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add ESLint API (refs eslint/rfcs#40) (#12939) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3eeae565bfb0834a31e5d3a253a17bbf4027cf88",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3eeae56")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: some (dev) deps (#13155) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6b7030b1a1e1e3d1a3953cfa9722074d6a6fc1a9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6b7030b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Run tests on Node.js v14 (#13210) (fisker Cheung)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ebc28d76658f1f3e4e8d56e70a25752b5d4a6686",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ebc28d7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Remove default .js from --ext CLI option (#13176) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5c1bdebcf728062fd41583886830c89b65485df9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5c1bdeb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for getter-return (refs #12334) (#13164) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/56d2beea0ea0b6395a6d4a3e116ea6a964ff92f3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("56d2bee")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix typos (#13204) (Nitin Kumar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e13256e395cc413ce45a66c8562621d48440d8f4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e13256e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: use espree.latestEcmaVersion in config-initializer (#13157) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e4f57b7d7b8b7441a2217a217dcda1e7bfff516a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e4f57b7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add nested array tests for array-element-newline (#13161) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/63ac91877668205aaa50495a9615806967e6e4cf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("63ac918")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/516f253729daeeb9da5de5e9b38606ff9c1aae71",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("516f253")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Adds import example for object-curly-newline rule (refs #12018) (#13177) (Luke Lewis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5a0e84e9498a946a3e8491a370e012354e087fe0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5a0e84e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b398e0b9ff455e4e7d70f19d5ccea5819c21eb86",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b398e0b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add rule comment in prefer-rest-params doc (#13191) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ffaa4ba5e2bb1a51a78a2b2c028cbe2efc9e5165",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ffaa4ba")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/932869b3251b04c4ad5fa72279cb2a56a3e67b55",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("932869b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/54630f0063fa66318476473757b5912465d4caf2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("54630f0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c9a503571a4662f6c2d31cabc7fd7819ec388150",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c9a5035")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: newBasePath should be an absolute path (fixes #12850) (#13078) (Nick Harris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e7c1d4b2ac56149a517d4b0000230348a641f1d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e7c1d4b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: deprecate Node.js & CommonJS rules (#12898) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/95e1c70cebde210a990ee786ec7ab1c8e522edb8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("95e1c70")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: levn@0.4.1 (fixes #9366) (#13140) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c41de382a330d4789488fd2dcf6db5a3163bb5d2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c41de38")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix curly multi-or-nest examples with comments (refs #12972) (#13151) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/57221d58c60e757062242f30ed574e0502fc7c31",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("57221d5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix eslint comment in no-inner-declarations examples (#13152) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/301b450ecd1985ae84d1915124f4638ab2a2e6de",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("301b450")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-extra-parens export default sequence expression false positive (#13096) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/af4472fed794b86e63730702e4b27294a4118d09",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("af4472f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for new-cap (refs #12334) (#13136) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfa811ceee801fe8ba212a5c879e13743146e909",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfa811c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: init error in extending recommended config (fixes #12707) (#12738) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5dfd4eb50d84077a57950f119e5de8976070e49a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5dfd4eb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: examples with arrow functions in no-return-assign (fixes #13135) (#13138) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/adc8fa88c9f223b984a3519ed159a055bf933b18",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("adc8fa8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify exceptions in spaced-comment (fixes #13032) (#13126) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a784dac8bc26f31edbca869b16d6ad91bd4e5cc4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a784dac")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location newline-per-chained-call (refs #12334) (#13116) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5e07574a91861fdcab6888b4c6829868030c3a39",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5e07574")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for space-before-function-paren (#13128) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d0d32a8c2a6c60c7e6e2d32a054e5987efd4c263",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d0d32a8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/17e2fe425168e675fe7607182615e50527eedf53",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("17e2fe4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve error message for fatal fixer errors (#13120) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7551f0c6fd12f0295cc7d6377bf1899c092e79d8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7551f0c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no check for shadowed Object (fixes #12809) (#13115) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/988d8428811934943ce13b2d8b833d795ac2bb4a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("988d842")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to report in no-useless-concat (refs #12334) (#13110) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0518ebb840b5bf2d646dbd8a9b3e246e7069eb79",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0518ebb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/252fd4133805f003151e0220b5d89bbb70cfacb1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("252fd41")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/438dcbb981214d67e8848006ce45afc0fbfa1705",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("438dcbb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for comma-style (refs #12334) (#13111) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/85b72548c0c893499c787b82f404348e1b50354d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("85b7254")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-inner-declarations false negative in non-block (fixes #12222) (#13062) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6631ef1678bbdd48680fb3025c3692abd0aeec4a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6631ef1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for no-empty-function (refs #12334) (#13121) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b228f958afaf507d6f6f99c90b2075b395733839",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b228f95")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/119b7ce97993b84df5af4e4f82e5102e430dfff1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("119b7ce")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" 7.0.0-alpha.3 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2531b802a1527ea1084905641a17befcb50350c7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2531b80")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: changelog update for 7.0.0-alpha.3 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/78c8cda5a5d82f5f8548c4528a6438d29756bb71",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("78c8cda")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: RuleTester Improvements (refs eslint/rfcs#25) (#12955) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e0f1b6c3d62f725b99b8c07654603b559ba43ba9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e0f1b6c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: stricter array index check in no-magic-numbers (fixes #12845) (#12851) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/362713c04aa89092b2b98a77fa94a75b3c933fc6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("362713c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for template-curly-spacing (#12813) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/29f32db68c921a857e17ae627923d87b9c8708de",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("29f32db")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Change error message logic for implicit file ignore (fixes #12873) (#12878) (Scott Hardin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/eb1a43ce3113c906800192c3ef766d2ff188776f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("eb1a43c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: require-await ignore async generators (fixes #12459) (#13048) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/920465b5d8d291df8bce7eef8a066b1dd43d8cae",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("920465b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: getNameLocationInGlobalDirectiveComment end location (refs #12334) (#13086) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ae14a021bbea5117fe366ae4ed235e8f08dc65a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ae14a02")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to report in no-extra-bind (refs #12334) (#13083) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/105384ccc11dcd7303104fb5a347eda1d4d48357",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("105384c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report operator location in operator-linebreak (refs #12334) (#13102) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/081e24022a40d9a026ddd2a85c68cb8c3f18dc53",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("081e240")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support globalThis in no-implied-eval (fixes #12670) (#13105) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/185982d5615d325ae8b45c2360d5847df4098bda",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("185982d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: improve plugin resolving (refs eslint/rfcs#47) (#12922) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0c20bc068e608869981a10711bba88ffde1539d8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0c20bc0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: check assignment property target in camelcase (fixes #13025) (#13027) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8d50a7d82244d4912f3eab62a66c81c76c44a9da",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8d50a7d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to report in no-prototype-builtins (refs #12334) (#13087) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3e4e7f8d429dc70b78c0aefaa37f9c22a1e5fc0f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3e4e7f8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: incorrect logic for required parens in no-extra-boolean-cast fixer (#13061) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6c069f907a04268b671c7f949c04a508df9d42a3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6c069f9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add comments to code block in example (#13089) (Kibeom Kwon)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ee1f0531aa534ef9182cf8586f55ad82aaa55e75",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ee1f053")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix typo (#13092) (Max Coplan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/76324ace67893c3d7e38a369114d6128df9ffb65",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("76324ac")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Add further reading to rule (#13084) (Max Coplan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a1370abed72e1fb93e601816d981fa6e46204afb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a1370ab")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Report constructor calls in no-obj-calls (#12909) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2111c52443e7641caad291e0daaea8e2fe6c4562",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2111c52")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: esquery@1.2.0 (#13076) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3f7c9bf19615122fb776cdd13da532d860bd945a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3f7c9bf")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify variables option in no-use-before-define (fixes #12986) (#13017) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aef9488c07d3da4becff6e8d6918824b53086d86",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aef9488")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: allow references to external globals in id-blacklist (fixes #12567) (#12987) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4955c50dc9e89b4077b28e35f065d45e89bdccd7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4955c50")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: remove type arguments in prefer-object-spread (fixes #13058) (#13063) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/48b122f450b14dd27afef4c8115c69fca4f02be1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("48b122f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: change relative paths with --config (refs eslint/rfcs#37) (#12887) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/085979fed9a5e24a87e4d92ee79272b59211d03f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("085979f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: consider env in no-implied-eval (fixes #12733) (#12757) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9ac5b9edf06d16a9216c2c9b02bb20b6aa8ed0ab",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9ac5b9e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Clarify node_modules is ignored by default (fixes #13006) (#13054) (Mika Kuijpers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0de91f39a97cdf530cb64edbadde57a2bb41ca86",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0de91f3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: removed correct code from incorrect eg (#13060) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dbe357de199620675446464f6fd0e35064c4d247",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dbe357d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: check template literal in prefer-numeric-literals (fixes #13045) (#13046) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2260611e616bdc2a0bf16d508b60a50772ce7fbb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2260611")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: added async in allow method in no-empty-function (fixes #12768) (#13036) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f3788aff615edfbfb7afc4c491bb07d20737531b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f3788af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e90b29bb1f41d4e5767e33d03db5984f036586ed",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e90b29b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Allow testing Suggestions with data in RuleTester (fixes #12606) (#12635) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7224eee3ff4b4378d3439deb038bf34b116fa48b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7224eee")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-plusplus allow comma operands in for afterthought (fixes #13005) (#13024) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7598cf816bd854de1dd7d96cf00dec6ecc4564ac",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7598cf8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Newline before eof when creating config via --init (#12952) (Andreas Lind)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/183e3006841c29efdd245c45a72e6cefac86ae35",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("183e300")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support globalThis (refs #12670) (#12774) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/af7af9d32ea8073d2d0d726cc8551351261a170f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("af7af9d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update governance (#13055) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/31d5eb3e60b6c2ee26976721f07cc89d60867659",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("31d5eb3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/95613d46b7900b3d9757a7f6959d5dfb262f29fc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("95613d4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: espree@6.2.1 (#13026) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f1525dc45dfdbbe31e724671270785b41cffc6bd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f1525dc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0243549db4d237cb78e720d55a9cae89b91f6830",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0243549")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: camelcase false positive with computed property (fixes #13022) (#13023) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bc0c02cd0368559c7a7b1510eb4620022a4cc31c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bc0c02c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: added lock files to gitignore (#13015) (Anix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/79ac6cd2d8e4c32e03dfea10a957806845058573",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("79ac6cd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: added less confusing explanation for func-style (fixes #12900) (#13004) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/26267ed70270ef746b785c09e267f815bf7c596a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("26267ed")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: update GitHub Actions (#12984) (Pig Fang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/12997058626b5167ba4b9d2ae0d0ea965a01c4be",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1299705")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: acorn version (#13016) (Idan Avrahami)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6cef0d50a0d131bc8897799a54e1af1d38606db4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6cef0d5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Check division operator in astUtils.canTokensBeAdjacent (#12879) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fd8e1f52110cada542a120750236fd1ec8779336",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fd8e1f5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/472025f2814d0360fe8d4cddbcba049982e1cd43",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("472025f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update space-before-function-paren in eslint-config-eslint (#12966) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fd8c42ada52f0ae2488ad96ee8fee675f63134ce",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fd8c42a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c615eae0be3c6c167c6f77ec7a73e7adca0ecef0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c615eae")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" 7.0.0-alpha.2 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2e8f193ebc970f07ea37d267c8bce02d74c285a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2e8f193")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: changelog update for 7.0.0-alpha.2 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a5b41a75b57572e97476b06ad39b768e15b9d844",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a5b41a7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-restricted-modules handle TemplateLiteral (fixes #12926) (#12927) (Michal Piechowiak)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/051567adca7ca56d691bcda76f54ed72e3eae367",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("051567a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check identifier in array pattern in id-length (fixes #12832) (#12839) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4af06fc49029dac5c9acfd53f01fd9527bfbb4aa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4af06fc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Test with an unknown error property should fail in RuleTester (#12096) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9038a29569548c0563c29dbe9f7dae280ff3addd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9038a29")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: func-names "),
          _c("code", [_vm._v("as-needed")]),
          _vm._v(
            " false negative with AssignmentPattern (#12932) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/afde78b125747ce5ad9e5f871122a0d370dd0152",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("afde78b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: curly removes necessary braces between if and else (fixes #12928) (#12943) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4797fb2c29db97bc5cd23b40e5a9235fef1ea06a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4797fb2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: arrow-body-style crash with object literal body (fixes #12884) (#12886) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/afa9aac6de9444e935a55b46311e5b5a58f86063",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("afa9aac")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: class default "),
          _c("code", [_vm._v("true")]),
          _vm._v(
            " computed-property-spacing (fixes #12812) (#12915) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b8e20d33b7d6645266beef09cd231afaf5054328",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b8e20d3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Mention TypeScript's compiler check (#12903) (Benny Neugebauer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de14d1ce0cf422b4100a686abb906f53fbf905b3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de14d1c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: wrap-iife autofix removes mandatory parentheses (#12905) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5775b06a74573cbe068bea56b1d2376421f5e831",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5775b06")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Optionally allow underscores in member names (#11972) (Edgardo Avilés)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e997f32b936463ac38e8b0034f764c47502e56a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e997f32")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Updated arrow-parens for minor grammar issue (#12962) (Tom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7d52151bcd5d5524f240588436a8808162be187f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7d52151")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: classes default "),
          _c("code", [_vm._v("true")]),
          _vm._v(
            " in accessor-pairs (fixes #12811) (#12919) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf14355e34a6757e15806f8e493553bd7110fb36",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf14355")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix links to custom parsers doc (#12965) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0dfc3ff9fb228e1d9b1df99de50033ce9140ac24",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0dfc3ff")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to report in no-eval (#12960) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f479f6fe2eb95156e22bebfccb39a7fc1f19e9c0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f479f6f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: References correct config file name (#12885) (Patrick Kilgore)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/78182e45e0178d9eac2591944ef4daee21d2cb44",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("78182e4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Add new rules to eslint:recommended (fixes #12911) (#12920) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8d5c434f721142be74c7515aaa935668a15b79b1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8d5c434")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix category descriptions for site generation (fixes #12894) (#12930) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/05380e6e7e19a79d26ea6d6b44a8d5ee7cde51c8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("05380e6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Remove claim about semicolons from docs (#12944) (Luke Sikina)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aa9d72525054e641231a2960a2e37b3716228056",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aa9d725")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7747177f8504961059b7c56bdb70a820bd1114c1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7747177")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report rename id destructuring in id-blacklist (fixes #12807) (#12923) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6423e11c0bedd3b4e661ab554316bdeb1fc1ee3c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6423e11")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: check unnamed default export in func-names (fixes #12194) (#12195) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/77df505d9a08496a8eaefeca4f885f54a21d5c5e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("77df505")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check renaming identifier in object destructuring (fixes 12827) (#12881) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/41de9df41a30a4300243bfe4ca26f716a787b2fc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("41de9df")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: enforceForLogicalOperands no-extra-boolean-cast (fixes #12137) (#12734) (jmoore914)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/98a9b019e52f344c1a6bc2f704c227f89692afe3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("98a9b01")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" 7.0.0-alpha.1 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e9f1073f748f8c22f754d145b1ba193e7ce82215",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e9f1073")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: changelog update for 7.0.0-alpha.1 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f702b1a54820d2b4e4993dcded99f551a98b490f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f702b1a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Add missing plugin reference (#12796) (Eduard Bardají Puig)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1f1424cb200e609d58645f6c54739e11469e6265",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1f1424c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: fix inconsistently works option in no-extra-parens (fixes #12717) (#12843) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b5adcaab93f388f1d8e9d35d6f5e8c2994240850",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b5adcaa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: make YieldExpression throwable (fixes #12880) (#12897) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4293229709dde105692347241513766e953664dd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4293229")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: use-isnan enforceForSwitchCase default "),
          _c("code", [_vm._v("true")]),
          _vm._v(" (fixes #12810) (#12913) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf38d0d939b62f3670cdd59f0143fd896fccd771",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf38d0d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: change default ignore pattern (refs eslint/rfcs#51) (#12888) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfe1dc4e614640cb69032afbb5851c1493f537e3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfe1dc4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: no-dupe-class-members checks some computed keys (fixes #12808) (#12837) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1ee6b6388305a8671c8d4c3cf30c2dbf18a1ff7e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1ee6b63")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check template literal in yoda (fixes #12863) (#12876) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0ae70417af70ad565450d9e779ae78c05f6a51e2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0ae7041")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1907e57362f7d5f7a02a5a78f24ac3347f868e93",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1907e57")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add Twitter and Open Collective badge (#12877) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/95e0586c95e6953d11983d1d11891ed30318109a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("95e0586")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: id-blacklist false positives on renamed imports (#12831) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b7f0d200c125b3d233ccafaabdaa61c66dc60e3c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b7f0d20")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Use consistent badge style (#12825) (fisker Cheung)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3734a669983de7d5107ba8f39b291c6e3116489f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3734a66")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: use ids for messages (#12859) (Gareth Jones)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/824d23585c205f2993716585cb6f55dfbe4a33f0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("824d235")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add errorOnUnmatchedPattern option to CLIEngine (#12834) (Arthur Denner)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/439c83342c364ba3ce5168d54e165b1fe3e35630",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("439c833")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: array-callback-return checks Array.forEach (fixes #12551) (#12646) (Gabriel R Sezefredo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/33efd71d7c3496b4b9cbfe006280527064940826",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("33efd71")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix spelling mistakes (#12861) (Bryan Mishkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a5b3c5fa4edc2312534af0d9f0911f68144f8baf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a5b3c5f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0cae9203a8077184ad6beb00028fd376cc806f34",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0cae920")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: rename shadowed global (#12862) (Tony Brix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/055b80dc89bba2a5ab22f7a27deb40135b5cacfa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("055b80d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Fix typo in complexity.js (#12864) (Kyle Shevlin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d6c313de794ea0671d35b5027288cd2ea456c0b5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d6c313d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add missing eslint comments in prefer-regex-literals examples (#12858) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7d551ab8cbf2d3a802b0d0685379aa075fe9d7c0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7d551ab")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/540de8e34d08f4b17b66b06d13927acb7552357a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("540de8e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ac5d515252c226f030fa646bf7635a12a3b856fe",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ac5d515")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dadc8927820576c60b48bcbc7d5a9056a6279d30",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dadc892")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: operator-assignment crash on adjacent division assignment (#12844) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9f39ef0d4b398c7c09ceef89128da448680d587c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9f39ef0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: typo in PULL_REQUEST_TEMPLATE.md (#12848) (Balázs Orbán)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a60d5cd2325ca72fa1b272b0b90ccd7904b92062",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a60d5cd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: typo in no-irregular-whitespace.js (#12847) (Balázs Orbán)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/691d19a2872bffab50c0024d488b8cb33504cc83",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("691d19a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: add missing "),
          _c("code", [_vm._v("ecmaVersion")]),
          _vm._v(
            " 2020/11 type value (#12833) (Piotr Błażejewicz (Peter Blazejewicz))"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/516ddb37d39502e5a8c88a017ae3bad05046f41d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("516ddb3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a9d92f991d69902a9150db373590e2ed54dec988",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a9d92f9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: radix rule crash on disabled globals (#12824) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/03a69dbe86d5b5768a310105416ae726822e3c1c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("03a69db")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check template literal in no-proto, no-iterator (fixes #12801) (#12806) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/562e7845946a490f2e173a0bcd1af631070a4eef",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("562e784")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-magic-numbers false negative with ignoreArrayIndexes (#12805) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f5b96564f732962f46755adbb33c49fae9af6a92",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f5b9656")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add test for no-constant-condition (#12836) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/533c1140dc98bebdc3ae8334ab2e6c27c7df0c21",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("533c114")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: multiline-comment-style rule add extra space after * (fixes #12785) (#12823) (Karthik Priyadarshan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0460748cda67ddc4a4cb0db3cdf187a742d09bf8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0460748")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check template literal in no-constant-condition (fixes #12815) (#12816) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/80309c3791188ac5d1c4eebc99ede323a55336e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("80309c3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-constant-condition doesn't introspect arrays (fixes #12225) (#12307) (Sean Gray)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/10a79a672b42d51539bcd6ace482be7afa5f34f8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("10a79a6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Adopt "),
          _c("code", [_vm._v("eslint-plugin/require-meta-docs-description")]),
          _vm._v(" internally (#12762) (Bryan Mishkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aea172998ec4e2af1d9186b6767c3f34428945f4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aea1729")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix anchor links in Node.js API TOC (#12821) (Matija Marohnić)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1b8a3ce15237b9085f2761dcf73655207e6169a6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1b8a3ce")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c2217c04d6c82b160a21b00fca39c8acec543403",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c2217c0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: make "),
          _c("code", [_vm._v("radix")]),
          _vm._v(" rule stricter (#12608) (fisker Cheung)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e03a7b311cb9ddf55914b1496683609bd564de2f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e03a7b3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" 7.0.0-alpha.0 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c8c1b2b2efadfcd3c04aaf15bd793c5b4dd84cb6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c8c1b2b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: changelog update for 7.0.0-alpha.0 (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1aa021d77fdd2c68d7b7d2f4603252110c414b32",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1aa021d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: lint "),
          _c("code", [_vm._v("overrides")]),
          _vm._v(
            " files (fixes #10828, refs eslint/rfcs#20) (#12677) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e59d77536bd8db57e8a75cd5245f6f320aa699f8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e59d775")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Separate pattern/expression options for array-element-newline (#11796) (jacobparish)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f8f115af6e10539e6cad485588187cb11917f8c9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f8f115a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: treat comment tokens in template-curly-spacing (fixes #12744) (#12775) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b50179def3fedbd95fdeab25e32c2511867eb760",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b50179d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Check assignment targets in no-extra-parens (#12490) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de4fa7c65c7befefa64d1605550267071ee56a5d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de4fa7c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: wrong indent at tagged template in indent (fixes #12122) (#12596) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d86a5bbb1987d858d4963f647b0af5c1fd924b4f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d86a5bb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Check flatMap in array-callback-return (fixes #12235) (#12765) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf46df70158a4ed4c09d5c9d655c07dc6df3ff5e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf46df7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: description in directive comments (refs eslint/rfcs#33) (#12699) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7350589a5bdfc9d75d1ff19364f476eec44c3911",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7350589")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: some rules recognize bigint literals (fixes #11803) (#12701) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/16a1c1f79bc0a4cc1c3a87e98d220041de88bb93",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("16a1c1f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-object-spread false positives with accessors (fixes #12086) (#12784) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f9774ec11b0ebe63fb16a97b97890efb84699548",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f9774ec")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add default-case-last rule (fixes #12665) (#12668) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9a93d9ef389c49a133c4df4f9843927f5f806423",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9a93d9e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-restricted-imports export * false negative (fixes #12737) (#12798) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0d8c0affe1ae7ecf228cdf91b490921f7e9d1fdb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0d8c0af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: improve report location for computed-property-spacing (#12795) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/756b95d59fb97cd9b3f3adf98cebf529fe4842a2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("756b95d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: id-blacklist should ignore ObjectPatterns (fixes #12787) (#12792) (JP Ramassini)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/561b6d4726f3e77dd40ba0d340ca7f08429cd2eb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("561b6d4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add prerequisites checklist to PR template (#12790) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/01ff7910af86fc45b76e883bc9ab00c9be3b50ac",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("01ff791")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Display pipe character correctly in test output (#12771) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/68becbd84e8a0693409d36f2be10679c483e233a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("68becbd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-restricted-imports importNames reporting (fixes #12282) (#12711) (Andrey Alexandrov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ae959b691fb148ac8b474c924c8cb01ef61c436d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ae959b6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report double extra parens in no-extra-parens (fixes #12127) (#12697) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/02fcc055710e8d69d986f1e682cae2014ad881e2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("02fcc05")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Improve sort-keys (#12791) (Steven Vachon)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/35cd95893be0afd8c954cbcf9268c2aa045b7d5b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("35cd958")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a1d999c6b4e51c317ad409110be7be214ff9f7c6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a1d999c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-useless-backreference rule (fixes #12673) (#12690) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b2c62096a8b318765d618cab222240f87d73063b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b2c6209")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-extra-parens CallExpression#callee false negatives (#12743) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/14b42c386be3387c415267b789f277e1294d4567",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("14b42c3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix counting jsx comment len in max-len (fixes #12213) (#12661) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e632c31d7e5363f1347b787702ecd4a85f5c11a2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e632c31")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: several dependencies (#12753) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/25eb703c8758563988ffb497a53f89a3ed345399",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("25eb703")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix dead link in max-lines rule docs (#12766) (Christian Bundy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9dfc8501fb1956c90dc11e6377b4cb38a6bea65d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9dfc850")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Refactor to use messageId in a number of rules (#12715) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1118fceb49af3436b8dcd0c6089f913cedf9a329",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1118fce")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: runtime-deprecation on '~/.eslintrc' (refs eslint/rfcs#32) (#12678) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2c28fbbb563a44282bef0c9fcc9be29d611cc83b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2c28fbb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: drop Node.js 8 support (refs eslint/rfcs#44) (#12700) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/098b67d04a4b4dc8ef4faa6434c6ef5abbde3ed3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("098b67d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix minor typo in brace-style.md (#12749) (Marko Kaznovac)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/313f70ac9a3cf5d1558d2427b00dd75666e18cf4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("313f70a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Update: add outerIIFEBody: "off" to indent rule (fixes #11377) (#12706) (Kai Cataldo)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b77b8585e33fc4bb438a0e11ca8177c7eb91dbd8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b77b858")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: fix separateRequires tests for one-var rule (#12709) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e4df7dfb0199badb61d2c03ff4f7e4be735279d9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e4df7df")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add JSDoc types for RuleTester test cases (#12325) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b23ad0d789a909baf8d7c41a35bc53df932eaf30",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b23ad0d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: change a broken link in working-with-rules.md (#12732) (Damien Cassou)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3fa39a633b37544fec7cedfc1f2b0e62e9312a72",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3fa39a6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Handle locally unsupported regex in computed property keys (#12056) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/474439720258b1a64b305c31588f803104fa4aaf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4744397")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove unused code in max-lines-per-function (#12659) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4e169576a526023ee297d5bc8b37eedba229f63d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4e16957")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: update browser build (#12693) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/00ddfffe6b4b4244e4680b0f92f2c6697fad136f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("00ddfff")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Windows path parsing for JUnit (fixes #12507) (#12509) (Michael Wall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/985dac35e3c367f0f99d1f0e766e06a1d9818dd4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("985dac3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-restricted-exports rule (fixes #10428) (#12546) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1aff21bb54da44cef0b6e378a34a74265863b930",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1aff21b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-mixed-spaces-and-tabs reports multiline strings (#12566) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8f1020ff711b0c57d590bf666e2841f64186d083",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8f1020f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-void add an option to allow void as a statement (#12613) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bb6cf5082623ffb67bb1495fee52c0610ee5f421",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bb6cf50")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add offsetTernaryExpressions option for indent rule (#12556) (Adam Stankiewicz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/39f5a453579b2ad732212edeb71f84ecb0991f97",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("39f5a45")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: add test cases for for-direction (#12698) (YeonJuan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b3403045e535921df6d34785a4ce053e14ba27fd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b340304")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add extra test, improve docs (#12492) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/827259ea009f98a0fdf3f7ebf1bfb6cd661ce28d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("827259e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: package.json update for eslint-config-eslint release (ESLint Jenkins)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.0.0-rc.0 - April 24, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0b1d65a45aa5dfe08cd596c420490e81b546317e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0b1d65a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for array-callback-return (refs #12334) (#13109) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d85e291d1b56960373031f2562547df7285444f7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d85e291")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: yoda left string fix for exceptRange (fixes #12883) (#13052) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2ce6bed04cad376003f70447ece4b6578c142bfd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2ce6bed")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: added tests for nested arrays (#13145) (Anix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d3aac532f6a24c633f85dedf0e552eabd22d0956",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d3aac53")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report backtick loc in no-unexpected-multiline (refs #12334) (#13142) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8e7a2d93595cfe0c1597af0e7873853369251c0b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8e7a2d9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Fix: func-call-spacing "never" reports wrong message (fixes #13190) (#13193) (Milos Djermanovic)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bcafd0f8508e19ab8087a35fac7b97fc4295df3e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bcafd0f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add ESLint API (refs eslint/rfcs#40) (#12939) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3eeae565bfb0834a31e5d3a253a17bbf4027cf88",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3eeae56")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: some (dev) deps (#13155) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6b7030b1a1e1e3d1a3953cfa9722074d6a6fc1a9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6b7030b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Run tests on Node.js v14 (#13210) (fisker Cheung)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ebc28d76658f1f3e4e8d56e70a25752b5d4a6686",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ebc28d7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Remove default .js from --ext CLI option (#13176) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5c1bdebcf728062fd41583886830c89b65485df9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5c1bdeb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for getter-return (refs #12334) (#13164) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/56d2beea0ea0b6395a6d4a3e116ea6a964ff92f3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("56d2bee")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix typos (#13204) (Nitin Kumar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e13256e395cc413ce45a66c8562621d48440d8f4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e13256e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: use espree.latestEcmaVersion in config-initializer (#13157) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e4f57b7d7b8b7441a2217a217dcda1e7bfff516a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e4f57b7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add nested array tests for array-element-newline (#13161) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/63ac91877668205aaa50495a9615806967e6e4cf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("63ac918")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/516f253729daeeb9da5de5e9b38606ff9c1aae71",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("516f253")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Adds import example for object-curly-newline rule (refs #12018) (#13177) (Luke Lewis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5a0e84e9498a946a3e8491a370e012354e087fe0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5a0e84e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b398e0b9ff455e4e7d70f19d5ccea5819c21eb86",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b398e0b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add rule comment in prefer-rest-params doc (#13191) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ffaa4ba5e2bb1a51a78a2b2c028cbe2efc9e5165",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ffaa4ba")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/932869b3251b04c4ad5fa72279cb2a56a3e67b55",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("932869b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/54630f0063fa66318476473757b5912465d4caf2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("54630f0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c9a503571a4662f6c2d31cabc7fd7819ec388150",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c9a5035")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: newBasePath should be an absolute path (fixes #12850) (#13078) (Nick Harris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e7c1d4b2ac56149a517d4b0000230348a641f1d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e7c1d4b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: deprecate Node.js & CommonJS rules (#12898) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/95e1c70cebde210a990ee786ec7ab1c8e522edb8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("95e1c70")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: levn@0.4.1 (fixes #9366) (#13140) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c41de382a330d4789488fd2dcf6db5a3163bb5d2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c41de38")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix curly multi-or-nest examples with comments (refs #12972) (#13151) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/57221d58c60e757062242f30ed574e0502fc7c31",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("57221d5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix eslint comment in no-inner-declarations examples (#13152) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/301b450ecd1985ae84d1915124f4638ab2a2e6de",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("301b450")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-extra-parens export default sequence expression false positive (#13096) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/af4472fed794b86e63730702e4b27294a4118d09",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("af4472f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for new-cap (refs #12334) (#13136) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfa811ceee801fe8ba212a5c879e13743146e909",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfa811c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: init error in extending recommended config (fixes #12707) (#12738) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5dfd4eb50d84077a57950f119e5de8976070e49a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5dfd4eb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: examples with arrow functions in no-return-assign (fixes #13135) (#13138) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/adc8fa88c9f223b984a3519ed159a055bf933b18",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("adc8fa8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify exceptions in spaced-comment (fixes #13032) (#13126) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a784dac8bc26f31edbca869b16d6ad91bd4e5cc4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a784dac")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location newline-per-chained-call (refs #12334) (#13116) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5e07574a91861fdcab6888b4c6829868030c3a39",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5e07574")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for space-before-function-paren (#13128) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d0d32a8c2a6c60c7e6e2d32a054e5987efd4c263",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d0d32a8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/17e2fe425168e675fe7607182615e50527eedf53",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("17e2fe4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve error message for fatal fixer errors (#13120) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7551f0c6fd12f0295cc7d6377bf1899c092e79d8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7551f0c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no check for shadowed Object (fixes #12809) (#13115) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/988d8428811934943ce13b2d8b833d795ac2bb4a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("988d842")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to report in no-useless-concat (refs #12334) (#13110) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0518ebb840b5bf2d646dbd8a9b3e246e7069eb79",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0518ebb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/252fd4133805f003151e0220b5d89bbb70cfacb1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("252fd41")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/438dcbb981214d67e8848006ce45afc0fbfa1705",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("438dcbb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for comma-style (refs #12334) (#13111) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/85b72548c0c893499c787b82f404348e1b50354d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("85b7254")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-inner-declarations false negative in non-block (fixes #12222) (#13062) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6631ef1678bbdd48680fb3025c3692abd0aeec4a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6631ef1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for no-empty-function (refs #12334) (#13121) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b228f958afaf507d6f6f99c90b2075b395733839",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b228f95")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.0.0-alpha.3 - March 27, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/78c8cda5a5d82f5f8548c4528a6438d29756bb71",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("78c8cda")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: RuleTester Improvements (refs eslint/rfcs#25) (#12955) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e0f1b6c3d62f725b99b8c07654603b559ba43ba9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e0f1b6c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: stricter array index check in no-magic-numbers (fixes #12845) (#12851) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/362713c04aa89092b2b98a77fa94a75b3c933fc6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("362713c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve report location for template-curly-spacing (#12813) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/29f32db68c921a857e17ae627923d87b9c8708de",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("29f32db")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Change error message logic for implicit file ignore (fixes #12873) (#12878) (Scott Hardin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/eb1a43ce3113c906800192c3ef766d2ff188776f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("eb1a43c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: require-await ignore async generators (fixes #12459) (#13048) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/920465b5d8d291df8bce7eef8a066b1dd43d8cae",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("920465b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: getNameLocationInGlobalDirectiveComment end location (refs #12334) (#13086) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ae14a021bbea5117fe366ae4ed235e8f08dc65a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ae14a02")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to report in no-extra-bind (refs #12334) (#13083) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/105384ccc11dcd7303104fb5a347eda1d4d48357",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("105384c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report operator location in operator-linebreak (refs #12334) (#13102) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/081e24022a40d9a026ddd2a85c68cb8c3f18dc53",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("081e240")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support globalThis in no-implied-eval (fixes #12670) (#13105) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/185982d5615d325ae8b45c2360d5847df4098bda",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("185982d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: improve plugin resolving (refs eslint/rfcs#47) (#12922) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0c20bc068e608869981a10711bba88ffde1539d8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0c20bc0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: check assignment property target in camelcase (fixes #13025) (#13027) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8d50a7d82244d4912f3eab62a66c81c76c44a9da",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8d50a7d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to report in no-prototype-builtins (refs #12334) (#13087) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3e4e7f8d429dc70b78c0aefaa37f9c22a1e5fc0f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3e4e7f8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: incorrect logic for required parens in no-extra-boolean-cast fixer (#13061) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6c069f907a04268b671c7f949c04a508df9d42a3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6c069f9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add comments to code block in example (#13089) (Kibeom Kwon)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ee1f0531aa534ef9182cf8586f55ad82aaa55e75",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ee1f053")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix typo (#13092) (Max Coplan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/76324ace67893c3d7e38a369114d6128df9ffb65",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("76324ac")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Add further reading to rule (#13084) (Max Coplan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a1370abed72e1fb93e601816d981fa6e46204afb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a1370ab")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Report constructor calls in no-obj-calls (#12909) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2111c52443e7641caad291e0daaea8e2fe6c4562",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2111c52")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: esquery@1.2.0 (#13076) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3f7c9bf19615122fb776cdd13da532d860bd945a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3f7c9bf")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify variables option in no-use-before-define (fixes #12986) (#13017) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aef9488c07d3da4becff6e8d6918824b53086d86",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aef9488")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: allow references to external globals in id-blacklist (fixes #12567) (#12987) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4955c50dc9e89b4077b28e35f065d45e89bdccd7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4955c50")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: remove type arguments in prefer-object-spread (fixes #13058) (#13063) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/48b122f450b14dd27afef4c8115c69fca4f02be1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("48b122f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: change relative paths with --config (refs eslint/rfcs#37) (#12887) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/085979fed9a5e24a87e4d92ee79272b59211d03f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("085979f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: consider env in no-implied-eval (fixes #12733) (#12757) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9ac5b9edf06d16a9216c2c9b02bb20b6aa8ed0ab",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9ac5b9e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Clarify node_modules is ignored by default (fixes #13006) (#13054) (Mika Kuijpers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0de91f39a97cdf530cb64edbadde57a2bb41ca86",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0de91f3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: removed correct code from incorrect eg (#13060) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dbe357de199620675446464f6fd0e35064c4d247",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dbe357d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: check template literal in prefer-numeric-literals (fixes #13045) (#13046) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2260611e616bdc2a0bf16d508b60a50772ce7fbb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2260611")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: added async in allow method in no-empty-function (fixes #12768) (#13036) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f3788aff615edfbfb7afc4c491bb07d20737531b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f3788af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e90b29bb1f41d4e5767e33d03db5984f036586ed",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e90b29b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Allow testing Suggestions with data in RuleTester (fixes #12606) (#12635) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7224eee3ff4b4378d3439deb038bf34b116fa48b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7224eee")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-plusplus allow comma operands in for afterthought (fixes #13005) (#13024) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7598cf816bd854de1dd7d96cf00dec6ecc4564ac",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7598cf8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Newline before eof when creating config via --init (#12952) (Andreas Lind)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/183e3006841c29efdd245c45a72e6cefac86ae35",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("183e300")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support globalThis (refs #12670) (#12774) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/af7af9d32ea8073d2d0d726cc8551351261a170f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("af7af9d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update governance (#13055) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/31d5eb3e60b6c2ee26976721f07cc89d60867659",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("31d5eb3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/95613d46b7900b3d9757a7f6959d5dfb262f29fc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("95613d4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: espree@6.2.1 (#13026) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f1525dc45dfdbbe31e724671270785b41cffc6bd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f1525dc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0243549db4d237cb78e720d55a9cae89b91f6830",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0243549")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: camelcase false positive with computed property (fixes #13022) (#13023) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bc0c02cd0368559c7a7b1510eb4620022a4cc31c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bc0c02c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: added lock files to gitignore (#13015) (Anix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/79ac6cd2d8e4c32e03dfea10a957806845058573",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("79ac6cd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: added less confusing explanation for func-style (fixes #12900) (#13004) (Anix)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/26267ed70270ef746b785c09e267f815bf7c596a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("26267ed")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: update GitHub Actions (#12984) (Pig Fang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/12997058626b5167ba4b9d2ae0d0ea965a01c4be",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1299705")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: acorn version (#13016) (Idan Avrahami)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6cef0d50a0d131bc8897799a54e1af1d38606db4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6cef0d5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Check division operator in astUtils.canTokensBeAdjacent (#12879) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fd8e1f52110cada542a120750236fd1ec8779336",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fd8e1f5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/472025f2814d0360fe8d4cddbcba049982e1cd43",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("472025f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update space-before-function-paren in eslint-config-eslint (#12966) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fd8c42ada52f0ae2488ad96ee8fee675f63134ce",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fd8c42a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.0.0-alpha.2 - February 28, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a5b41a75b57572e97476b06ad39b768e15b9d844",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a5b41a7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-restricted-modules handle TemplateLiteral (fixes #12926) (#12927) (Michal Piechowiak)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/051567adca7ca56d691bcda76f54ed72e3eae367",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("051567a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check identifier in array pattern in id-length (fixes #12832) (#12839) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4af06fc49029dac5c9acfd53f01fd9527bfbb4aa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4af06fc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Test with an unknown error property should fail in RuleTester (#12096) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9038a29569548c0563c29dbe9f7dae280ff3addd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9038a29")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: func-names "),
          _c("code", [_vm._v("as-needed")]),
          _vm._v(
            " false negative with AssignmentPattern (#12932) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/afde78b125747ce5ad9e5f871122a0d370dd0152",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("afde78b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: curly removes necessary braces between if and else (fixes #12928) (#12943) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4797fb2c29db97bc5cd23b40e5a9235fef1ea06a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4797fb2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: arrow-body-style crash with object literal body (fixes #12884) (#12886) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/afa9aac6de9444e935a55b46311e5b5a58f86063",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("afa9aac")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: class default "),
          _c("code", [_vm._v("true")]),
          _vm._v(
            " computed-property-spacing (fixes #12812) (#12915) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b8e20d33b7d6645266beef09cd231afaf5054328",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b8e20d3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Mention TypeScript's compiler check (#12903) (Benny Neugebauer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de14d1ce0cf422b4100a686abb906f53fbf905b3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de14d1c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: wrap-iife autofix removes mandatory parentheses (#12905) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5775b06a74573cbe068bea56b1d2376421f5e831",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5775b06")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Optionally allow underscores in member names (#11972) (Edgardo Avilés)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e997f32b936463ac38e8b0034f764c47502e56a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e997f32")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Updated arrow-parens for minor grammar issue (#12962) (Tom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7d52151bcd5d5524f240588436a8808162be187f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7d52151")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: classes default "),
          _c("code", [_vm._v("true")]),
          _vm._v(
            " in accessor-pairs (fixes #12811) (#12919) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf14355e34a6757e15806f8e493553bd7110fb36",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf14355")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix links to custom parsers doc (#12965) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0dfc3ff9fb228e1d9b1df99de50033ce9140ac24",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0dfc3ff")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add end location to report in no-eval (#12960) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f479f6fe2eb95156e22bebfccb39a7fc1f19e9c0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f479f6f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: References correct config file name (#12885) (Patrick Kilgore)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/78182e45e0178d9eac2591944ef4daee21d2cb44",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("78182e4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Add new rules to eslint:recommended (fixes #12911) (#12920) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8d5c434f721142be74c7515aaa935668a15b79b1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8d5c434")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix category descriptions for site generation (fixes #12894) (#12930) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/05380e6e7e19a79d26ea6d6b44a8d5ee7cde51c8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("05380e6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Remove claim about semicolons from docs (#12944) (Luke Sikina)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aa9d72525054e641231a2960a2e37b3716228056",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aa9d725")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7747177f8504961059b7c56bdb70a820bd1114c1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7747177")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report rename id destructuring in id-blacklist (fixes #12807) (#12923) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6423e11c0bedd3b4e661ab554316bdeb1fc1ee3c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6423e11")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: check unnamed default export in func-names (fixes #12194) (#12195) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/77df505d9a08496a8eaefeca4f885f54a21d5c5e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("77df505")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check renaming identifier in object destructuring (fixes 12827) (#12881) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/41de9df41a30a4300243bfe4ca26f716a787b2fc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("41de9df")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: enforceForLogicalOperands no-extra-boolean-cast (fixes #12137) (#12734) (jmoore914)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.0.0-alpha.1 - February 14, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f702b1a54820d2b4e4993dcded99f551a98b490f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f702b1a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Add missing plugin reference (#12796) (Eduard Bardají Puig)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1f1424cb200e609d58645f6c54739e11469e6265",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1f1424c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: fix inconsistently works option in no-extra-parens (fixes #12717) (#12843) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b5adcaab93f388f1d8e9d35d6f5e8c2994240850",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b5adcaa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: make YieldExpression throwable (fixes #12880) (#12897) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4293229709dde105692347241513766e953664dd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4293229")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: use-isnan enforceForSwitchCase default "),
          _c("code", [_vm._v("true")]),
          _vm._v(" (fixes #12810) (#12913) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf38d0d939b62f3670cdd59f0143fd896fccd771",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf38d0d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: change default ignore pattern (refs eslint/rfcs#51) (#12888) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfe1dc4e614640cb69032afbb5851c1493f537e3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfe1dc4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: no-dupe-class-members checks some computed keys (fixes #12808) (#12837) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1ee6b6388305a8671c8d4c3cf30c2dbf18a1ff7e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1ee6b63")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check template literal in yoda (fixes #12863) (#12876) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0ae70417af70ad565450d9e779ae78c05f6a51e2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0ae7041")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1907e57362f7d5f7a02a5a78f24ac3347f868e93",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1907e57")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add Twitter and Open Collective badge (#12877) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/95e0586c95e6953d11983d1d11891ed30318109a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("95e0586")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: id-blacklist false positives on renamed imports (#12831) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b7f0d200c125b3d233ccafaabdaa61c66dc60e3c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b7f0d20")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Use consistent badge style (#12825) (fisker Cheung)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3734a669983de7d5107ba8f39b291c6e3116489f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3734a66")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: use ids for messages (#12859) (Gareth Jones)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/824d23585c205f2993716585cb6f55dfbe4a33f0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("824d235")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add errorOnUnmatchedPattern option to CLIEngine (#12834) (Arthur Denner)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/439c83342c364ba3ce5168d54e165b1fe3e35630",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("439c833")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: array-callback-return checks Array.forEach (fixes #12551) (#12646) (Gabriel R Sezefredo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/33efd71d7c3496b4b9cbfe006280527064940826",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("33efd71")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix spelling mistakes (#12861) (Bryan Mishkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a5b3c5fa4edc2312534af0d9f0911f68144f8baf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a5b3c5f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0cae9203a8077184ad6beb00028fd376cc806f34",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0cae920")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: rename shadowed global (#12862) (Tony Brix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/055b80dc89bba2a5ab22f7a27deb40135b5cacfa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("055b80d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Fix typo in complexity.js (#12864) (Kyle Shevlin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d6c313de794ea0671d35b5027288cd2ea456c0b5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d6c313d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add missing eslint comments in prefer-regex-literals examples (#12858) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7d551ab8cbf2d3a802b0d0685379aa075fe9d7c0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7d551ab")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/540de8e34d08f4b17b66b06d13927acb7552357a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("540de8e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ac5d515252c226f030fa646bf7635a12a3b856fe",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ac5d515")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dadc8927820576c60b48bcbc7d5a9056a6279d30",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dadc892")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: operator-assignment crash on adjacent division assignment (#12844) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9f39ef0d4b398c7c09ceef89128da448680d587c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9f39ef0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: typo in PULL_REQUEST_TEMPLATE.md (#12848) (Balázs Orbán)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a60d5cd2325ca72fa1b272b0b90ccd7904b92062",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a60d5cd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: typo in no-irregular-whitespace.js (#12847) (Balázs Orbán)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/691d19a2872bffab50c0024d488b8cb33504cc83",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("691d19a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: add missing "),
          _c("code", [_vm._v("ecmaVersion")]),
          _vm._v(
            " 2020/11 type value (#12833) (Piotr Błażejewicz (Peter Blazejewicz))"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/516ddb37d39502e5a8c88a017ae3bad05046f41d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("516ddb3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a9d92f991d69902a9150db373590e2ed54dec988",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a9d92f9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: radix rule crash on disabled globals (#12824) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/03a69dbe86d5b5768a310105416ae726822e3c1c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("03a69db")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check template literal in no-proto, no-iterator (fixes #12801) (#12806) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/562e7845946a490f2e173a0bcd1af631070a4eef",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("562e784")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-magic-numbers false negative with ignoreArrayIndexes (#12805) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f5b96564f732962f46755adbb33c49fae9af6a92",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f5b9656")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add test for no-constant-condition (#12836) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/533c1140dc98bebdc3ae8334ab2e6c27c7df0c21",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("533c114")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: multiline-comment-style rule add extra space after * (fixes #12785) (#12823) (Karthik Priyadarshan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0460748cda67ddc4a4cb0db3cdf187a742d09bf8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0460748")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: check template literal in no-constant-condition (fixes #12815) (#12816) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/80309c3791188ac5d1c4eebc99ede323a55336e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("80309c3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-constant-condition doesn't introspect arrays (fixes #12225) (#12307) (Sean Gray)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/10a79a672b42d51539bcd6ace482be7afa5f34f8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("10a79a6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: Adopt "),
          _c("code", [_vm._v("eslint-plugin/require-meta-docs-description")]),
          _vm._v(" internally (#12762) (Bryan Mishkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aea172998ec4e2af1d9186b6767c3f34428945f4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aea1729")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix anchor links in Node.js API TOC (#12821) (Matija Marohnić)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1b8a3ce15237b9085f2761dcf73655207e6169a6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1b8a3ce")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c2217c04d6c82b160a21b00fca39c8acec543403",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c2217c0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: make "),
          _c("code", [_vm._v("radix")]),
          _vm._v(" rule stricter (#12608) (fisker Cheung)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v7.0.0-alpha.0 - January 17, 2020")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1aa021d77fdd2c68d7b7d2f4603252110c414b32",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1aa021d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Breaking: lint "),
          _c("code", [_vm._v("overrides")]),
          _vm._v(
            " files (fixes #10828, refs eslint/rfcs#20) (#12677) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e59d77536bd8db57e8a75cd5245f6f320aa699f8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e59d775")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Separate pattern/expression options for array-element-newline (#11796) (jacobparish)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f8f115af6e10539e6cad485588187cb11917f8c9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f8f115a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: treat comment tokens in template-curly-spacing (fixes #12744) (#12775) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b50179def3fedbd95fdeab25e32c2511867eb760",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b50179d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Check assignment targets in no-extra-parens (#12490) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de4fa7c65c7befefa64d1605550267071ee56a5d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de4fa7c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: wrong indent at tagged template in indent (fixes #12122) (#12596) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d86a5bbb1987d858d4963f647b0af5c1fd924b4f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d86a5bb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Check flatMap in array-callback-return (fixes #12235) (#12765) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf46df70158a4ed4c09d5c9d655c07dc6df3ff5e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf46df7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: description in directive comments (refs eslint/rfcs#33) (#12699) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7350589a5bdfc9d75d1ff19364f476eec44c3911",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7350589")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: some rules recognize bigint literals (fixes #11803) (#12701) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/16a1c1f79bc0a4cc1c3a87e98d220041de88bb93",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("16a1c1f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-object-spread false positives with accessors (fixes #12086) (#12784) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f9774ec11b0ebe63fb16a97b97890efb84699548",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f9774ec")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add default-case-last rule (fixes #12665) (#12668) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9a93d9ef389c49a133c4df4f9843927f5f806423",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9a93d9e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-restricted-imports export * false negative (fixes #12737) (#12798) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0d8c0affe1ae7ecf228cdf91b490921f7e9d1fdb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0d8c0af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: improve report location for computed-property-spacing (#12795) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/756b95d59fb97cd9b3f3adf98cebf529fe4842a2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("756b95d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: id-blacklist should ignore ObjectPatterns (fixes #12787) (#12792) (JP Ramassini)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/561b6d4726f3e77dd40ba0d340ca7f08429cd2eb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("561b6d4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add prerequisites checklist to PR template (#12790) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/01ff7910af86fc45b76e883bc9ab00c9be3b50ac",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("01ff791")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Display pipe character correctly in test output (#12771) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/68becbd84e8a0693409d36f2be10679c483e233a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("68becbd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-restricted-imports importNames reporting (fixes #12282) (#12711) (Andrey Alexandrov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ae959b691fb148ac8b474c924c8cb01ef61c436d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ae959b6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report double extra parens in no-extra-parens (fixes #12127) (#12697) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/02fcc055710e8d69d986f1e682cae2014ad881e2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("02fcc05")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Improve sort-keys (#12791) (Steven Vachon)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/35cd95893be0afd8c954cbcf9268c2aa045b7d5b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("35cd958")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a1d999c6b4e51c317ad409110be7be214ff9f7c6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a1d999c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-useless-backreference rule (fixes #12673) (#12690) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b2c62096a8b318765d618cab222240f87d73063b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b2c6209")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-extra-parens CallExpression#callee false negatives (#12743) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/14b42c386be3387c415267b789f277e1294d4567",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("14b42c3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix counting jsx comment len in max-len (fixes #12213) (#12661) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e632c31d7e5363f1347b787702ecd4a85f5c11a2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e632c31")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: several dependencies (#12753) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/25eb703c8758563988ffb497a53f89a3ed345399",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("25eb703")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix dead link in max-lines rule docs (#12766) (Christian Bundy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9dfc8501fb1956c90dc11e6377b4cb38a6bea65d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9dfc850")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Refactor to use messageId in a number of rules (#12715) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1118fceb49af3436b8dcd0c6089f913cedf9a329",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1118fce")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: runtime-deprecation on '~/.eslintrc' (refs eslint/rfcs#32) (#12678) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2c28fbbb563a44282bef0c9fcc9be29d611cc83b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2c28fbb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: drop Node.js 8 support (refs eslint/rfcs#44) (#12700) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/098b67d04a4b4dc8ef4faa6434c6ef5abbde3ed3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("098b67d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix minor typo in brace-style.md (#12749) (Marko Kaznovac)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/313f70ac9a3cf5d1558d2427b00dd75666e18cf4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("313f70a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Update: add outerIIFEBody: "off" to indent rule (fixes #11377) (#12706) (Kai Cataldo)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b77b8585e33fc4bb438a0e11ca8177c7eb91dbd8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b77b858")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: fix separateRequires tests for one-var rule (#12709) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e4df7dfb0199badb61d2c03ff4f7e4be735279d9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e4df7df")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add JSDoc types for RuleTester test cases (#12325) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b23ad0d789a909baf8d7c41a35bc53df932eaf30",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b23ad0d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: change a broken link in working-with-rules.md (#12732) (Damien Cassou)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3fa39a633b37544fec7cedfc1f2b0e62e9312a72",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3fa39a6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Handle locally unsupported regex in computed property keys (#12056) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/474439720258b1a64b305c31588f803104fa4aaf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4744397")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove unused code in max-lines-per-function (#12659) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4e169576a526023ee297d5bc8b37eedba229f63d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4e16957")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: update browser build (#12693) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/00ddfffe6b4b4244e4680b0f92f2c6697fad136f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("00ddfff")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Windows path parsing for JUnit (fixes #12507) (#12509) (Michael Wall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/985dac35e3c367f0f99d1f0e766e06a1d9818dd4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("985dac3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-restricted-exports rule (fixes #10428) (#12546) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1aff21bb54da44cef0b6e378a34a74265863b930",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1aff21b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-mixed-spaces-and-tabs reports multiline strings (#12566) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8f1020ff711b0c57d590bf666e2841f64186d083",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8f1020f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-void add an option to allow void as a statement (#12613) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bb6cf5082623ffb67bb1495fee52c0610ee5f421",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bb6cf50")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add offsetTernaryExpressions option for indent rule (#12556) (Adam Stankiewicz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/39f5a453579b2ad732212edeb71f84ecb0991f97",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("39f5a45")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: add test cases for for-direction (#12698) (YeonJuan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b3403045e535921df6d34785a4ce053e14ba27fd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b340304")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add extra test, improve docs (#12492) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/827259ea009f98a0fdf3f7ebf1bfb6cd661ce28d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("827259e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: package.json update for eslint-config-eslint release (ESLint Jenkins)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.8.0 - December 20, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c5c708666b450fb69522a55aa375626f9297dc6f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c5c7086")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: ignore aligning single line in key-spacing (fixes #11414) (#12652) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9986d9e0baed0d3586bbee472fe2fae2ed625f5d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9986d9e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add object option test cases in yield-star-spacing (#12679) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1713d0758b083f3840d724505f997a7cb20ff384",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1713d07")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-error-on-unmatched-pattern flag (fixes #10587) (#12377) (ncraley)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5c25a26608fbd9a1d0127c9a3653609aa4b63e86",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5c25a26")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: autofix bug in lines-between-class-members (fixes #12391) (#12632) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4b3cc5cd2459f04eae149faea0651785d7f9db0b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4b3cc5c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: enable prefer-regex-literals in eslint codebase (#12268) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/05faebb943456ad2b20117f3c8b3eccbe2e2fb03",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("05faebb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve suggestion testing experience (#12602) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/05f7dd53ed91a6e3be9eb40825fb6d2207f82209",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("05f7dd5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add suggestions for no-unsafe-negation (fixes #12591) (#12609) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d3e43f1c10c5e19f40e7b3d3944b87f1b0c9c075",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d3e43f1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update no-multi-assign explanation (#12615) (Yuping Zuo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/272e4db6074283bc01cc6ec72c9e396bb3c110e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("272e4db")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: no-multiple-empty-lines: Adjust reported "),
          _c("code", [_vm._v("loc")]),
          _vm._v(" (#12594) (Tobias Bieniek)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a258039e556075d7d1f955a79d094ea103ec165a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a258039")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-restricted-imports schema allows multiple paths/patterns objects (#12639) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/51f9620cc55cc091fe38dbe68e4633de06297b8c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("51f9620")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: improve report location for array-bracket-spacing (#12653) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/45364afc9c7f0251348cd1a7a13656c3816435d7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("45364af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-numeric-literals doesn't check types of literal arguments (#12655) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e3c570eaf3d1d44fb57bf42f1870887856e4c5a0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e3c570e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add example for expression option (#12694) (Arnaud Barré)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6b774ef0d849ccf5c1127b25e1fe7c3e438d586b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6b774ef")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add spacing in comments for no-console rule (#12696) (Nikki Nikkhoui)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7171fca6ef4e0e8f267658fc7d8f603f00eddd84",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7171fca")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: refactor regex in config comment parser (#12662) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1600648d2880ffb1e9e414b31ff0f66ead7167f9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1600648")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: Allow $schema in config (#12612) (Yordis Prieto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/acc0e47572a9390292b4e313b4a4bf360d236358",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("acc0e47")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support .eslintrc.cjs (refs eslint/rfcs#43) (#12321) (Evan Plaice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/49c1658544ace24b9aaaa301af0fc07a2ef3bf30",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("49c1658")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove bundling of ESLint during release (#12676) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/257f3d67905a52bf8602a5a5707c893cc90d7ca7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("257f3d6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: complete to move to GitHub Actions (#12625) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ab912f0ef709a916ab9a27ea09d9d7adf046fb2d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ab912f0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: 1tbs with allowSingleLine edge cases (refs #12284) (#12314) (Ari Kardasis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dd1c30e35f05ed332e2abbd3d4d53635efde74b8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dd1c30e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a230f8404e4f2423dd79378b065d24c12776775b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a230f84")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: include node version in cache (#12582) (Eric Wang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8b65f175dfb4fac11ed7184537be400ed14996fb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8b65f17")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove references to parser demo (#12644) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e9cef99e6ebec1faefdb576ca597e81ae4f04afd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e9cef99")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: wrap {{}} in raw liquid tags to prevent interpolation (#12643) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e70745325ff9e085acc6843dd8bfae5550645d4f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e707453")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix configuration example in no-restricted-imports (fixes #11717) (#12638) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/19194cec724e016df02376bbeae31171be6f0bdf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("19194ce")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add tests to cover default object options in comma-dangle (#12627) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6e36d12d95e76022172fd0ec8a5e85c22fde6a8a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6e36d12")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: do not recommend require-atomic-updates (refs #11899) (#12599) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.7.2 - November 30, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bc435a93afd6ba4def1b53993ef7cf8220f3f070",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bc435a9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: isSpaceBetweenTokens() recognizes spaces in JSXText (fixes #12614) (#12616) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4928d513b4fe716c7ed958c294a10ef8517be25e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4928d51")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: don't ignore the entry directory (fixes #12604) (#12607) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b41677ae2a143790b19b0e70391a46ec6c8f5de1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b41677a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Clarify suggestion's data in Working with Rules (refs #12606) (#12617) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ea16de4e7c6f661398b0b7843f95e5f307c89551",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ea16de4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Support tagged template literal generics in no-unexpected-multiline (#11698) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fa6415d5b877370374a6a530a5190ab5a411b4dc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fa6415d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e1e158b4d7bd61e812723b378d2c391295da43a5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e1e158b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.7.1 - November 24, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dd1e9f4df2103c43509a54b0ad5f9106557997f9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dd1e9f4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: revert changes to key-spacing due to regression (#12598) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c644b5429e5bc8a050afd70c99ec82035eb611fa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c644b54")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.7.0 - November 22, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/312a88f2230082d898b7d8d82f8af63cb352e55a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("312a88f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add grouped-accessor-pairs rule (fixes #12277) (#12331) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5c68f5feeb4a6c0cb53ff76b2fd255b5bfa69c93",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5c68f5f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add 'lexicalBindings' to no-implicit-globals and change messages (#11996) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6eaad964ff159d0a38de96c1104782ffe6858c78",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6eaad96")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" New: Add suggestions API (#12384) (Will Douglas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b336fbedecd85731611fdc2dfd8edb635a8b1c39",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b336fbe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: indent rule with JSX spread props (#12581) (Nathan Woltman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/97c745dc277febbea82552a4d9186e3df847f860",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("97c745d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Report assignment expression location in no-cond-assign (#12465) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0f01f3d0807c580631c2fdcff29192a64a870637",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0f01f3d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: Check member expressions with "),
          _c("code", [_vm._v("this")]),
          _vm._v(" in operator-assignment (#12495) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/62c7038a493d89e4a7b14ac673a063d09d04057b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("62c7038")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: invalid token checking in computed-property-spacing (fixes #12198) (#12533) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4f8a1ee1c26ccb5882e5e83ea7eab2f406c7476b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4f8a1ee")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add enforceForClassMembers option to no-useless-computed-key (#12110) (ark120202)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1a2eb99f11c65813bba11d6576a06cff2b823cc9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1a2eb99")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: new rule no-constructor-return (fixes #12481) (#12529) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ca3b2a62c9e829dc4534bca3643d6bc729b46df0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ca3b2a6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: ignorePatterns in config files (refs eslint/rfcs#22) (#12274) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/60204a3620e33a078c1c35fa2e5d839a16c627ff",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("60204a3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Added another Textmate 2 bundle. (#12580) (Ryan Fitzer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/62623f9f611a3adb79696304760a2fd14be8afbc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("62623f9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: preserve whitespace in multiline-comment-style (fixes #12312) (#12316) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/17a8849491a983f6cb8e98da8c0c9d52ff5f2aa6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("17a8849")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-dupe-else-if rule (fixes #12469) (#12504) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/41a78fd7ce245cad8ff6a96c42f5840688849427",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("41a78fd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve location for semi and comma-dangle (#12380) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0a480f8307a0e438032f484254941e6426748143",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0a480f8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Docs: Change "Code Conventions" link in pull-requests.md (#12401) (Denis Sikuler)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fed20bb039cf9f53adfcf93e467f418c5e958f45",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fed20bb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: require-await crash on global await (#12571) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b8030fc23e88f57a04d955b3befd1ab0fc2c5d10",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b8030fc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: deprecate personal config (fixes #11914, refs eslint/rfcs#32) (#12426) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/40c8c3264c7c383d98c9faf9c4cb4f8b75aee40f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("40c8c32")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: improve report location for object-curly-spacing (#12563) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1110045e0d28a461e75d2f57d5f01533d59ef239",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1110045")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: ignore marker-only comments in spaced-comment (fixes #12036) (#12558) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6503cb8d99e549fece53b80b110e890a7978b9fd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6503cb8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Fix uglified object align in key-spacing (fixes #11414) (#12472) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/40791af69efde1701690637603ad37d41e15a727",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("40791af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify ignoreDestructuring option in the camelcase rule (#12553) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/07d398d91d5b6d0247e58b1f8ea64bb5acd570a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("07d398d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add GitHub organization to Sponsor button (#12562) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a47770706ac59633dcd73e886d1a7282b324ee06",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a477707")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Format style guide links so they can be clicked (#12189) (Ivan V)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0f7edefdc1576d5e3e7ef89083002b0a4a31f039",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0f7edef")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: add react plugin config for eslint init (#12446) (Ibrahim Rouis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/448ff1e53734c503fb9e7e6802c1c7e441d4c019",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("448ff1e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Report '\\08' and '\\09' in no-octal-escape (fixes #12080) (#12526) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/45aa6a3ba3486f1b116c5daab6432d144e5ea574",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("45aa6a3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add no-setter-return rule (fixes #12285) (#12346) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0afb518d1f139376245613dddd8eaef32b52d619",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0afb518")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: invalid autofix in function-call-argument-newline (fixes #12454) (#12539) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/90305e017c2c5fba0b4b62f41b180910b4baeedb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("90305e0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Depcrecate isSpaceBetweenTokens() (#12519) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/41b1e4308c1cb01c8b00cc8adc36440e77854117",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("41b1e43")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: add option for camelcase (fixes #12527) (#12528) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f49f1e0a69afa49f6548af7b2c0e6347e1ea022d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f49f1e0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: upgrade optionator to avoid license issue (fixes #11536) (#12537) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0286b5730501b391c74e069db46849f0de0885d2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0286b57")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Clean up Getting Started Guide (#12544) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/575a98d724b2688f1e9c83744c5dc9ffe9a7bfb4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("575a98d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add funding field to package.json (#12543) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9e29e189752f06362fd1956659e07834efb746a5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9e29e18")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: sourceCode#isSpaceBetweenTokens() checks non-adjacent tokens (#12491) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/586855060afb3201f4752be8820dc85703b523a6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5868550")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: add notice about "),
          _c("code", [_vm._v("function")]),
          _vm._v(" keyword in keyword-spacing (#12524) (Pig Fang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bb556d5fd735ad2dcea322082edcc07a58105ce9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bb556d5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: curly "),
          _c("code", [_vm._v("multi")]),
          _vm._v(
            " reports single lexical declarations (fixes #11908) (#12513) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ac606217d4beebc35b865d14a7f9723fd21faa48",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ac60621")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: unexpected autofix in prefer-const (fixes #12514) (#12521) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/990065e5f58b6cc6922ab6cee5b97bfc56a6237a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("990065e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: curly multi-or-nest flagging semis on next line (fixes #12370) (#12378) (cherryblossom000)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/084a8a63a749232681fefe9bdac6802efdcdc8a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("084a8a6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: no-cond-assign with "),
          _c("code", [_vm._v("always")]),
          _vm._v(
            " option reports switch case clauses (#12470) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7e41355b19a8ef347620dd7c0dde491c3460937b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7e41355")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve report location for space-infix-ops (#12324) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/94ff921689115f856578159564ee1968b4b914be",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("94ff921")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add capIsConstructor option to no-invalid-this (fixes #12271) (#12308) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de65de6e488112a602949e6a5d27dd4c754b003c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de65de6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add prefer-exponentiation-operator rule (fixes #10482) (#12360) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c78f4a73de68f81cd41132b46d4840b91599d599",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c78f4a7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Allow JSX exception in no-inline-comments (fixes #11270) (#12388) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e17fb90f5817d16081e690eb06b7720afcb9fa2a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e17fb90")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: allowAfterThisConstructor for no-underscore-dangle (fixes #11488) (#11489) (sripberger)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/287ca562811d037bde09a47af7f5b9c7b741e022",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("287ca56")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: update CI for Node.js 13 (#12496) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/98e1d50273f31c2a7b59772298280ed7305274c8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("98e1d50")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: globals to v12.1.0 (#12296) (Tony Brix)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8ac71a3c89a9db13706a44b23d1b509b65185113",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8ac71a3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4e142ea411dfb692b6e2a69cd5f1204ade4dd58a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4e142ea")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.6.0 - October 25, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/39dfe0880fa934e287e8ea1f7b56d5cba8d43765",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("39dfe08")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: false positives in function-call-argument-newline (fixes #12123) (#12280) (Scott O'Hara)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4d842105c9c82026be668d7425213138903d4d41",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4d84210")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve report location for no-trailing-spaces (fixes #12315) (#12477) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c6a7745a1371a85932bfae5fec039d1b6fcfc128",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c6a7745")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-trailing-spaces false negatives after comments (fixes #12479) (#12480) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0bffe953d2752dd2d3045f2f8771c96b6cee8fc4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0bffe95")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-misleading-character-class crash on invalid regex (fixes #12169) (#12347) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c6a9a3bc58b69dbf9be9cd09b0283c081ca211e7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c6a9a3b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add enforceForIndexOf option to use-isnan (fixes #12207) (#12379) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/364877b2504e8f7ece04770b93d517e2f27458d0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("364877b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: measure plugin loading time and output in debug message (#12395) (Victor Homyakov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1744faba3c93c869f7dbbf0a704d32e2692d6856",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1744fab")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: operator-assignment removes and duplicates comments (#12485) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/52ca11a66ab6c2fb5a71d8b9869482f14f98cb9d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("52ca11a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: operator-assignment invalid autofix with adjacent tokens (#12483) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0f6d0dcdf5adc30079a7379bbf605a4ef3887a85",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0f6d0dc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: CLIEngine#addPlugin reset lastConfigArrays (fixes #12425) (#12468) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/923a8cb752b8dee1e622c5fd36f3f53288e30602",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("923a8cb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Fix lint failure in JSDoc comment (#12489) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aac3be435cccc241781150fcac728df04d086fa8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aac3be4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add ignored prop regex no-param-reassign (#11275) (Luke Bennett)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e5382d6e4eb1344f537b6f107535269e9939fcb8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e5382d6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Remove unused parameter in dot-location (#12464) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/49faefbee3fc7daaf2482d9d7d23513d6ffda9e8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("49faefb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-obj-calls false positive (fixes #12437) (#12467) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b3dbd9657bbeac6571111a4429b03fc085ba6655",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b3dbd96")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: problematic installation issue (fixes #11018) (#12309) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cd7c29b17085c14c9cf6345201c72a192c0d0e0c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cd7c29b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8233873b8e5facd80ab7b172bff1e896a9c5fd39",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8233873")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add note about Node.js requiring SSL support (fixes #11413) (#12475) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/89e8aafcc622a4763bed6b9d62f148ef95798f38",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("89e8aaf")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: improve report location for no-tabs (#12471) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7dffe482d646d4e5f94fa87a22f3b5b2e0a4b189",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7dffe48")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Enable function string option in comma-dangle (fixes #12058) (#12462) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e15e1f933f287d274a726e7f0f0a1dd80f0964af",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e15e1f9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix doc for no-unneeded-ternary rule (fixes #12098) (#12410) (Sam Rae)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b1dc58f0a717cb3d19300c845ca23a21ceb610d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b1dc58f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/61749c94bd8a2ebcdfb89e0cd48c4a029a945079",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("61749c9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Provide debug log for parser errors (#12474) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7c8bbe0391944e1f92e083a04715bf4b3fe6be5d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7c8bbe0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: enforceForOrderingRelations no-unsafe-negation (fixes #12163) (#12414) (Sam Rae)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/349ed6700e1155384597e1e6035550a96cb8a42d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("349ed67")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve report location for no-mixed-operators (#12328) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a102eaa9ac19e1c6d92f79a4033e9048cfb64c0d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a102eaa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-numeric-literals invalid autofix with adjacent tokens (#12387) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6e7c18ddb30b32ee5b2e842cc8258aa7aebb7445",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6e7c18d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: enforceForNewInMemberExpressions no-extra-parens (fixes #12428) (#12436) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/51fbbd78f98f223d17071650f5117d07f60dadc2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("51fbbd7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: array-bracket-newline consistent error with comments (fixes #12416) (#12441) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e657d4ccb9f3dd5cacceaaa40ffe24ac29a1349a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e657d4c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: report full dot location in dot-location (#12452) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2d6e345e3c2626b0f2252f22cfaffdf53ea0871a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2d6e345")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: make isSpaceBetweenTokens() ignore newline in comments (#12407) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/84f71de0e686e0fe37b83d6728ce1825caaa44fb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("84f71de")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: remove default overrides in keyword-spacing (fixes #12369) (#12411) (YeonJuan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/18a0b0e3df927428a22b5b5295f9faee4bd57246",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("18a0b0e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve report location for no-space-in-parens (#12364) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d61c8a5a75447a36276f2d4f84afb3e1129618da",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d61c8a5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve report location for no-multi-spaces (#12329) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/561093fc4267a4ae317d63bc9f103020fad88802",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("561093f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: bump inquirer to ^7.0.0 (#12440) (Joe Graham)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fb633b2bbd0a390b247047524fdd1f612dbab803",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fb633b2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add a script for testing with more control (#12444) (Eric Wang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/012ec5151113a2be06fc0e4cd208d714e52dbc57",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("012ec51")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/874fe1642a10a0fb937ccccdd4d22343b84f80dc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("874fe16")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" New: pass cwd from cli engine (#12389) (Eric Wang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b962775b8cb7c90985a5ab63e56744bb2ba79644",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b962775")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-self-assign should detect member expression with this (#12279) (Tibor Blenessy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/02977f25a922dd0b8617c16116bb4364d0f30e94",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("02977f2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Clarify "),
          _c("code", [_vm._v("eslint:recommended")]),
          _vm._v(" semver policy (#12429) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/97045ae0805e6503887eef0b131dcb9e70b6d185",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("97045ae")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fixes object type for "),
          _c("code", [_vm._v("rules")]),
          _vm._v(' in "Use a Plugin" (#12409) (Daisy Develops)')
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/24ca088fdc901feef8f10b050414fbde64b55c7d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("24ca088")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix typo in v6 migration guide (#12412) (Benjamim Sonntag)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b094008fb196dc1de5b4c27b7dbf0bcbb4b7b352",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b094008")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update version parameter name (#12402) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e5637badd42f087d115f81575b832097fe6fe554",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e5637ba")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: enable jsdoc/require-description (#12365) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d31f3370396ec4868722bdc044aa697b135ac183",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d31f337")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7ffb22f61cf1622511a7fe42b5ead7c3b216df5e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7ffb22f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Clean up inline directive parsing (#12375) (Jordan Eldredge)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/84467c07461cc47ee43807ba9014e13700473c5c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("84467c0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix wrong max-depth example (fixes #11991) (#12358) (Gabriel R Sezefredo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/364234262efabd91fa8bd53161d9d3e1e37e7944",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3642342")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix minor formatting/grammar errors (#12371) (cherryblossom000)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c47fa0dfc76211b3b0e5649c63acdd9606ce0eca",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c47fa0d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix missing word in sentence (#12361) (Dan Boulet)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8108f49f9fa0c2de80b3b66c847551beff585951",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8108f49")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: enable additional eslint-plugin-jsdoc rules (#12336) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b718d2e6c9fe3fc56aa7cfc68b1a40b5cd8a7c01",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b718d2e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update issue template with --eslint-fix flag (#12352) (James George)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/20ba14dc78fc2654b2920d14877dde21c6c10da4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("20ba14d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/566a947f67c8038a50e204d68723519778a78a0f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("566a947")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/070cbd0a2ec07831962a25c4276d08e097302416",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("070cbd0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.5.1 - September 30, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0d3d7d9cdd83a7f0e035c95f716a91b9ecc4868b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0d3d7d9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix typo in no-magic-numbers (#12345) (Josiah Rooney)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/447ac877e8ca2858d61b1e983f72d39e3e2ca74d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("447ac87")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-useless-rename handles ExperimentalRestProperty (fixes #12335) (#12339) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b6ff73cad13282fbfc91186cf4bc2f20278a8936",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b6ff73c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.5.0 - September 29, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/73596cbdf0a12e2878b2994783f9b969b0c5fbeb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("73596cb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add enforceForSwitchCase option to use-isnan (#12106) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d592a248d67920f7200925c003f10853d29f1f8d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d592a24")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: exclude "),
          _c("code", [_vm._v("\\u000d")]),
          _vm._v(
            " so new line won't convert to text (fixes #12027) (#12031) (zamboney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e85d27af427d6185ac553a0d801b5103153426d4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e85d27a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-regex-spaces false positives and invalid autofix (fixes #12226) (#12231) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b349bf79ad56dded826bc99cb52c3551af34fa63",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b349bf7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-named-capture-group incorrect locations (fixes #12233) (#12247) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7dc1ea9a1b9a21daaffcf712ba9c0e91af81b906",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7dc1ea9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-useless-return autofix removes comments (#12292) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0e68677ec0aaf060a071ecf71e4af954dddb6af0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0e68677")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-extra-bind autofix removes comments (#12293) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6ad7e864303e56a39c89569d50c6caf80752ee21",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6ad7e86")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-extra-label autofix removes comments (#12298) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/acec201f06df780791179ad92cfc484f9b6d23d4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("acec201")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-undef-init autofix removes comments (#12299) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d89390b75e3e9993f347387a49b0ac5550f45c7f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d89390b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: use async reading of stdin in bin/eslint.js (fixes #12212) (#12230) (Barrie Treloar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/334ca7c8b9c18ac097849c1cefaa43097a4e51dc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("334ca7c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-useless-rename also reports default values (fixes #12301) (#12322) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/41bfe919c06932b7e58cd9ead20157e06656160a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("41bfe91")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Fix handling of chained new expressions in new-parens (#12303) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/160b7c46b556ccb6023eb411a8be8801a4bda6df",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("160b7c4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: add autofix npm script (#12330) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/04b6adb7f1bcb2b6cb3fa377b1ca4cecd810630e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("04b6adb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: enable eslint-plugin-jsdoc (refs #11146) (#12332) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9b86167e6f053e4a72bf68ebc79db53903f7f8c3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9b86167")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add new ES environments to Configuring ESLint (#12289) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c9aeab21a71c6743f51163b7a8fdf4f0cbfcdbde",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c9aeab2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add supported ECMAScript version to README (#12290) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8316e7be5a9429513d7ecf2ee2afc40ab4415b8f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8316e7b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-useless-rename autofix removes comments (#12300) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/29c12f18726a3afb21fc89ab1bdacc6972d49e68",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("29c12f1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: cache results in runtime-info (#12320) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f5537b2ed0b0b5e51a34c22cdd4ebfd024eaea3d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f5537b2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-numeric-literals autofix removes comments (#12313) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/11ae6fcb5d5503e5dea41c02780369efe51f0bb9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("11ae6fc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Fix call, new and member expressions in no-extra-parens (#12302) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a7894ebb43523152d36720efa770bb1fe8b58c07",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a7894eb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" New: add --env-info flag to CLI (#12270) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/61392ff5ec660bfc01ac2ff0e9660d259cf88fd6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("61392ff")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2c6bf8ea9c8a8f94746f980bd5bea0a8c5c4d6b7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2c6bf8e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: English fix (#12306) (Daniel Nixon)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6f118778366613fc53036cb6a7537e1b4c6e7af8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6f11877")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2e202ca2228846e6226aa8dd99c614d572fb86a8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2e202ca")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix links in array-callback-return (#12288) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e39c6318af0fd27edd5fd2aaf2b24a3e204005dd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e39c631")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add example for CLIEngine#executeOnText 3rd arg (#12286) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d4f9a16af7e00021e2ed63823d9c2f149bc985d6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d4f9a16")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: add support for JSXFragments in indent rule (fixes #12208) (#12210) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c6af95f5bf1ef10f08545d54fd52b98e85fdf7f7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c6af95f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8cadd5229b7372aed0d4785dcae15532a399bf55",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8cadd52")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f9fc695d77c19cd5ecb3f0e97e1ea124c8543409",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f9fc695")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: enable default-param-last (#12244) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9984c3e27c92de76b8c05a58525dbcea12b10b83",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9984c3e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.4.0 - September 13, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e915fffb6089a23ff1cae926cc607f9b87dc1819",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e915fff")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Improve examples and clarify default option (#12067) (Yuping Zuo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/540296fcecd232a09dc873a5a22f5839b59b7842",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("540296f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: enforceForClassMembers option to accessor-pairs (fixes #12063) (#12192) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d3c2334646eae9287d5be9e457d041e445efb512",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d3c2334")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: flag nested block with declaration as error (#12193) (David Waller)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b2498d284b9c30ed1543429c2f45d9014e12fe22",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b2498d2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Fix handling of property names in no-self-assign (#12105) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1ee61b06715fcc750be2c923034a1e59ba663287",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1ee61b0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: enforceForClassMembers computed-property-spacing (fixes #12049) (#12214) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/520c92270eed6e90c1a796e8af275980f01705e0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("520c922")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Added naming convention details to plugin usage (#12202) (Henrique Barcelos)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f826eabbeecddb047f58f4e7308a14c18148d369",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f826eab")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Allow line comment exception in object-curly-spacing (fixes #11902) (#12216) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/db2a29beb0fa28183f65bf9e659c66c03a8918b5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("db2a29b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: indentation of comment followed by semicolon (fixes #12232) (#12243) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ae17d1ca59dd466aa64da0680ec2453c2dc3b80d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ae17d1c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-sequences is reporting incorrect locations (#12241) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/365331a42e22af5a77ac9cfa9673d6a8f653eb5a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("365331a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: object-shorthand providing invalid fixes for typescript (#12260) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1c921c6dfd7ddfb0308c8103e53d32c1241475f0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1c921c6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: add no-import-assign (fixes #12237) (#12252) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3be04fd6a4e7b3f5a5ecb845a29cf29b71fe2dfb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3be04fd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add prefer-regex-literals rule (fixes #12238) (#12254) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/37c0fdeb87b92a0b779b125adf45535b79b65757",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("37c0fde")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Report global Atomics calls in no-obj-calls (fixes #12234) (#12258) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/985c9e5eba351965a8a1491a41dbdcc78154b8f4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("985c9e5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: space-before-function-paren autofix removes comments (fixes #12259) (#12264) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/01da7d04c4e5a7376cf241ec02db7971726a1bf9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("01da7d0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: eqeqeq rule reports incorrect locations (#12265) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/319e4d8386ea846928f0f906c251b46043a53491",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("319e4d8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: adding finally example (#12256) (Jens Melgaard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d52328f012f3704c7d1ce39427e63f80531c7979",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d52328f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix no-sequences "),
          _c("code", [_vm._v("with")]),
          _vm._v(" examples (#12239) (Milos Djermanovic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a41fdc07404a7675d14183fab245fb8f49dcb858",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a41fdc0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Remove autofixer for no-unsafe-negation (#12157) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e38f5fdfc786363a3eae642f1a69a8725600aa61",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e38f5fd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-octal-escape false negatives after \\0 (#12079) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9418fbe0eb31cace3debe27b620709628df2fad7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9418fbe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/acc5ec5082aed466a29899f651e6767b39155aec",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("acc5ec5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/460c5ad176eaf39ff579cd96b3bcbe0539093f8f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("460c5ad")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0313441d016c8aa0674c135f9da67a676e766ec5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0313441")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: add rule default-param-last (fixes #11361) (#12188) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7621f5d2aa7d87e798b75ca47d6889c280597e99",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7621f5d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: add more specific linting messages to space-in-parens (#11121) (Che Fisher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/21eb9044135c01b6c12188517bba840614483fc6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("21eb904")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: basePath of OverrideTester (fixes #12032) (#12205) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/86e5e657ea3fbf12b10524abcbc197afd215a060",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("86e5e65")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2b1a13fa0de8360586857f3ced8da514c971297d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2b1a13f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-extra-boolean-cast reports wrong negation node (fixes #11324) (#12197) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ba8c2aa0154561fbeca33db0343cb39a7fbd9b4f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ba8c2aa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a0a9746724ccd22c721ddc1b25c566aa9acea154",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a0a9746")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix link in no-irregular-whitespace.md (#12196) (Timo Tijhof)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e10eebab4abd193dee697c4de7fb2d95bbab2d8c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e10eeba")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: quotes autofix produces syntax error with octal escape sequences (#12118) (Milos Djermanovic)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.3.0 - August 30, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0acdefb97f35bb09db2910540c70dc377a01ad62",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0acdefb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: refactor code (#12113) (James George)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/52e2cf50b35d57fb8466e0bcd0581eff1590fb4c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("52e2cf5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: reportUnusedDisableDirectives in config (refs eslint/rfcs#22) (#12151) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/020f9526b618a191566acea3e17e20815d484c58",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("020f952")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: enforceForSequenceExpressions to no-extra-parens (fixes #11916) (#12142) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aab1b840f9cffb2a76a5c9fe1852961be71dc184",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aab1b84")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: reset to the default color (#12174) (Ricardo Gobbo de Souza)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4009d39aa59451510aa24911e758d664f216289a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4009d39")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: yoda rule produces invalid autofix with preceding yield (#12166) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/febb6605d350c936d64cb73e694482cfbb20b29c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("febb660")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-extra-boolean-cast invalid autofix with yield before negation (#12164) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4c0b70b869c16647f7af6de9d5c5479fc19f49db",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4c0b70b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: support TypeScript at config initializer (fixes #11789) (#12172) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/94e39d9f782f45db86a079e07508d63040118ef1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("94e39d9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: use GitHub Actions (#12144) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e88f305df9d454868624c559fd93b981a680c215",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e88f305")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: support es2020 in fuzz (#12180) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/00d2c5be9a89efd90135c4368a9589f33df3f7ba",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("00d2c5b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: corrected class extension example (#12176) (Marius M)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/31e542819967b2aa1191e1abaa1c4a49fddbe3cf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("31e5428")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Fix wrong error object keys in test files (#12162) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/197f4432fca70a574028e5568c48afad12213224",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("197f443")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: func-name-matching crash on descriptor-like arguments (#12100) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/644ce3306748a33b74fc6a94be0267c2c9f19348",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("644ce33")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-self-assign false positive with rest and spread in array (#12099) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a81d2636ce41fb34d6826c2e9857814e11cb9c30",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a81d263")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: fix message of function-paren-newline (#12136) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/77f8ed1ad9656c526217ce54a6717fa232d522c8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("77f8ed1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: update blogpost template (#12154) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6abc7b72dfb824a372379708ca39340b2c7abc03",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6abc7b7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Document the exception in no-unsafe-negation (#12161) (Milos Djermanovic)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.2.2 - August 23, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0e0b784b922051c2a1d39dd8160382114b645800",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0e0b784")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: espree@^6.1.1 (#12158) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/04e859f228d081efd3af6edb22563dbc775f8d1d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("04e859f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/34783d10ff9b58a3c1e39a36e10864caeb9f66e0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("34783d1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b809e72221bc658e5a42bfd4b8723d3771571f9e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b809e72")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.2.1 - August 20, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8c021b5917b3aa3c578ffe3972106d0a6bcf0838",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8c021b5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: eslint-utils 1.4.2 (#12131) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e82388bd87717430200ec554634cc08806e38d3c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e82388b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4aeeeedb656ee3519ea82ebf0cb41ca801215046",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4aeeeed")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: update docs for ecmaVersion 2020 (#12120) (silverwind)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6886148d1f528659ec3e125f61ef7a5f4c67556d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6886148")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add duplicate keys limitation to accessor-pairs (#12124) (Milos Djermanovic)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.2.0 - August 18, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fee6acbe13cecd4c028e681e185fc6a6d6ba9452",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fee6acb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support bigint and dynamic import (refs #11803) (#11983) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/afd8012c2797f2f5bf3c360cb241ea2ba6e1a489",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("afd8012")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: noInlineConfig setting (refs eslint/rfcs#22) (#12091) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3d12378221961439c27ddae0ecda9845ac575107",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3d12378")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Fix accessor-pairs to enforce pairs per property in literals (#12062) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8cd00b308987e0db0bdb2e242bf13b2b07b350bd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8cd00b3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" New: function-call-argument-newline (#12024) (finico)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/30ebf929f60684520b1201c1adfd86214c19d614",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("30ebf92")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-template autofix produces syntax error with octal escapes (#12085) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/13c3988a4001ae368ea7b6c8d3dd0abfa7c6cf64",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("13c3988")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Check literal type explicitly in dot-notation (#12095) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3e5ceca4d2284b55a2292a1d3de9aa4cdf6fa213",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3e5ceca")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Handle empty string property names in getFunctionNameWithKind (#12104) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9a043ffbb864fc65baeb16fe5668435e3b7cfe34",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9a043ff")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-duplicate-case false positives on Object.prototype keys (#12107) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fe631afee59641876598d19b1935967099cc6fa0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fe631af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: minor typo fix (#12112) (James George)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4cb78774f6cc687a3c8701462f8c7f7b587ecaf0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4cb7877")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: fix no-extra-parens ignores some nodes (#11909) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2dc23b81e54defbce7a70a7f26c2e4c7b692cf58",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2dc23b8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix no-dupe-keys false negatives on empty string names (#12069) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/19ab6666e8e4142a183bdee2be96e5bafbac0e21",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("19ab666")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: yoda exceptRange false positives on empty string property names (#12071) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d642150fe016608e71a1df2a72960e915b3cfbad",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d642150")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Check empty string property names in sort-keys (#12073) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/acce6de940e2b089ff5ba59e4518a54af1682d5e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("acce6de")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: class-methods-use-this reports 'undefined' names (#12103) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/92ec2cb1731b7b6e0ac66336d583fbb782504290",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("92ec2cb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Allow bind call with a single spread element in no-extra-bind (#12088) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfdb0c97003fc0e045aa6ed10b177c35305a6e46",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfdb0c9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-extra-boolean-cast invalid autofix for Boolean() without args (#12076) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/34ccc0cd81f495190e585c6efa8ae233d45bd3ed",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("34ccc0c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Remove TDZ scope type condition from no-unused-vars (#12055) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/01d38ce2faf0abbc9dd5d25694baeee131036165",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("01d38ce")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Remove TDZ scope from the scope manager interface documentation (#12054) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1aff8fc4f9394cd9126654a55f7f3a43ab1cf8f0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1aff8fc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: warn about mixing ternary and logical operators (fixes #11704) (#12001) (Karthik Priyadarshan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/11be2f8513bd61499f6247392a33ac0a26901c90",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("11be2f8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: do not recommend global-installed usage (#12016) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf31dab5d5982151e0cfcc32879e69a83180ec70",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf31dab")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-restricted-syntax - correct the schema (#12051) (Brad Zacher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fbec99ea3e39316791685652c66e522d698f52d8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fbec99e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: fix class-methods-use-this false negatives with exceptMethods (#12077) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fb08b7c9d28bc68864eb940e26df274059228b6a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fb08b7c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Remove readonly/writable global logic from no-undef (fixes #11963) (#12053) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5b5934b9513f9114f5bf8e12ff4f4981590d64d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5b5934b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/915676022a100ae5dba788fa3329d34b3c1f18d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9156760")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f5e0cc40795f175692acb05daaadb91e9e5ae5d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f5e0cc4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Check computed method keys in no-extra-parens (#11973) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d9614388df8cfb977842ed7ac4725d76a3e05df3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d961438")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix Incorrect Documentation (#12045) (Michael Miceli)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/887d08c244e32f1fc18359e63380e2cdb0cb3797",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("887d08c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d90183ff6757cff854f4ca4d25b835143dfb4b21",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d90183f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: add a case to func-names (#12038) (Chiawen Chen)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8a5b62de2ae574f416c0f8ad91205da9b1837275",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8a5b62d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: no use eslint.linter in code example (#12037) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/58317673210e48be3975e317c2c566fae155c94f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5831767")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: report location of func-names (fixes #12022) (#12028) (Pig Fang)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.1.0 - July 20, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8f86ccaa89daf10123370868c5dcb48c1fcbef7d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8f86cca")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: eslint-scope@^5.0.0 (#12011) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d08683e3c807f92daf266894093c70f8d5ac6afa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d08683e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: glob processing (fixes #11940) (#11986) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfcf8b21011466b570b536ca31ec10fd228b3dca",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfcf8b2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: dot-location errors with parenthesized objects (fixes #11868) (#11933) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/79e8d099bbbebfa4d804484eeeeea9c074ede870",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("79e8d09")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: add parens for sequence expr in arrow-body-style (fixes #11917) (#11918) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/105c098f3cece8b83ab8d1566b8ea41dd94a60b9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("105c098")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: update docs for object-curly-spacing (fixes #11634) (#12009) (Chiawen Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c90a12c283698befcafd2c86f8bd8942428fe80b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c90a12c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update release script for new website repo (#12006) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e2c08a9c8d86238955ecc8fd5a626584ee91eba5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e2c08a9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b974fcbd3321ab382a914520018d4c051b2e5c62",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b974fcb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Check computed property keys in no-extra-parens (#11952) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/222d27c32a6d6d8828233b3b99e93ecefa94c603",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("222d27c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add for-in and for-of checks for props in no-param-reassign (#11941) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e4c450febc9bd77b33f6473667afa9f955be6b71",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e4c450f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: no-extra-parens autofix with "),
          _c("code", [_vm._v("in")]),
          _vm._v(
            " in a for-loop init (fixes #11706) (#11848) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2dafe2d288d1e0d353bb938d12a5da888091cfdb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2dafe2d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: prefer-const produces invalid autofix (fixes #11699) (#11827) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cb475fd8c0bbfcb00340459966b6780f39ea87a7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cb475fd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Cache file error handling on read-only file system. (fixes #11945) (#11946) (Cuki)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/89412c3cbc52e556dba590fa94e10bf40faf1fdf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("89412c3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fixed a typo (fixes #11999) (#12000) (Eddie Olson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6669f78a3dd305aef6191e7eea24fae2ae4fd2e8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6669f78")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: --init with Vue.js failed (fixes #11970) (#11985) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/93633c2b3716b17816bcb3dc221c49b75db41317",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("93633c2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: Upgrade lodash dependency (fixes #11992) (#11994) (Cyd La Luz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/776dae71f2f5c7b5f0650ea3c277eca26e324e41",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("776dae7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix wrong Node.js version in getting started (#11993) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4448261f5d217d8a06eb0ef898401928b54a34e3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4448261")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: some typos and optimization points (#11960) (Jason Lee)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2a10856d1ed5880a09a5ba452bd80d49c1be4e6c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2a10856")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add temporary test files to .gitignore (#11978) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d83b23382de3b80056a7e6330ed5846316c94147",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d83b233")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update path for release bundles (#11977) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1fb362093a65b99456a11029967d9ee0c31fd697",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1fb3620")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: creating of enabledGlobals object without prototype (fixes #11929) (#11935) (finico)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c2f2db97c6d6a415b78ee7b3e8924853d465e757",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c2f2db9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Replace global true and false with writable and readonly in rules (#11956) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/19335b8f47029b2f742d5507ba39484eaf68d07b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("19335b8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: actual messageId and expected messageId are switched in rule tester (#11928) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8b216e04fb0dd0a1a4d3730ebe4b24780020b09c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8b216e0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix incorrect example comments for unicode-bom rule (fixes #11937) (#11938) (Brandon Yeager)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cc3885b028e29ebc575c900f43af81cb0dabffb6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cc3885b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add v8-compile-cache to speed up instantiation time (#11921) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d8f26886f19a17f2e1cdcb91e2db84fc7ba3fdfb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d8f2688")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: deps (#11904) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e5f1ccc9e2d07ad0acf149027ffc382021d54da1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e5f1ccc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add 'stricter rule config validating' in migrating docs (#11905) (薛定谔的猫)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.0.1 - June 24, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b5bde0669bd6a7a6b8e38cdf204d8d4b932cea63",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b5bde06")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: --rulesdir option didn't work (fixes #11888) (#11890) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/13f041897ee31982808a57b4d06450b57c9b27dc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("13f0418")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: improve error message on --print-config (fixes #11874) (#11885) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/056c2aaf39a5f8d06de24f06946dda95032a0361",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("056c2aa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: improve diagnostics for shareable-config-missing errors (#11880) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/566b7aa5d61fb31cd47fe4da7820b07cf9bde1ec",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("566b7aa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update no-confusing-arrow with the new default option (#11886) (Yuping Zuo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d07f3fae19b901c30cf4998f10722cb3182bd237",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d07f3fa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: CLIEngine#getRules() contains plugin rules (fixes #11871) (#11872) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/21f4a8057ccc941f72bb617ae3b5c135a774f6c0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("21f4a80")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix inconsistent linking in migration guide (#11881) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f3a0774a8879b08777a4aedc76677f13d5156242",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f3a0774")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix typo in 6.0.0 migration guide (#11870) (Kevin Partington)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.0.0 - June 21, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/81aa06b4cc49e9c15234a2c4d27659a03fea53d8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("81aa06b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: espree@6.0.0 (#11869) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5f022bc91d0d93d140876ceb1ee4e08b1b7cfd49",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5f022bc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-else-return autofix produces name collisions (fixes #11069) (#11867) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ded9548d881b15e771ca79b844e8159601f30f70",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ded9548")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: multiline-comment-style incorrect message (#11864) (golopot)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cad074d4ddb34a59183b5965ca50170713b5a711",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cad074d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add JSHint W047 compat to no-floating-decimal (#11861) (Timo Tijhof)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/41f6304ce641a82ee729251b448dceb9fb0d501d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("41f6304")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: sinon (#11855) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/167ce87e908ec04b0d3d79960278d45c883c4285",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("167ce87")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove unuseable profile command (#11854) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c844c6f2ff314cfa8c6ca0e35a1ef58b7e297b79",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c844c6f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: max-len properly ignore trailing comments (fixes #11838) (#11841) (ZYSzys)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1b5661ae467c227c0239e06cc1466480004aa799",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1b5661a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-var should not fix variables named 'let' (fixes #11830) (#11832) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4d75956147b6fd662ee90eb21d3f762816463b88",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4d75956")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: CI with Azure Pipelines (#11845) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1db346220889305a427b45a00afcf362b81b3767",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1db3462")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: rm superfluous argument & fix perf-multifiles-targets (#11834) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c57a4a4a993193c4208c6419df331a7bc644a536",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c57a4a4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: @babel/polyfill => core-js v3 (#11833) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/65faa04e8b42eecd4505111bbff296951179f033",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("65faa04")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Clarify prefer-destructuring array/object difference (fixes #9970) (#11851) (Oliver Sieweke)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/81c382378923a45015bafe58362f6c8faa5c3d5f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("81c3823")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: require-atomic-updates reports parameters (fixes #11723) (#11774) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aef8ea1a44b9f13d468f48536c4c93f79f201d9b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aef8ea1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.0.0-rc.0 - June 9, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f403b07283f91f1285d8318d6acea851dd765755",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f403b07")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: introduce minKeys option to sort-keys rule (fixes #11624) (#11625) (Christian)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/87451f4779bc4c0ec874042b6854920f947ee258",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("87451f4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-octal should report NonOctalDecimalIntegerLiteral (fixes #11794) (#11805) (Milos Djermanovic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e4ab0531c4e44c23494c6a802aa2329d15ac90e5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e4ab053")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Update: support "bigint" in valid-typeof rule (#11802) (Colin Ihrig)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e0fafc8ef59a80a6137f4170bbe46582d6fbcafc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e0fafc8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: removes unnecessary assignment in loop (#11780) (Dimitri Mitropoulos)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/20908a38f489c285abf8fceef4d9d13bf8b87f22",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("20908a3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: removed '>' prefix from from docs/working-with-rules (#11818) (Alok Takshak)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1c43eef605a9cf02a157881424ea62dcae747f69",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1c43eef")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/21f3131aa1636afa8e5c01053e0e870f968425b1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("21f3131")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: "),
          _c("code", [_vm._v("overrides")]),
          _vm._v(
            " handle relative paths as expected (fixes #11577) (#11799) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5509cdfa1b3d575248eef89a935f79c82e3f3071",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5509cdf")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: fails the test case if autofix made syntax error (fixes #11615) (#11798) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cb1922bdc07e58de0e55c13fd992dd8faf3292a4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cb1922b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: show custom message for namespace import (fixes #11580) (#11791) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/37e5193102d7544f155cdcb09c7c50dc602914d4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("37e5193")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: add "),
          _c("code", [_vm._v("endColumn")]),
          _vm._v(" to no-useless-escape (fixes #11629) (#11790) (Pig Fang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ad4b048c6d034cbd7fd97deb4390d059bde8803f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ad4b048")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: Fix typo in blog post template (fixes #11614) (#11782) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9590587cef74c936ef9b7ce2d22a71e2fd0fbbc4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9590587")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: improve reported location of arrow-parens (fixes #11773) (#11775) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d662b178c7dad193201564d16f7977af2f81ebcf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d662b17")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Add classname attribute to JUnit testcase (refs #11068) (#11683) (Fabio Pitino)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8eaa9b259dc08dfb48269b1e4413d0d47698ed87",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8eaa9b2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: remove incorrect comment (#11769) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4039a49177f2fefacd747050b420c0c4560b7d4b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4039a49")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: add .github/funding.yml (#11764) (Toru Nagashima)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.0.0-alpha.2 - May 25, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9b87fee9dc7b1d99a50b924cb6b81255ebb5c4a2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9b87fee")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Fix formatter documentation generation (#11767) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f11620848733a3a6f58811d9bb2c3e748d6135ac",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f116208")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Fix site generation script for releases (#11766) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf9cce81aa68e9bc23840530cb33f4c3f551fb1e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf9cce8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add never option for new-parens (refs #10034) (#11379) (pfgithub)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b5fa1491d2371a721e4b5029e797ae98fd30fed2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b5fa149")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: multiple processors support (fixes #11035, fixes #11725) (#11552) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2d32a9e8dd10a5927576bd50d184876c775da4af",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2d32a9e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: stricter rule config validating (fixes #9505) (#11742) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/71716eba3155266d777b994a38af524952e97696",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("71716eb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: add fixer for no-div-regex rule (fixes #11355) (#11744) (joe-re)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/53f7f4cf8d8b66a1911db56e4f72764388a21cc4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("53f7f4c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Update: Uniform messages for the rules in "complexity" section (#11759) (Igor Novozhilov)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0a801d702dc41dae7eac0c802b822493ddc3ac41",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0a801d7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: improve perf test (#11756) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/45bd336e647a6fa8a502488e5cbd27ba02712083",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("45bd336")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add about RuleTester's parser to migration guide (fixes #11728) (#11761) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1374be44f7ec4b8c913c52cc84debc4012c4f3ea",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1374be4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: add table of contents in readme (#11765) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/54e6edaa2f881aab530fa14e63d92e5e0e2ca55c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("54e6eda")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: extends in glob-based config (fixes #8813) (#11554) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ec105b24f7e036ecdc4267f018529ac3765e29d5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ec105b2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: typo in JSDoc on timing.display's return value (#11755) (Dimitri Mitropoulos)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e45cc3f3dc44f3a5b6b713a1bf5ce6e46d87ca49",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e45cc3f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: updated no-proto rule (fixes #11743) (#11746) (Francesco Trotta)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/15c6c6374c0425d5402142d012a541fa208bc9da",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("15c6c63")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: eslint-config-eslint require node >= 8 (#11718) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f9790ca1baec1275f3c946586766a5713258ac32",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f9790ca")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: typo: missing word in docs (#11750) (Dimitri Mitropoulos)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/219aecb78bc646d44bad27dc775a9b3d3dc58232",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("219aecb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: restructure files (#11555) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5dad0b1d80c9cf380c49f46266c35d461d3cecad",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5dad0b1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Unignoring directories in .eslintignore (fixes #11684) (#11685) (Mykola Bilochub)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/462509058e46770cf70307cf8dba279f0e73b967",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4625090")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: small fix about the migration guide (#11729) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0e89c73177398eaf978a50d5b0f79ff8e43512f2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0e89c73")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5a296fa0c9345ad1a55e2b257e5f6c9f05fff362",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5a296fa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7c8e86bf2c900cec7cd1dfd529a8c77cc81ef34c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7c8e86b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: wrong 'plugin-missing' error on Node.js 12 (fixes #11720) (#11722) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/67c671fdc1c8b08cb8d263a9bb2151e3108c88b4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("67c671f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: ignore deprecated rules in fuzz tests (#11710) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/af81cb3ecc5e6bf43a6a2d8f326103350513a1b8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("af81cb3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: make fuzzer produce minimal reproducible examples of bugs (#11700) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.0.0-alpha.1 - May 10, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e84b6f8b171ba4266164688f76d5ee45d278e5c2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e84b6f8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix example in object-curly-newline docs (#11633) (golopot)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/252efd337b1441debb6d2cc8f51a625549b2c535",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("252efd3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: delete unnecessary duplicated question (fixes #11617) (#11618) (HelloRusk)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/21dd2116c70b93aa8dd50d2b15e202724b11486a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("21dd211")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: add --resolve-plugins-relative-to flag (#11696) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1a3a88df2f952c34631d8e1d83de47178826fce0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1a3a88d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Curly rule incorrectly flagging lexical declarations (fixes #11663) (#11675) (Brian Kurek)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f42d0afd89874b459fce1eb1998247d53f9aa42b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f42d0af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: lazy loading for rules (#11705) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f47d72ce2f2edb80cd38810894b9d4bda896bb29",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f47d72c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: not set ecmaVersion to 6 when sourceType=module (fixes #9687) (#11649) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9484e9ea188ff70683c3112e397c7fddcc3f8095",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9484e9e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: ignore return statements in dead code (fixes #11647) (#11688) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aae6f6525557ba06e73f051511646056313fcf91",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aae6f65")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: don't use deprecated API (#11689) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/483239ec74a0c13529fc99547a784b749f41dd54",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("483239e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: updated ImportDeclaration in docs-rules-indent (#11679) (Alok Takshak)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f5bae78c19d5359f67969a2ff344025082e253f4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f5bae78")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: fix CLIEngine tests when os.tmpdir is a symlink (#11697) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e4400b5a02602bba7f67ea4cb874c231903c546a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e4400b5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: require-atomic-updates false positive (fixes #11194, fixes #11687) (#11224) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6ae21a4bfe5a1566f787fbad798182a524b96d28",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6ae21a4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: fix config loading (fixes #11510, fixes #11559, fixes #11586) (#11546) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bc0819c94aad14f7fad3cbc2338ea15658b0f272",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bc0819c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/036a188143677384f720ff18071fc4206c54500b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("036a188")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4b3b036d6240cdbc2d52e670de36b1117f5f34d7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4b3b036")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: replace "),
          _c("code", [_vm._v("var")]),
          _vm._v(" with "),
          _c("code", [_vm._v("const")]),
          _vm._v(" in code examples (#11655) (Niyaz Akhmetov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e4a08bae82788136b6899262cb8b9ed4fe7964e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e4a08ba")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update eslint-plugin-node to 9.0.0 (#11670) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f2e78281d057f38b18cc160e81ed1bb54a5b9565",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f2e7828")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix Node 6 LTS EOL date (#11676) (James Ross)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4052bfebb87850b901f2eb8687edfbe49c01d68f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4052bfe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f6fc0450e749707bed44118c1205fb4e73e65628",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f6fc045")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1ebf21bc18769956366110bb62ff677639e633ae",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1ebf21b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/776b0fe3d93da958517ac7752682091f22eb30b4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("776b0fe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: update rule message of no-throw-literal (fixes #11637) (#11638) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/67c08b67509c54acd96aab2cec22efb53bfe6265",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("67c08b6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: consider comments in object-curly-spacing (fixes #11656) (#11657) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b6d41cbe28a8b28b1c1d9aa36cb4c349c73f6f1d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b6d41cb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: check token before using in no-cond-assign (fixes #11611) (#11619) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7f290a9044ca795884ac2e495cd31b2a35f109a6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7f290a9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: add eslint as a devDependeny (#11654) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/139fd2f1254bcc524738f8c2645e0847df95e0d0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("139fd2f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: add markdownlint-cli (#11653) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/adc6585ce074e03fc8a842e8ebc5b082a0ed0b65",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("adc6585")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: update status of breaking changes in migration guide (#11652) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/eef71e455e67040168c8df8a6c9c2b4fbe805a50",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("eef71e4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add missing items to migration guide (#11628) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0fc8e62818bc8d0a0a804b59c6110818844df5f3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0fc8e62")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: eslint:recommended changes (fixes #10768) (#11518) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1c34d4a6313c399761281282fff3a1bbe5e17b6d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1c34d4a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/33695e7f7048306ac196eff6e5a16e165ad03090",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("33695e7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c94cf212d31513fde74e0ea88b79e5e0f89a18a4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c94cf21")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f62a4510b007172c7160f007a6ec2aa2c9a80dd7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f62a451")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: add node 12 (#11648) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/20364cc4f7fe0423adce0dd44fb24fc48e1cae4b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("20364cc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: make no-redeclare stricter (fixes #11370, fixes #11405) (#11509) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ed675a6e5ac42898555c51a7cf771b79695ba591",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ed675a6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8b4dba606f8306f8ad0a37e2174a6e3236f7ebe7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8b4dba6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Add linting to git commit (#11556) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8684f4646da33bfe81e8f7f8c2d1af8b31065564",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8684f46")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1bdacc9b703158d5ca3563e4a9b67bb8453ac316",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1bdacc9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e62c8af6a86e35dc05f30713faf87a18cc77714d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e62c8af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1dfe077b7e47c6090277eb984e08bd472bb5595e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1dfe077")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: autofix of no-unneeded-ternary made syntax error (fixes #11579) (#11616) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bebd0793eaf122b013cca501ff2c6b0fc05d5493",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bebd079")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix grammar mistake in no-caller docs (#11623) (Daniel Lemay)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f570be17b339cb7622c512331b1653013279855a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f570be1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7c13a1c144a6a7c99cd9338a24166da9f7439cd0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7c13a1c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b7bd432e1161feba8dbb81f62cf03cafad42c3d4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b7bd432")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/412a76b316e05ca85334c1d6bc6372df536da2db",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("412a76b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v6.0.0-alpha.0 - April 12, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3d9e1372aad1e174b5438e3d6bd75fdefba06bad",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3d9e137")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: fix test that fails when the CWD contains a space (#11612) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8bfd1d138001d4493180b2fcff3330b42d0bb7cb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8bfd1d1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: add v6.0.0 migration guide (#11515) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9e49b56c08fd0e449fddab45dfeb0da8d918b460",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9e49b56")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: upgrade espree to 6.0.0-alpha.0 (fixes #9687) (#11610) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0127d107590acabfdea4a68b56acbeee6a7b9daa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0127d10")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-var fixed to incorrect code (fixes #11441) (#11443) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5cfdc2d08307c63bec487e76d2f470ef84166867",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5cfdc2d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Improve no-loop-func rule description and message (#11046) (Pedro Lopes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/608a02c60656b96c3219d342eee7e98b55bdd580",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("608a02c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: object-shorthand ignoreConstructors option (fixes #11595) (#11596) (overlookmotel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/eeea89361d48494995446ddb6ee6f049457911ec",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("eeea893")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: update js-yaml package to 3.13.1 version (#11607) (Pobegaylo Maksim)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e70d5f7573a9641d7b63394df53a3ef86183445c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e70d5f7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: compatible deps (#11608) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a55913d6c6fd1a7c684b8b4d7ab380cf7dc83eb8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a55913d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9a6e8fe4b025d52275f7ad2959361587f476cc58",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9a6e8fe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cbdee6230d22522c37259449467ace16f28ea8e8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cbdee62")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: README updates to reflect JSCS compat project is finished (#11568) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b92ca6ea8ae46b92c258921e8b5b40f5035dbc43",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b92ca6e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: getErrorResults function to not mutate passed parameter (#11592) (danielamaia)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ef7801ea510e12a9ca4963bcc8ec7e3aacc75ff0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ef7801e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: disallow invalid rule defaults in RuleTester (fixes #11473) (#11599) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c021117915d5d23399233f761a237e138f1854af",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c021117")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4e7cdca571632a3f3c32b39eb03022fe88ca8b30",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4e7cdca")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Breaking: comma-dangle enable functions: "never" (fixes #11502) (#11519) (薛定谔的猫)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/12f256f22534c4a4e1ca0ba54c37c6db81441461",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("12f256f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: no-confusing-arrow enable allowParens: true (fixes #11503) (#11520) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/25cc63d47e6c0aea8b88589a088c1f0de5f6f1cc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("25cc63d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: simplify config/plugin/parser resolution (fixes #10125) (#11388) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/63fead86f8cf4e6b33d5424fb7db1e76a66d4cce",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("63fead8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/595de4074fac1b5839f56b29fe0106a7fda7e3e0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("595de40")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: edit arrow-parens as-needed explanation (fixes #11202) (#11569) (Logan Lowder)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3396c3e2231b5b6e16da8751c22c86c256590f6b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3396c3e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: karma@^4.0.1, drops Node 6 support, fixes vulnerability (#11570) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2f8ae1397eef3625fe66636e95b0b312c6ff8a37",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2f8ae13")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: support single argument on newline with function-paren-newline (#11406) (Vladlen Grachev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fd1c91b00e8d8c3a83d21e60668d5f1fa61cb214",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fd1c91b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: throw an error for invalid global configs (refs #11338) (#11517) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/be833229b355eafb90f3e0bbc29bb106e100bed0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("be83322")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: Remove extra rules from eslint:recommended (fixes #10873) (#11357) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2543f11dfe8069ed5096073169cf6791d42454db",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2543f11")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: remove deprecated experimentalObjectRestSpread option (#11420) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/19248e0838425748d75518fe9f0a985587793378",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("19248e0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: make "),
          _c("code", [_vm._v("overrides[].files")]),
          _vm._v(" matching dotfiles (fixes #11201) (#11225) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0fb5fd402334098dc44cbfbb8ab25919da04843d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0fb5fd4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: interpret rule options as unicode regexes (fixes #11423) (#11516) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6e7da57dddc41830df4aee77e31c4320c1557350",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6e7da57")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Breaking: drop Node.js 6 support (fixes #11456) (#11557) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a73b4b8d6398b00bdaf90599d9e6d1c80f000f88",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a73b4b8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.16.0 - March 29, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dfef227091955a2f8f3fa8c76ad79de8a77e7955",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dfef227")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: gensite passes rulesMeta to formatter rendering (#11567) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c06d38c81bd9203c904587396a65d3c8cc7f2944",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c06d38c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Allow HTML formatter to handle no meta data (#11566) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/87a5c034977cf4538ff3539d2f8776a987c5942a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("87a5c03")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: "),
          _c("code", [_vm._v("func-style")]),
          _vm._v(": clarify when "),
          _c("code", [_vm._v("allowArrowFunctions")]),
          _vm._v(" is used (#11548) (Oliver Joseph Ash)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bc3e427ee8875c53eac6b6762884b50074f1adfc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bc3e427")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: pass rule meta to formatters RFC 10 (#11551) (Chris Meyer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b452f270bc0b523d88d5d827c95be3096f82e99d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b452f27")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Update README to pull in reviewer data (#11506) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/afe3d25f8afb88caee43f7202d0eb96f33a92a6b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("afe3d25")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: Bump js-yaml dependency to fix Denial of Service vulnerability (#11550) (Vernon de Goede)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4fe7eb7cecdc2395cf1eeaa20921bda8460b00c2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4fe7eb7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: use nyc instead of istanbul (#11532) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f16af439694aab473c647d8fae47c402bd489447",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f16af43")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: fix formatters/table test (#11534) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/78358a8f66e95c4fcc921f2497e8a5ec5f1537ec",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("78358a8")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix duplicate punctuation in CLI docs (#11528) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.15.3 - March 18, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/71adc665b9649b173adc76f80723b8de20664ae1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("71adc66")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: avoid moving comments in implicit-arrow-linebreak (fixes #11521) (#11522) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1f715a20c145d8ccc38f3310afccd838495d09d4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1f715a2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: make test-case-property-ordering reasonable (#11511) (Toru Nagashima)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.15.2 - March 15, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/29dbca73d762a809adb2f457b527e144426d54a7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("29dbca7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: implicit-arrow-linebreak adds extra characters (fixes #11268) (#11407) (Mark de Dios)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5d2083fa3e14c024197f6c386ff72237a145e258",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5d2083f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: eslint-scope@4.0.3 (#11513) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a5dae7c3d30231c2f5f075d98c2c8825899bab16",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a5dae7c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Fix: Empty glob pattern incorrectly expands to "/**" (#11476) (Ben Chauvette)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/448e8da94d09b397e98ffcb6f22b55a578ef79c1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("448e8da")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: improve crash reporting (fixes #11304) (#11463) (Alex Zherdev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0f56dc6d9eadad05dc3d5c9d1d9ddef94e10c5d3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0f56dc6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: make config validator params more consistent (#11435) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d6c112289f0f16ade070865c8786831b7940ca79",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d6c1122")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add working groups to maintainer guide (#11400) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5fdb4d3fb01b9d8a4c2dff71ed9cddb2f8feefb0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5fdb4d3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: compile deps to ES5 when generating browser file (fixes #11504) (#11505) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/06fa1655c3da8394ed9144d727115fc434b0416f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("06fa165")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: update CI testing configuration (#11500) (Reece Dunham)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/956e883c21fd9f393bf6718d032a4e2e53b33f22",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("956e883")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix example in no-restricted-modules docs (#11454) (Paul O’Shannessy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2c7431d6b32063f74e3837ee727f26af215eada7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2c7431d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix json schema example dead link (#11498) (kazuya kawaguchi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e7266c2478aff5d66e7859313feb49e3a129f85e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e7266c2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Docs: Fix invalid JSON in "Specifying Parser Options" (#11492) (Mihira Jayasekera)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6693161978a83e0730d5ea0fecdb627c5a2acdfd",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6693161")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/62fee4a976897d158c8c137339728cd280333286",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("62fee4a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Chore: eslint-config-eslint enable comma-dangle functions: "never" (#11434) (薛定谔的猫)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/34a53829e7a63ff2f6b371d77ce283bbdd373b91",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("34a5382")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: copy bundled espree to website directory (#11478) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f078f9a9e094ec00c61a6ef1c9550d017631e69a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f078f9a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Chore: use "file:" dependencies for internal rules/config (#11465) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/075612871f85aa04cef8137bd32247e128ad600b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0756128")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Add "),
          _c("code", [_vm._v("visualstudio")]),
          _vm._v(" to formatter list (#11480) (Patrick Eriksson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/44de9d7e1aa2fcae475a97b8f597b7d8094566b2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("44de9d7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix typo in func-name-matching rule docs (#11484) (Iulian Onofrei)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.15.1 - March 4, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fe1a892f85b09c3d2fea05bef011530a678a6af5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fe1a892")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: bundle espree (fixes eslint/eslint.github.io#546) (#11467) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/458053b0b541f857bf233dacbde5ba80681820f8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("458053b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: avoid creating invalid regex in no-warning-comments (fixes #11471) (#11472) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.15.0 - March 1, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4088c6c9d4578cd581ce8ff4385d90b58a75b755",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4088c6c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: Remove path.resolve in webpack build (#11462) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ec59ec09c8d001b8c04f9edc09994e2b0d0af0f9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ec59ec0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' New: add rule "prefer-named-capture-group" (fixes #11381) (#11392) (Pig Fang)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a44f75073306e5ea4e6722654009a99884fbca4f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a44f750")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: eslint-scope@4.0.2 (#11461) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d3ce611e1c705440ccbcae357f2194134d026541",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d3ce611")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ee884754e4111e11994ff0df3f0c29e43e1dc3f2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ee88475")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: add utils for rule tests (#11453) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d4824e46d7a6ca1618454d3c6198403382108123",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d4824e4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/64895185bde5233223648bcaf46f8deb72c9fb55",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6489518")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Fix: no-extra-parens crash when code is "((let))" (#11444) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9d20de2b0ac756bd62888119b8e08c7441d8a5aa",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9d20de2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3f14de458ba120e9c013f5fc7c6fe3e9b40c1460",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3f14de4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3d6c7709d47e047b25d91ca1a77d6dab92313061",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3d6c770")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Sponsors: Sync README with website (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de5cbc526b30405e742b35d85d04361529d49ed4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de5cbc5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: remove invalid defaults from core rules (fixes #11415) (#11427) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/eb0650ba20cf9f9ad78dbaccfeb7e0e7ab56e31d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("eb0650b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: fix linting errors on master (#11428) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5018378131fd5190bbccca902c0cf4276ee1581a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5018378")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: enable require-unicode-regexp on ESLint codebase (#11422) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f6ba633f56eca6be20fc4b0d9496a78b9498d578",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f6ba633")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: lint all files in the repo at the same time (#11425) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8f3d71754932669332ad7623bcc4c1aef3897125",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8f3d717")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add non-attending TSC member info (#11411) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ce0777da5bc167fe0c529158fd8216d3eaf11565",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ce0777d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: use more common spelling (#11417) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b9aabe34311f6189b87c9d8a1aa40f3513fed773",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b9aabe3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: run fuzzer along with unit tests (#11404) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/db0c5e2a7f894b7cda71007b0ba43d7814b3fb2e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("db0c5e2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: switch from browserify to webpack (fixes #11366) (#11398) (Pig Fang)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.14.1 - February 18, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1d6e63930073e79e52890f552cc6e9a0646b7fb4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1d6e639")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: sort-keys throws Error at SpreadElement (fixes #11402) (#11403) (Krist Wongsuphasawat)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.14.0 - February 15, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/85a04b319e6dfde1458174cd1d8c9e7d33da0871",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("85a04b3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: adds conditional for separateRequires in one-var (fixes #10179) (#10980) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0c02932f1b2e2a85809e84617efa1b8836c19cfb",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0c02932")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: espree@5.0.1 (#11401) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/104ae881d0b21e9c64e006b2a2c21535cef0ad28",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("104ae88")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update governance doc with reviewers status (#11399) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ab8ac6adaaf7a88e160899e7f438a4cfd655eb6e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ab8ac6a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Support boundary spread elements in sort-keys (#11158) (Jakub Rożek)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a23d1975d48841eafdead1a1357e2af842f688bc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a23d197")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: add allowSingleLineBlocks opt. to padded-blocks rule (fixes #7145) (#11243) (richie3366)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e25e7aa3ea1e8c9b3cd3242acda6d4a5572c2c6a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e25e7aa")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: comma-spacing ignore comma before closing paren (fixes #11295) (#11374) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a1f7c44ea9efbd9393889c1cc91b74260e0a8e02",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a1f7c44")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Docs: fix space-before-blocks correct code for "classes": "never" (#11391) (PoziWorld)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/14f58a2bec4d6aade0de22771c378b86b1e51959",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("14f58a2")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix grammar in object-curly-spacing docs (#11389) (PoziWorld)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d3e9a27bbba30008a610df59e82b7192f0ecc3a3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d3e9a27")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fix grammar in “those who says” (#11390) (PoziWorld)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ea8e8045ba0e6c1e1015104346af962f3e16fd81",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ea8e804")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Add note about support for object spread (fixes #11136) (#11395) (Steven Thomas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/95aa3fdb392d265e6c3d813d54076458e88e7ad8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("95aa3fd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/51c497298a15ad296a2b1f8fc397df687976b836",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("51c4972")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Behavior of --init (fixes #11105) (#11332) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/ad7a38097c32a91e5a831ef1bc8933601532576c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ad7a380")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/550de1e611a1e9af873bcb18d74cf2056e8d2e1b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("550de1e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: use "),
          _c("code", [_vm._v("default")]),
          _vm._v(" keyword in JSON schema (fixes #9929) (#11288) (Pig Fang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/983c5201210d7a4ffab0b3d05ab9919c0754e5ca",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("983c520")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Use 'readonly' and 'writable' for globals (fixes #11359) (#11384) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f1d3a7ee7c82365989e219b1dae379f08f6dd526",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f1d3a7e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: some deps (fixes #11372) (#11373) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3e0c4176eff085498b813f8ba1732d7ed6ee44f8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3e0c417")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix grammar in “there’s nothing prevent you” (#11385) (PoziWorld)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de988bc909b491366ad0cd9bc83f4d6de42d041a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de988bc")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix grammar: Spacing improve -> Spacing improves (#11386) (PoziWorld)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1309dfdebb5595460b79dcac20df6a1f109e7566",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1309dfd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Revert "Build: fix test failure on Node 11 (#11100)" (#11375) (薛定谔的猫)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/1e56897db3e254e0aef6d2fe3274157fc379c79e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1e56897")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: “the function actually use”: use -> uses (#11380) (PoziWorld)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5a71bc95a7e961b1b1b77022645e0bd9cdd08dc0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5a71bc9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/82a58ce26b282fd80335b3ac4fc88f21266c3ba1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("82a58ce")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update README team and sponsors (ESLint Jenkins)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/546d355ace65631e27de859baea3ffcc50e0ad2c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("546d355")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Update README with latest sponsors/team data (#11378) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c0df9febb7c7e045ababc10b88dbcbb3f28c724c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c0df9fe")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: "),
          _c("code", [_vm._v("...")]),
          _vm._v(" is not an operator (#11232) (Felix Kling)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7ecfdefaeadb772f8b96ffe37c4a2c97fde0da16",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7ecfdef")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: update typescript parser (refs #11368) (#11369) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3c90dd7e25cf97833deddb11cfbc107a5663ac08",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3c90dd7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: remove prefer-spread autofix (fixes #11330) (#11365) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5eb3121b82c1837da0c3021b7d9384bb30832e36",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5eb3121")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: add fixer for "),
          _c("code", [_vm._v("prefer-destructuring")]),
          _vm._v(" (fixes #11151) (#11301) (golopot)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/173eb38cdb3e4673cba947521f27158828186d77",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("173eb38")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Clarify ecmaVersion doesn't imply globals (refs #9812) (#11364) (Keith Maxwell)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/84ce72fdeba082b7b132e4ac6b714fb1a93831b7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("84ce72f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Fix: Remove extraneous linefeeds in "),
          _c("code", [_vm._v("one-var")]),
          _vm._v(" fixer (fixes #10741) (#10955) (st-sloth)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/389362a06ac6601512b872d3e843c7371f2a1bcc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("389362a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify motivation for no-prototype-builtins (#11356) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/533d240b0811f663494cb213b06cc9e51e1ff2d0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("533d240")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: no-shadow-restricted-names lets unassigned vars shadow undefined (#11341) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d0e823aef196a6564c87a78b72c1ef980ce67af9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d0e823a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Make --init run js config files through linter (fixes #9947) (#11337) (Brian Kurek)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/92fc2f4f3faf8aeaae8a8e71db0de405404fb6c3",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("92fc2f4")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: CircularJSON dependency warning (fixes #11052) (#11314) (Terry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4dd19a3c4c037adc860a65e96f2ba3eeccace1de",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4dd19a3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: mention 'prefer-spread' in docs of 'no-useless-call' (#11348) (Klaus Meinhardt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4fd83d5ec47a6a7b81cd8801c3bd63d27ea1c7c4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4fd83d5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix a misleading example in one-var (#11350) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9441ce77b7228f2c4562e158a10905afe11f31f2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9441ce7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: update incorrect tests to fix build failing (#11354) (薛定谔的猫)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.13.0 - February 1, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/91c8884971f5e57f5f7490d8daf92c4a9a489836",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("91c8884")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Chore: use local function to append "s" instead of a package (#11293) (Timo Tijhof)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b5143bfc09e53d8da8f63421ade093b7593f4f51",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b5143bf")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: for-direction detection false positives/negatives (#11254) (Ruben Bridgewater)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9005e632d13476880c55f7e3c8a6e450762a5171",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9005e63")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: increase camelcase test coverage (#11299) (Redmond Tran)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5b14ad1003c7df9a37621dea55c6d6d0484adc05",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5b14ad1")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: false positive in no-constant-condition (fixes #11306) (#11308) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/6567c4f6665df85c3347388b29d8193cc8208d63",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("6567c4f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: only remove arrow before body in object-shorthand (fixes #11305) (#11307) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/fa2f370affa4814dbdda278f9859d0172d4b7aa2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("fa2f370")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: update rule configuration values in examples (#11323) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0a3c3ff1d91e8f39943efc4a7d2bf6927d68d37e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0a3c3ff")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: Allow globals to be disabled/configured with strings (fixes #9940) (#11338) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dccee63cf41234180c71bf0fe01b165c9078fc69",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dccee63")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: avoid hard-coding the list of core rules in eslint:recommended (#11336) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c1fd6f54d92efe615bcae529006221e122dbe9e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c1fd6f5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: remove undocumented "),
          _c("code", [_vm._v("Linter#rules")]),
          _vm._v(" property (refs #9161) (#11335) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/36e335681d61cbe3c83b653b7cc5f95730f1d86e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("36e3356")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: remove dead code for loading rules (#11334) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c464e2744ec76e7e9c6c5af0f6162c92187f1ece",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c464e27")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Rename "),
          _c("code", [_vm._v("result")]),
          _vm._v(" -> "),
          _c("code", [_vm._v("foo")]),
          _vm._v(" (#11210) (Alexis Tyler)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.12.1 - January 18, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/eb5c4014f16be1c2003ed46ce9560d0d8a567d0f",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("eb5c401")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: use meta.messages in some rules (2/4) (refs #9870) (#10773) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/aa56247746a0095996a41dd03bdbbf659f0f93b6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("aa56247")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: avoid loading core rules dynamically from FS in Linter (#11278) (Peter Metz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/04450bb7ed20f2412102538b238119d9764b4dc9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("04450bb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify process for adding committers (#11272) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3ffcf26c1c83efe7d7cf2d87f1063695ae653709",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3ffcf26")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: add @g-plane as committer (#11277) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c40344566eff2e77a6ae2b2d2dbdbd4ad3e76b67",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c403445")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: warn constant on RHS of || in no-constant-condition (fixes #11181) (#11253) (Merlin Mason)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9194f45ac7d521119a53773bf02b81670bad526e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9194f45")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Manage severity of 1 with TAP reporter (fixes #11110) (#11221) (Gabriel Cousin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/000f4952ae6a4311fbbc3ed36c481235fcb0b64b",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("000f495")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix example for sort-imports ignoreDeclarationSort (#11242) (Remco Haszing)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/7c0bf2ca92d83125a1fa000c9c4250bae6b4fc21",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("7c0bf2c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Add "),
          _c("code", [_vm._v("npx")]),
          _vm._v(" usage to Getting Started guide (#11249) (eyal0803)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/da9174e0798c1d785ddabb3ae405860fc5b89311",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("da9174e")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: fixes typo peerDepencies (#11252) (Christian Kühl)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9c31625f19176664ef76dcf088ce50703c41c324",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9c31625")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Improve custom formatter docs (#11258) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.12.0 - January 4, 2019")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/0d91e7d28e5eba79a6032165cdef5d4549d26462",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("0d91e7d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: Add sort-imports ignoreDeclarationSort (fixes #11019) (#11040) (Remco Haszing)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f92d6f05c4dcd4a3a0616871e10b31edae9dfad5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f92d6f0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Build: Add karma-chrome-launcher support (#11027) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/166853d9c59db493f0b1bb68a67ad868662a4205",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("166853d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: eslint-plugin-eslint-plugin@2.0.1 (#11220) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bfff77ad4eaa02e2e62481c986634df38d5db6e5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bfff77a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: no-param-reassign parameter in ternary operator (fixes #11236) (#11239) (周昊宇)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/258b6541f61dc3a9ae64e200680766a11c3dd316",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("258b654")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: require-uncached renamed to import-fresh (#11066) (薛定谔的猫)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.11.1 - December 26, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/de79f1026b7035f0296d7876f1db64f225cca1b8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("de79f10")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: handle optional catch bindings in no-useless-catch (#11205) (Colin Ihrig)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.11.0 - December 22, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/b4395f671442a7e0be956382c24cce38025a6df6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("b4395f6")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" New: add option "),
          _c("code", [_vm._v("first")]),
          _vm._v(
            " for VariableDeclarator in indent (fixes #8976) (#11193) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/2b5a60284670a3ab1281b206941ed38faf2ea10c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("2b5a602")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " New: no-useless-catch rule (fixes #11174) (#11198) (Alexander Grasley)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/06b3b5bfcf0429c5078d4f4af3c03bb777e4f022",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("06b3b5b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Account for comments in implicit-arrow-linebreak (#10545) (Mark de Dios)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4242314215a6f35e432860433906f47af1a29724",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4242314")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: handle computed properties in camelcase (fixes #11084) (#11113) (Bence Dányi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/100930493d9ab802a94dac5c761515b12241ddd2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("1009304")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add a note for no-unused-expressions (fixes #11169) (#11192) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/88f99d31b88a4cde4563bc4a6f4c41f0cc557885",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("88f99d3")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: clarify how to use configs in plugins (#11199) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bcf558b2f7036f487af2bdb2b2d34b6cdf7fc174",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bcf558b")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Clarify the no-unused-vars docs (#11195) (Jed Fox)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a470eb73d52fae0f0bc48de5a487e23cf78fcfa9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a470eb7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Fix no-irregular-whitespace description (#11196) (Jed Fox)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/8abc8afe71691b747cbd1819a13d896e8aa5b92a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("8abc8af")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: Remove a misleading example (#11204) (Bogdan Gradinariu)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/733d93618a99758a05453ab94505a9f1330950e0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("733d936")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: link to JSDoc EOL blogpost in valid-jsdoc and require-jsdoc (#11191) (Nathan Diddle)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d5eb108e17f676d0e4fcddeb1211b4bdfac760c1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d5eb108")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Ensure "),
          _c("code", [_vm._v("triage")]),
          _vm._v(" label is added to new issues (#11182) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/617a2874ed085bca36ca289aac55e3b7f7ce937e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("617a287")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: add missing deprecation notices for jsdoc rules (#11171) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.10.0 - December 8, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4b0f517cd317e5f1b99a1e8a0392332bd8a2e231",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4b0f517")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Upgrade: single- and multiline const, let, var statements (fixes #10721) (#10919) (Tom Panier)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9666abaf46c841fba7b5d4e53c6998cd25b9bc33",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9666aba")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: space-infix-ops reports violating operator (#10934) (Bence Dányi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c14f717f4c32860766185da47f64f8eb0c2d2998",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c14f717")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Update all-files-ignored.txt message to be less confusing (#11075) (z.ky)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/9f3573dda3dc35bc220e945686cc835eaad0ac2c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("9f3573d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Clarify the CLIEngine options (#10995) (Ed Morley)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/dd7b0cb019d94964930d30fec36f7b22ef072822",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("dd7b0cb")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: refactor template literal feature detection in 'quotes' rule (#11125) (Bryan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3bf0332508b921cb660c2e8a1ab7ddf46a2013b6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3bf0332")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: fix the fixer of lone comma with comments (fixes #10632) (#11154) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f8507260c2091d18488fde20e466639d1a7f913c",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f850726")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: Espree v5.0.0 (#11161) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4490d7af529d4ecc18b6874f1d838869656da58a",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4490d7a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: deprecate valid-jsdoc and require-jsdoc (#11145) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/60dfb6c623dfe829e5350dabe507e7850c1beacf",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("60dfb6c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Update issue templates (#11163) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/958987aa6f5630faa051d8f822f0200faff41924",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("958987a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Docs: Fix link to rule no-useless-rename (#11165) (Brian)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/62fd2b93448966331db3eb2dfbe4e1273eb032b2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("62fd2b9")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Update: Amend keyword-spacing to validate "),
          _c("code", [_vm._v("default")]),
          _vm._v(" keywords (#11097) (Bin Ury)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/4bcdfd07d514fd7a6b8672d33703d0b6c606f214",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("4bcdfd0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Chore: fix some jsdoc-related issues (#11148) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c6471ed6feb3e71e239379a7042deb9b8ab3cf39",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c6471ed")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: fix typo in issue-templates/new-rule (#11149) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5d451c510c15abc41b5bb14b4955a7db96aeb100",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5d451c5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Remove dependency on is-resolvable (#11128) (Matt Grande)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/bc50dc7737496712463220e662946eb516e36ae1",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("bc50dc7")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Move ignored-paths, report-translator to lib/util (refs #10559) (#11116) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/c0a80d0ca3c80ca27694fc8aedcf84b72bfd9465",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("c0a80d0")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Do not strip underscores in camelcase allow (fixes #11000) (#11001) (Luke Page)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/a675c89573836adaf108a932696b061946abf1e6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("a675c89")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ' Docs: (Grammar) "the setup" -> "to set up" (#11117) (MarvinJWendt)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/54dfa602f62e6d183d57d60d5fdd417a263f479e",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("54dfa60")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Fix: Typo in function comment parameters (#11111) (Pierre Maoui)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/cf296bdabf0dbbfbae491419e38aee4ecd63ec71",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("cf296bd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: switch incorrect example with correct one (#11107) (Romain Le Quellec)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/d2d500ca5dff307189b9d4161a5e7b8282557dd6",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("d2d500c")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Docs: no-console#When-Not-To-Use provides incorrect rule snippet (#11093) (Lawrence Chou)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/f394a1dfc5eb4874f899b7bc19685896893af7b8",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("f394a1d")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: Extract config comment parsing (#11091) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/709190f8c5d7559b1e0915e25af60b50a94ba1c7",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("709190f")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Build: fix test failure on Node 11 (#11100) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/3025cddf0a2ea8461ce05575098a5714fcf6278d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("3025cdd")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Update: don't indent leading semi in line after import (fixes #11082) (#11085) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/e18c827cc12cb1c52e5d0aa993f572cb56238704",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("e18c827")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " Chore: refactor linter#parseBooleanConfig to improve readability (#11074) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/eslint/eslint/commit/5da378ac922d732ca1765f08edee0face1b1b924",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("5da378a")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" Upgrade: eslint-release@1.2.0 (#11073) (Teddy Katz)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.9.0 - November 9, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "9436712 Fix: Unused recursive function expressions (fixes #10982) (#11032) (Sergei Startsev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c832cd5 Update: add "),
          _c("code", [_vm._v("ignoreDestructuring")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("id-match")]),
          _vm._v(" rule (#10554) (一名宅。)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "54687a8 Fix: prefer-const autofix multiline assignment (fixes #10582) (#10987) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'ae2b61d Update: "off" options for "space-before-blocks" (refs #10906) (#10907) (Sophie Kirschner)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "57f357e Docs: Update require-await docs with exception (fixes #9540) (#11063) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "79a2797 Update: no-restricted-imports to check re-export (fixes #9678) (#11064) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3dd7493 Docs: update ecmaVersion to include 2019/10 values (#11059) (Vse Mozhet Byt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "607635d Upgrade: eslint-plugin-node & eslint-plugin (#11067) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dcc6233 Fix: Ignore empty statements in no-unreachable (fixes #9081) (#11058) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7ad86de New: Add --fix-type option to CLI (fixes #10855) (#10912) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0800b20 Chore: fix invalid super() calls in tests (#11054) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4fe3287 Docs: Cross-reference two rules (refs #11041) (#11042) (Paul Melnikow)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5525eb6 Fix: rule deprecation warnings did not consider all rules (#11044) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "44d37ca Docs: Update steps for adding new TSC member (#11038) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "802e926 Update: Warn for deprecation in Node output (fixes #7443) (#10953) (Colin Chang)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.8.0 - October 26, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "9152417 Fix: deprecation warning in RuleTester using Node v11 (#11009) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e349a03 Docs: Update issue templates to ask for PRs (#11012) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3d88b38 Chore: avoid using legacy report API in no-irregular-whitespace (#11013) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5a31a92 Build: compile espree's deps to ES5 when generating site (fixes #11014) (#11015) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3943635 Update: Create Linter.version API (fixes #9271) (#11010) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a940cf4 Docs: Mention version for config glob patterns (fixes #8793) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6e1c530 Build: run tests on Node 11 (#11008) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "58ff359 Docs: add instructions for npm 2FA (refs #10631) (#10992) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2f87bb3 Upgrade: eslint-release@1.0.0 (refs #10631) (#10991) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "57ef0fd Fix: prefer-const when using destructuring assign (fixes #8308) (#10924) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "577cbf1 Chore: Add typescript-specific edge case tests to space-infix-ops (#10986) (Bence Dányi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d45b184 Chore: Using deconstruction assignment for shelljs (#10974) (ZYSzys)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.7.0 - October 12, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "6cb63fd Update: Add iife to padding-line-between-statements (fixes #10853) (#10916) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5fd1bda Update: no-tabs allowIndentationTabs option (fixes #10256) (#10925) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d12be69 Fix: no-extra-bind No autofix if arg may have side effect (fixes #10846) (#10918) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "847372f Fix: no-unused-vars false pos. with markVariableAsUsed (fixes #10952) (#10954) (Roy Sutton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4132de7 Chore: Simplify space-infix-ops (#10935) (Bence Dányi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "543edfa Fix: Fix error with one-var (fixes #10937) (#10938) (Justin Krup)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "95c4cb1 Docs: Fix typo for no-unsafe-finally (#10945) (Sergio Santoro)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5fe0e1a Fix: no-invalid-regexp disallows \\ at end of pattern (fixes #10861) (#10920) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f85547a Docs: Add 'When Not To Use' section to space-infix-ops (#10931) (Bence Dányi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3dccac4 Docs: Update working-with-parsers link (#10929) (Azeem Bande-Ali)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "557a8bb Docs: Remove old note about caching, add a new one (fixes #10739) (#10913) (Zac)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fe8111a Chore: Add more test cases to space-infix-ops (#10936) (Bence Dányi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "066f7e0 Update: camelcase rule ignoreList added (#10783) (Julien Martin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "70bde69 Upgrade: table to version 5 (#10903) (Rouven Weßling)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2e52bca Chore: Update issue templates (#10900) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.6.1 - September 28, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "9b26bdb Fix: avoid exponential require-atomic-updates traversal (fixes #10893) (#10894) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9432b10 Fix: make separateRequires work in consecutive mode (fixes #10784) (#10886) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e51868d Upgrade: debug@4 (fixes #10854) (#10887) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d3f3994 Docs: add information about reporting security issues (#10889) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cc458f4 Build: fix failing tests on master (#10890) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a6ebfd3 Docs: clarify defaultAssignment option, fix no-unneeded-ternary examples (#10874) (CoffeeTableEspresso)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9d52541 Fix: Remove duplicate error message on crash (fixes #8964) (#10865) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4eb9a49 Docs: Update quotes.md (#10862) (The Jared Wilcurt)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9159e9b Docs: Update complexity.md (#10867) (Szymon Przybylski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "14f4e46 Docs: Use Linter instead of linter in Nodejs API page (#10864) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b3e3cb1 Chore: Update debug log name to match filename (#10863) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.6.0 - September 14, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "c5b688e Update: Added generators option to func-names (fixes #9511) (#10697) (Oscar Barrett)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7da36d5 Fix: respect generator function expressions in no-constant-condition (#10827) (Julian Rosse)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0a65844 Chore: quote enable avoidEscape option in eslint-config-eslint (#10626) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "32f41bd Chore: Add configuration wrapper markdown for the bug report template (#10669) (Iulian Onofrei)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.5.0 - August 31, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "6e110e6 Fix: camelcase duplicate warning bug (fixes #10801) (#10802) (Julian Rosse)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5103ee7 Docs: Add Brackets integration (#10813) (Jan Pilzer)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b61d2cd Update: max-params to only highlight function header (#10815) (Ian Obermiller)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2b2f11d Upgrade: babel-code-frame to version 7 (#10808) (Rouven Weßling)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2824d43 Docs: fix comment placement in a code example (#10799) (Vse Mozhet Byt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "10690b7 Upgrade: devdeps and deps to latest (#10622) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "80c8598 Docs: gitignore syntax updates (fixes #8139) (#10776) (Gustavo Santana)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cb946af Chore: use meta.messages in some rules (1/4) (#10764) (薛定谔的猫)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.4.0 - August 17, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "a70909f Docs: Add jscs-dev.github.io links (#10771) (Gustavo Santana)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "034690f Fix: no-invalid-meta crashes for non Object values (fixes #10750) (#10753) (Sandeep Kumar Ranka)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "11a462d Docs: Broken jscs.info URLs (fixes #10732) (#10770) (Gustavo Santana)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "985567d Chore: rm unused dep string.prototype.matchall (#10756) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f3d8454 Update: Improve no-extra-parens error message (#10748) (Timo Tijhof)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "562a03f Fix: consistent-docs-url crashes if meta.docs is empty (fixes #10722) (#10749) (Sandeep Kumar Ranka)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6492233 Chore: enable no-prototype-builtins in codebase (fixes #10660) (#10664) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("137140f Chore: use eslintrc overrides (#10677) (薛定谔的猫)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.3.0 - August 3, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "dd6cb19 Docs: Updated no-return-await Rule Documentation (fixes #9695) (#10699) (Marla Foreman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6009239 Chore: rename utils for consistency (#10727) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6eb972c New: require-unicode-regexp rule (fixes #9961) (#10698) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5c5d64d Fix: ignored-paths for Windows path (fixes #10687) (#10691) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5f6a765 Build: ensure URL fragments remain in documentation links (fixes #10717) (#10720) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "863aa78 Docs: add another example for when not to use no-await-in-loop (#10714) (Valeri Karpov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6e78b7d Docs: remove links to terminated jscs.info domain (#10706) (Piotr Kuczynski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d56c39d Fix: ESLint cache no longer stops autofix (fixes #10679) (#10694) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2cc3240 New: add no-misleading-character-class (fixes #10049) (#10511) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '877f4b8 Fix: The "../.." folder is always ignored (fixes #10675) (#10682) (Sridhar)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5984820 Chore: Move lib/file-finder.js to lib/util/ (refs #10559) (#10695) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e37a593 Update: Fix incorrect default value for position (#10670) (Iulian Onofrei)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8084bfc Docs: change when not to use object spread (#10621) (Benny Powers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7f496e2 Chore: Update require path for ast-utils (#10693) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "648a33a Chore: reorganize code structure of utilities (refs #10599) (#10680) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f026fe1 Update: Fix 'function' in padding-line-between-statements (fixes #10487) (#10676) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c2bb8bb Docs: Remove superfluous object option sample code (#10652) (Iulian Onofrei)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d34a13b Docs: add subheader in configuring/configuring-rules (#10686) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d8aea28 Chore: rm unnecessary plugin in eslint-config-eslint (#10685) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9e76be7 Update: indent comments w/ nearby code if no blank lines (fixes #9733) (#10640) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9e93d46 New: add no-async-promise-executor rule (fixes #10217) (#10661) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5a2538c New: require-atomic-updates rule (fixes #10405) (#10655) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8b83d2b Fix: always resolve default ignore patterns from CWD (fixes #9227) (#10638) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "acb6658 Fix: ESLint crash with prefer-object-spread (fixes #10646) (#10649) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "99fb7d3 Docs: fix misleading no-prototype-builtins description (#10666) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("005b849 Docs: fix outdated description of "),
          _c("code", [_vm._v("baseConfig")]),
          _vm._v(" option (#10657) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "15a77c4 Docs: fix broken links (fixes eslint/eslint-jp#6) (#10658) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "87cd344 Docs: Make marking a default option consistent with other rules (#10650) (Iulian Onofrei)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0cb5e3e Chore: Replace some function application with spread operators (#10645) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b6daf0e Docs: Remove superfluous section from no-unsafe-negation (#10648) (Iulian Onofrei)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e1a3cac Chore: rm deprecated experimentalObjectRestSpread option in tests (#10647) (薛定谔的猫)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.2.0 - July 20, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "81283d0 Update: Cache files that failed linting (fixes #9948) (#10571) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("13cc63e Upgrade: ignore@4.0.2 (#10619) (Rouven Weßling)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ac77a80 Chore: Fixing a call to Object.assign.apply in Linter (#10629) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "761f802 Upgrade: eslint-plugin-node to 7.0.1 (#10612) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c517b2a Build: fix npm run perf failing(fixes #10577) (#10607) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e596939 Chore: fix redundant equality check (#10617) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9f93d5f Docs: Updated Working with Custom Formatters (fixes #9950) (#10592) (Marla Foreman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9aaf195 Chore: Extract lint result cache logic (refs #9948) (#10562) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "80b296e Build: package.json update for eslint-config-eslint release (ESLint Jenkins)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e4e7ff2 Chore: fix error message in eslint-config-eslint (#10588) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1e88170 Chore: Move lib/logging and lib/timing to lib/util/ (refs #10559) (#10579) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "64dfa21 Build: Fix prerelease logic in blog post generation (fixes #10578) (#10581) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0faf633 Chore: Simplify helper method in Linter tests (#10580) (Kevin Partington)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.1.0 - July 8, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "7328f99 Build: package.json update for eslint-config-eslint release (ESLint Jenkins)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b161f6b Build: Include prerelease install info in release blog post (#10463) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b2df738 Fix: prefer-object-spread duplicated comma (fixes #10512, fixes #10532) (#10524) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d8c3a25 Fix: wrap-regex doesn't work in some expression(fixes #10573) (#10576) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "114f42e Docs: Clarify option defaults in max-lines-per-function docs (#10569) (Chris Harwood)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "63f36f7 Fix: sort-keys in an object that contains spread (fixes #10261) (#10495) (katerberg)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "601a5c4 Fix: Prefer-const rule crashing on array destructuring (fixes #10520) (#10527) (Michael Mason)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "143890a Update: Adjust grammar of error/warnings fixable (#10546) (Matt Mischuk)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8ee39c5 Chore: small refactor config-validator (#10565) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "100f1be Docs: add note about release issues to readme (#10572) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "02efeac Fix: do not fail on nested unknown operators (#10561) (Rubén Norte)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "92b19ca Chore: use eslintrc overrides(dogfooding) (#10566) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "076a6b6 Docs: add actionable fix to no-irregular-whitespace (#10558) (Matteo Collina)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "de663ec Docs: Only successfully linted files are cached (fixes #9802) (#10557) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f0e22fc Upgrade: globals@11.7.0 (#10497) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8a2ff2c Docs:  adding a section about disable rules for some files (#10536) (Wellington Soares)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f22a3f8 Docs: fix a word in no-implied-eval (#10539) (Dan Homola)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '20d8bbd Docs: add missing paragraph about "custom parsers" (#10547) (Pig Fang)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b7addf6 Update: deprecate no-catch-shadow (fixes #10466) (#10526) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e862dc3 Fix: Remove autofixer for no-debugger (fixes #10242) (#10509) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.0.1 - June 25, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "196c102 Fix: valid-jsdoc should allow optional returns for async (fixes #10386) (#10480) (Mark Banner)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4c823bd Docs: Fix max-lines-per-function correct code's max value (#10513) (Rhys Bower)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.0.0 - June 22, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "0feedfd New: Added max-lines-per-function rule (fixes #9842) (#10188) (peteward44)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "daefbdb Upgrade: eslint-scope and espree to 4.0.0 (refs #10458) (#10500) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "077358b Docs: no-process-exit: recommend process.exitCode (#10478) (Andres Kalle)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f93d6ff Fix: do not fail on unknown operators from custom parsers (fixes #10475) (#10476) (Rubén Norte)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "05343fd Fix: add parens for yield statement (fixes #10432) (#10468) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'd477c5e Fix: check destructuring for "no-shadow-restricted-names" (fixes #10467) (#10470) (Pig Fang)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7a7580b Update: Add considerPropertyDescriptor option to func-name-matching (#9078) (Dieter Luypaert)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e0a0418 Fix: crash on optional catch binding (#10429) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("de4dba9 Docs: styling team members (#10460) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5e453a3 Docs: display team members in tables. (#10433) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b1895eb Docs: Restore intentional spelling mistake (#10459) (Wilfred Hughes)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.0.0-rc.0 - June 9, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "abf400d Update: Add ignoreDestructing option to camelcase rule (fixes #9807) (#10373) (Andrew Lunny)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e2b394d Upgrade: espree and eslint-scope to rc versions (#10457) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a370da2 Chore: small opt to improve readability (#10241) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "640bf07 Update: Fixes multiline no-warning-comments rule. (fixes #9884) (#10381) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "831c39a Build: Adding rc release script to package.json (#10456) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dc4075e Update: fix false negative in no-use-before-define (fixes #10227) (#10396) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3721841 Docs: Add new experimental syntax policy to README (fixes #9804) (#10408) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d0aae3c Docs: Create docs landing page (#10453) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fe8bec3 Fix: fix writing config file when "),
          _c("code", [_vm._v("source")]),
          _vm._v(" is "),
          _c("code", [_vm._v("prompt")]),
          _vm._v(" (#10422) (Pig Fang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "917108d Update: Add requireParamType option to valid-jsdoc (fixes #6753) (#10220) (Tomasz Sterna)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1984c21 Docs: move custom parsers docs into a page (fixes #9919) (#10431) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "400d4b5 Docs: Add rest and spread operator changes to migration guide (#10416) (Yannick Croissant)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e7bdd02 Upgrade: Consume espree@4.0.0-alpha.1 (#10410) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3e9f33a Fix: prevent crashing from JSON parsing error (fixes #10364) (#10376) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("636457d Fix: parse later ES files in "),
          _c("code", [_vm._v("eslint --init")]),
          _vm._v(" (fixes #10003) (#10378) (Pig Fang)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.0.0-alpha.4 - May 28, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "ce3e62a Docs: remove test coverage badge (#10407) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "240c1a4 Fix: prefer-const object destructuring false positive (fixes #9108) (#10368) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "93c9a52 Update: config-validator should validate overrides (#10357) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c2e0398 Update: Improves the prefer-object-spread rule by removing extraneous visitors (#10351) (Sharmila Jesupaul)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d848949 Update: Support JSXFragment node (fixes #9662) (#9664) (Clement Hoang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f268128 Build: add Node v10 to travis (#10262) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '9c922ce Update: Add "consistent" option to array-element-newline (fixes #9457) (#10355) (Pig Fang)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "65bce3a Fix: ensure --stdin flag works when stdin is piped asynchronously (#10393) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b9b23a9 Chore: rm unused argument (#10400) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8b7a70c Fix: handle one-var with no semicolon (fixes #10330) (#10371) (Malcolm Groves)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "465e615 New: prompt users before installing dependencies (#10353) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e25fc22 Chore: remove assert.doesNotThrow in tests (#10199) (Ruben Bridgewater)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fb148aa Fix: allow no tokens after "),
          _c("code", [_vm._v("return")]),
          _vm._v(" keyword (fixes #10372) (#10379) (Pig Fang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "074bc1c Docs: polish for max-classes-per-file rule (#10377) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a812845 Fix: allow array spread for prefer-object-spread rule (fixes #10344) (#10347) (Pig Fang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "448fc52 Docs: Update link to Integrations / Build tools / Start (#10354) (Kir Belevich)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4e5e9be Chore: avoid unnecessary filesystem accesses during config search (#10359) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "363da01 Chore: avoid code duplication in rule severity checking (#10358) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.0.0-alpha.3 - May 11, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "1a6b399 New: Adds prefer-object-spread rule (refs: #7230) (#9955) (Sharmila Jesupaul)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c4109b2 New: add max-classes-per-file rule (#10163) (James Garbutt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "41f0f6e Breaking: report multiline eslint-disable-line directives (fixes #10334) (#10335) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4ccd25a Chore: add eslint-plugin-node to eslint-config-eslint(fixes #10319) (#10320) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "82757b2 Docs: Adding a little guidance to rule documentation (#10301) (Justin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "09dde26 Breaking: new object-curly-newline/no-self-assign default (fixes #10215) (#10337) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d65f11d Fix: correct comma fix in spare array (fixes #10273) (#10329) (Malcolm Groves)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c343d86 Fix: do not autofix octal escape sequence (fixes #10031) (#10240) (Malcolm Groves)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("514013c New: Add "),
          _c("code", [_vm._v("globInputPaths")]),
          _vm._v(
            " CLIEngine option (fixes #9972) (#10191) (Pierre Vanduynslager)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("02e7b28 Chore: upgrade deps (#10339) (薛定谔的猫)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1397179 Chore: unskip test for scope analysis (#10336) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e5b33be Update: Add --fix for one-var rule (refs #9072) (#10040) (Sebastian Malton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("99b842d Chore: upgrade mock-fs@4.5.0 (#10325) (Tim Schaub)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fe91859 Chore: Update issue templates with new format (#10309) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2f30aa5 Docs: add a better vim linting engine (#10292) (Jon Smithers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "df2c1fb Docs: improve formatter guide (refs #9550) (#10294) (Dominic Lee)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f7330c1 Chore: Add ESLint path to plugin-missing message (#10283) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bb6090f Fix: Throw error when --ignore-path not a file (fixes #10076) (#10205) (Malcolm Groves)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1b6b2b2 Build: remove trailing spaces in blogpost template (#10280) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a960d69 Docs: remove outdated notes from migration guide (#10279) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.0.0-alpha.2 - April 27, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "510ca8b Docs: make grammatical tweaks in migration guide (#10278) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "02e44a5 Breaking: remove TDZ scopes (fixes #10245) (#10270) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c74933b Breaking: remove extra check in getScope (fixes #10246, fixes #10247) (#10252) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7c2e83a Chore: improve tests and checking for equality (#10182) (Ruben Bridgewater)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8799972 Docs: make template link wording more clear (#10219) (David Luzar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8b7c6ea Breaking: report fatal error for linting nonexistent files (fixes #7390) (#10143) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9100819 Breaking: fix plugin resolver in extends (fixes #9904) (#10236) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c45f1d0 Breaking: add rules to recommended (fixes #8865) (#10158) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1d443a0 Fix: valid-jsdoc does not know async function returns (fixes #9881) (#10161) (Rachael Sim)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a82cbea Update: re-enable experimentalObjectRestSpread (fixes #9990) (#10230) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f9c7371 Fix: do not autofix object-shorthand with comments (fixes #10038) (#10238) (Malcolm Groves)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4672b56 Docs: Correct wording in the "),
          _c("code", [_vm._v("smart-tabs")]),
          _vm._v(" docs page (#10277) (Jed Fox)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b32d1f4 Chore: upgrade eslump@1.6.2 (#10258) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7938bf1 Chore: update eslint-fuzzer ecmaVersion to 2018 (#10255) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a2953ec Chore: small opt to improve readability (#10225) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("85a5191 Docs: Update JSCS FAQ (#10221) (alberto)")]),
        _vm._v(" "),
        _c("li", [_vm._v("8e89d5c Docs: Fix typo (#10223) (alberto)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c0c331e Docs: Add Prettier to FAQ (#10222) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2443627 Docs: add backticks in getter-return (#10218) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "74bb5b5 Docs: Fix misspelling in changelog (#10216) (Kevin Partington)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.0.0-alpha.1 - April 13, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("b2a48a9 Breaking: stop using fake "),
          _c("code", [_vm._v("context._linter")]),
          _vm._v(" property (fixes #10140) (#10209) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a039956 Breaking: remove deprecated browser/jest/node globals (fixes #10141) (#10210) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "98f1cad Docs: update migration guide with latest changes (#10212) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2e60017 Chore: remove concat-stream dependency (#10173) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7f69f11 Chore:  rearrange init options. (#10131) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("f595fd8 Upgrade: upgrade deps (#10184) (alberto)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "71167be Docs: fix wrong config in id-length (#10196) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "81629d2 Chore: enable rest/spread rules on ESLint codebase (#10211) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2324570 Breaking: no-unused-vars reports all after-used params (fixes #9909) (#10119) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7765fc4 Upgrade: ajv@^6.0.1, still using json schema draft 04 (#9856) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b77846d Breaking: drop supporting Node.js 4 (fixes #10052) (#10074) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cd34d44 Chore: avoid modifying global state when tests fail (#10201) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "731da1e Docs: fix code in correct example. (#10195) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3780915 Docs: fix some small errors in examples (#10194) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("869c9f5 Upgrade: babelify (#10185) (alberto)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "218ee57 Fix: report no-case-declarations from declarations (fixes #10048) (#10167) (Carlo Abelli)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b7ee1ed Upgrade: upgrade devdeps (#10178) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "db1a582 Chore: Add debug logging for CLI args as they came in (#10174) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f3a0291 Upgrade: Update dependencies. (#10168) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7d6e052 Upgrade: esquery@^1.0.1 (fixes #8733) (#10170) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1e7252f Docs: Add more related rules for object-curly-spacing (#10175) (Saugat Acharya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e5cf9cc Docs: Reorder README sections (#10172) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c85578f Chore: Remove "),
          _c("code", [_vm._v("esprima-fb")]),
          _vm._v(" dependency. (#10171) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d0dc2e3 Docs: Add Missing Quotes (#10162) (Samarth Verma)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7a63bfa Upgrade: eslint-release to v0.11.1 (#10156) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b7a1a7a Build: Gensite creates prerelease dirs if needed (#10154) (Brandon Mills)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v5.0.0-alpha.0 - March 30, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "f4b3af5 Breaking: Upgrade to Espree v4 alpha (refs #9990) (#10152) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3351129 Docs: add v5.0.0 migration guide (fixes #10142) (#10147) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f2f98dd Build: make prerelease script publish to GitHub/website (#10151) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d440e84 Breaking: support @scope shorthand in plugins (fixes #9903) (#9905) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "462b058 Update: Include debugging information when rule throws error (#9742) (Patrick Hayes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9a020dc Chore: refactor --no-ignore flag logic (#10146) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4f61a0d Chore: add noopener/noreferrer (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "65cc834 Docs: Ensure CLI doc sections match command line help order (#10144) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9c79174 Docs: Update capitalized-comments with missing letters (fixes #10135) (#10134) (jasonfry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9e66bfb Docs: remove eslint vs jshint from faq (#10108) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "692e383 Docs: Add modified variable examples for no-loop-func (fixes #9527) (#10098) (Rachael Sim)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a9ee9ae Breaking: require rules to provide report messages (fixes #10011) (#10057) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "837edc7 Chore: Uncommented test for empty program for no-invalid-meta (#10046) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c383bc5 Breaking: Make require('eslint').linter non-enumerable (fixes #9270) (#9692) (Jed Fox)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4eaebe5 Breaking: set "),
          _c("code", [_vm._v("parent")]),
          _vm._v(
            " of AST nodes before rules run (fixes #9122) (#10014) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "91ece32 Breaking: remove special exception for linting empty files (fixes #9534) (#10013) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("27e3f24 Breaking: remove "),
          _c("code", [_vm._v("source")]),
          _vm._v(
            " property from linting messages (fixes #7358) (#10012) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e4c3b3c Breaking: use an exit code of 2 for fatal config problems (fixes #9384) (#10009) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2a7ecaa Breaking: Use strict equality in RuleTester comparisons (fixes #9417) (#10008) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0bc4a38 Fix: Make rule-tester strictly check messageId. (ref #9890) (#9908) (Jacques Favreau)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ea6fb17 Update: Make no-cond-assign work for ternaries (fixes #10091) (#10109) (Aaron Harper)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.19.1 - March 21, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "3ff5d11 Fix: no-invalid-regexp not understand variable for flags (fixes #10112) (#10113) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "abc765c Fix: object-curly-newline minProperties w/default export (fixes #10101) (#10103) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6f9e155 Docs: Update ambiguous for...in example for guard-for-in (#10114) (CJ R)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0360cc2 Chore: Adding debug logs on successful plugin loads (#10100) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a717c5d Chore: Adding log at beginning of unit tests in Makefile.js (#10102) (Kevin Partington)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.19.0 - March 16, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "55a1593 Update: consecutive option for one-var (fixes #4680) (#9994) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8d3814e Fix: false positive about ES2018 RegExp enhancements (fixes #9893) (#10062) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "935f4e4 Docs: Clarify default ignoring of node_modules (#10092) (Matijs Brinkhuis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("72ed3db Docs: Wrap "),
          _c("code", [_vm._v("Buffer()")]),
          _vm._v(" in backticks in "),
          _c("code", [_vm._v("no-buffer-constructor")]),
          _vm._v(" rule description (#10084) (Stephen Edgar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3aded2f Docs: Fix lodash typos, make spacing consistent (#10073) (Josh Smith)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e33bb64 Chore: enable no-param-reassign on ESLint codebase (#10065) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("66a1e9a Docs: fix possible typo (#10060) (Vse Mozhet Byt)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2e68be6 Update: give a node at least the indentation of its parent (fixes #9995) (#10054) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "72ca5b3 Update: Correctly indent JSXText with trailing linebreaks (fixes #9878) (#10055) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2a4c838 Docs: Update ECMAScript versions in FAQ (#10047) (alberto)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.18.2 - March 2, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            '6b71fd0 Fix: table@4.0.2, because 4.0.3 needs "ajv": "^6.0.1" (#10022) (Mathieu Seiler)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3c697de Chore: fix incorrect comment about linter.verify return value (#10030) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9df8653 Chore: refactor parser-loading out of linter.verify (#10028) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f6901d0 Fix: remove catastrophic backtracking vulnerability (fixes #10002) (#10019) (Jamie Davis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e4f52ce Chore: Simplify dataflow in linter.verify (#10020) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "33177cd Chore: make library files non-executable (#10021) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "558ccba Chore: refactor directive comment processing (#10007) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "18e15d9 Chore: avoid useless catch clauses that just rethrow errors (#10010) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a1c3759 Chore: refactor populating configs with defaults in linter (#10006) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "aea07dc Fix: Make max-len ignoreStrings ignore JSXText (fixes #9954) (#9985) (Rachael Sim)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.18.1 - February 20, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "f417506 Fix: ensure no-await-in-loop reports the correct node (fixes #9992) (#9993) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3e99363 Docs: Fixed typo in key-spacing rule doc (#9987) (Jaid)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7c2cd70 Docs: deprecate experimentalObjectRestSpread (#9986) (Toru Nagashima)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.18.0 - February 16, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "70f22f3 Chore: Apply memoization to config creation within glob utils (#9944) (Kenton Jacobsen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0e4ae22 Update: fix indent bug with binary operators/ignoredNodes (fixes #9882) (#9951) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "47ac478 Update: add named imports and exports for object-curly-newline (#9876) (Nicholas Chua)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e8efdd0 Fix: support Rest/Spread Properties (fixes #9885) (#9943) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f012b8c Fix: support Async iteration (fixes #9891) (#9957) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "74fa253 Docs: Clarify no-mixed-operators options (fixes #9962) (#9964) (Ivan Hayes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "426868f Docs: clean up key-spacing docs (fixes #9900) (#9963) (Abid Uzair)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4a6f22e Update: support eslint-disable-* block comments (fixes #8781) (#9745) (Erin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "777283b Docs: Propose fix typo for function (#9965) (John Eismeier)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bf3d494 Docs: Fix typo in max-len ignorePattern example. (#9956) (Tim Martin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d64fbb4 Docs: fix typo in prefer-destructuring.md example (#9930) (Vse Mozhet Byt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f8d343f Chore: Fix default issue template (#9946) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.17.0 - February 2, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            '1da1ada Update: Add "multiline" type to padding-line-between-statements (#8668) (Matthew Bennett)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bb213dc Chore: Use messageIds in some of the core rules (#9648) (Jed Fox)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1aa1970 Docs: remove outdated rule naming convention (#9925) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3afaff6 Docs: Add prefer-destructuring variable reassignment example (#9873) (LePirlouit)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d20f6b4 Fix: Typo in error message when running npm (#9866) (Maciej Kasprzyk)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "51ec6a7 Docs: Use GitHub Multiple PR/Issue templates (#9911) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dc80487 Update: space-unary-ops uses astUtils.canTokensBeAdjacent (fixes #9907) (#9906) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "084351b Docs: Fix the messageId example (fixes #9889) (#9892) (Jed Fox)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9cbb487 Docs: Mention the "),
          _c("code", [_vm._v("globals")]),
          _vm._v(" key in the no-undef docs (#9867) (Dan Dascalescu)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.16.0 - January 19, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "e26a25f Update: allow continue instead of if wrap in guard-for-in (fixes #7567) (#9796) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "af043eb Update: Add NewExpression support to comma-style (#9591) (Frazer McLean)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4f898c7 Build: Fix JSDoc syntax errors (#9813) (Matija Marohnić)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "13bcf3c Fix: Removing curly quotes in no-eq-null report message (#9852) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b96fb31 Docs: configuration hierarchy for CLIEngine options (fixes #9526) (#9855) (PiIsFour)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8ccbdda Docs: Clarify that -c configs merge with "),
          _c("code", [_vm._v(".eslintrc.*")]),
          _vm._v(" (fixes #9535) (#9847) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "978574f Docs: Fix examples for no-useless-escape (#9853) (Toru Kobayashi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cd5681d Chore: Deactivate consistent-docs-url in internal rules folder (#9815) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2e87ddd Docs: Sync messageId examples' style with other examples (#9816) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1d61930 Update: use doctrine range information in valid-jsdoc (#9831) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "133336e Update: fix indent behavior on template literal arguments (fixes #9061) (#9820) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ea1b15d Fix: avoid crashing on malformed configuration comments (fixes #9373) (#9819) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "add1e70 Update: fix indent bug on comments in ternary expressions (fixes #9729) (#9818) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6a5cd32 Fix: prefer-destructuring error with computed properties (fixes #9784) (#9817) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "601f851 Docs: Minor modification to code comments for clarity (#9821) (rgovind92)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b9da067 Docs: fix misleading info about RuleTester column numbers (#9830) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2cf4522 Update: Rename and deprecate object-property-newline option (#9570) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "acde640 Docs: Add ES 2018 to Configuring ESLint (#9829) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ccfce15 Docs: Minor tweaks to working with rules page (#9824) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "54b329a Docs: fix substitution of " +
              _vm._s(_vm.name) +
              " (#9822) (Andres Kalle)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.15.0 - January 6, 2018")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "6ab04b5 New: Add context.report({ messageId }) (fixes #6740) (#9165) (Jed Fox)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fc7f404 Docs: add url to each of the rules (refs #6582) (#9788) (Patrick McElhaney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fc44da9 Docs: fix sort-imports rule block language (#9805) (ferhat elmas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "65f0176 New: CLIEngine#getRules() (refs #6582) (#9782) (Patrick McElhaney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c64195f Update: More detailed assert message for rule-tester (#9769) (Weijia Wang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9fcfabf Fix: no-extra-parens false positive (fixes: #9755) (#9795) (Erin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "61e5fa0 Docs: Add table of contents to Node.js API docs (#9785) (Patrick McElhaney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4c87f42 Fix: incorrect error messages of no-unused-vars (fixes #9774) (#9791) (akouryy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("bbabf34 Update: add "),
          _c("code", [_vm._v("ignoreComments")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" rule (fixes #9018) (#9752) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "db431cb Docs: HTTP -> HTTPS (fixes #9768) (#9768) (Ronald Eddy Jr)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cbf0fb9 Docs: describe how to feature-detect scopeManager/visitorKeys support (#9764) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'f7dcb70 Docs: Add note about "patch release pending" label to maintainer guide (#9763) (Teddy Katz)'
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.14.0 - December 23, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "be2f57e Update: support separate requires in one-var. (fixes #6175) (#9441) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("370d614 Docs: Fix typos (#9751) (Jed Fox)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8196c45 Chore: Reorganize CLI options and associated docs (#9758) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("75c7419 Update: Logical-and is counted in "),
          _c("code", [_vm._v("complexity")]),
          _vm._v(" rule (fixes #8535) (#9754) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("eb4b1e0 Docs: reintroduce misspelling in "),
          _c("code", [_vm._v("valid-typeof")]),
          _vm._v(" example (#9753) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ae51eb2 New: Add allowImplicit option to array-callback-return (fixes #8539) (#9344) (James C. Davis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e9d5dfd Docs: improve no-extra-parens formatting (#9747) (Rich Trott)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "37d066c Chore: Add unit tests for overrides glob matching. (#9744) (Robert Jackson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "805a94e Chore: Fix typo in CLIEngine test name (#9741) (@scriptdaemon)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1c2aafd Update: Improve parser integrations (fixes #8392) (#8755) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4ddc131 Upgrade: debug@^3.1.0 (#9731) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f252c19 Docs: Make the lint message "),
          _c("code", [_vm._v("source")]),
          _vm._v(" property a little more subtle (#9735) (Jed Fox)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5a5c23c Docs: fix the link to contributing page (#9727) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f44ce11 Docs: change beginner to good first issue label text (#9726) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "14baa2e Chore: improve arrow-body-style error message (refs #5498) (#9718) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("f819920 Docs: fix typos (#9723) (Thomas Broadley)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("43d4ba8 Fix: false positive on rule"),
          _c("code", [_vm._v("lines-between-class-members")]),
          _vm._v(" (fixes #9665) (#9680) (sakabar)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.13.1 - December 11, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "b72dc83 Fix: eol-last allow empty-string to always pass (refs #9534) (#9696) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d80aa7c Fix: camelcase destructure leading/trailing underscore (fixes #9700) (#9701) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d49d9d0 Docs: Add missing period to the README (#9702) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4564fe0 Chore: no-invalid-meta crash if no export assignment (refs #9534) (#9698) (Kevin Partington)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.13.0 - December 8, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "256481b Update: update handling of destructuring in camelcase (fixes #8511) (#9468) (Erin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d067ae1 Docs: Don’t use undocumented array-style configuration for max-len (#9690) (Jed Fox)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1ad3091 Chore: fix test-suite to work with node master (#9688) (Myles Borins)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cdb1488 Docs: Adds an example with try/catch. (#9672) (Jaap Taal)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.12.1 - November 30, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            '1e362a0 Revert "Fix: Use XML 1.1 on XML formatters (fixes #9607) (#9608)" (#9667) (Kevin Partington)'
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.12.0 - November 25, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("76dab18 Upgrade: doctrine@^2.0.2 (#9656) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "28c9c8e New: add a Linter#defineParser function (#9321) (Ives van Hoorne)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5619910 Update: Add autofix for "),
          _c("code", [_vm._v("sort-vars")]),
          _vm._v(" (#9496) (Trevin Hofmann)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("71eedbf Update: add "),
          _c("code", [_vm._v("beforeStatementContinuationChars")]),
          _vm._v(" to semi (fixes #9521) (#9594) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4118f14 New: Adds implicit-arrow-linebreak rule (refs #9510) (#9629) (Sharmila Jesupaul)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "208fb0f Fix: Use XML 1.1 on XML formatters (fixes #9607) (#9608) (Daniel Reigada)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6e04f14 Upgrade: "),
          _c("code", [_vm._v("globals")]),
          _vm._v(" to 11.0.1 (fixes #9614) (#9632) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e13d439 Fix: space-in-parens crash (#9655) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "92171cc Docs: Updating migration guide for single-line disable (#9385) (Justin Helmer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f39ffe7 Docs: remove extra punctuation from readme (#9640) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'a015234 Fix: prefer-destructuring false positive on "super" (fixes #9625) (#9626) (Kei Ito)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0cf081e Update: add importNames option to no-restricted-imports (#9506) (Benjamin R Gibson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "332c214 Docs: Add @platinumazure to TSC (#9618) (Ilya Volodin)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.11.0 - November 10, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "d4557a6 Docs: disallow use of the comma operator using no-restricted-syntax (#9585) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d602f9e Upgrade: espree v3.5.2 (#9611) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4def876 Chore: avoid handling rules instances in config-validator (#9364) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fe5ac7e Chore: fix incorrect comment in safe-emitter.js (#9605) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6672fae Docs: Fixed a typo on lines-between-class-members doc (#9603) (Moinul Hossain)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "980ecd3 Chore: Update copyright and license info (#9599) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cc2c7c9 Build: use Node 8 in appveyor (#9595) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2542f04 Docs: Add missing options for "),
          _c("code", [_vm._v("lines-around-comment")]),
          _vm._v(" (#9589) (Clément Fiorio)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b6a7490 Build: ensure fuzzer tests get run with "),
          _c("code", [_vm._v("npm test")]),
          _vm._v(" (#9590) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1073bc5 Build: remove shelljs-nodecli (refs #9533) (#9588) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7e3bf6a Fix: edge-cases of semi-style (#9560) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e5a37ce Fix: object-curly-newline for flow code (#9458) (Tiddo Langerak)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9064b9c Chore: add equalTokens in ast-utils. (#9500) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b7c5b19 Fix: Correct [object Object] output of error.data. (#9561) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "51c8cf0 Docs: Disambiguate definition of Update tag (#9584) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "afc3c75 Docs: clarify what eslint-config-eslint is (#9582) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "aedae9d Docs: fix spelling in valid-typeof example (#9574) (Maksim Degtyarev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4c5aaf3 Docs: Fix typo in no-underscore-dangle rule (#9567) (Fabien Lucas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3623600 Chore: upgrade ajv@5.3.0 (#9557) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1b606cd Chore: Remove an indirect dependency on jsonify (#9444) (Rouven Weßling)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4d7d7ab Update: Resolve npm installed formatters (#5900) (#9464) (Tom Erik Støwer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'accc490 Fix: Files with no failures get "passing" testcase (#9547) (Samuel Levy)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ab0f66d Docs: Add examples to better show rule coverage. (#9548) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "88d2303 Chore: Add object-property-newline tests to increase coverage. (#9553) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7f37b1c Build: test Node 9 on Travis (#9556) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("acccfbd Docs: Minor rephrase in "),
          _c("code", [_vm._v("no-invalid-this")]),
          _vm._v(". (#9542) (Francisc)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8f9c0fe Docs: improve id-match usage advice (#9544) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a9606a3 Fix: invalid tests with super (fixes #9539) (#9545) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8e1a095 Chore: enable a modified version of multiline-comment-style on codebase (#9452) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cb60285 Chore: remove commented test for HTML formatter (#9532) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "06b491e Docs: fix duplicate entries in changelog (#9530) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2224733 Chore: use eslint-plugin-rulesdir instead of --rulesdir for self-linting (#9164) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9cf4ebe Docs: add .md to link(for github users) (#9529) (薛定谔的猫)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.10.0 - October 27, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "bb6e60a Fix: Improve the doc for no-restricted-modules rule (fixes #9437) (#9495) (vibss2397)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c529de9 Docs: Amend rule document to correct and complete it (refs #6251). (#9498) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f9c6673 Chore: Add tests to cover array and object values and leading commas. (#9502) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9169258 Chore: remove "),
          _c("code", [_vm._v("npm run check-commit")]),
          _vm._v(" script (#9513) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7d390b2 Docs: Revise contributor documentation on issue labels. (#9469) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d80b9d0 Fix: no-var don't fix globals (fixes #9520) (#9525) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b8aa071 Fix: allow linting the empty string from stdin (fixes #9515) (#9517) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "350a72c Chore: regex.test => string.startsWith (#9518) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "de0bef4 Chore: remove obsolete eslintbot templates (#9512) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("720b6d5 Docs: Update ISSUE_TEMPLATE.md (#9504) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2fa64b7 Fix: should not convert non-consecutive line comments to a single blo… (#9475) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9725146 Fix: multiline-comment-style fix produces invalid code (fixes #9461). (#9463) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b12cff8 Fix: Expected order of jsdoc tags (fixes #9412) (#9451) (Orlando Wenzinger)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f054ab5 Docs: add "),
          _c("code", [_vm._v(".md")]),
          _vm._v(" to link (for github users) (#9501) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5ed9cfc Docs: Correct violations of “Variable Declarations” in Code Conventions (#9447) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3171097 Docs: Clears confusion on usage of global and local plugins.(#9492) (Vasili Sviridov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3204773 Chore: enable max-len. (#9414) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0f71fef Docs: Unquote booleans in lines-between-class-members docs (#9497) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b3d7532 Docs: use consistent terminology & fix link etc. (#9490) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("87db8ae Docs: Fix broken links (#9488) (gpiress)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "51bdb2f Docs: Incorrect link to related rule (#9477) (Gavin King)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1a962e8 Docs: Add FAQ for when ESLint cannot find plugin (#9467) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8768b2d Fix: multiline-comment-style autofixer added trailing space (#9454) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e830aa1 Fix: multiline-comment-style reports block comments followed by code (#9450) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b12e5fe Docs: Repair broken links and add migration links. (#9473) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "eca01ed Docs: Add missing info about special status of home-dir config files. (#9472) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "eb8cfb1 Fix: change err report in constant condition (fixes #9398) (#9436) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "da77eb4 Chore: Revise no-config-file test to prevent false failure. (#9443) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '47e5f6f Docs: ensure "good commit message" examples actually follow guidelines (#9466) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ebb530d Update: Don't ignore comments (no-trailing-spaces) (#9416) (Chris van Marle)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5012661 Build: fix "),
          _c("code", [_vm._v("npm run profile")]),
          _vm._v(" script (fixes #9397) (#9455) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ecac0fd Docs: Remove blockBindings references (#9446) (Jan Pilzer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0b89865 Chore: ensure tests for internal rules get run (#9453) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "052c504 Docs: suggest deleting branches after merging PRs (#9449) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b31e55a Chore: move internal rules out of lib/ (#9448) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a7521e3 Docs: improve examples for multiline-comment-style (#9440) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.9.0 - October 14, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "85388fb Fix: Correct error and test messages to fit config search path (#9428) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("62a323c Fix: Add class options for "),
          _c("code", [_vm._v("lines-around-comment")]),
          _vm._v(" (fixes #8564) (#8565) (Ed Lee)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8eb4aae New: multiline-comment-style rule (fixes #8320) (#9389) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "db41408 Chore: avoid applying eslint-env comments twice (#9278) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "febb897 Chore: avoid loose equality assertions (#9415) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2247efa Update: Add FunctionExpression to require-jsdoc (fixes #5867) (#9395) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6791d18 Docs: Corrected noun to verb. (#9438) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b02fbb6 Update: custom messages for no-restricted-* (refs #8400) (Maja Wichrowska)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "02732bd Docs: Reorganized to avoid misunderstandings. (#9434) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d9466b8 Docs: Correct time forecast for tests. (#9432) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f7ed84f Docs: Add instruction re home-directory config files (refs #7729) (#9426) (Jonathan Pool)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "30d018b Chore: Add Aladdin-ADD & VictorHom to README (#9424) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2d8a303 Docs: fix examples for prefer-numeric-literals (#9155) (Lutz Lengemann)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d7610f5 Docs: Add jquery warning to prefer-destructuring (#9409) (Thomas Grainger)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e835dd1 Docs: clarify no-mixed-operators (fixes #8051) (Ruxandra Fediuc)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "51360c8 Docs: update block-spacing details (fixes #8743) (#9375) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6767857 Update: fix ignored nodes in indent rule when using tabs (fixes #9392) (#9393) (Robin Houston)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "37dde77 Chore: Refactor SourceCode#getJSDocComment (#9403) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9fedd51 Chore: Add missing space in blog post template (#9407) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7654c99 Docs: add installing prerequisites in readme. (#9401) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '786cc73 Update: Add "consistent" option to array-bracket-newline (fixes #9136) (#9206) (Ethan Rutherford)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e171f6b Docs: add installing prerequisites. (#9394) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "74dfc87 Docs: update doc for class-methods-use-this (fixes #8910) (#9374) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b4a9dbf Docs: show console call with no-restricted-syntax (fixes #7806) (#9376) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8da525f Fix: recognise multiline comments as multiline arrays (fixes #9211) (#9369) (Phil Quinn)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c581b77 Chore: Error => TypeError (#9390) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ee99876 New: lines-between-class-members rule (fixes #5949) (#9141) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9d3f5ad Chore: report unused eslint-disable directives in ESLint codebase (#9371) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1167638 Update: add allowElseIf option to no-else-return (fixes #9228) (#9229) (Thomas Grainger)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4567ab1 New: Add the fix-dry-run flag (fixes #9076) (#9073) (Rafał Ruciński)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.8.0 - September 29, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "3f2b908 New: add option to report unused eslint-disable directives (fixes #9249) (#9250) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ff2be59 Fix: dot notation rule failing to catch string template (fixes #9350) (#9357) (Phil Quinn)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b1372da Chore: remove sourceCode property from Linter (refs #9161) (#9363) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cef6f8c Docs: remove line about removing rules from semver policy (#9367) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "06efe87 Fix: Add meta element with charset attribute. (#9365) (H1Gdev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "458ca67 Docs: update architecture page (fixes #9337) (#9345) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1c6bc67 Fix: special EventEmitter keys leak information about other rules (#9328) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d593e61 Docs: update eslint.org links to use https (#9358) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "38d0cb2 Fix: fix wrong code-path about try-for-in (fixes #8848) (#9348) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "434d9e2 Fix: Invalid font-size property value issue. (#9341) (H1Gdev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a7668c2 Chore: Remove unnecessary slice from logging utility (#9343) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2ff6fb6 Chore: remove unused arguments in codebase (#9340) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.7.2 - September 21, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "4f87732 Fix: Revert setting node.parent early (fixes #9331) (#9336) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.7.1 - September 18, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "08656db Fix: Handle nested disable directive correctly (fixes #9318) (#9322) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '9226495 Revert "Chore: rewrite parseListConfig for a small perf gain." (#9325) (薛定谔的猫)'
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.7.0 - September 15, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "787b78b Upgrade: Espree v3.5.1 (fixes #9153) (#9314) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1488b51 Update: run rules after "),
          _c("code", [_vm._v("node.parent")]),
          _vm._v(" is already set (fixes #9122) (#9283) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4431d68 Docs: fix wrong config in max-len example. (#9309) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7d24dde Docs: Fix code snippet to refer to the correct option (#9313) (Ruben Tytgat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "12388d4 \bChore: rewrite parseListConfig for a small perf gain. (#9300) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ce1f084 Update: fix MemberExpression handling in no-extra-parens (fixes #9156) (jackyho112)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0c720a3 Update: allow autofixing when using processors (fixes #7510) (#9090) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("838df76 Chore: upgrade deps. (#9289) (薛定谔的猫)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f12def6 Update: indent flatTernary option to handle "),
          _c("code", [_vm._v("return")]),
          _vm._v(" (fixes #9285) (#9296) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e220687 Fix: remove autofix for var undef inits (fixes #9231) (#9288) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "002e199 Docs: fix no-restricted-globals wrong config. (#9305) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fcfe91a Docs: fix wrong config in id-length example. (#9303) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2731f94 Update: make newline-per-chained-call fixable (#9149) (João Granado)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "61f1093 Chore: avoid monkeypatching Linter instances in RuleTester (#9276) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "28929cb Chore: remove Linter#reset (refs #9161) (#9268) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "abc8634 Build: re-run browserify when generating site (#9275) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7685fed Fix: IIFE and arrow functions in no-invalid-this (fixes #9126) (#9258) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2b1eba2 Chore: enable eslint-plugin/no-deprecated-context-methods (#9279) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "981f933 Fix: reuse the AST of source code object in verify (#9256) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cd698ba Docs: move RuleTester documentation to Node.js API page (#9273) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4ae7ad3 Docs: fix inaccuracy in "),
          _c("code", [_vm._v("npm run perf")]),
          _vm._v(" description (#9274) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cad45bd Docs: improve documentation for rule contexts (#9272) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3b0c6fd Chore: remove extraneous linter properties (refs #9161) (#9267) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c3231b3 Docs: Fix typo in array-bracket-newline.md (#9269) (宋文强)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "51132d6 Fix: Formatters keep trailing '.' if preceded by a space (fixes #9154) (#9247) (i-ron-y)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "88d5d4d Chore: remove undocumented Linter#markVariableAsUsed method (refs #9161) (#9266) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "09414cf Chore: remove internal Linter#getDeclaredVariables method (refs #9161) (#9264) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f31f59d Chore: prefer smaller scope for variables in codebase (#9265) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3693e4e Chore: remove undocumented Linter#getScope method (#9253) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5d7eb81 Chore: refactor config hash caching in CLIEngine (#9260) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1a76c4d Chore: remove SourceCode passthroughs from Linter.prototype (refs #9161) (#9263) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "40ae27b Chore: avoid relying on Linter#getScope/markVariableAsUsed in tests (#9252) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b383d81 Chore: make executeOnFile a pure function in CLIEngine (#9262) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5e0e579 Chore: avoid internal SourceCode methods in Linter tests (refs #9161) (#9223) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "adab827 Chore: remove unused eslint-disable comment (#9251) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "31e4ec8 Chore: use consistent names for apply-disable-directives in tests (#9246) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7ba46e6 Fix: shebang error in eslint-disable-new-line; add tests (fixes #9238) (#9240) (i-ron-y)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8f6546c Chore: remove undocumented defaults() method (refs #9161) (#9237) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "82d8b73 Docs: Fix error in example code for sort-imports (fixes #8734) (#9245) (i-ron-y)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a32ec36 Update: refactor eslint-disable comment processing (#9216) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "583f0b8 Chore: avoid using globals in CLIEngine tests (#9242) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c8bf687 Chore: upgrade eslint-plugin-eslint-plugin@1.0.0 (#9234) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3c41a05 Chore: always normalize rules to new API in rules.js (#9236) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c5f4227 Chore: move logic for handling missing rules to rules.js (#9235) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bf1e344 Chore: create report translators lazily (#9221) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2eedc1f Chore: remove currentFilename prop from Linter instances (refs #9161) (#9219) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5566e94 Docs: Replace misleading CLA links (#9133) (#9232) (i-ron-y)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c991630 Chore: remove ConfigOps.normalize in favor of ConfigOps.getRuleSeverity (#9224) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "171962a Chore: remove internal Linter#getAncestors helper (refs #9161) (#9222) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a567499 Chore: avoid storing list of problems on Linter instance (refs #9161) (#9214) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ed6d088 Chore: avoid relying on undocumented Linter#getFilename API in tests (#9218) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.6.1 - September 3, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "bdec46d Build: avoid process leak when generating website (#9217) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cb74b87 Fix: avoid adding globals when an env is used with "),
          _c("code", [_vm._v("false")]),
          _vm._v(" (fixes #9202) (#9203) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f9b7544 Docs: Correct a typo in generator-star-spacing documentation (#9205) (Ethan Rutherford)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e5c5e83 Build: Fixing issue with docs generation (Fixes #9199) (#9200) (Ilya Volodin)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.6.0 - September 1, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "56dd769 Docs: fix link format in prefer-arrow-callback.md (#9198) (Vse Mozhet Byt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6becf91 Update: add eslint version to error output. (fixes #9037) (#9071) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0e09973 New: function-paren-newline rule (fixes #6074) (#8102) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "88a64cc Chore: Make parseJsonConfig() a pure function in Linter (#9186) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1bbac51 Fix: avoid breaking eslint-plugin-eslint-comments (fixes #9193) (#9196) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3e8b70a Fix: off-by-one error in eslint-disable comment checking (#9195) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "73815f6 Docs: rewrite prefer-arrow-callback documentation (fixes #8950) (#9077) (Charles E. Morgan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0d3a854 Chore: avoid mutating report descriptors in report-translator (#9189) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2db356b Update: no-unused-vars Improve message to include the allowed patterns (#9176) (Eli White)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8fbaf0a Update: Add configurability to generator-star-spacing (#8985) (Ethan Rutherford)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8ed779c Chore: remove currentScopes property from Linter instances (refs #9161) (#9187) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "af4ad60 Fix: Handle error when running init without npm (#9169) (Gabriel Aumala)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4b94c6c Chore: make parse() a pure function in Linter (refs #9161) (#9183) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1be5634 Chore: don't make Linter a subclass of EventEmitter (refs #9161) (#9177) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e95af9b Chore: don't include internal test helpers in npm package (#9160) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6fb32e1 Chore: avoid using private Linter APIs in astUtils tests (refs #9161) (#9173) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "de6dccd Docs: add documentation for Linter methods (refs #6525) (#9151) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2d90030 Chore: remove unused assignment. (#9182) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d672aef Chore: refactor reporting logic (refs #9161) (#9168) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '5ab0434 Fix: indent crash on sparse arrays with "off" option (fixes #9157) (#9166) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c147b97 Chore: Make SourceCodeFixer accept text instead of a SourceCode instance (#9178) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f127423 Chore: avoid using private Linter APIs in Linter tests (refs #9161) (#9175) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2334335 Chore: avoid using private Linter APIs in SourceCode tests (refs #9161) (#9174) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2dc243a Chore: avoid using internal Linter APIs in RuleTester (refs #9161) (#9172) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d6e436f Fix: no-extra-parens reported some parenthesized IIFEs (fixes #9140) (#9158) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e6b115c Build: Add an edit link to the rule docs’ metadata (#9049) (Jed Fox)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fcb7bb4 Chore: avoid unnecessarily complex forEach calls in no-extra-parens (#9159) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ffa021e Docs: quotes rule - when does \\n require backticks (#9135) (avimar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "60c5148 Chore: improve coverage in lib/*.js (#9130) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.5.0 - August 18, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("decdd2c Update: allow arbitrary nodes to be ignored in "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" (fixes #8594) (#9105) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("79062f3 Update: fix indentation of multiline "),
          _c("code", [_vm._v("new.target")]),
          _vm._v(" expressions (#9116) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d00e24f Upgrade: "),
          _c("code", [_vm._v("chalk")]),
          _vm._v(" to 2.x release (#9115) (Stephen Edgar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6ef734a Docs: add missing word in processor documentation (#9106) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a4f53ba Fix: Include files with no messages in junit results (#9093) (#9094) (Sean DuBois)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1d6a9c0 Chore: enable eslint-plugin/test-case-shorthand-strings (#9067) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f8add8f Fix: don't autofix with linter.verifyAndFix when "),
          _c("code", [_vm._v("fix: false")]),
          _vm._v(" is used (#9098) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "77bcee4 Docs: update instructions for adding TSC members (#9086) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bd09cd5 Update: avoid requiring NaN spaces of indentation (fixes #9083) (#9085) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c93a853 Chore: Remove extra space in blogpost template (#9088) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.4.1 - August 7, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "ec93614 Fix: no-multi-spaces to avoid reporting consecutive tabs (fixes #9079) (#9087) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.4.0 - August 5, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("89196fd Upgrade: Espree to 3.5.0 (#9074) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b3e4598 Fix: clarify AST and don't use "),
          _c("code", [_vm._v("node.start")]),
          _vm._v("/"),
          _c("code", [_vm._v("node.end")]),
          _vm._v(" (fixes #8956) (#8984) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "62911e4 Update: Add ImportDeclaration option to indent rule (#8955) (David Irvine)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "de75f9b Chore: enable object-curly-newline & object-property-newline.(fixes #9042) (#9068) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5ae8458 Docs: fix typo in object-shorthand.md (#9066) (Jon Berry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c3d5b39 Docs: clarify options descriptions (fixes #8875) (#9060) (Brandon Mailhiot)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "37158c5 Docs: clarified behavior of globalReturn option (fixes #8953) (#9058) (Brandon Mailhiot)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c2f3553 Docs: Update example for MemberExpression option of indent (fixes #9056) (#9057) (Jeff)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "78a85e0 Fix: no-extra-parens incorrectly reports async function expressions (#9035) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c794f86 Fix: getter-return reporting method named 'get' (fixes #8919) (#9004) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d0f78ec Docs: update rule deprecation policy (fixes #8635) (#9033) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5ab282f Fix: Print error message in bin/eslint.js (fixes #9011) (#9041) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "50e3cf3 Docs: Update sort-keys doc to define natural ordering (fixes #9043) (#9045) (Karan Sharma)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7ecfe6a Chore: enable eslint-plugin/test-case-property-ordering (#9040) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ad32697 Upgrade: js-yaml to 3.9.1 (refs #9011) (#9044) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("66c1d43 Docs: Create SUPPORT.md (#9031) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7247b6c Update: handle indentation of custom destructuring syntax (fixes #8990) (#9027) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cdb82f2 Fix: padding-line-between-statements crash on semicolons after blocks (#8748) (Alexander Madyankin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3141872 Chore: remove unnecessary eslint-disable comments in codebase (#9032) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0f97279 Fix: refactor no-multi-spaces to avoid regex backtracking (fixes #9001) (#9008) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b74514d Fix: refactor RuleContext to not modify report locations (fixes #8980) (#8997) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("31d7fd2 Fix: inconsistent "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " behavior on computed properties (fixes #8989) (#8999) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3393894 Fix: avoid reporting the entire AST for missing rules (#8998) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b3b95b8 Chore: enable additional rules on ESLint codebase (#9013) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9b6c552 Upgrade: eslint-plugin-eslint-plugin@0.8.0 (#9012) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "acbe86a Chore: disallow .substr and .substring in favor of .slice (#9010) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d0536d6 Chore: Optimizes adding Linter methods (fixes #9000) (#9007) (Sean C Denison)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0a0401f Chore: fix spelling error. (#9003) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3d020b9 Update: emit a warning for ecmaFeatures rather than throwing an error (#8974) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d2f8f9f Fix: include name of invalid config in validation messages (fixes #8963) (#8973) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c3ee46b Chore: fix misleading comment in RuleTester (#8995) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.3.0 - July 21, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "91dccdf Update: support more options in prefer-destructuring (#8796) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3bebcfd Update: Support generator yields in no constant condition (#8762) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "96df8c9 Fix: Handle fixing objects containing comments (fixes #8484) (#8944) (Brian Schemp)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e39d41d Docs: Make "),
          _c("code", [_vm._v("peerDependencies")]),
          _vm._v(" package.json snippet valid JSON (#8971) (Sam Adams)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a5fd101 Fix: duplicated error message if a crash occurs (fixes #8964) (#8965) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f8d122c Docs: trailing commas not allowed in json (#8969) (Scott Fletcher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d09288a Chore: Use "),
          _c("code", [_vm._v("output: null")]),
          _vm._v(
            " to assert that a test case is not autofixed. (#8960) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e639358 Update: add question to confirm downgrade (fixes #8870) (#8911) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "601039d Docs: fix badge in eslint-config-eslint readme (#8954) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3c231fa Update: add enforceInMethodNames to no-underscore-dangle (fixes #7065) (#7234) (Gabriele Petronella)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "128591f Update: prefer-numeric-literals warns Number.parseInt (fixes #8913) (#8929) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "846f8b1 Docs: Clarified that core PRs require issue in maintainer guide (#8927) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "55bc35d Fix: Avoid shell mangling during eslint --init (#8936) (Anders Kaseorg)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("10c3d78 Chore: fix misleading "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" test (#8925) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fb8005d Update: no-restricted-globals custom error messages (fixes #8315) (#8932) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a747b6f Chore: make minor improvements to "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" internals (#8947) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1ea3723 Update: fix indentation of parenthesized MemberExpressions (fixes #8924) (#8928) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9abc6f7 Update: fix BinaryExpression indentation edge case (fixes #8914) (#8930) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0e90453 Docs: Fixing broken cyclomatic complexity link (fixes #8396) (#8937) (Chris Bargren)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a8a8350 Chore: improve performance of "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" rule (#8905) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("764b2a9 Chore: update header info in "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" (#8926) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "597c217 Fix: confusing error if plugins from config is not an array (#8888) (Calvin Freitas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3c1dd6d Docs: add description of no-sync "),
          _c("code", [_vm._v("allowAtRootLevel")]),
          _vm._v(" option (fixes #8902) (#8906) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "933a9cf Chore: add a fuzzer to detect bugs in core rules (#8422) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "45f8cd9 Docs: fix verifyAndFix result property name (#8903) (Tino Vyatkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1a89e1c Docs: Fix always-multiline example in multiline-ternary docs (#8904) (Nathan Woltman)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.2.0 - July 8, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "e0f0101 Update: fix indentation of nested function parameters (fixes #8892) (#8900) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9f95a3e Chore: remove unused helper method from "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" (#8901) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "11ffe6b Fix: no-regex-spaces rule incorrectly fixes quantified spaces (#8773) (Keri Warr)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "975dacf Update: fix indentation of EmptyStatements (fixes #8882) (#8885) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "88ed041 Build: Turnoff CI branch build (fixes #8804) (#8873) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "72f22eb Chore: replace is-my-json-valid with Ajv (#8852) (Gajus Kuizinas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7c8de92 Docs: Clarified PR guidelines in maintainer guide (#8876) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d1fc408 Docs: Update CLA link in Contributing docs (#8883) (Calvin Freitas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "931a9f1 Fix: indent false positive with multi-line await expression (#8837) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3767cda Update: add no-sync option to allow at root level (fixes #7985) (#8859) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1ce553d Docs: Fix wording of minProperties in object-curly-newline (fixes #8874) (#8878) (solmsted)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f00854e Fix: --quiet no longer fixes warnings (fixes #8675) (#8858) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b678535 Chore: Add collapsible block for config in ISSUE_TEMPLATE (#8872) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1f5bfc2 Update: Add always-multiline option to multiline-ternary (fixes #8770) (#8841) (Nathan Woltman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "22116f2 Fix: correct comma-dangle JSON schema (#8864) (Evgeny Poberezkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "676af9e Update: fix indentation of JSXExpressionContainer contents (fixes #8832) (#8850) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "330dd58 Chore: fix title of linter test suite (#8861) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "60099ed Chore: enable for-direction rule on ESLint codebase (#8853) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e0d1a84 Chore: upgrade eslint-plugin-eslint-plugin & eslint-plugin-node (#8856) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0780d86 Chore: remove identical tests (#8851) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5c3ac8e Fix: arrow-parens fixer gets tripped up with trailing comma in args (#8838) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c4f2e29 Build: fix race condition in demo (#8827) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c693be5 New: Allow passing a function as "),
          _c("code", [_vm._v("fix")]),
          _vm._v(" option (fixes #8039) (#8730) (Ian VanSchooten)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8796d55 Docs: add missing item to 4.0 migration guide table of contents (#8835) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("742998c doc md update: false -> "),
          _c("code", [_vm._v("false")]),
          _vm._v(" (#8825) (Erik Vold)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ce969f9 Docs: add guidelines for patch release communication (fixes #7277) (#8823) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5c83c99 Docs: Clarify arrow function parens in no-extra-parens (fixes #8741) (#8822) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "84d921d Docs: Added note about Node/CJS scoping to no-redeclare (fixes #8814) (#8820) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "85c9327 Update: fix parenthesized CallExpression indentation (fixes #8790) (#8802) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "be8d354 Update: simplify variable declarator indent handling (fixes #8785) (#8801) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9417818 Fix: no-debugger autofixer produced invalid syntax (#8806) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8698a92 New: getter-return rule (fixes #8449) (#8460) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'eac06f2 Fix: no-extra-parens false positives for variables called "let" (#8808) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '616587f Fix: dot-notation autofix produces syntax errors for object called "let" (#8807) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a53ef7e Fix: don't require a third argument in linter.verifyAndFix (fixes #8805) (#8809) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5ad8b70 Docs: add minor formatting improvement to paragraph about parsers (#8816) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.1.1 - June 25, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "f307aa0 Fix: ensure configs from a plugin are cached separately (fixes #8792) (#8798) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8b48ae8 Docs: Add doc on parser services (fixes #8390) (#8795) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0d041e7 Fix: avoid crashing when using baseConfig with extends (fixes #8791) (#8797) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("03213bb Chore: improve comment explanation of "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" internal functions (#8800) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d2e88ed Chore: Fix misleading comment in ConfigCache.js (#8799) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.1.0 - June 23, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("e8f1362 Docs: Remove wrong descriptions in "),
          _c("code", [_vm._v("padded-block")]),
          _vm._v(" rule (#8783) (Plusb Preco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("291a783 Update: "),
          _c("code", [_vm._v("enforceForArrowConditionals")]),
          _vm._v(" to "),
          _c("code", [_vm._v("no-extra-parens")]),
          _vm._v(" (fixes #6196) (#8439) (Evilebot Tnawi)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a21dd32 New: Add "),
          _c("code", [_vm._v("overrides")]),
          _vm._v("/"),
          _c("code", [_vm._v("files")]),
          _vm._v(
            " options for glob-based config (fixes #3611) (#8081) (Sylvan Mably)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "879688c Update: Add ignoreComments option to no-trailing-spaces (#8061) (Jake Roussel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b58ae2e Chore: Only instantiate fileEntryCache when cache flage set (perf) (#8763) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9851288 Update: fix indent errors on multiline destructure (fixes #8729) (#8756) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3608f06 Docs: Increase visibility of code of conduct (fixes #8758) (#8764) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "673a58b Update: support multiple fixes in a report (fixes #7348) (#8101) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7a1bc38 Fix: don't pass default parserOptions to custom parsers (fixes #8744) (#8745) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c5b4052 Chore: enable computed-property-spacing on ESLint codebase (#8760) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3419f64 Docs: describe how to use formatters on the formatter demo page (#8754) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a3ff8f2 Chore: combine tests in tests/lib/eslint.js and tests/lib/linter.js (#8746) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b7cc1e6 Fix: Space-infix-ops should ignore type annotations in TypeScript (#8341) (Reyad Attiyat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "46e73ee Fix: eslint --init installs wrong dependencies of popular styles (fixes #7338) (#8713) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a82361b Chore: Prevent package-lock.json files from being created (fixes #8742) (#8747) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5f81a68 New: Add eslintIgnore support to package.json (fixes #8458) (#8690) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b5a70b4 Update: fix multiline binary operator/parentheses indentation (#8719) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'ab8b016 Update: fix MemberExpression indentation with "off" option (fixes #8721) (#8724) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "eb5d12c Update: Add Fixer method to Linter API (#8631) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "26a2daa Chore: Cache fs reads in ignored-paths (fixes #8363) (#8706) (Victor Hom)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.0.0 - June 11, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "4aefb49 Chore: avoid using deprecated rules on ESLint codebase (#8708) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("389feba Chore: upgrade deps. (#8684) (薛定谔的猫)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3da7b5e Fix: Semi-Style only check for comments when tokens exist (fixes #8696) (#8697) (Reyad Attiyat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3cfe9ee Fix: Add space between async and param on fix (fixes #8682) (#8693) (Reyad Attiyat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c702858 Chore: enable no-multiple-empty-lines on ESLint codebase (#8694) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "34c4020 Update: Add support for parens on left side for-loops (fixes: #8393) (#8679) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("735cd09 Docs: Correct the comment in an example for "),
          _c("code", [_vm._v("no-mixed-requires")]),
          _vm._v(" (#8686) (Fangzhou Li)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "026f048 Chore: remove dead code from prefer-const (#8683) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.0.0-rc.0 - June 2, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "0058b0f8 Update: add --fix to no-debugger (#8660) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b4daa225 Docs: Note to --fix option for strict rule (#8680) (Vitaliy Potapov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4df33e7c Chore: check for root:true in project sooner (fixes #8561) (#8638) (Victor Hom)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c9b980ce Build: Add Node 8 on travis (#8669) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "95248336 Fix: Don't check object destructing in integer property (fixes #8654) (#8657) (flowmemo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c4ac969c Update: fix parenthesized ternary expression indentation (fixes #8637) (#8649) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4f2f9fcb Build: update license checker to allow LGPL (fixes #8647) (#8652) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b0c83bd1 Docs: suggest pushing new commits to a PR instead of amending (#8632) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d0e9fd2d Fix: Config merge to correctly account for extends (fixes #8193) (#8636) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "705d88f7 Docs: Update CLA link on Pull Requests page (#8642) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("794d4d6c Docs: missing paren on readme (#8640) (Dan Beam)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7ebd9d6f New: array-element-newline rule (fixes #6075) (#8375) (Jan Peer Stöcklmair)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f62cff66 Chore: Remove dependency to user-home (fixes #8604) (#8629) (Pavol Madar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "936bc174 Docs: Add missing documentation for scoped modules in sharable config developer-guide (#8610) (Jonathan Samines)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.0.0-beta.0 - May 19, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "2f7015b6 New: semi-style rule (fixes #8169) (#8542) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '1eaef580 Revert "Breaking: Traverse into type annotations (fixes #7129) (#8365)" (#8584) (Kai Cataldo)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "eb14584a Fix: no-unneeded-ternary change code behavior after fix (fixes #8507) (#8624) (Jan Peer Stöcklmair)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3ec436ee Breaking: New Linter API (fixes #8454) (#8465) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3fc9653a Fix: Call expression consistency in variable declaration (fixes #8607) (#8619) (Reyad Attiyat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5b6093ef Docs: Remove .eslintignore reference to transpiled file filtering (#8622) (Alex Summer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("729bbcdb Chore: Fix lgtm alerts. (#8611) (Max Schaefer)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3418479a Update: improve indent of "),
          _c("code", [_vm._v("flatTernaryExpressions")]),
          _vm._v(" (fixes #8481) (#8587) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "268d52ef Update: Use sane defaults for JSX indentation (fixes #8425) (#8593) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d21f5283 Chore: make shelljs a devDependency instead of a dependency (#8608) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "11493781 Docs: Rephrase in about section (#8609) (Sudarsan G P)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "23401626 Chore: remove strip-bom dependency (refs #8603) (#8606) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a93a2f95 New: padding-line-between-statements rule (fixes #7356) (#8099) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0ef09ea0 New: for-direction rule (fixes #8387) (#8519) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a73e6c09 Fix: Fix failing uknown node test since #8569 indents class bodies (#8588) (Reyad Attiyat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c6c639d6 Fix: Ignore unknown nodes for Indent rule (fixes #8440) (#8504) (Reyad Attiyat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "df17bc87 Fix: object-shorthand crash on some computed keys (fixes #8576) (#8577) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "482d5720 New: switch-colon-spacing rule (fixes #7981) (#8540) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "afa35c68 Update: check allman-style classes correctly in indent (fixes #8493) (#8569) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "de0b4ad7 Fix: Indent Ignore Variable Declaration init operator (fixes #8546) (#8563) (Reyad Attiyat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "927ca0dc Fix: invalid syntax from prefer-arrow-callback autofixer (fixes #8541) (#8555) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "25db3d22 Chore: avoid skipping test for env overrides (refs #8291) (#8556) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "456f519b Update: make indent MemberExpression handling more robust (fixes #8552) (#8554) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "873310e5 Fix: run no-unexpected-multiline only if needed (fixes #8550) (#8551) (Ruben Bridgewater)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "833a0cad Fix: confusing RuleTester error message when options is not an array (#8557) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.0.0-alpha.2 - May 5, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "74ab344 Update: check allman-style blocks correctly in indent rule (fixes #8493) (#8499) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f6256d4 Update: no-extend-native checks global scope refs only (fixes #8461) (#8528) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b463045 Docs: add typescript-eslint-parser (#8388) (#8534) (薛定谔的猫)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "99c56d5 Update: handle multiline parents consistently in indent (fixes #8455) (#8498) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cf940c6 Update: indent "),
          _c("code", [_vm._v("from")]),
          _vm._v(
            " tokens in import statements (fixes #8438) (#8466) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0a9a90f Fix: max-len doesn't allow comments longer than code (#8532) (Ken Gregory)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "734846b Breaking: validate eslintrc properties (fixes #8213) (#8295) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("025e97a Chore: delete duplicated test. (#8527) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6a333ff Upgrade: espree@^3.4.2 (#8526) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e52d998 Docs: Configuring Cascading and Hierarchy example correction (#8512) (Cheong Yip)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e135aa5 Docs: Correct code of conduct link on Readme.md (#8517) (Zander Mackie)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "37e3ba1 Chore: Add license report and scan status (#8503) (Kevin Wang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "afbea78 Chore: don't pull default options from eslint:recommended (fixes #8374) (#8381) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d49acc3 Update: fix no-self-compare false negative on non-literals (fixes #7677) (#8492) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "aaa1a81 Fix: avoid creating extra whitespace in brace-style fixer (fixes #7621) (#8491) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9c3da77 Docs: list another related rule in no-undefined (#8467) (Ethan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f987814 Docs: Update CHANGELOG.md for v4.0.0-alpha.1 release (#8488) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.0.0-alpha.1 - April 21, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "b0dadfe3 Docs: Update comments section of Migrating to v4.0.0 (#8486) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b337738f Update: Add "),
          _c("code", [_vm._v("consistent")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("object-curly-newline")]),
          _vm._v(" (fixes #6488) (#7720) (Evilebot Tnawi)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "53fefb3b Update: add fix for no-confusing-arrow (#8347) (Mordy Tikotzky)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "735d02d5 Update: Deprecate sourceCode.getComments() (fixes #8408) (#8434) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ac39e3b0 Update: no-unexpected-multiline to flag confusing division (fixes #8469) (#8475) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e35107f0 Fix: indent crash on arrow functions without parens at start of line (#8477) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "973adeb6 Docs: State that functions option only applies in ES2017 (fixes #7809) (#8468) (Thenaesh Elango)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7bc6fe0a New: array-bracket-newline rule (#8314) (Jan Peer Stöcklmair)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "10a1a2d7 Chore: Do not use cache when testing (#8464) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9f540fd2 Update: no-unused-vars false negative about destructuring (fixes #8442) (#8459) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "741ed393 Docs: Clarify how to run local ESLint installation (#8463) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fac53890 Breaking: Remove array-callback-return from recommended (fixes #8428) (#8433) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("288c96c1 Upgrade: dependencies (#8304) (alberto)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "48700fc8 Docs: Remove extra header line from LICENSE (#8448) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "161ee4ea Chore: avoid cloning comments array in TokenStore (#8436) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0c2a386e Docs: clarify new indent behavior with MemberExpressions (#8432) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "446b8876 Docs: update space-before-function-paren docs for 4.0 (fixes #8430) (#8431) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v4.0.0-alpha.0 - April 7, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "950874f Docs: add 4.0.0 migration guide (fixes #8306) (#8313) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2754141 Fix: more autofix token-combining bugs (#8394) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f5a7e42 Breaking: log number of fixable problems (fixes #7364) (#8324) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "769b121 Chore: Fix indentation errors in indent-legacy (#8424) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8394e48 Update: add deprecated indent-legacy rule as v3.x indent rule snapshot (#8286) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3c87e85 Fix: no-multi-spaces false positive with irregular indent whitespace (#8412) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cc53481 Breaking: rewrite indent (fixes #1801, #3737, #3845, #6007, ...16 more) (#7618) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "867dd2e Breaking: Calculate leading/trailing comments in core (#7516) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "de9f1a0 Docs: ES6 syntax vs globals configuration (fixes #7984) (#8350) (Zander Mackie)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "66af53e Breaking: Traverse into type annotations (fixes #7129) (#8365) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "86cf3e4 New: no-buffer-constructor rule (fixes #5614) (#8413) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f560c06 Update: fix space-unary-ops behavior with postfix UpdateExpressions (#8391) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "936af66 Fix: no-multiple-empty-lines crash on space after last \\n (fixes #8401) (#8402) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e395919 Breaking: Resolve patterns from .eslintignore directory (fixes #6759) (#7678) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c778676 Breaking: convert RuleTester to ES6 class (refs #8231) (#8263) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6f7757e Breaking: convert SourceCode to ES6 class (refs #8231) (#8264) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8842d7e Chore: fix comment spacing in tests (#8405) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9a9d916 Breaking: update eslint:recommended for 4.0.0 (fixes #8236) (#8372) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b0c63f0 Breaking: infer endLine and endColumn from a reported node (fixes #8004) (#8234) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "40b8c69 Breaking: no-multi-spaces check around inline comments (fixes #7693) (#7696) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "034a575 Breaking: convert CLIEngine to ES6 class (refs #8231) (#8262) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7dd890d Breaking: tweak space-before-function-paren default option (fixes #8267) (#8285) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0e0dd27 Breaking: Remove "),
          _c("code", [_vm._v("ecmaFeatures")]),
          _vm._v(" from "),
          _c("code", [_vm._v("eslint:recommended")]),
          _vm._v(" (#8239) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2fa7502 Breaking: disallow scoped plugin references without scope (fixes #6362) (#8233) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4673f6e Chore: Switch to eslint-scope from escope (#8280) (Corbin Uselton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e232464 Breaking: change defaults for padded-blocks (fixes #7879) (#8134) (alberto)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.19.0 - March 31, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "e09132f Fix: no-extra-parens false positive with exports and object literals (#8359) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "91baed4 Update: allow custom messages in no-restricted-syntax (fixes #8298) (#8357) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "35c93e6 Fix: prevent space-before-function-paren from checking type annotations (#8349) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3342e9f Fix: don't modify operator precedence in operator-assignment autofixer (#8358) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f88375f Docs: clarify that no-unsafe-negation is in eslint:recommended (#8371) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "02f0d27 Docs: Add soda0289 to Development Team (#8367) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "155424c Fix: ignore empty path in patterns (fixes #8362) (#8364) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "27616a8 Fix: prefer-const false positive with object spread (fixes #8187) (#8297) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8569a90 Docs: add note about git's linebreak handling to linebreak-style docs (#8361) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5878593 Chore: fix invalid syntax in no-param-reassign test (#8360) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '1b1046b Fix: don\'t classify plugins that throw errors as "missing" (fixes #6874) (#8323) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "29f4ba5 Fix: no-useless-computed-key invalid autofix for getters and setters (#8335) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0541eaf Fix: no-implicit-coercion invalid autofix with consecutive identifiers (#8340) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "41b9786 Fix: no-extra-parens false positive with objects following arrows (#8339) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3146167 Fix: "),
          _c("code", [_vm._v("eslint.verify")]),
          _vm._v(
            " should not mutate config argument (fixes #8329) (#8334) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "927de90 Fix: dot-notation autofix produces invalid syntax for integer properties (#8332) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a9d1bea Fix: comma-style autofix produces errors on parenthesized elements (#8331) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d52173f Fix: don't generate invalid options in config-rule (#8326) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6eda3b5 Fix: no-extra-parens invalid autofix in for-of statements (#8337) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6c819d8 Fix: dot-notation autofix produces errors on parenthesized computed keys (#8330) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2d883d7 Fix: object-shorthand autofix produces errors on parenthesized functions (#8328) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cd9b774 Fix: quotes false positive with backtick option in method names (#8327) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d064ba2 Fix: no-else-return false positive for ifs in single-statement position (#8338) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6a718ba Chore: enable max-statements-per-line on ESLint codebase (#8321) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "614b62e Chore: update sinon calls to deprecated API. (#8310) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0491572 Chore: use precalculated counts in codeframe formatter (#8296) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8733e6a Chore: Fix incorrect error location properties in tests (#8307) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c4ffb49 Chore: Fix typos in test option assertions (#8305) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("79a97cb Upgrade: devDependencies (#8303) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e4da200 Upgrade: Mocha to 3.2.0 (#8299) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2f144ca Fix: operator-assignment autofix errors with parentheses (fixes #8293) (#8294) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7521cd5 Chore: update token logic in rules to use ast-utils (#8288) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9b509ce Chore: refactor space-before-function-paren rule (#8284) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ddc6350 Fix: no-param-reassign false positive on destructuring (fixes #8279) (#8281) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f8176b3 Chore: improve test coverage for node-event-generator (#8287) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "602e9c2 Docs: fix incorrect selector examples (#8278) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.18.0 - March 17, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "85f74ca Fix: broken code path of direct nested loops (fixes #8248) (#8274) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a61c359 Fix: Ignore hidden folders when resolving globs (fixes #8259) (#8270) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6f05546 Chore: convert StubModuleResolver in config tests to ES6 class (#8265) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0c0fc31 Fix: false positive of no-extra-parens about spread and sequense (#8275) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e104973 Docs: remove self-reference in no-restricted-syntax docs (#8277) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "23eca51 Update: Add allowTaggedTemplates to no-unused-expressions (fixes #7632) (#8253) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f9ede3f Upgrade: doctrine to 2.0.0 (#8269) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1b678a6 New: allow rules to listen for AST selectors (fixes #5407) (#7833) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "63ca0c5 Chore: use precalculated counts in stylish formatter (#8251) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "47c3171 Fix: typo in console.error (#8258) (Jan Peer Stöcklmair)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e74ed6d Chore: convert Traverser to ES6 class (refs #7849) (#8232) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "13eead9 Fix: sort-vars crash on mixed destructuring declarations (#8245) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "133f489 Fix: func-name-matching crash on destructuring assignment to functions (#8247) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a34b9c4 Fix: func-name-matching crash on non-string literal computed keys (#8246) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7276e6d Docs: remove unneeded semicolons in arrow-parens.md (#8249) (Dmitry Gershun)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8c40a25 concat-stream known to be vulnerable prior 1.5.2 (#8228) (Samuel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "149c055 Upgrade: mock-fs to v4.2.0 (fixes #8194) (#8243) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a83bff9 Build: remove unneeded json config in demo (fixes #8237) (#8242) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("df12137 Docs: fix typos (#8235) (Gyandeep Singh)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b5e9788 Chore: rename no-extra-parens methods (#8225) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7f8afe6 Update: no-extra-parens overlooked spread and superClass (fixes #8175) (#8209) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ce6ff56 Docs: set recommended true for no-global-assign (fixes #8215) (#8218) (BinYi LIU)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5b5c236 Fix: wrong comment when module not found in config (fixes #8192) (#8196) (alberto)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.17.1 - March 6, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "f8c8e6e Build: change mock-fs path without SSH (fixes #8207) (#8208) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f713f11 Fix: nonblock-statement-body-position multiline error (fixes #8202) (#8203) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("41e3d9c Fix: "),
          _c("code", [_vm._v("operator-assignment")]),
          _vm._v(
            " with parenthesized expression (fixes #8190) (#8197) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5e3bca7 Chore: add eslint-plugin-eslint-plugin (#8198) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("580da36 Chore: add missing "),
          _c("code", [_vm._v("output")]),
          _vm._v(" property to tests (#8195) (alberto)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.17.0 - March 3, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("4fdf6d7 Update: deprecate "),
          _c("code", [_vm._v("applyDefaultPatterns")]),
          _vm._v(" in "),
          _c("code", [_vm._v("line-comment-position")]),
          _vm._v(" (#8183) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("25e5817 Fix: Don't autofix "),
          _c("code", [_vm._v("+ +a")]),
          _vm._v(" to "),
          _c("code", [_vm._v("++a")]),
          _vm._v(" in space-unary-ops (#8176) (Alan Pierce)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a6ce8f9 Build: Sort rules before dumping them to doc files (#8154) (Danny Andrews)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0af9057 Chore: Upgrade to a patched version of mock-fs (fixes #8177) (#8188) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bf4d8cf Update: ignore eslint comments in lines-arount-comment (fixes #4345) (#8155) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dad20ad New: add SourceCode#getLocFromIndex and #getIndexFromLoc (fixes #8073) (#8158) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "18a519f Update: let RuleTester cases assert that no autofix occurs (fixes #8157) (#8163) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a30eb8d Docs: improve documentation for RuleTester cases (#8162) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a78ec9f Chore: upgrade "),
          _c("code", [_vm._v("coveralls")]),
          _vm._v(" to ^2.11.16 (#8161) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d02bd11 Fix: padded-blocks autofix problems with comments (#8149) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9994889 Docs: Add missing space to "),
          _c("code", [_vm._v("create")]),
          _vm._v(" in "),
          _c("code", [_vm._v("no-use-before-define")]),
          _vm._v(" (#8166) (Justin Anastos)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4d542ba Docs: Remove unneeded statement about autofix (#8164) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("20daea5 New: no-compare-neg-zero rule (#8091) (薛定谔的猫)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4d35a81 Fix: Add a utility to avoid autofix conflicts (fixes #7928, fixes #8026) (#8067) (Alan Pierce)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "287e882 New: nonblock-statement-body-position rule (fixes #6067) (#8108) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7f1f4e5 Chore: remove unneeded devDeps "),
          _c("code", [_vm._v("linefix")]),
          _vm._v(" and "),
          _c("code", [_vm._v("gh-got")]),
          _vm._v(" (#8160) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ca1694b Update: ignore negative ranges in fixes (#8133) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("163d751 Docs: "),
          _c("code", [_vm._v("lines-around-comment")]),
          _vm._v(" doesn't disallow empty lines (#8151) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1c84922 Chore: upgrade eslint-plugin-node (#8156) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1ee5c27 Fix: Make RuleTester handle empty-string cases gracefully (fixes #8142) (#8143) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '044bc10 Docs: Add details about "--fix" option for "sort-imports" rule (#8077) (Olivier Audard)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3fec54a Add option to ignore property in no-param-reassign (#8087) (Christian Bundy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4e52cfc Fix: Improve keyword-spacing typescript support (fixes #8110) (#8111) (Reyad Attiyat)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7ff42e8 New: Allow regexes in RuleTester (fixes #7837) (#8115) (Daniel Lo Nigro)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cbd7ded Build: display rules’ meta data in their docs (fixes #5774) (#8127) (Wilson Kurniawan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "da8e8af Update: include function name in report message if possible (fixes #7260) (#8058) (Dieter Luypaert)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8f91e32 Fix: "),
          _c("code", [_vm._v("ignoreRestSiblings")]),
          _vm._v(
            " option didn't cover arguments (fixes #8119) (#8120) (Toru Nagashima)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.16.1 - February 22, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "ff8a80c Fix: duplicated autofix output for inverted fix ranges (fixes #8116) (#8117) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a421897 Docs: fix typo in arrow-parens.md (#8132) (Will Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "22d7fbf Chore: fix invalid redeclared variables in tests (#8130) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8d95598 Chore: fix output assertion typos in rule tests (#8129) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9fa2559 Docs: Add missing quotes in key-spacing rule (#8121) (Glenn Reyes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f3a6ced Build: package.json update for eslint-config-eslint release (ESLint Jenkins)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.16.0 - February 20, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "d89d0b4 Update: fix quotes false negative for string literals as template tags (#8107) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "21be366 Chore: Ensuring eslint:recommended rules are sorted. (#8106) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "360dbe4 Update: Improve error message when extend config missing (fixes #6115) (#8100) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f62a724 Chore: use updated token iterator methods (#8103) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "daf6f26 Fix: check output in RuleTester when errors is a number (fixes #7640) (#8097) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cfb65c5 Update: make no-lone-blocks report blocks in switch cases (fixes #8047) (#8062) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "290fb1f Update: Add includeComments to getTokenByRangeStart (fixes #8068) (#8069) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ff066dc Chore: Incorrect source code test text (#8096) (Jack Ford)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "14d146d Docs: Clarify --ext only works with directories (fixes #7939) (#8095) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "013a454 Docs: Add TSC meeting quorum requirement (#8086) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7516303 Fix: "),
          _c("code", [_vm._v("sourceCode.getTokenAfter")]),
          _vm._v(
            " shouldn't skip tokens after comments (#8055) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c53e034 Fix: unicode-bom fixer insert BOM in appropriate location (fixes #8083) (#8084) (pantosha)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "55ac302 Chore: fix the timing to define rules for tests (#8082) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("c7e64f3 Upgrade: mock-fs (#8070) (Toru Nagashima)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "acc3301 Update: handle uncommon linebreaks consistently in rules (fixes #7949) (#8049) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "591b74a Chore: enable operator-linebreak on ESLint codebase (#8064) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6445d2a Docs: Add documentation for /* exported */ (fixes #7998) (#8065) (Lee Yi Min)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fcc38db Chore: simplify and improve performance for autofix (#8035) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b04fde7 Chore: improve performance of SourceCode constructor (#8054) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "90fd555 Update: improve null detection in eqeqeq for ES6 regexes (fixes #8020) (#8042) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "16248e2 Fix: no-extra-boolean-cast incorrect Boolean() autofixing (fixes #7977) (#8037) (Jonathan Wilsson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "834f45d Update: rewrite TokenStore (fixes #7810) (#7936) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "329dcdc Chore: unify checks for statement list parents (#8048) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c596690 Docs: Clarify generator-star-spacing config example (fixes #8027) (#8034) (Hòa Trần)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a11d4a6 Docs: fix a typo in shareable configs documentation (#8036) (Dan Homola)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1e3d4c6 Update: add fixer for no-unused-labels (#7841) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f47fb98 Update: ensure semi-spacing checks import/export declarations (#8033) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e228d56 Update: no-undefined handles properties/classes/modules (fixes #7964) (#7966) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7bc92d9 Chore: fix invalid test cases (#8030) (Toru Nagashima)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.15.0 - February 3, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("f2a3580 Fix: "),
          _c("code", [_vm._v("no-extra-parens")]),
          _vm._v(" incorrect precedence (fixes #7978) (#7999) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d6b6ba1 Fix: no-var should fix ForStatement.init (#7993) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("99d386d Upgrade: Espree v3.4.0 (#8019) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "42390fd Docs: update README.md for team (#8016) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d7ffd88 Chore: enable template-tag-spacing on ESLint codebase (#8005) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f2be7e3 Docs: Fix typo in object-curly-newline.md (#8002) (Danny Andrews)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "df2351a Docs: Fix misleading section in brace-style documentation (#7996) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5ae6e00 Chore: avoid unnecessary feature detection for Symbol (#7992) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5d57c57 Chore: fix no-else-return lint error (refs #7986) (#7994) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "62fb054 Chore: enable no-else-return on ESLint codebase (#7986) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c59a0ba Update: add ignoreRestSiblings option to no-unused-vars (#7968) (Zack Argyle)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5cdfa99 Chore: enable no-unneeded-ternary on ESLint codebase (#7987) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fbd7c13 Update: ensure operator-assignment handles exponentiation operators (#7970) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'c5066ce Update: add "variables" option to no-use-before-define (fixes #7111) (#7948) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("09546a4 New: "),
          _c("code", [_vm._v("template-tag-spacing")]),
          _vm._v(" rule (fixes #7631) (#7913) (Jonathan Wilsson)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.14.1 - January 25, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "791f32b Fix: brace-style false positive for keyword method names (fixes #7974) (#7980) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d7a0add Docs: Add ESLint tutorial embed to getting started (#7971) (Jamis Charles)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "72d41f0 Fix: no-var autofix syntax error in single-line statements (fixes #7961) (#7962) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b9e5b68 Fix: indent rule crash on sparse array with object (fixes #7959) (#7960) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a7bd66a Chore: Adding assign/redeclare tests to no-undefined (refs #7964) (#7965) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8bcbf5d Docs: typo in prefer-promise-reject-errors (#7958) (Patrick McElhaney)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.14.0 - January 20, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("506324a Fix: "),
          _c("code", [_vm._v("no-var")]),
          _vm._v(
            " does not fix if causes ReferenceError (fixes #7950) (#7953) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "05e7432 New: no-chained-assignments rule (fixes #6424) (#7904) (Stewart Rand)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "243e47d Update: Add fixer for no-else-return (fixes #7863) (#7864) (Xander Dumaine)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f091d95 New: "),
          _c("code", [_vm._v("prefer-promise-reject-errors")]),
          _vm._v(" rule (fixes #7685) (#7689) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ca01e00 Fix: recognize all line terminators in func-call-spacing (fixes #7923) (#7924) (Francesco Trotta)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a664e8a Update: add ignoreJSX option to no-extra-parens (Fixes #7444) (#7926) (Robert Rossmann)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8ac3518 Fix: no-useless-computed-key false positive with "),
          _c("code", [_vm._v("__proto__")]),
          _vm._v(" (#7934) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c835e19 Docs: remove reference to deleted rule (#7942) (Alejandro Oviedo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3c1e63b Docs: Improve examples for no-case-declarations (fixes #6716) (#7920) (Kevin Rangel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7e04b33 Fix: Ignore inline plugin rule config in autoconfig (fixes #7860) (#7919) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6448ba0 Fix: add parentheses in no-extra-boolean-cast autofixer (fixes #7912) (#7914) (Szymon Przybylski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b3f2094 Fix: brace-style crash with lone block statements (fixes #7908) (#7909) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5eb2e88 Docs: Correct typos in configuring.md (#7916) (Gabriel Delépine)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bd5e219 Update: ensure brace-style validates class bodies (fixes #7608) (#7871) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "427543a Fix: catastrophic backtracking in astUtils linebreak regex (fixes #7893) (#7898) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "995554c Fix: Correct typos in no-alert.md and lib/ast-utils.js (#7905) (Stewart Rand)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d6150e3 Chore: Enable comma-dangle on ESLint codebase (fixes #7725) (#7906) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "075ec25 Chore: update to use ES6 classes (refs #7849) (#7891) (Claire Dranginis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "55f0cb6 Update: refactor brace-style and fix inconsistencies (fixes #7869) (#7870) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.13.1 - January 9, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "3fc4e3f Fix: prefer-destructuring reporting compound assignments (fixes #7881) (#7882) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f90462e Fix: no-extra-label autofix should not remove labels used elsewhere (#7885) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.13.0 - January 6, 2017")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "cd4c025 Update: add fixer for no-extra-label (#7840) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "aa75c92 Fix: Ensure prefer-const fixes destructuring assignments (fixes #7852) (#7859) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4008022 Chore: Refactor to use ES6 Classes (Part 3)(refs #7849) (#7865) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c9ba40a Update: add fixer for "),
          _c("code", [_vm._v("no-unneeded-ternary")]),
          _vm._v(" (#7540) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dd56d87 Update: add object-shorthand option for arrow functions (fixes #7564) (#7746) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fbafdc0 Docs: "),
          _c("code", [_vm._v("padded-blocks")]),
          _vm._v(" "),
          _c("code", [_vm._v("never")]),
          _vm._v(" case (fixes #7868) (#7878) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ca1f841 Fix: no-useless-return stack overflow on loops after throw (fixes #7855) (#7856) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d80d994 Update: add fixer for object-property-newline (fixes #7740) (#7808) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bf3ea3a Fix: capitalized-comments: Ignore consec. comments if first is invalid (#7835) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "616611a Chore: Refactor to use ES6 Classes (Part 2)(refs #7849) (#7847) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "856084b Chore: Refactor to use ES6 Classes (Part 1)(refs #7849) (#7846) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bf45893 Docs: Clarify that we only support Stage 4 proposals (#7845) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0fc24f7 Fix: adapt new-paren rule so it handles TypeScript (fixes #7817) (#7820) (Philipp A)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "df0b06b Fix: no-multiple-empty-lines perf issue on large files (fixes #7803) (#7843) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "18fa521 Chore: use ast-utils helper functions in no-multiple-empty-lines (#7842) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7122205 Docs: Array destructuring example for no-unused-vars (fixes #7838) (#7839) (Remco Haszing)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e21b36b Chore: add integration tests for cache files (refs #7748) (#7794) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2322733 Fix: Throw error if ruletester is missing required test scenarios (#7388) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1beecec Update: add fixer for "),
          _c("code", [_vm._v("operator-linebreak")]),
          _vm._v(" (#7702) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c5c3b21 Fix: no-implied-eval false positive on 'setTimeoutFoo' (fixes #7821) (#7836) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "00dd96c Chore: enable array-bracket-spacing on ESLint codebase (#7830) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ebcae1f Update: no-return-await with with complex "),
          _c("code", [_vm._v("return")]),
          _vm._v(" argument (fixes #7594) (#7595) (Dalton Santos)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fd4cd3b Fix: Disable no-var autofixer in some incorrect cases in loops (#7811) (Alan Pierce)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1f25834 Docs: update outdated info in Architecture page (#7816) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f20b9e9 Fix: Relax no-useless-escape's handling of ']' in regexes (fixes #7789) (#7793) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3004c1e Fix: consistent-return shouldn't report class constructors (fixes #7790) (#7797) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b938f1f Docs: Add an example for the spread operator to prefer-spread.md (#7802) (#7804) (butlermd)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b8ce2dc Docs: Remove .html extensions from links in developer-guide (#7805) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "aafebb2 Docs: Wrap placeholder sample in {% raw %} (#7798) (Daniel Lo Nigro)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bb6b73b Chore: replace unnecessary function callbacks with arrow functions (#7795) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '428fbdf Fix: func-call-spacing "never" doesn\'t fix w/ line breaks (fixes #7787) (#7788) (Kevin Partington)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6e61070 Fix: "),
          _c("code", [_vm._v("semi")]),
          _vm._v(
            " false positive before regex/template literals (fixes #7782) (#7783) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ff0c050 Fix: remove internal property from config generation (fixes #7758) (#7761) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("27424cb New: "),
          _c("code", [_vm._v("prefer-destructuring")]),
          _vm._v(" rule (fixes #6053) (#7741) (Alex LaFroscia)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bb648ce Docs: fix unclear example for no-useless-escape (#7781) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8c3a962 Fix: syntax errors from object-shorthand autofix (fixes #7744) (#7745) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8b296a2 Docs: fix in semi.md: correct instead of incorrect (#7779) (German Prostakov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3493241 Upgrade: strip-json-comments ~v2.0.1 (Janus Troelsen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "75b7ba4 Chore: enable object-curly-spacing on ESLint codebase (refs #7725) (#7770) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7d1dc7e Update: Make default-case comment case-insensitive (fixes #7673) (#7742) (Robert Rossmann)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f1bf5ec Chore: convert remaining old-style context.report() calls to the new API (#7763) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.12.2 - December 14, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "dec3ec6 Fix: indent bug with AssignmentExpressions (fixes #7747) (#7750) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5344751 Build: Don't create blogpost links from rule names within other words (#7754) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("639b798 Docs: Use "),
          _c("code", [_vm._v("Object.prototype")]),
          _vm._v(" in examples (#7755) (Alex Reardon)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.12.1 - December 12, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("0ad4d33 Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " regression with function calls (fixes #7732, fixes #7733) (#7734) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ab246dd Docs: Rules restricting globals/properties/syntax are linked together (#7743) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "df2f115 Docs: Add eslint-config-mdcs to JSCS Migration Guide (#7737) (Joshua Koo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4b77333 Build: avoid creating broken rule links in the changelog (#7731) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.12.0 - December 9, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "e569225 Update: fix false positive/negative of yoda rule (fixes #7676) (#7695) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'e95a230 Fix: indent "first" option false positive on nested arrays (fixes #7727) (#7728) (Teddy Katz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("81f9e7d Fix: Allow duplicated let declarations in "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(" (fixes #7712) (#7717) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1d0d61d New: Add no-await-in-loop rule (#7563) (Nat Mote)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2cdfb4e New: Additional APIs (fixes #6256) (#7669) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4278c42 Update: make no-obj-calls report errors for Reflect (fixes #7700) (#7710) (Tomas Echeverri Valencia)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4742d82 Docs: clarify the default behavior of "),
          _c("code", [_vm._v("operator-linebreak")]),
          _vm._v(" (fixes #7459) (#7726) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a8489e2 Chore: Avoid parserOptions boilerplate in tests for ES6 rules (#7724) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b921d1f Update: add "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " options for array and object literals (fixes #7473) (#7681) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7079c89 Update: Add airbnb-base to init styleguides (fixes #6986) (#7699) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "63bb3f8 Docs: improve the documentation for the autofix API (#7716) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f8786fb Update: add fixer for "),
          _c("code", [_vm._v("capitalized-comments")]),
          _vm._v(" (#7701) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "abfd24f Fix: don't validate schemas for disabled rules (fixes #7690) (#7692) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2ac07d8 Upgrade: Update globals dependency to 9.14.0 (#7683) (Aleksandr Oleynikov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "90a5d29 Docs: Remove incorrect info about issue requirements from PR guide (#7691) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f80c278 Docs: Add sails-hook-lint to integrations list (#7679) (Anthony M)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e96da3f Docs: link first instance of "),
          _c("code", [_vm._v("package.json")]),
          _vm._v(" (#7684) (Kent C. Dodds)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bf20e20 Build: include links to rule pages in release blogpost (#7671) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b30116c Docs: Fix code-blocks in spaced-comment docs (#7524) (Michał Gołębiowski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0a2a7fd Fix: Allow \\u2028 and \\u2029 as string escapes in no-useless-escape (#7672) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "76c33a9 Docs: Change Sails.js integration to active npm package (#7675) (Anthony M)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.11.1 - November 28, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "be739d0 Fix: capitalized-comments fatal error fixed (fixes #7663) (#7664) (Rich Trott)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cc4cedc Docs: Fix a typo in array-bracket-spacing documentation (#7667) (Alex Guerrero)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f8adadc Docs: fix a typo in capitalized-comments documentation (#7666) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.11.0 - November 25, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "ad56694 New: capitalized-comments rule (fixes #6055) (#7415) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7185567 Update: add fixer for "),
          _c("code", [_vm._v("operator-assignment")]),
          _vm._v(" (#7517) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("faf5f56 Update: fix false negative of "),
          _c("code", [_vm._v("quotes")]),
          _vm._v(" with \\n in template (fixes #7646) (#7647) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("474e444 Update: add fixer for "),
          _c("code", [_vm._v("sort-imports")]),
          _vm._v(" (#7535) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f9b70b3 Docs: Enable example highlighting in rules examples (ref #6444) (#7644) (Alex Guerrero)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d50f6c1 Fix: incorrect location for "),
          _c("code", [_vm._v("no-useless-escape")]),
          _vm._v(" errors (fixes #7643) (#7645) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "54a993c Docs: Fix a typo in the require-yield.md (#7652) (Vse Mozhet Byt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "eadd808 Chore: Fix prefer-arrow-callback lint errors (#7651) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("89bd8de New: "),
          _c("code", [_vm._v("require-await")]),
          _vm._v(" rule (fixes #6820) (#7435) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b7432bd Chore: Ensure JS files are checked out with LF (#7624) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "32a3547 Docs: Add absent quotes in rules documentation (#7625) (Denis Sikuler)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5c9a4ad Fix: Prevent "),
          _c("code", [_vm._v("quotes")]),
          _vm._v(
            " from fixing templates to directives (fixes #7610) (#7617) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d90ca46 Upgrade: Update markdownlint dependency to 0.3.1 (fixes #7589) (#7592) (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '07124d1 Docs: add missing quote mark (+=" → "+=") (#7613) (Sean Juarez)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8998043 Docs: fix wording in docs for no-extra-parens config (Michael Ficarra)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.10.2 - November 15, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("0643bfe Fix: correctly handle commented code in "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" autofixer (fixes #7604) (#7606) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("bd0514c Fix: syntax error after "),
          _c("code", [_vm._v("key-spacing")]),
          _vm._v(" autofix with comment (fixes #7603) (#7607) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f56c1ef Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " crash on parenthesized global return values (fixes #7573) (#7596) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '100c6e1 Docs: Fix example for curly "multi-or-nest" option (#7597) (Will Chen)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6abb534 Docs: Update code of conduct link (#7599) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8302cdb Docs: Update no-tabs to match existing standards & improve readbility (#7590) (Matt Stow)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.10.1 - November 14, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("8a0e92a Fix: handle try/catch correctly in "),
          _c("code", [_vm._v("no-return-await")]),
          _vm._v(" (fixes #7581) (#7582) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c4dd015 Fix: no-useless-return stack overflow on unreachable loops (fixes #7583) (#7584) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.10.0 - November 11, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "7ee039b Update: Add comma-style options for calls, fns, imports (fixes #7470) (Max Englander)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("670e060 Chore: make the "),
          _c("code", [_vm._v("object-shorthand")]),
          _vm._v(" tests more readable (#7580) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c3f4809 Update: Allow "),
          _c("code", [_vm._v("func-names")]),
          _vm._v(
            " to recognize inferred ES6 names (fixes #7235) (#7244) (Logan Smyth)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b8d6e48 Fix: syntax errors created by "),
          _c("code", [_vm._v("object-shorthand")]),
          _vm._v(" autofix (fixes #7574) (#7575) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1b3b65c Chore: ensure that files in tests/conf are linted (#7579) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2bd1dd7 Update: avoid creating extra whitespace in "),
          _c("code", [_vm._v("arrow-body-style")]),
          _vm._v(" fixer (#7504) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("66fe9ff New: "),
          _c("code", [_vm._v("no-return-await")]),
          _vm._v(" rule. (fixes #7537) (#7547) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "759525e Chore: Use process.exitCode instead of process.exit() in bin/eslint.js (#7569) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0d60db7 Fix: Curly rule doesn't account for leading comment (fixes #7538) (#7539) (Will Chen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5003b1c Update: fix in/instanceof handling with "),
          _c("code", [_vm._v("space-infix-ops")]),
          _vm._v(" (fixes #7525) (#7552) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3e6131e Docs: explain config option merging (#7499) (Danny Andrews)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '1766524 Update: "Error type should be" assertion in rule-tester (fixes 6106) (#7550) (Frans Jaspers)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "44eb274 Docs: Missing semicolon report was missing a comma (#7553) (James)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6dbda15 Docs: Document the optional defaults argument for RuleTester (#7548) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("e117b80 Docs: typo fix (#7546) (oprogramador)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "25e5613 Chore: Remove incorrect test from indent.js. (#7531) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c0f4937 Fix: "),
          _c("code", [_vm._v("arrow-parens")]),
          _vm._v(
            " supports type annotations (fixes #7406) (#7436) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a838b8e Docs: "),
          _c("code", [_vm._v("func-name-matching")]),
          _vm._v(
            ": update with “always”/“never” option (#7536) (Jordan Harband)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3c379ff Update: "),
          _c("code", [_vm._v("no-restricted-{imports,modules}")]),
          _vm._v(": add “patterns” (fixes #6963) (#7433) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f5764ee Docs: Update example of results returned from "),
          _c("code", [_vm._v("executeOnFiles")]),
          _vm._v(" (#7362) (Simen Bekkhus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4613ba0 Fix: Add support for escape char in JSX. (#7461) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ea0970d Fix: "),
          _c("code", [_vm._v("curly")]),
          _vm._v(" false positive with no-semicolon style (#7509) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("af1fde1 Update: fix "),
          _c("code", [_vm._v("brace-style")]),
          _vm._v(
            " false negative on multiline node (fixes #7493) (#7496) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3798aea Update: max-statements to report function name (refs #7260) (#7399) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0c215fa Update: Add "),
          _c("code", [_vm._v("ArrowFunctionExpression")]),
          _vm._v(" support to "),
          _c("code", [_vm._v("require-jsdoc")]),
          _vm._v(" rule (#7518) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "578c373 Build: handle deprecated rules with no 'replacedBy' (refs #7471) (#7494) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a7f3976 Docs: Specify min ESLint version for new rule format (#7501) (cowchimp)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8a3e717 Update: Fix "),
          _c("code", [_vm._v("lines-around-directive")]),
          _vm._v(" semicolon handling (fixes #7450) (#7483) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e58cead Update: add a fixer for certain statically-verifiable "
          ),
          _c("code", [_vm._v("eqeqeq")]),
          _vm._v(" cases (#7389) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0dea0ac Chore: Add Node 7 to travis ci build (#7506) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("36338f0 Update: add fixer for "),
          _c("code", [_vm._v("no-extra-boolean-cast")]),
          _vm._v(" (#7387) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("183def6 Chore: enable "),
          _c("code", [_vm._v("prefer-arrow-callback")]),
          _vm._v(" on ESLint codebase (fixes #6407) (#7503) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4f1fa67 Docs: Update copyright (#7497) (Nicholas C. Zakas)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.9.1 - October 31, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("2012258 Fix: incorrect "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " check for array property access (fixes #7484) (#7485) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8a71d4a Fix: "),
          _c("code", [_vm._v("no-useless-return")]),
          _vm._v(
            " false positive on conditionals (fixes #7477) (#7482) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("56a662b Fix: allow escaped backreferences in "),
          _c("code", [_vm._v("no-useless-escape")]),
          _vm._v(" (fixes #7472) (#7474) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fffdf13 Build: Fix prefer-reflect rule to not crash site gen build (#7471) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8ba68a3 Docs: Update broken link (#7490) (Devinsuit)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('65231d8 Docs: add the "fixable" icon for '),
          _c("code", [_vm._v("no-useless-return")]),
          _vm._v(" (#7480) (Teddy Katz)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.9.0 - October 28, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("d933516 New: "),
          _c("code", [_vm._v("no-useless-return")]),
          _vm._v(" rule (fixes #7309) (#7441) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5e7af30 Update: Add "),
          _c("code", [_vm._v("CallExpression")]),
          _vm._v(" option for "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" (fixes #5946) (#7189) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b200086 Fix: Support type annotations in array-bracket-spacing (#7445) (Jimmy Jia)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5ed8b9b Update: Deprecate prefer-reflect (fixes #7226) (#7464) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "92ad43b Chore: Update deprecated rules in conf/eslint.json (#7467) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e46666b New: Codeframe formatter (fixes #5860) (#7437) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fe0d903 Upgrade: Shelljs to ^0.7.5 (fixes #7316) (#7465) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1d5146f Update: fix wrong indentation about "),
          _c("code", [_vm._v("catch")]),
          _vm._v(","),
          _c("code", [_vm._v("finally")]),
          _vm._v(" (#7371) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "77e3a34 Chore: Pin mock-fs dev dependency (#7466) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c675d7d Update: Fix "),
          _c("code", [_vm._v("no-useless-escape")]),
          _vm._v(
            " false negative in regexes (fixes #7424) (#7425) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ee3bcea Update: add fixer for "),
          _c("code", [_vm._v("newline-after-var")]),
          _vm._v(" (fixes #5959) (#7375) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6e9ff08 Fix: indent.js to support multiline array statements. (#7237) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f8153ad Build: Ensure absolute links in docs retain .md extensions (fixes #7419) (#7438) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "16367a8 Fix: Return statement spacing. Fix for indent rule. (fixes #7164) (#7197) (Imad Elyafi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3813988 Update: fix false negative of "),
          _c("code", [_vm._v("no-extra-parens")]),
          _vm._v(" (fixes #7122) (#7432) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "23062e2 Docs: Fix typo in no-unexpected-multiline (fixes #7442) (#7447) (Denis Sikuler)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d257428 Update: "),
          _c("code", [_vm._v("func-name-matching")]),
          _vm._v(
            ": add “always”/“never” option (fixes #7391) (#7428) (Jordan Harband)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c710584 Fix: support for MemberExpression with function body. (#7400) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2c8ed2d Build: ensure that all files are linted on bash (fixes #7426) (#7427) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("18ff70f Chore: Enable "),
          _c("code", [_vm._v("no-useless-escape")]),
          _vm._v(" (#7403) (Vitor Balocco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8dfd802 Fix: avoid "),
          _c("code", [_vm._v("camelcase")]),
          _vm._v(
            " false positive with NewExpressions (fixes #7363) (#7409) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e8159b4 Docs: Fix typo and explain static func calls for class-methods-use-this (#7421) (Scott O'Hara)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "85d7e24 Docs: add additional examples for MemberExpressions in Indent rule. (#7408) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2aa1107 Docs: Include note on fatal: true in the node.js api section (#7376) (Simen Bekkhus)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e064a25 Update: add fixer for "),
          _c("code", [_vm._v("arrow-body-style")]),
          _vm._v(" (#7240) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e0fe727 Update: add fixer for "),
          _c("code", [_vm._v("brace-style")]),
          _vm._v(" (fixes #7074) (#7347) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cbbe420 New: Support enhanced parsers (fixes #6974) (#6975) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "644d25b Update: Add an ignoreRegExpLiterals option to max-len (fixes #3229) (#7346) (Wilfred Hughes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6875576 Docs: Remove broken links to jslinterrors.com (fixes #7368) (#7369) (Dannii Willis)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.8.1 - October 17, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("681c78a Fix: "),
          _c("code", [_vm._v("comma-dangle")]),
          _vm._v(
            " was confused by type annotations (fixes #7370) (#7372) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7525042 Fix: Allow useless escapes in tagged template literals (fixes #7383) (#7384) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9106964 Docs: Fix broken link for stylish formatter (#7386) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "49d3c1b Docs: Document the deprecated meta property (#7367) (Randy Coulman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "19d2996 Docs: Relax permission for merging PRs (refs eslint/tsc-meetings#20) (#7360) (Brandon Mills)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.8.0 - October 14, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "ee60acf Chore: add integration tests for autofixing (fixes #5909) (#7349) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c8796e9 Update: "),
          _c("code", [_vm._v("comma-dangle")]),
          _vm._v(
            " supports trailing function commas (refs #7101) (#7181) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c4abaf0 Update: "),
          _c("code", [_vm._v("space-before-function-paren")]),
          _vm._v(" supports async/await (refs #7101) (#7180) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d0d3b28 Fix: id-length rule incorrectly firing on member access (fixes #6475) (#7365) (Burak Yiğit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2729d94 Fix: Don't report setter params in class bodies as unused (fixes #7351) (#7352) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0b85004 Chore: Enable prefer-template (fixes #6407) (#7357) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ca1947b Chore: Update pull request template (refs eslint/tsc-meetings#20) (#7359) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d840afe Docs: remove broken link from no-loop-func doc (#7342) (Michael McDermott)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5266793 Update: no-useless-escape checks template literals (fixes #7331) (#7332) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b08fb91 Update: add source property to LintResult object (fixes #7098) (#7304) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0db4164 Chore: run prefer-template autofixer on test files (refs #6407) (#7354) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c1470b5 Update: Make the "),
          _c("code", [_vm._v("prefer-template")]),
          _vm._v(" fixer unescape quotes (fixes #7330) (#7334) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5d08c33 Fix: Handle parentheses correctly in "),
          _c("code", [_vm._v("yoda")]),
          _vm._v(" fixer (fixes #7326) (#7327) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cd72bba New: "),
          _c("code", [_vm._v("func-name-matching")]),
          _vm._v(" rule (fixes #6065) (#7063) (Annie Zhang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("55b5146 Fix: "),
          _c("code", [_vm._v("RuleTester")]),
          _vm._v(" didn't support "),
          _c("code", [_vm._v("mocha --watch")]),
          _vm._v(" (#7287) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f8387c1 Update: add fixer for "),
          _c("code", [_vm._v("prefer-spread")]),
          _vm._v(" (#7283) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "52da71e Fix: Don't require commas after rest properties (fixes #7297) (#7298) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3b11d3f Chore: refactor "),
          _c("code", [_vm._v("no-multiple-empty-lines")]),
          _vm._v(" (#7314) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "16d495d Docs: Updating CLI overview with latest changes (#7335) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("52dfce5 Update: add fixer for "),
          _c("code", [_vm._v("one-var-declaration-per-line")]),
          _vm._v(" (#7295) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0e994ae Update: Improve the error messages for "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(" (fixes #7282) (#7315) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "93214aa Chore: Convert non-lib/test files to template literals (refs #6407) (#7329) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("72f394d Update: Fix false negative of "),
          _c("code", [_vm._v("no-multiple-empty-lines")]),
          _vm._v(" (fixes #7312) (#7313) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("756bc5a Update: Use characters instead of code units for "),
          _c("code", [_vm._v("max-len")]),
          _vm._v(" (#7299) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c9a7ec5 Fix: Improving optionator configuration for --print-config (#7206) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("51bfade Fix: avoid "),
          _c("code", [_vm._v("object-shorthand")]),
          _vm._v(
            " crash with spread properties (fixes #7305) (#7306) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a12d1a9 Update: add fixer for "),
          _c("code", [_vm._v("no-lonely-if")]),
          _vm._v(" (#7202) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1418384 Fix: Don't require semicolons before "),
          _c("code", [_vm._v("++")]),
          _vm._v("/"),
          _c("code", [_vm._v("--")]),
          _vm._v(" (#7252) (Adrian Heine né Lang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2ffe516 Update: add fixer for "),
          _c("code", [_vm._v("curly")]),
          _vm._v(" (#7105) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ac3504d Update: add functionPrototypeMethods to wrap-iife (fixes #7212) (#7284) (Eli White)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5e16fb4 Update: add fixer for "),
          _c("code", [_vm._v("no-extra-bind")]),
          _vm._v(" (#7236) (Teddy Katz)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.7.1 - October 3, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("3dcae13 Fix: Use the correct location for "),
          _c("code", [_vm._v("comma-dangle")]),
          _vm._v(" errors (fixes #7291) (#7292) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cb7ba6d Fix: no-implicit-coercion should not fix ~. (fixes #7272) (#7289) (Eli White)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ce590e2 Chore: Add additional tests for bin/eslint.js (#7290) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8ec82ee Docs: change links of templates to raw data (#7288) (Toru Nagashima)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.7.0 - September 30, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "2fee8ad Fix: object-shorthand's consistent-as-needed option (issue #7214) (#7215) (Naomi Jacobs)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c05a19c Update: add fixer for "),
          _c("code", [_vm._v("prefer-numeric-literals")]),
          _vm._v(" (#7205) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2f171f3 Update: add fixer for "),
          _c("code", [_vm._v("no-undef-init")]),
          _vm._v(" (#7210) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "876d747 Docs: Steps for adding new committers/TSCers (#7221) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("dffb4fa Fix: "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(" false positive (fixes #7250) (#7258) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4448cec Docs: Adding missing ES8 reference to configuring (#7271) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("332d213 Update: Ensure "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " handles nested functions correctly (fixes #7249) (#7265) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c36d842 Update: add fixer for "),
          _c("code", [_vm._v("no-useless-computed-key")]),
          _vm._v(" (#7207) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("18376cf Update: add fixer for "),
          _c("code", [_vm._v("lines-around-directive")]),
          _vm._v(" (#7217) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f8e8fab Update: add fixer for "),
          _c("code", [_vm._v("wrap-iife")]),
          _vm._v(" (#7196) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "558b444 Docs: Add @not-an-aardvark to development team (#7279) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cd1dc57 Update: Add a fixer for "),
          _c("code", [_vm._v("dot-location")]),
          _vm._v(" (#7186) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("89787b2 Update: for "),
          _c("code", [_vm._v("yoda")]),
          _vm._v(", add a fixer (#7199) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "742ae67 Fix: avoid indent and no-mixed-spaces-and-tabs conflicts (fixes #7248) (#7266) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "85b8714 Fix: Use error templates even when reading from stdin (fixes #7213) (#7223) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "66adac1 Docs: correction in prefer-reflect docs (fixes #7069) (#7150) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e3f95de Update: Fix "),
          _c("code", [_vm._v("no-extra-parens")]),
          _vm._v(" false negative (fixes #7229) (#7231) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2909c19 Docs: Fix typo in object-shorthand docs (#7267) (Brian Donovan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7bb800d Chore: add internal rule to enforce meta.docs conventions (fixes #6954) (#7155) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "722c68c Docs: add code fences to the issue template (#7254) (Teddy Katz)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.6.1 - September 26, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "b467436 Upgrade: Upgrade Espree to 3.3.1 (#7253) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "299a563 Build: Do not strip .md extension from absolute URLs (#7222) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "27042d2 Chore: removed unused code related to scopeMap (#7218) (Yang Su)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d154204 Chore: Lint bin/eslint.js (#7243) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "87625fa Docs: Improve eol-last examples in docs (#7227) (Chainarong Tangsurakit)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("de8eaa4 Docs: "),
          _c("code", [_vm._v("class-methods-use-this")]),
          _vm._v(": fix option name (#7224) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2355f8d Docs: Add Brunch plugin to integrations (#7225) (Aleksey Shvayka)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a5817ae Docs: Default option from "),
          _c("code", [_vm._v("operator-linebreak")]),
          _vm._v(" is "),
          _c("code", [_vm._v("after")]),
          _vm._v("and not always (#7228) (Konstantin Pschera)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.6.0 - September 23, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("1b05d9c Update: add fixer for "),
          _c("code", [_vm._v("strict")]),
          _vm._v(" (fixes #6668) (#7198) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0a36138 Docs: Update ecmaVersion instructions (#7195) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("aaa3779 Update: Allow "),
          _c("code", [_vm._v("space-unary-ops")]),
          _vm._v(" to handle await expressions (#7174) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("91bf477 Update: add fixer for "),
          _c("code", [_vm._v("prefer-template")]),
          _vm._v(" (fixes #6978) (#7165) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("745343f Update: "),
          _c("code", [_vm._v("no-extra-parens")]),
          _vm._v(" supports async/await (refs #7101) (#7178) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8e1fee1 Fix: Handle number literals correctly in "),
          _c("code", [_vm._v("no-whitespace-before-property")]),
          _vm._v(" (#7185) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("462a3f7 Update: "),
          _c("code", [_vm._v("keyword-spacing")]),
          _vm._v(" supports async/await (refs #7101) (#7179) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("709a734 Update: Allow template string in "),
          _c("code", [_vm._v("valid-typeof")]),
          _vm._v(" comparison (fixes #7166) (#7168) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f71937a Fix: Don't report async/generator callbacks in "),
          _c("code", [_vm._v("array-callback-return")]),
          _vm._v(" (#7172) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("461b015 Fix: Handle async functions correctly in "),
          _c("code", [_vm._v("prefer-arrow-callback")]),
          _vm._v(" fixer (#7173) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7ea3e4b Fix: Handle await expressions correctly in "),
          _c("code", [_vm._v("no-unused-expressions")]),
          _vm._v(" (#7175) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("16bb802 Update: Ensure "),
          _c("code", [_vm._v("arrow-parens")]),
          _vm._v(
            " handles async arrow functions correctly (#7176) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2d10657 Chore: add tests for "),
          _c("code", [_vm._v("generator-star-spacing")]),
          _vm._v(" and async (refs #7101) (#7182) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c118d21 Update: Let "),
          _c("code", [_vm._v("no-restricted-properties")]),
          _vm._v(" check destructuring (fixes #7147) (#7151) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9e0b068 Fix: valid-jsdoc does not throw on FieldType without value (fixes #7184) (#7187) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4b5d9b7 Docs: Update process for evaluating proposals (fixes #7156) (#7183) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("95c777a Update: Make "),
          _c("code", [_vm._v("no-restricted-properties")]),
          _vm._v(" more flexible (fixes #7137) (#7139) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0fdf23c Update: fix "),
          _c("code", [_vm._v("quotes")]),
          _vm._v(
            " rule's false negative (fixes #7084) (#7141) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f2a789d Update: fix "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(" false negative (fixes #7124) (#7143) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6148d85 Fix: Report columns for "),
          _c("code", [_vm._v("eol-last")]),
          _vm._v(" correctly (fixes #7136) (#7149) (kdex)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e016384 Update: add fixer for quote-props (fixes #6996) (#7095) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "35f7be9 Upgrade: espree to 3.2.0, remove tests with SyntaxErrors (fixes #7169) (#7170) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("28ddcf8 Fix: "),
          _c("code", [_vm._v("max-len")]),
          _vm._v(": "),
          _c("code", [_vm._v("ignoreTemplateLiterals")]),
          _vm._v(": handle 3+ lines (fixes #7125) (#7138) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "660e091 Docs: Update rule descriptions (fixes #5912) (#7152) (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8b3fc32 Update: Make "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " report lines with mixed spaces/tabs (fixes #4274) (#7076) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b39ac2c Update: add fixer for "),
          _c("code", [_vm._v("no-regex-spaces")]),
          _vm._v(" (#7113) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cc80467 Docs: Update PR templates for formatting (#7128) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "76acbb5 Fix: include LogicalExpression in indent length calc  (fixes #6731) (#7087) (Alec)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a876673 Update: no-implicit-coercion checks TemplateLiterals (fixes #7062) (#7121) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8db4f0c Chore: Enable "),
          _c("code", [_vm._v("typeof")]),
          _vm._v(" check for "),
          _c("code", [_vm._v("no-undef")]),
          _vm._v(" rule in eslint-config-eslint (#7103) (Teddy Katz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7e8316f Docs: Update release process (#7127) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("22edd8a Update: "),
          _c("code", [_vm._v("class-methods-use-this")]),
          _vm._v(": "),
          _c("code", [_vm._v("exceptMethods")]),
          _vm._v(" option (fixes #7085) (#7120) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'afd132a Fix: line-comment-position "above" string option now works (fixes #7100) (#7102) (Kevin Partington)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1738b2e Chore: fix name of internal-no-invalid-meta test file (#7142) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ac0bb62 Docs: Fixes examples for allowTemplateLiterals (fixes #7115) (#7135) (Zoe Ingram)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("bcfa3e5 Update: Add "),
          _c("code", [_vm._v("always")]),
          _vm._v("/"),
          _c("code", [_vm._v("never")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("eol-last")]),
          _vm._v(" (fixes #6938) (#6952) (kdex)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0ca26d9 Docs: Distinguish examples for space-before-blocks (#7132) (Timo Tijhof)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9a2aefb Chore: Don't require an issue reference in check-commit npm script (#7104) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c85fd84 Fix: max-statements-per-line rule to force minimum to be 1 (fixes #7051) (#7092) (Scott Stern)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e462e47 Docs: updates category of no-restricted-properties (fixes #7112) (#7118) (Alec)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6ae660b Fix: Don't report comparisons of two typeof expressions (fixes #7078) (#7082) (Teddy Katz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "710f205 Docs: Fix typos in Issues section of Maintainer's Guide (#7114) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "546a3ca Docs: Clarify that linter does not process configuration (fixes #7108) (#7110) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0d50943 Docs: Elaborate on "),
          _c("code", [_vm._v("guard-for-in")]),
          _vm._v(" best practice (fixes #7071) (#7094) (Dallon Feldner)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "58e6d76 Docs: Fix examples for no-restricted-properties (#7099) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6cfe519 Docs: Corrected typo in line-comment-position rule doc (#7097) (Alex Mercier)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f02e52a Docs: Add fixable note to no-implicit-coercion docs (#7096) (Brandon Mills)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.5.0 - September 9, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("08fa538 Update: fix false negative of "),
          _c("code", [_vm._v("arrow-spacing")]),
          _vm._v(" (fixes #7079) (#7080) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cec65e3 Update: add fixer for no-floating-decimal (fixes #7070) (#7081) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2a3f699 Fix: Column number for no-multiple-empty-lines (fixes #7086) (#7088) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6947299 Docs: Add info about closing accepted issues to docs (fixes #6979) (#7089) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d30157a Docs: Add link to awesome-eslint in integrations page (#7090) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "457be1b Docs: Update so issues are not required (fixes #7015) (#7072) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d9513b7 Fix: Allow linting of .hidden files/folders (fixes #4828) (#6844) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6d97c18 New: "),
          _c("code", [_vm._v("max-len")]),
          _vm._v(": "),
          _c("code", [_vm._v("ignoreStrings")]),
          _vm._v("+"),
          _c("code", [_vm._v("ignoreTemplateLiterals")]),
          _vm._v(" (fixes #5805) (#7049) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "538d258 Update: make no-implicit-coercion support autofixing. (fixes #7056) (#7061) (Eli White)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "883316d Update: add fixer for prefer-arrow-callback (fixes #7002) (#7004) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7502eed Update: auto-fix for "),
          _c("code", [_vm._v("comma-style")]),
          _vm._v(" (fixes #6941) (#6957) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "645dda5 Update: add fixer for dot-notation (fixes #7014) (#7054) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2657846 Fix: "),
          _c("code", [_vm._v("no-console")]),
          _vm._v(
            " ignores user-defined console (fixes #7010) (#7058) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "656bb6e Update: add fixer for newline-before-return (fixes #5958) (#7050) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1f995c3 Fix: no-implicit-coercion string concat false positive (fixes #7057) (#7060) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6718749 Docs: Clarify that "),
          _c("code", [_vm._v("es6")]),
          _vm._v(" env also sets "),
          _c("code", [_vm._v("ecmaVersion")]),
          _vm._v(" to 6 (#7067) (Jérémie Astori)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e118728 Update: add fixer for wrap-regex (fixes #7013) (#7048) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f4fcd1e Update: add more "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " options for functions (fixes #6052) (#7043) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "657eee5 Update: add fixer for new-parens (fixes #6994) (#7047) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ff19aa9 Update: improve "),
          _c("code", [_vm._v("max-statements-per-line")]),
          _vm._v(" message (fixes #6287) (#7044) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3960617 New: "),
          _c("code", [_vm._v("prefer-numeric-literals")]),
          _vm._v(" rule (fixes #6068) (#7029) (Annie Zhang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fa760f9 Chore: no-regex-spaces uses internal rule message format (fixes #7052) (#7053) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "22c7e09 Update: no-magic-numbers false negative on reassigned vars (fixes #4616) (#7028) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "be29599 Update: Throw error if whitespace found in plugin name (fixes #6854) (#6960) (Jesse Ostrander)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4063a79 Fix: Rule message placeholders can be inside braces (fixes #6988) (#7041) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("52e8d9c Docs: Clean up sort-vars (#7045) (Matthew Dunsdon)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4126f12 Chore: Rule messages use internal rule message format (fixes #6977) (#6989) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("46cb690 New: "),
          _c("code", [_vm._v("no-restricted-properties")]),
          _vm._v(" rule (fixes #3218) (#7017) (Eli White)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "00b3042 Update: Pass file path to parse function (fixes #5344) (#7024) (Annie Zhang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3f13325 Docs: Add kaicataldo and JamesHenry to our teams (#7039) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8e77f16 Update: "),
          _c("code", [_vm._v("new-parens")]),
          _vm._v(" false negative (fixes #6997) (#6999) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "326f457 Docs: Add missing 'to' in no-restricted-modules (#7022) (Oskar Risberg)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8277357 New: "),
          _c("code", [_vm._v("line-comment-position")]),
          _vm._v(" rule (fixes #6077) (#6953) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c1f0d76 New: "),
          _c("code", [_vm._v("lines-around-directive")]),
          _vm._v(" rule (fixes #6069) (#6998) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "61f1de0 Docs: Fix typo in no-debugger (#7019) (Denis Ciccale)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "256c4a2 Fix: Allow separate mode option for multiline and align (fixes #6691) (#6991) (Annie Zhang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a989a7c Docs: Declaring dependency on eslint in shared config (fixes #6617) (#6985) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6869c60 Docs: Fix minor typo in no-extra-parens doc (#6992) (Jérémie Astori)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "28f1619 Docs: Update the example of SwitchCase (#6981) (fish)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.4.0 - August 26, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "c210510 Update: add fixer for no-extra-parens (fixes #6944) (#6950) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ca3d448 Fix: "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(" false negative about "),
          _c("code", [_vm._v("eslintUsed")]),
          _vm._v(" (fixes #5837) (#6971) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1153955 Docs: Draft of JSCS migration guide (refs #5859) (#6942) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3e522be Fix: false negative of "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" with "),
          _c("code", [_vm._v("else if")]),
          _vm._v(" statements (fixes #6956) (#6965) (not-an-aardvark)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2dfb290 Docs: Distinguish examples in rules under Stylistic Issues part 7 (#6760) (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '3c710c9 Fix: rename "AirBnB" => "Airbnb" init choice (fixes #6969) (Harrison Shoff)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7660b39 Fix: "),
          _c("code", [_vm._v("object-curly-spacing")]),
          _vm._v(" for type annotations (fixes #6940) (#6945) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "21ab784 New: do not remove non visited files from cache. (fixes #6780) (#6921) (Roy Riojas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3a1763c Fix: enable "),
          _c("code", [_vm._v("@scope/plugin/ruleId")]),
          _vm._v("-style specifier (refs #6362) (#6939) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d6fd064 Update: Add never option to multiline-ternary (fixes #6751) (#6905) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0d268f1 New: "),
          _c("code", [_vm._v("symbol-description")]),
          _vm._v(" rule (fixes #6778) (#6825) (Jarek Rencz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a063d4e Fix: no-cond-assign within a function expression (fixes #6908) (#6909) (Patrick McElhaney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "16db93a Build: Tag docs, publish release notes (fixes #6892) (#6934) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0cf1d55 Chore: Fix object-shorthand errors (fixes #6958) (#6959) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8851ddd Fix: Improve pref of globbing by inheriting glob.GlobSync (fixes #6710) (#6783) (Kael Zhang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cf2242c Update: "),
          _c("code", [_vm._v("requireStringLiterals")]),
          _vm._v(" option for "),
          _c("code", [_vm._v("valid-typeof")]),
          _vm._v(" (fixes #6698) (#6923) (not-an-aardvark)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8561389 Fix: "),
          _c("code", [_vm._v("no-trailing-spaces")]),
          _vm._v(" wrong fixing (fixes #6933) (#6937) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6a92be5 Docs: Update semantic versioning policy (#6935) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a5189a6 New: "),
          _c("code", [_vm._v("class-methods-use-this")]),
          _vm._v(" rule (fixes #5139) (#6881) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1563808 Update: add support for ecmaVersion 20xx (fixes #6750) (#6907) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d8b770c Docs: Change rule descriptions for consistent casing (#6915) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c676322 Chore: Use object-shorthand batch 3 (refs #6407) (#6914) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.3.1 - August 15, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "a2f06be Build: optimize rule page title for small browser tabs (fixes #6888) (#6904) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "02a00d6 Docs: clarify rule details for no-template-curly-in-string (#6900) (not-an-aardvark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b9b3446 Fix: sort-keys ignores destructuring patterns (fixes #6896) (#6899) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3fe3a4f Docs: Update options in "),
          _c("code", [_vm._v("object-shorthand")]),
          _vm._v(" (#6898) (Grant Snodgrass)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cd09c96 Chore: Use object-shorthand batch 2 (refs #6407) (#6897) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2841008 Chore: Use object-shorthand batch 1 (refs #6407) (#6893) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.3.0 - August 12, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "683ac56 Build: Add CI release scripts (fixes #6884) (#6885) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ebf8441 Update: "),
          _c("code", [_vm._v("prefer-rest-params")]),
          _vm._v(
            " relax for member accesses (fixes #5990) (#6871) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "df01c4f Update: Add regex support for exceptions (fixes #5187) (#6883) (Annie Zhang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("055742c Fix: "),
          _c("code", [_vm._v("no-dupe-keys")]),
          _vm._v(" type errors (fixes #6886) (#6889) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e456fd3 New: "),
          _c("code", [_vm._v("sort-keys")]),
          _vm._v(" rule (fixes #6076) (#6800) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '3e879fc Update: Rule "eqeqeq" to have more specific null handling (fixes #6543) (#6849) (Simon Sturmer)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e8cb7f9 Chore: use eslint-plugin-node (refs #6407) (#6862) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e37bbd8 Docs: Remove duplicate statement (#6878) (Richard Käll)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("11395ca Fix: "),
          _c("code", [_vm._v("no-dupe-keys")]),
          _vm._v(" false negative (fixes #6801) (#6863) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1ecd2a3 Update: improve error message in "),
          _c("code", [_vm._v("no-control-regex")]),
          _vm._v(" (#6839) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d610d6c Update: make "),
          _c("code", [_vm._v("max-lines")]),
          _vm._v(
            " report the actual number of lines (fixes #6766) (#6764) (Jarek Rencz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b256c50 Chore: Fix glob for core js files for lint (fixes #6870) (#6872) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f8ab8f1 New: func-call-spacing rule (fixes #6080) (#6749) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "be68f0b New: no-template-curly-in-string rule (fixes #6186) (#6767) (Jeroen Engels)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "80789ab Chore: don't throw if rule is in old format (fixes #6848) (#6850) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d47c505 Fix: "),
          _c("code", [_vm._v("newline-after-var")]),
          _vm._v(" false positive (fixes #6834) (#6847) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bf0afcb Update: validate void operator in no-constant-condition (fixes #5726) (#6837) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5ef839e New: Add consistent and ..-as-needed to object-shorthand (fixes #5438) (#5439) (Martijn de Haan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7e1bf01 Fix: update peerDependencies of airbnb option for "),
          _c("code", [_vm._v("--init")]),
          _vm._v(" (fixes #6843) (#6846) (Vitor Balocco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8581f4f Fix: "),
          _c("code", [_vm._v("no-invalid-this")]),
          _vm._v(" false positive (fixes #6824) (#6827) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("90f78f4 Update: add "),
          _c("code", [_vm._v("props")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("no-self-assign")]),
          _vm._v(" rule (fixes #6718) (#6721) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "30d71d6 Update: 'requireForBlockBody' modifier for 'arrow-parens' (fixes #6557) (#6558) (Nicolas Froidure)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cdded07 Chore: use native "),
          _c("code", [_vm._v("Object.assign")]),
          _vm._v(" (refs #6407) (#6832) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '579ec49 Chore: Add link to rule change guidelines in "needs info" template (fixes #6829) (#6831) (Kevin Partington)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '117e7aa Docs: Remove incorrect "constructor" statement from '
          ),
          _c("code", [_vm._v("no-new-symbol")]),
          _vm._v(" docs (#6830) (Jarek Rencz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("aef18b4 New: "),
          _c("code", [_vm._v("no-unsafe-negation")]),
          _vm._v(" rule (fixes #2716) (#6789) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d94e945 Docs: Update Getting Started w/ Readme installation instructions (#6823) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dfbc112 Upgrade: proxyquire to 1.7.10 (fixes #6821) (#6822) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4c5e911 Chore: enable "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(
            " and apply it to our codebase (refs #6407) (#6805) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e524d16 Update: camelcase rule fix for import declarations (fixes #6755) (#6784) (Lorenzo Zottar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8f3509d Update: make "),
          _c("code", [_vm._v("eslint:all")]),
          _vm._v(
            " excluding deprecated rules (fixes #6734) (#6756) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2b17459 New: "),
          _c("code", [_vm._v("no-global-assign")]),
          _vm._v(" rule (fixes #6586) (#6746) (alberto)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.2.2 - August 1, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "510ce4b Upgrade: file-entry-cache@^1.3.1 (fixes #6816, refs #6780) (#6819) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "46b14cd Fix: ignore MemberExpression in VariableDeclarators (fixes #6795) (#6815) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.2.1 - August 1, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "584577a Build: Pin file-entry-cache to avoid licence issue (refs #6816) (#6818) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "38d0d23 Docs: clarify minor releases and suggest using `~ to version (#6804) (Henry Zhu)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4ca809e Fix: Normalizes messages so all end with a period (fixes #6762) (#6807) (Patrick McElhaney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c7488ac Fix: Make MemberExpression option opt-in (fixes #6797) (#6798) (Rich Trott)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "715e8fa Docs: Update issue closing policy (fixes #6765) (#6808) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "288f7bf Build: Fix site generation (fixes #6791) (#6793) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("261a9f3 Docs: Update JSCS status in README (#6802) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5ae0887 Docs: Update no-void.md (#6799) (Daniel Hritzkiv)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.2.0 - July 29, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "2438ee2 Upgrade: Update markdownlint dependency to 0.2.0 (fixes #6781) (#6782) (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4fc0018 Chore: dogfooding "),
          _c("code", [_vm._v("no-var")]),
          _vm._v(" rule and remove "),
          _c("code", [_vm._v("var")]),
          _vm._v("s (refs #6407) (#6757) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b22eb5c New: "),
          _c("code", [_vm._v("no-tabs")]),
          _vm._v(" rule (fixes #6079) (#6772) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ddea63a Chore: Updated no-control-regex tests to cover all cases (fixes #6438) (#6752) (Efe Gürkan YALAMAN)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1025772 Docs: Add plugin example to disabling with comments guide (fixes #6742) (#6747) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "628aae4 Docs: fix inconsistent spacing inside block comment (#6768) (Brian Jacobel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2983c32 Docs: Add options to func-names config comments (#6748) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("2f94443 Docs: fix wrong path (#6763) (molee1905)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '6f3faa4 Revert "Build: Remove support for Node v5 (fixes #6743)" (#6758) (Nicholas C. Zakas)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "99dfd1c Docs: fix grammar issue in rule-changes page (#6761) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e825458 Fix: Rule no-unused-vars had missing period (fixes #6738) (#6739) (Brian Mock)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "71ae64c Docs: Clarify cache file deletion (fixes #4943) (#6712) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "26c85dd Update: merge warnings of consecutive unreachable nodes (fixes #6583) (#6729) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "106e40b Fix: Correct grammar in object-curly-newline reports (fixes #6725) (#6728) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e00754c Chore: Dogfooding ES6 rules (refs #6407) (#6735) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "181b26a Build: Remove support for Node v5 (fixes #6743) (#6744) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5320a6c Update: "),
          _c("code", [_vm._v("no-use-before-define")]),
          _vm._v(
            " false negative on for-in/of (fixes #6699) (#6719) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a2090cb Fix: space-infix-ops doesn't fail for  type annotations(fixes #5211) (#6723) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9c36ecf Docs: Add @vitorbal and @platinumazure to development team (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e09d1b8 Docs: describe all RuleTester options (fixes #4810, fixes #6709) (#6711) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a157f47 Chore: Update CLIEngine option desc (fixes #5179) (#6713) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a0727f9 Chore: fix "),
          _c("code", [_vm._v(".gitignore")]),
          _vm._v(" for vscode (refs #6383) (#6720) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "75d2d43 Docs: Clarify Closure type hint expectation (fixes #5231) (#6714) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "95ea25a Update: Check indentation of multi-line chained properties (refs #1801) (#5940) (Rich Trott)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e7b1e1c Docs: Edit issue/PR waiting period docs (fixes #6009) (#6715) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("053aa0c Update: Added 'allowSuper' option to "),
          _c("code", [_vm._v("no-underscore-dangle")]),
          _vm._v(" (fixes #6355) (#6662) (peteward44)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8929045 Build: Automatically generate rule index (refs #2860) (#6658) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f916ae5 Docs: Fix multiline-ternary typos (#6704) (Cédric Malard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c64b0c2 Chore: First ES6 refactoring (refs #6407) (#6570) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.1.1 - July 18, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("565e584 Fix: "),
          _c("code", [_vm._v("eslint:all")]),
          _vm._v(" causes regression in 3.1.0 (fixes #6687) (#6696) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cb90359 Fix: Allow named recursive functions (fixes #6616) (#6667) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3f206dd Fix: "),
          _c("code", [_vm._v("balanced")]),
          _vm._v(" false positive in "),
          _c("code", [_vm._v("spaced-comment")]),
          _vm._v(" (fixes #6689) (#6692) (Grant Snodgrass)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "57f1676 Docs: Add missing brackets from code examples (#6700) (Plusb Preco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "124f066 Chore: Remove fixable key from multiline-ternary metadata (fixes #6683) (#6688) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9f96086 Fix: Escape control characters in XML. (fixes #6673) (#6672) (George Chung)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.1.0 - July 15, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "e8f8c6c Fix: incorrect exitCode when eslint is called with --stdin (fixes #6677) (#6682) (Steven Humphrey)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("38639bf Update: make "),
          _c("code", [_vm._v("no-var")]),
          _vm._v(" fixable (fixes #6639) (#6644) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("dfc20e9 Fix: "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(
            " false positive in loop (fixes #6646) (#6649) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2ba75d5 Update: relax outerIIFEBody definition (fixes #6613) (#6653) (Stephen E. Baker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "421e4bf Chore: combine multiple RegEx replaces with one (fixes #6669) (#6661) (Sakthipriyan Vairamani)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "089ee2c Docs: fix typos,wrong path,backticks (#6663) (molee1905)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ef827d2 Docs: Add another pre-commit hook to integrations (#6666) (David Alan Hjelle)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a343b3c Docs: Fix option typo in no-underscore-dangle (Fixes #6674) (#6675) (Luke Page)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5985eb2 Chore: add internal rule that validates meta property (fixes #6383) (#6608) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4adb15f Update: Add "),
          _c("code", [_vm._v("balanced")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("spaced-comment")]),
          _vm._v(" (fixes #4133) (#6575) (Annie Zhang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1b13c25 Docs: fix incorrect example being mark as correct (#6660) (David Björklund)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'a8b4e40 Fix: Install required eslint plugin for "standard" guide (fixes #6656) (#6657) (Feross Aboukhadijeh)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("720686b New: "),
          _c("code", [_vm._v("endLine")]),
          _vm._v(" and "),
          _c("code", [_vm._v("endColumn")]),
          _vm._v(" of the lint result. (refs #3307) (#6640) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "54faa46 Docs: Small tweaks to CLI documentation (fixes #6627) (#6642) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e108850 Docs: Added examples and structure to "),
          _c("code", [_vm._v("padded-blocks")]),
          _vm._v(" (fixes #6628) (#6643) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("350e1c0 Docs: Typo (#6650) (Peter Rood)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b837c92 Docs: Correct a term in max-len.md (fixes #6637) (#6641) (Vse Mozhet Byt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "baeb313 Fix: Warning behavior for executeOnText (fixes #6611) (#6632) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e6004be Chore: Enable preferType in valid-jsdoc (refs #5188) (#6634) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ca323cf Fix: Use default assertion messages (fixes #6532) (#6615) (Dmitrii Abramov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2bdf22c Fix: Do not throw exception if baseConfig is provided (fixes #6605) (#6625) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e42cacb Upgrade: mock-fs to 3.10, fixes for Node 6.3 (fixes #6621) (#6624) (Tim Schaub)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8a263ae New: multiline-ternary rule (fixes #6066) (#6590) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e951303 Update: Adding new "),
          _c("code", [_vm._v("key-spacing")]),
          _vm._v(" option (fixes #5613) (#5907) (Kyle Mendes)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "10c3e91 Docs: Remove reference from 3.0.0 migration guide (refs #6605) (#6618) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5010694 Docs: Removed non-existing resource (#6609) (Moritz Kröger)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6d40d85 Docs: Note that PR requires ACCEPTED issue (refs #6568) (#6604) (Patrick McElhaney)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.0.1 - July 5, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("27700cf Fix: "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(
            " false positive around callback (fixes #6576) (#6579) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "124d8a3 Docs: Pull request template (#6568) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e9a2ed9 Docs: Fix rules\\id-length exceptions typos (fixes #6397) (#6593) (GramParallelo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a2cfa1b Fix: Make outerIIFEBody work correctly (fixes #6585) (#6596) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9c451a2 Docs: Use string severity in example (#6601) (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8308c0b Chore: remove path-is-absolute in favor of the built-in (fixes #6598) (#6600) (shinnn)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7a63717 Docs: Add missing pull request step (fixes #6595) (#6597) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("de3ed84 Fix: make "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(" ignore for-in (fixes #2342) (#6126) (Oleg Gaidarenko)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6ef2cbe Fix: strip Unicode BOM of config files (fixes #6556) (#6580) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ee7fcfa Docs: Correct type of "),
          _c("code", [_vm._v("outerIIFEBody")]),
          _vm._v(" in "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" (fixes #6581) (#6584) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("25fc7b7 Fix: false negative of "),
          _c("code", [_vm._v("max-len")]),
          _vm._v(" (fixes #6564) (#6565) (not-an-aardvark)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f6b8452 Docs: Distinguish examples in rules under Stylistic Issues part 6 (#6567) (Kenneth Williams)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v3.0.0 - July 1, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "66de9d8 Docs: Update installation instructions on README (#6569) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("dc5b78b Breaking: Add "),
          _c("code", [_vm._v("require-yield")]),
          _vm._v(" rule to "),
          _c("code", [_vm._v("eslint:recommended")]),
          _vm._v(" (fixes #6550) (#6554) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7988427 Fix: lib/config.js tests pass if personal config exists (fixes #6559) (#6566) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4c05967 Docs: Update rule docs for new format (fixes #5417) (#6551) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "70da5a8 Docs: Correct link to rules page (#fixes 6553) (#6561) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e2b2030 Update: Check RegExp strings for "),
          _c("code", [_vm._v("no-regex-spaces")]),
          _vm._v(" (fixes #3586) (#6379) (Jackson Ray Hamilton)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "397e51b Update: Implement outerIIFEBody for indent rule (fixes #6259) (#6382) (David Shepherd)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "666da7c Docs: 3.0.0 migration guide (#6521) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b9bf8fb Docs: Update Governance Policy (fixes #6452) (#6522) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1290657 Update: "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(
            " ignores read it modifies itself (fixes #6348) (#6535) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d601f6b Fix: Delete cache only when executing on files (fixes #6459) (#6540) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e0d4b19 Breaking: Error thrown/printed if no config found (fixes #5987) (#6538) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("18663d4 Fix: false negative of "),
          _c("code", [_vm._v("no-useless-rename")]),
          _vm._v(" (fixes #6502) (#6506) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0a7936d Update: Add fixer for prefer-const (fixes #6448) (#6486) (Nick Heiner)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c60341f Chore: Update index and "),
          _c("code", [_vm._v("meta")]),
          _vm._v(" for "),
          _c("code", [_vm._v('"eslint:recommended"')]),
          _vm._v(" (refs #6403) (#6539) (Mark Pedrotti)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '73da28d Better wording for the error reported by the rule "no-else-return" #6411 (#6413) (Olivier Thomann)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e06a5b5 Update: Add fixer for arrow-parens (fixes #4766) (#6501) (madmed88)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5f8f3e8 Docs: Remove Box as a sponsor (#6529) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7dfe0ad Docs: fix max-lines samples (fixes #6516) (#6515) (Dmitriy Shekhovtsov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fa05119 Breaking: Update eslint:recommended (fixes #6403) (#6509) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'e96177b Docs: Add "Proposing a Rule Change" link to CONTRIBUTING.md (#6511) (Kevin Partington)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bea9096 Docs: Update pull request steps (fixes #6474) (#6510) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7bcf6e0 Docs: Consistent example headings & text pt3 (refs #5446) (#6492) (Guy Fraser)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1a328d9 Docs: Consistent example headings & text pt4 (refs #5446) (#6493) (Guy Fraser)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ff5765e Docs: Consistent example headings & text pt2 (refs #5446)(#6491) (Guy Fraser)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("01384fa Docs: Fixing typos (refs #5446)(#6494) (Guy Fraser)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4343ae8 Fix: false negative of "),
          _c("code", [_vm._v("object-shorthand")]),
          _vm._v(" (fixes #6429) (#6434) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b7d8c7d Docs: more accurate yoda-speak (#6497) (Tony Lukasavage)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3b0ab0d Fix: add warnIgnored flag to CLIEngine.executeOnText (fixes #6302) (#6305) (Robert Levy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c2c6cec Docs: Mark object-shorthand as fixable. (#6485) (Nick Heiner)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5668236 Fix: Allow objectsInObjects exception when destructuring (fixes #6469) (#6470) (Adam Renklint)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("17ac0ae Fix: "),
          _c("code", [_vm._v("strict")]),
          _vm._v(
            " rule reports a syntax error for ES2016 (fixes #6405) (#6464) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4545123 Docs: Rephrase documentation for "),
          _c("code", [_vm._v("no-duplicate-imports")]),
          _vm._v(" (#6463) (Simen Bekkhus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1b133e3 Docs: improve "),
          _c("code", [_vm._v("no-native-reassign")]),
          _vm._v(
            " and specifying globals (fixes #5358) (#6462) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b179373 Chore: Remove dead code in excuteOnFiles (fixes #6467) (#6466) (Andrew Hutchings)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "18fbc4b Chore: Simplify eslint process exit code (fixes #6368) (#6371) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "58542e4 Breaking: Drop support for node < 4 (fixes #4483) (#6401) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f50657e Breaking: use default for complexity in eslint:recommended (fixes #6021) (#6410) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3e690fb Fix: Exit init early if guide is chosen w/ no package.json (fixes #6476) (#6478) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.13.1 - June 20, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "434de7f Fix: wrong baseDir (fixes #6450) (#6457) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3c9ce09 Fix: Keep indentation when fixing "),
          _c("code", [_vm._v("padded-blocks")]),
          _vm._v(' "never" (fixes #6454) (#6456) (Ed Lee)')
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a9d4cb2 Docs: Fix typo in max-params examples (#6471) (J. William Ashton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1e185b9 Fix: no-multiple-empty-lines errors when no line breaks (fixes #6449) (#6451) (strawbrary)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.13.0 - June 17, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "cf223dd Fix: add test for a syntax error (fixes #6013) (#6378) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "da30cf9 Update: Add fixer for object-shorthand (fixes #6412) (#6418) (Nick Heiner)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2cd90eb Chore: Fix rule meta description inconsistencies (refs #5417) (#6422) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'd798b2c Added quotes around "classes" option key (#6441) (Guy Fraser)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "852b6df Docs: Delete empty table of links from Code Path Analysis (#6423) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5e9117e Chore: sort rules in eslint.json (fixes #6425) (#6426) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c2b5277 Docs: Add gitter chat link to Reporting Bugs (#6430) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1316db0 Update: Add "),
          _c("code", [_vm._v("never")]),
          _vm._v(" option for "),
          _c("code", [_vm._v("func-names")]),
          _vm._v(" (fixes #6059) (#6392) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1c123e2 Update: Add autofix for "),
          _c("code", [_vm._v("padded-blocks")]),
          _vm._v(" (fixes #6320) (#6393) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8ec89c8 Fix: "),
          _c("code", [_vm._v("--print-config")]),
          _vm._v(" return config inside subdir (fixes #6329) (#6385) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4f73240 Fix: "),
          _c("code", [_vm._v("object-curly-newline")]),
          _vm._v(
            " multiline with comments (fixes #6381) (#6396) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "77697a7 Chore: Fake config hierarchy fixtures (fixes #6206) (#6402) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "73a9a6d Docs: Fix links in Configuring ESLint (#6421) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ed84c4c Fix: improve "),
          _c("code", [_vm._v("newline-per-chained-call")]),
          _vm._v(" message (fixes #6340) (#6360) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9ea4e44 Docs: Update parser reference to "),
          _c("code", [_vm._v("espree")]),
          _vm._v(" instead of "),
          _c("code", [_vm._v("esprima")]),
          _vm._v(" (#6404) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7f57467 Docs: Make "),
          _c("code", [_vm._v("fix")]),
          _vm._v(" param clearer (fixes #6366) (#6367) (Nick Heiner)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fb49c7f Fix: nested "),
          _c("code", [_vm._v("extends")]),
          _vm._v(" with relative path (fixes #6358) (#6359) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5122f73 Update: no-multiple-empty-lines fixer (fixes #6225) (#6226) (Ruurd Moelker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0e7ce72 Docs: Fix rest-spread-spacing's name (#6365) (cody)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cfdd524 Fix: allow semi as braceless body of statements (fixes #6386) (#6391) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6b08cfc Docs: key-spacing fixable documenation notes (fixes #6375) (#6376) (Ruurd Moelker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4b4be3b Docs: "),
          _c("code", [_vm._v("max-lines")]),
          _vm._v(" option: fix "),
          _c("code", [_vm._v("skipComments")]),
          _vm._v(" typo (#6374) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "20ab4f6 Docs: Fix wrong link in object-curly-newline (#6373) (Grant Snodgrass)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "412ce8d Docs: Fix broken links in no-mixed-operators (#6372) (Grant Snodgrass)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.12.0 - June 10, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("54c30fb Update: Add explicit default option "),
          _c("code", [_vm._v("always")]),
          _vm._v(" for "),
          _c("code", [_vm._v("eqeqeq")]),
          _vm._v(" (refs #6144) (#6342) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2d63370 Update: max-len will warn indented comment lines (fixes #6322) (#6324) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dcd4ad7 Docs: clarify usage of inline disable comments (fixes #6335) (#6347) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c03300b Docs: Clarified how plugin rules look in plugin configs (fixes #6346) (#6351) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9c87709 Docs: Add semantic versioning policy (fixes #6244) (#6343) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5affab1 Docs: Describe values under Extending Configuration Files (refs #6240) (#6336) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2520f5a New: "),
          _c("code", [_vm._v("max-lines")]),
          _vm._v(" rule (fixes #6078) (#6321) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9bfbc64 Update: Option for object literals in "),
          _c("code", [_vm._v("arrow-body-style")]),
          _vm._v(" (fixes #5936) (#6216) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "977cdd5 Chore: remove unused method from FileFinder (fixes #6344) (#6345) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "477fbc1 Docs: Add section about customizing RuleTester (fixes #6227) (#6331) (Jeroen Engels)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0e14016 New: "),
          _c("code", [_vm._v("no-mixed-operators")]),
          _vm._v(" rule (fixes #6023) (#6241) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6e03c4b Update: Add never option to arrow-body-style (fixes #6317) (#6318) (Andrew Hyndman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f804397 New: Add "),
          _c("code", [_vm._v("eslint:all")]),
          _vm._v(" option (fixes #6240) (#6248) (Robert Fletcher)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dfe05bf Docs: Link JSCS rules to their corresponding page. (#6334) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1cc4356 Docs: Remove reference to numeric config (fixes #6309) (#6327) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2d4efbe Docs: Describe options in rule under Strict Mode (#6312) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c1953fa Docs: Typo fix 'and' -> 'any' (#6326) (Stephen Edgar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d49ab4b Docs: Code conventions improvements (#6313) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "316a507 Fix: one-var allows uninitialized vars in ForIn/ForOf (fixes #5744) (#6272) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6cbee31 Docs: Typo fix 'colum' -> 'column' (#6306) (Andrew Cobby)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2663569 New: "),
          _c("code", [_vm._v("object-curly-newline")]),
          _vm._v(" (fixes #6072) (#6223) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "72c2ea5 Update: callback-return allows for object methods (fixes #4711) (#6277) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "89580a4 Docs: Distinguish examples in rules under Stylistic Issues part 5 (#6291) (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1313804 New: rest-spread-spacing rule (fixes #5391) (#6278) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("61dfe68 Fix: "),
          _c("code", [_vm._v("no-useless-rename")]),
          _vm._v(
            " false positive in babel-eslint (fixes #6266) (#6290) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c78c8cb Build: Remove commit check from appveyor (fixes #6292) (#6294) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3e38fc1 Chore: more tests for comments at the end of blocks (refs #6090) (#6273) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("38dccdd Docs: "),
          _c("code", [_vm._v("--no-ignore")]),
          _vm._v(
            " disables all forms of ignore (fixes #6260) (#6304) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bb69380 Fix: no-useless-rename handles ExperimentalRestProperty (fixes #6284) (#6288) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fca0679 Update: Improve perf not traversing default ignored dirs (fixes #5679) (#6276) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "320e8b0 Docs: Describe options in rules under Possible Errors part 4 (#6270) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3e052c1 Docs: Mark no-useless-rename as fixable in rules index (#6297) (Dalton Santos)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.11.1 - May 30, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("64b0d0c Fix: failed to parse "),
          _c("code", [_vm._v("/*eslint")]),
          _vm._v(" comments by colon (fixes #6224) (#6258) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c8936eb Build: Don't check commit count (fixes #5935) (#6263) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("113c1a8 Fix: "),
          _c("code", [_vm._v("max-statements-per-line")]),
          _vm._v(
            " false positive at exports (fixes #6264) (#6268) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("03beb27 Fix: "),
          _c("code", [_vm._v("no-useless-rename")]),
          _vm._v(" false positives (fixes #6266) (#6267) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fe89037 Docs: Fix rule name in example (#6279) (Kenneth Williams)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.11.0 - May 27, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "77dd2b4 Fix: On --init, print message when package.json is invalid (fixes #6257) (#6261) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7f60186 Fix: "),
          _c("code", [_vm._v("--ignore-pattern")]),
          _vm._v(" can't uningnore files (fixes #6127) (#6253) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fea8fe6 New: no-useless-rename (fixes #6058) (#6249) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b4cff9d Fix: Incorrect object-property-newline behavior (fixes #6207) (#6213) (Rafał Ruciński)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "35b4656 Docs: Edit arrow-parens.md to show correct output value (#6245) (Adam Terlson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ee0cd58 Fix: "),
          _c("code", [_vm._v("newline-before-return")]),
          _vm._v(" shouldn't disallow newlines (fixes #6176) (#6217) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d4f5526 Fix: "),
          _c("code", [_vm._v("vars-on-top")]),
          _vm._v(
            " crashs at export declarations (fixes #6210) (#6220) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("088bda9 New: "),
          _c("code", [_vm._v("unicode-bom")]),
          _vm._v(
            " rule to allow or disallow BOM (fixes #5502) (#6230) (Andrew Johnston)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("14bfc03 Fix: "),
          _c("code", [_vm._v("comma-dangle")]),
          _vm._v(" wrong autofix (fixes #6233) (#6235) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cdd65d7 Docs: added examples for arrow-body-style (refs #5498) (#6242) (Tieme van Veen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c10c07f Fix: lost code in autofixing (refs #6233) (#6234) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e6d5b1f Docs: Add rule deprecation section to user guide (fixes #5845) (#6201) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "777941e Upgrade: doctrine to 1.2.2 (fixes #6121) (#6231) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "74c458d Update: key-spacing rule whitespace fixer (fixes #6167) (#6169) (Ruurd Moelker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "04bd586 New: Disallow use of Object.prototype methods on objects (fixes #2693) (#6107) (Andrew Levine)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("53754ec Update: max in "),
          _c("code", [_vm._v("max-statements-per-line")]),
          _vm._v(" should be >=0 (fixes #6171) (#6172) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "54d1201 Update: Add treatUndefinedAsUnspecified option (fixes #6026) (#6194) (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "18152dd Update: Add checkLoops option to no-constant-condition (fixes #5477) (#6202) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7644908 Fix: no-multiple-empty-lines BOF and EOF defaults (fixes #6179) (#6180) (Ruurd Moelker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("72335eb Fix: "),
          _c("code", [_vm._v("max-statements-per-line")]),
          _vm._v(
            " false positive (fixes #6173, fixes #6153) (#6192) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9fce04e Fix: "),
          _c("code", [_vm._v("generator-star-spacing")]),
          _vm._v(" false positive (fixes #6135) (#6168) (Toru Nagashima)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.10.2 - May 16, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "bda5de5 Fix: Remove default parser from CLIEngine options (fixes #6182) (#6183) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e59e5a0 Docs: Describe options in rules under Possible Errors part 3 (#6105) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "842ab2e Build: Run phantomjs tests using karma (fixes #6128) (#6178) (alberto)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.10.1 - May 14, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("9397135 Fix: "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(
            " false positive at default parameters (fixes #6097) (#6170) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2166ad4 Fix: warning & error count in "),
          _c("code", [_vm._v("CLIEngine.getErrorResults")]),
          _vm._v(" (fixes #6155) (#6157) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1e0a652 Fix: ignore empty statements in max-statements-per-line (fixes #6153) (#6156) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f9ca0d6 Fix: "),
          _c("code", [_vm._v("no-extra-parens")]),
          _vm._v(" to check for nulls (fixes #6161) (#6164) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d095ee3 Fix: Parser merge sequence in config (fixes #6158) (#6160) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f33e49f Fix: "),
          _c("code", [_vm._v("no-return-assign")]),
          _vm._v(
            " to check for null tokens (fixes #6159) (#6162) (Gyandeep Singh)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.10.0 - May 13, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "098cd9c Docs: Distinguish examples in rules under Stylistic Issues part 4 (#6136) (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "805742c Docs: Clarify JSX option usage (#6132) (Richard Collins)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "10b0933 Fix: Optimize no-irregular-whitespace for the common case (fixes #6116) (#6117) (Andres Suarez)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "36bec90 Docs: linkify URLs in development-environment.md (#6150) (chrisjshull)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "29c401a Docs: Convert rules in index under Removed from list to table (#6091) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e13e696 Fix: "),
          _c("code", [_vm._v("_")]),
          _vm._v(" and "),
          _c("code", [_vm._v("$")]),
          _vm._v(" in isES5Constructor (fixes #6085) (#6094) (Kevin Locke)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("67916b9 Fix: "),
          _c("code", [_vm._v("no-loop-func")]),
          _vm._v(" crashed (fixes #6130) (#6138) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d311a62 Fix: Sort fixes consistently even if they overlap (fixes #6124) (#6133) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6294459 Docs: Correct syntax for default ignores and "),
          _c("code", [_vm._v(".eslintignore")]),
          _vm._v(" example (#6118) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("067db14 Fix: Replace "),
          _c("code", [_vm._v("assert.deepEqual")]),
          _vm._v(" by "),
          _c("code", [_vm._v("lodash.isEqual")]),
          _vm._v(" (fixes #6111) (#6112) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("52fdf04 Fix: "),
          _c("code", [_vm._v("no-multiple-empty-lines")]),
          _vm._v(" duplicate errors at BOF (fixes #6113) (#6114) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e6f56da Docs: Document "),
          _c("code", [_vm._v("--ignore-pattern")]),
          _vm._v(" (#6120) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ef739cd Fix: Merge various command line configs at the same time (fixes #6104) (#6108) (Ed Lee)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "767da6f Update: add returnAssign option to no-extra-parens (fixes #6036) (#6095) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "06f6252 Build: Use split instead of slice/indexOf for commit check (fixes #6109) (#6110) (Ed Lee)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c4fc39b Docs: Update headings of rules under Removed (refs #5774) (#6102) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "716345f Build: Match rule id at beginning of heading (refs #5774) (#6089) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0734967 Update: Add an option to "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(" (fixes #5692) (#6040) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7941d5e Update: Add autofix for "),
          _c("code", [_vm._v("lines-around-comment")]),
          _vm._v(" (fixes #5956) (#6062) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'dc538aa Build: Pin proxyquire to ">=1.0.0 <1.7.5" (fixes #6096) (#6100) (alberto)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "04563ca Docs: Describe options in rules under Possible Errors part 2 (#6063) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5d390b2 Chore: Replace deprecated calls to context - batch 4 (fixes #6029) (#6087) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6df4b23 Fix: "),
          _c("code", [_vm._v("no-return-assign")]),
          _vm._v(
            " warning nested expressions (fixes #5913) (#6041) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "16fad58 Merge pull request #6088 from eslint/docs-one-var-per-line (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0b67170 Docs: Correct default for "),
          _c("code", [_vm._v("one-var-declaration-per-line")]),
          _vm._v(" (fixes #6017) (#6022) (Ed Lee)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d40017f Fix: comma-style accounts for parens in array (fixes #6006) (#6038) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "992d9cf Docs: Fix typography/teriminology in indent doc (fixes #6045) (#6044) (Rich Trott)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4ae39d2 Chore: Replace deprecated calls to context - batch 3 (refs #6029) (#6056) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8633e4d Update: multipass should not exit prematurely (fixes #5995) (#6048) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3c44c2c Update: Adds an avoidQuotes option for object-shorthand (fixes #3366) (#5870) (Chris Sauvé)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a9a4652 Fix: throw when rule uses "),
          _c("code", [_vm._v("fix")]),
          _vm._v(" but "),
          _c("code", [_vm._v("meta.fixable")]),
          _vm._v(" not set (fixes #5970) (#6043) (Vitor Balocco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ad10106 Docs: Update comma-style docs (#6039) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("388d6f8 Fix: "),
          _c("code", [_vm._v("no-sequences")]),
          _vm._v(
            " false negative at arrow expressions (fixes #6082) (#6083) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8e96064 Docs: Clarify rule example in README since we allow string error levels (#6061) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a66bf19 Fix: "),
          _c("code", [_vm._v("lines-around-comment")]),
          _vm._v(
            " multiple errors on same line (fixes #5965) (#5994) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a2cc54e Docs: Organize meta and describe visitor in Working with Rules (#5967) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ef8cbff Fix: object-shorthand should only lint computed methods (fixes #6015) (#6024) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cd1b057 Chore: Replace deprecated calls to context - batch 2 (refs #6029) (#6049) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a3a6e06 Update: no-irregal-whitespace in a regular expression (fixes #5840) (#6018) (Linda_pp)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9b9d76c Chore: Replace deprecated calls to context - batch 1 (refs #6029) (#6034) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "dd8bf93 Fix: blockless else in max-statements-per-line (fixes #5926) (#5993) (Glen Mailer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f84eb80 New: Add new rule "),
          _c("code", [_vm._v("object-property-newline")]),
          _vm._v(" (fixes #5667) (#5933) (Vitor Balocco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d5f4104 Docs: mention parsing errors in strict mode (fixes #5485) (#5991) (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "249732e Docs: Move docs from eslint.github.io (fixes #5964) (#6012) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4c2de6c Docs: Add example of diff clarity to comma-dangle rule docs (#6035) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3db2e89 Fix: Do not swallow exceptions in CLIEngine.getFormatter (fixes #5977) (#5978) (Gustav Nikolaj)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "eb2fb44 Fix: Always ignore defaults unless explicitly passed (fixes #5547) (#5820) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ab57e94 Docs: Add example of diff clarity to newline-per-chained-call (#5986) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "88bc014 Docs: Update readme info about jshint (#6027) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a2c15cc Docs: put config example in code block (#6005) (Amos Wenger)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a5011cb Docs: Fix a wrong examples' header of "),
          _c("code", [_vm._v("prefer-arrow-callback")]),
          _vm._v(". (#6020) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1484ede Docs: Typo in nodejs-api (#6025) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'ade6a9b Docs: typo: "eslint-disable-line" not "eslint disable-line" (#6019) (Will Day)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2f15354 Fix: Removed false positives of break and continue (fixes #5972) (#6000) (Onur Temizkan)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.9.0 - April 29, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "a8a2cd8 Fix: Avoid autoconfig crashes from inline comments (fixes #5992) (#5999) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "23b00e0 Upgrade: npm-license to 0.3.2 (fixes #5996) (#5998) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "377167d Upgrade: ignore to 3.1.2 (fixes #5979) (#5988) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "141b778 Fix: no-control-regex literal handling fixed. (fixes #5737) (#5943) (Efe Gürkan YALAMAN)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "577757d Fix: Clarify color option (fixes #5928) (#5974) (Grant Snodgrass)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e7e6581 Docs: Update CLA link (#5980) (Gustav Nikolaj)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0be26bc Build: Add nodejs 6 to travis (fixes #5971) (#5973) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e606523 New: Rule "),
          _c("code", [_vm._v("no-unsafe-finally")]),
          _vm._v(" (fixes #5808) (#5932) (Onur Temizkan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "42d1ecc Chore: Add metadata to existing rules - Batch 7 (refs #5417) (#5969) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e2ad1ec Update: object-shorthand lints computed methods (fixes #5871) (#5963) (Chris Sauvé)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d24516a Chore: Add metadata to existing rules - Batch 6 (refs #5417) (#5966) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1e7a3ef Fix: "),
          _c("code", [_vm._v("id-match")]),
          _vm._v(
            " false positive in property values (fixes #5885) (#5960) (Mike Sherov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "51ddd4b Update: Use process @abstract when processing @return (fixes #5941) (#5945) (Simon Schick)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("52a4bea Update: Add autofix for "),
          _c("code", [_vm._v("no-whitespace-before-property")]),
          _vm._v(" (fixes #5927) (#5951) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "46e058d Docs: Correct typo in configuring.md (#5957) (Nick S. Plekhanov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5f8abab Chore: Add metadata to existing rules - Batch 5 (refs #5417) (#5944) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0562f77 Chore: Add missing newlines to test cases (fixes #5947) (Rich Trott)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fc78e78 Chore: Enable quote-props rule in eslint-config-eslint (refs #5188) (#5938) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "43f6d05 Docs: Update docs to refer to column (#5937) (Sashko Stubailo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("586478e Update: Add autofix for "),
          _c("code", [_vm._v("comma-dangle")]),
          _vm._v(" (fixes #3805) (#5925) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a4f9c5a Docs: Distinguish examples in rules under Stylistic Issues part 3 (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e7c0737 Chore: Enable no-console rule in eslint-config-eslint (refs #5188) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0023fe6 Build: Add “chore” to commit tags (fixes #5880) (#5929) (Mike Sherov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "25d626a Upgrade: espree 3.1.4 (fixes #5923, fixes #5756) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a01b412 New: Add "),
          _c("code", [_vm._v("no-useless-computed-key")]),
          _vm._v(" rule (fixes #5402) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9afb9cb Chore: Remove workaround for espree and escope bugs (fixes #5852) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3ffc582 Chore: Update copyright and license info (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "249eb40 Docs: Clarify init sets up local installation (fixes #5874) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6cd8c86 Docs: Describe options in rules under Possible Errors part 1 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f842d18 Fix: "),
          _c("code", [_vm._v("no-this-before-super")]),
          _vm._v(" crash on unreachable paths (fixes #5894) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a02960b Docs: Fix missing delimiter in README links (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3a9e72c Docs: Update developer guide with new standards (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cb78585 Update: Add "),
          _c("code", [_vm._v("allowUnboundThis")]),
          _vm._v(" to "),
          _c("code", [_vm._v("prefer-arrow-callback")]),
          _vm._v(" (fixes #4668) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("02be29f Chore: Remove CLA check from bot (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "220713e Chore: Add metadata to existing rules - Batch 4 (refs #5417) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "df53414 Chore: Include jQuery Foundation info (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f1b2992 Fix: "),
          _c("code", [_vm._v("no-useless-escape")]),
          _vm._v(
            " false positive in JSXAttribute (fixes #5882) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("74674ad Docs: Move "),
          _c("code", [_vm._v("sort-imports")]),
          _vm._v(" to 'ECMAScript 6' (Kenneth Williams)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ae69ddb Docs: Fix severity type in example (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "19f6fff Update: Autofixing does multiple passes (refs #5329) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1e4b0ca Docs: Reduce length of paragraphs in rules index (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("8cfe1eb Docs: Fix a wrong option (Zach Orlovsky)")]),
        _vm._v(" "),
        _c("li", [_vm._v("8f6739f Docs: Add alberto as reviewer (alberto)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2ae4938 Docs: Fix message for "),
          _c("code", [_vm._v("inline-config")]),
          _vm._v(" option (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "089900b Docs: Fix a wrong rule name in an example (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("c032b41 Docs: Fix emphasis (Toru Nagashima)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ae606f0 Docs: Update JSCS info in README (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a9c5323 Fix: Install ESLint on init if not installed (fixes #5833) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ed38358 Docs: Removed incorrect example (James M. Greene)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "af3113c Docs: Fix config comments in indent docs (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2b39461 Update: "),
          _c("code", [_vm._v("commentPattern")]),
          _vm._v(" option for "),
          _c("code", [_vm._v("default-case")]),
          _vm._v(" rule (fixes #5803) (Artyom Lvov)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.8.0 - April 15, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "a8821a5 Docs: Distinguish examples in rules under Stylistic Issues part 2 (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "76913b6 Update: Add metadata to existing rules - Batch 3 (refs #5417) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "34ad8d2 Fix: Check that module.paths exists (fixes #5791) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("37239b1 Docs: Add new members of the team (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fb3c2eb Update: allow template literals (fixes #5234) (Jonathan Haines)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5a4a935 Update: Add metadata to existing rules - Batch 2 (refs #5417) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ea2e625 Fix: newline-before-return handles return as first token (fixes #5816) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f8db9c9 Update: add nestedBinaryExpressions to no-extra-parens (fixes #3065) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0045d57 Update: "),
          _c("code", [_vm._v("allowNamedFunctions")]),
          _vm._v(" in "),
          _c("code", [_vm._v("prefer-arrow-callback")]),
          _vm._v(" (fixes #5675) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "19da72a Update: Add metadata to existing rules - Batch 1 (refs #5417) (Vitor Balocco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cc14e43 Fix: "),
          _c("code", [_vm._v("no-fallthrough")]),
          _vm._v(" empty case with comment (fixes #5799) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "13c8b14 Fix: LogicalExpression checks for short circuit (fixes #5693) (Vamshi krishna)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "73b225e Fix: Document and fix metadata (refs #5417) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("882d199 Docs: Improve options description in "),
          _c("code", [_vm._v("no-redeclare")]),
          _vm._v(" (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6a71ceb Docs: Improve options description in "),
          _c("code", [_vm._v("no-params-reassign")]),
          _vm._v(" (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "24b6215 Update: Include 'typeof' in rule 'no-constant-condition' (fixes #5228) (Vamshi krishna)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a959063 Docs: Remove link to deprecated ESLintTester project (refs #3110) (Trey Thomas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6fd7d82 Update: Change order in "),
          _c("code", [_vm._v("eslint --init")]),
          _vm._v(" env options (fixes #5742) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c59d909 Fix: Extra paren check around object arrow bodies (fixes #5789) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6f88546 Docs: Use double quotes for better Win compatibility (fixes #5796) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("02743d5 Fix: catch self-assignment operators in "),
          _c("code", [_vm._v("no-magic-number")]),
          _vm._v(" (fixes #4400) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c94e74e Docs: Make rule descriptions more consistent (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6028252 Docs: Distinguish examples in rules under Stylistic Issues part 1 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ccd8ca9 Fix: Added property onlyDeclaration to id-match rule (fixes #3488) (Gajus Kuizinas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6703c02 Update: no-useless-escape / exact locations of errors (fixes #5751) (Onur Temizkan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3d84b91 Fix: ignore trailing whitespace in template literal (fixes #5786) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b0e6bc4 Update: add allowEmptyCatch option to no-empty (fixes #5800) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f1f1dd7 Docs: Add @pedrottimark as a committer (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("228f201 Update: "),
          _c("code", [_vm._v("commentPattern")]),
          _vm._v(" option for "),
          _c("code", [_vm._v("no-fallthrough")]),
          _vm._v(" rule (fixes #5757) (Artyom Lvov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("41db670 Docs: Clarify disable inline comments (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9c9a295 Docs: Add note about shell vs node glob parameters in cli (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5308ff9 Docs: Add code backticks to sentence in fixable rules (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "965ec06 Docs: fix the examples for space-before-function-paren. (Craig Silverstein)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2b202fc Update: Add ignore option to space-before-function-parens (fixes #4127) (Craig Silverstein)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("24c12ba Fix: improve "),
          _c("code", [_vm._v("constructor-super")]),
          _vm._v(" errors for literals (fixes #5449) (Toru Nagashima)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.7.0 - April 4, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            '134cb1f Revert "Update: adds nestedBinaryExpressions for no-extra-parens rule (fixes #3065)" (Ilya Volodin)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7e80867 Docs: Update sentence in fixable rules (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1b6d5a3 Update: adds nestedBinaryExpressions for no-extra-parens (fixes #3065) (Nick Fisher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4f93c32 Docs: Clarify "),
          _c("code", [_vm._v("array-bracket-spacing")]),
          _vm._v(" with newlines (fixes #5768) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("161ddac Fix: remove "),
          _c("code", [_vm._v("console.dir")]),
          _vm._v(" (fixes #5770) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0c33f6a Fix: indent rule uses wrong node for class indent level (fixes #5764) (Paul O’Shannessy)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.6.0 - April 1, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "ce2accd Fix: vars-on-top now accepts exported variables (fixes #5711) (Olmo Kramer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7aacba7 Update: Deprecate option "),
          _c("code", [_vm._v("maximum")]),
          _vm._v(" in favor of "),
          _c("code", [_vm._v("max")]),
          _vm._v(" (fixes #5685) (Vitor Balocco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5fe6fca Fix: no-useless-escape \\B regex escape (fixes #5750) (Onur Temizkan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9b73ffd Update: "),
          _c("code", [_vm._v("destructuring")]),
          _vm._v(" option of "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(" rule (fixes #5594) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("8ac9206 Docs: Typo in "),
          _c("code", [_vm._v("sort-imports")]),
          _vm._v(" (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "12902c5 Fix: valid-jsdoc crash w/ Field & Array Type (fixes #5745) (fixes #5746) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2c8b65a Docs: Edit examples for a few rules (Mark Pedrotti)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d736bc2 Fix: Treat SwitchCase like a block in lines-around-comment (fixes #5718) (Scott O'Hara)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("24a61a4 Update: make "),
          _c("code", [_vm._v("no-useless-escape")]),
          _vm._v(" allowing line breaks (fixes #5689) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4ecd45e Fix: Ensure proper lookup of config files (fixes #5175, fixes #5468) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "088e26b Fix: Update doctrine to allow hyphens in JSDoc names (fixes #5612) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "692fd5d Upgrade: Old Chalk.JS deprecated method (fixes #5716) (Morris Singer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f59d91d Update: no-param-reassign error msgs (fixes #5705) (Isaac Levy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c1b16cd Fix: Object spread throws error in key-spacing rule. (fixes #5724) (Ziad El Khoury Hanna)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3091613 Docs: Correct explanation about properties (James Monger)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cb0f0be Fix: Lint issue with "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" rule (refs #5188) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "aba1954 Build: Ignore jsdoc folder internally (fixes #5714) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a35f127 Fix: Lint for eslint project in regards to vars (refs #5188) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d9ab4f0 Fix: Windows scoped package configs (fixes #5644) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8d0cd0d Update: Basic valid-jsdoc default parameter support (fixes #5658) (Tom Andrews)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.5.3 - March 28, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "8749ac5 Build: Disable bundling dependencies (fixes #5687) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.5.2 - March 28, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "1cc7f8e Docs: Remove mention of minimatch for .eslintignore (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("5bd69a9 Docs: Reorder FAQ in README (alberto)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("98e6bd9 Fix: Correct default for indentation in "),
          _c("code", [_vm._v("eslint --init")]),
          _vm._v(" (fixes #5698) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("679095e Fix: make the default of "),
          _c("code", [_vm._v("options.cwd")]),
          _vm._v(" in runtime (fixes #5694) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4f06f2f Docs: Distinguish examples in rules under Best Practices part 2 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "013a18e Build: Fix bundling script (fixes #5680) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("8c5d954 Docs: Typo fix (István Donkó)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("09659d6 Docs: Use string severity (Kenneth Williams)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a4ae769 Docs: Manual changelog update for v2.5.1 (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c41fab9 Fix: don't use path.extname with undefined value (fixes #5678) (Myles Borins)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.5.1 - March 25, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Build: No functional changes, just republished with a working package."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.5.0 - March 25, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "7021aa9 Fix: lines-around-comment in ESLint repo, part 2 (refs #5188) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "095c435 Docs: Remove ES2016 from experimental section of README (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "646f863 Build: Bundle dependencies in package.json (fixes #5013) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ea06868 Docs: Clarify --ext does not apply to globs (fixes #5452) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "569c478 Build: Fix phantomjs CI problems (fixes #5666) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6022426 Docs: Add link to chat room in README primary links (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '2fbb530 Docs: Add link to "Proposing a Rule Change" in README (alberto)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("25bf491 Upgrade: globals 9.x (fixes #5668) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d6f8409 New: Rule - No useless escape (fixes #5460) (Onur Temizkan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "12a43f1 Docs: remove brace expansion from configuring.md (refs #5314) (Jonathan Haines)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "92d1749 New: max-statements-per-line (fixes #5424) (Kenneth Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "aaf324a Fix: missing support for json sub configs (fixes #5413) (Noam Okman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "48ad5fe Update: Add 'caughtErrors' to rule no-unused-vars (fixes #3837) (vamshi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ad90c2b Fix: incorrect config message (fixes #5653) (s0ph1e)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a551831 Docs: Distinguish examples in rules under Node.js and CommonJS (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("83cd651 Upgrade: chai to 3.5.0 (fixes #5647) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("32748dc Fix: "),
          _c("code", [_vm._v("radix")]),
          _vm._v(
            " rule false positive at shadowed variables (fixes #5639) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("66db38d Fix: "),
          _c("code", [_vm._v("--no-ignore")]),
          _vm._v(
            " should not un-ignore default ignores (fixes #5547) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e3e06f3 Docs: Distinguish examples in rules under Best Practices part 4 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a9f0865 Docs: Update no-sequences rule docs for clarity (fixes #5536) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("bae7b30 Docs: Add michaelficarra as committer (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e2990e7 Docs: Consistent wording in rules README (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "49b4d2a Docs: Update team list with new members (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d0ae66c Update: Allow autoconfiguration for JSX code (fixes #5511) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("38a0a64 Docs: Clarify "),
          _c("code", [_vm._v("linebreak-style")]),
          _vm._v(" docs (fixes #5628) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4b7305e Fix: Allow default ignored files to be unignored (fixes #5410) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4b05ce6 Update: Enforce repo coding conventions via ESLint (refs #5188) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "051b255 Docs: Remove or rewrite references to former ecmaFeatures (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9a22625 Fix: "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(
            " false positive at non-blocked if (fixes #5610) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b1fd482 Fix: leading comments added from previous node (fixes #5531) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c335650 Docs: correct the no-confusing-arrow docs (Daniel Norman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e94b77d Fix: Respect 'ignoreTrailingComments' in max-len rule (fixes #5563) (Vamshi Krishna)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9289ef8 Fix: handle personal package.json without config (fixes #5496) (Denny Christochowitz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("87d74b2 Fix: "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(" got to not change scopes (refs #5284) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5a881e7 Docs: Fix typo in code snippet for no-unmodified-loop-condition rule (Chris Rebert)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "03037c2 Update: Overrides for space-unary-ops (fixes #5060) (Afnan Fahim)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "24d986a Update: replace MD5 hashing of cache files with MurmurHash (fixes #5522) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f405030 Fix: Ensure allowing "),
          _c("code", [_vm._v("await")]),
          _vm._v(" as a property name (fixes #5564) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("aefc90c Fix: "),
          _c("code", [_vm._v("no-useless-constructor")]),
          _vm._v(" clash (fixes #5573) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("9eaa20d Docs: Fix typo in CLI help message (ryym)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a7c3e67 Docs: Invalid json in "),
          _c("code", [_vm._v("configuring.md")]),
          _vm._v(" (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4e50332 Docs: Make "),
          _c("code", [_vm._v("prefer-template")]),
          _vm._v(" examples consistent. (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "cfc14a9 Fix: valid-jsdoc correctly checks type union (fixes #5260) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("689cb7d Fix: "),
          _c("code", [_vm._v("quote-props")]),
          _vm._v(
            " false positive on certain keys (fixes #5532) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("167a03a Fix: "),
          _c("code", [_vm._v("brace-style")]),
          _vm._v(
            " erroneously ignoring certain errors (fixes #5197) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3133f28 Fix: object-curly-spacing doesn't know types (fixes #5537) (fixes #5538) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d0ca171 Docs: Separate parser and config questions in issue template (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bc769ca Fix: Improve file path resolution (fixes #5314) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9ca8567 Docs: Distinguish examples in rules under Best Practices part 3 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b9c69f1 Docs: Distinguish examples in rules under Variables part 2 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c289414 New: "),
          _c("code", [_vm._v("no-duplicate-imports")]),
          _vm._v(" rule (fixes #3478) (Simen Bekkhus)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.4.0 - March 11, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "97b2466 Fix: estraverse/escope to work with unknowns (fixes #5476) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "641b3f7 Fix: validate the type of severity level (fixes #5499) (Shinnosuke Watanabe)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9ee8869 Docs: no-unused-expressions - add more edge unusable and usable examples (Brett Zamir)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "56bf864 Docs: Create parity between no-sequences examples (Brett Zamir)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("13ef1c7 New: add "),
          _c("code", [_vm._v("--parser-options")]),
          _vm._v(" to CLI (fixes #5495) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ae1ee54 Docs: fix func-style arrow exception option (Craig Martin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "91852fd Docs: no-lone-blocks - show non-problematic (and problematic) label (Brett Zamir)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b34458f Docs: Rearrange rules for better categories (and improve rule summaries) (Brett Zamir)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1198b26 Docs: Minor README clarifications (Brett Zamir)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "03e6869 Fix: newline-before-return: bug with comment (fixes #5480) (mustafa)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ad100fd Fix: overindent in VariableDeclarator parens or brackets (fixes #5492) (David Greenspan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9b8e04b Docs: Replace all node references to Node.js which is the official name (Brett Zamir)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cc1f2f0 Docs: Minor fixes in no-new-func (Brett Zamir)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6ab81d4 Docs: Distinguish examples in rules under Best Practices part 1 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9c6c70c Update: add "),
          _c("code", [_vm._v("allowParens")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("no-confusing-arrow")]),
          _vm._v(" (fixes #5332) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "979c096 Docs: Document linebreak-style as fixable. (Afnan Fahim)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9f18a81 Fix: Ignore destructuring assignment in "),
          _c("code", [_vm._v("object-shorthand")]),
          _vm._v(" (fixes #5488) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5d9a798 Docs: README.md, prefer-const; change modified to reassigned (Michiel de Bruijne)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "38eb7f1 Fix: key-spacing checks ObjectExpression is multiline (fixes #5479) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9592c45 Fix: "),
          _c("code", [_vm._v("no-unmodified-loop-condition")]),
          _vm._v(" false positive (fixes #5445) (Toru Nagashima)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.3.0 - March 4, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "1b2c6e0 Update: Proposed no-magic-numbers option: ignoreJSXNumbers (fixes #5348) (Brandon Beeks)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "63c0b7d Docs: Fix incorrect environment ref. in Rules in Plugins. (fixes #5421) (Jesse McCarthy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "124c447 Build: Add additional linebreak to docs (fixes #5464) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0d3831b Docs: Add RuleTester parserOptions migration steps (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("50f4d5a Fix: extends chain (fixes #5411) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0547072 Update: Replace getLast() with lodash.last() (fixes #5456) (Jordan Eldredge)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8c29946 Docs: Distinguish examples in rules under Possible Errors part 1 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5319b4a Docs: Distinguish examples in rules under Possible Errors part 2 (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1da2420 Fix: crash when SourceCode object was reused (fixes #5007) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9e9daab New: newline-before-return rule (fixes #5009) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e1bbe45 Fix: Check space after anonymous generator star (fixes #5435) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "119e0ed Docs: Distinguish examples in rules under Variables (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("905c049 Fix: "),
          _c("code", [_vm._v("no-undef")]),
          _vm._v(" false positive at new.target (fixes #5420) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4a67b9a Update: Add ES7 support (fixes #5401) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "89c757d Docs: Replace ecmaFeatures with parserOptions in working-with-rules (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "804c08e Docs: Add parserOptions to RuleTester section of working-with-rules (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1982c50 Docs: Document string option for "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(". (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4f82b2b Update: Support classes in "),
          _c("code", [_vm._v("padded-blocks")]),
          _vm._v(" (fixes #5092) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ed5564f Docs: Specify results of "),
          _c("code", [_vm._v("no-unused-var")]),
          _vm._v(" with "),
          _c("code", [_vm._v("args")]),
          _vm._v(" (fixes #5334) (chinesedfan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("de0a4ef Fix: "),
          _c("code", [_vm._v("getFormatter")]),
          _vm._v(
            " throws an error when called as static (fixes #5378) (cowchimp)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "78f7ca9 Fix: Prevent crash from swallowing console.log (fixes #5381) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "34b648d Fix: remove tests which have invalid syntax (fixes #5405) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7de5ae4 Docs: Missing allow option in  docs (Scott O'Hara)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cf14c71 Fix: "),
          _c("code", [_vm._v("no-useless-constructor")]),
          _vm._v(" rule crashes sometimes (fixes #5290) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "70e3a02 Update: Allow string severity in config (fixes #3626) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "13c7c19 Update: Exclude ES5 constructors from consistent-return (fixes #5379) (Kevin Locke)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("784d3bf Fix: Location info in "),
          _c("code", [_vm._v("dot-notation")]),
          _vm._v(" rule (fixes #5397) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6280b2d Update: Support switch statements in padded-blocks (fixes #5056) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "25a5b2c Fix: Allow irregular whitespace in comments (fixes #5368) (Christophe Porteneuve)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "560c0d9 New: no-restricted-globals rule implementation (fixes #3966) (Benoît Zugmeyer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c5bb478 Fix: "),
          _c("code", [_vm._v("constructor-super")]),
          _vm._v(" false positive after a loop (fixes #5394) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6c0c4aa Docs: Add Issue template (fixes #5313) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1170e67 Fix: indent rule doesn't handle constructor instantiation (fixes #5384) (Nate Cavanaugh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6bc9932 Fix: Avoid magic numbers in rule options (fixes #4182) (Brandon Beeks)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "694e1c1 Fix: Add tests to cover default magic number tests (fixes #5385) (Brandon Beeks)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0b5349d Fix: .eslintignore paths should be absolute (fixes #5362) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8f6c2e7 Update: Better error message for plugins (refs #5221) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "972d41b Update: Improve error message for rule-tester (fixes #5369) (Jeroen Engels)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fe3f6bd Fix: "),
          _c("code", [_vm._v("no-self-assign")]),
          _vm._v(" false positive at shorthand (fixes #5371) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2376291 Docs: Missing space in "),
          _c("code", [_vm._v("no-fallthrough")]),
          _vm._v(" doc. (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5aedb87 Docs: Add mysticatea as reviewer (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1f9fd10 Update: no-invalid-regexp allows custom flags (fixes #5249) (Afnan Fahim)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f1eab9b Fix: Support for dash and slash in "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" (fixes #1598) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("cd12a4b Fix:"),
          _c("code", [_vm._v("newline-per-chained-call")]),
          _vm._v(
            " should only warn on methods (fixes #5289) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("0d1377d Docs: Add missing "),
          _c("code", [_vm._v("symbol")]),
          _vm._v(" type into valid list (Plusb Preco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6aa2380 Update: prefer-const; change modified to reassigned (fixes #5350) (Michiel de Bruijne)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d1d62c6 Fix: indent check for else keyword with Stroustrup style (fixes #5218) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7932f78 Build: Fix commit message validation (fixes #5340) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1c347f5 Fix: Cleanup temp files from tests (fixes #5338) (Nick)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2f3e1ae Build: Change rules to warnings in perf test (fixes #5330) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "36f40c2 Docs: Achieve consistent order of h2 in rule pages (Mark Pedrotti)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.2.0 - February 19, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "45a22b5 Docs: remove esprima-fb from suggested parsers (Henry Zhu)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("a4d9cd3 Docs: Fix semi rule typo (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9d005c0 Docs: Correct option name in "),
          _c("code", [_vm._v("no-implicit-coercion")]),
          _vm._v(" rule (Neil Kistner)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2977248 Fix: Do not cache "),
          _c("code", [_vm._v(".eslintrc.js")]),
          _vm._v(" (fixes #5067) (Nick)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "211eb8f Fix: no-multi-spaces conflicts with smart tabs (fixes #2077) (Afnan Fahim)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6dc9483 Fix: Crash in "),
          _c("code", [_vm._v("constructor-super")]),
          _vm._v(" (fixes #5319) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3f48875 Docs: Fix yield star spacing examples (Dmitriy Lazarev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4dab76e Docs: Update "),
          _c("code", [_vm._v("preferType")]),
          _vm._v(" heading to keep code format (fixes #5307) (chinesedfan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7020b82 Fix: "),
          _c("code", [_vm._v("sort-imports")]),
          _vm._v(
            " warned between default and members (fixes #5305) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2f4cd1c Fix: "),
          _c("code", [_vm._v("constructor-super")]),
          _vm._v(" and "),
          _c("code", [_vm._v("no-this-before-super")]),
          _vm._v(" false (fixes #5261) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "59e9c5b New: eslint-disable-next-line (fixes #5206) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("afb6708 Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " rule forgot about some CallExpressions (fixes #5295) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d18d406 Docs: Update PR creation bot message (fixes #5268) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0b1cd19 Fix: Ignore parser option if set to default parser (fixes #5241) (Kai Cataldo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.1.0 - February 15, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("7981ef5 Build: Fix release script (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c9c34ea Fix: Skip computed members in "),
          _c("code", [_vm._v("newline-per-chained-call")]),
          _vm._v(" (fixes #5245) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b32ddad Build: "),
          _c("code", [_vm._v("npm run perf")]),
          _vm._v(
            " command should check the exit code (fixes #5279) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6580d1c Docs: Fix incorrect "),
          _c("code", [_vm._v("api.verify")]),
          _vm._v(" JSDoc for "),
          _c("code", [_vm._v("config")]),
          _vm._v(" param (refs #5104) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1f47868 Docs: Update yield-star-spacing documentation for 2.0.0 (fixes #5272) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("29da8aa Fix: "),
          _c("code", [_vm._v("newline-after-var")]),
          _vm._v(" crash on a switch statement (fixes #5277) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("86c5a20 Fix: "),
          _c("code", [_vm._v("func-style")]),
          _vm._v(
            " should ignore ExportDefaultDeclarations (fixes #5183) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ba287aa Fix: Consolidate try/catches to top levels (fixes #5243) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3ef5da1 Docs: Update no-magic-numbers#ignorearrayindexes. (KazuakiM)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0d6850e Update: Allow var declaration at end of block (fixes #5246) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c1e3a73 Fix: Popular style init handles missing package.json keys (refs #5243) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("68c6e22 Docs: fix default value of "),
          _c("code", [_vm._v("keyword-spacing")]),
          _vm._v("'s overrides option. (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("00fe46f Upgrade: inquirer (fixes #5265) (Bogdan Chadkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ef729d7 Docs: Remove option that is not being used in max-len rule (Thanos Lefteris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4a5ddd5 Docs: Fix rule config above examples for require-jsdoc (Thanos Lefteris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c5cbc1b Docs: Add rule config above each example in jsx-quotes (Thanos Lefteris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f0aceba Docs: Correct alphabetical ordering in rule list (Randy Coulman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1651ffa Docs: update migrating to 2.0.0 (fixes #5232) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9078537 Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " on variable declaration with separate array (fixes #5237) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f8868b2 Docs: Typo fix in consistent-this rule doc fixes #5240 (Nicolas Froidure)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "44f6915 Fix: ESLint Bot mentions the wrong person for extra info (fixes #5229) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c612a8e Fix: "),
          _c("code", [_vm._v("no-empty-function")]),
          _vm._v(" crash (fixes #5227) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ae663b6 Docs: Add links for issue documentation (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "717bede Build: Switch to using eslint-release (fixes #5223) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "980e139 Fix: Combine all answers for processAnswers (fixes #5220) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1f2a1d5 Docs: Remove inline errors from doc examples (fixes #4104) (Burak Yigit Kaya)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.0.0 - February 12, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "cc3a66b Docs: Issue message when more info is needed (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2bc40fa Docs: Simplify hierarchy of headings in rule pages (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1666254 Docs: Add note about only-whitespace rule for "),
          _c("code", [_vm._v("--fix")]),
          _vm._v(" (fixes #4774) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2fa09d2 Docs: Add "),
          _c("code", [_vm._v("quotes")]),
          _vm._v(" to related section of "),
          _c("code", [_vm._v("prefer-template")]),
          _vm._v(" (fixes #5192) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7b12995 Fix: "),
          _c("code", [_vm._v("key-spacing")]),
          _vm._v(
            " not enforcing no-space in minimum mode (fixes #5008) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c1c4f4d Breaking: new "),
          _c("code", [_vm._v("no-empty-function")]),
          _vm._v(" rule (fixes #5161) (Toru Nagashima)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.0.0-rc.1 - February 9, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "4dad82a Update: Adding shared environment for node and browser (refs #5196) (Eli White)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b46c893 Fix: Config file relative paths (fixes #5164, fixes #5160) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "aa5b2ac Fix: no-whitespace-before-property fixes (fixes #5167) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4e99924 Update: Replace several dependencies with lodash (fixes #5012) (Gajus Kuizinas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "718dc68 Docs: Remove periods in rules' README for consistency. (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7a47085 Docs: Correct "),
          _c("code", [_vm._v("arrow-spacing")]),
          _vm._v(" overview. (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a4cde1b Docs: Clarify global-require inside try/catch (fixes #3834) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fd07925 Docs: Clarify docs for api.verify (fixes #5101, fixes #5104) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "413247f New: Add a --print-config flag (fixes #5099) (Christopher Crouzet)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "efeef42 Update: Implement auto fix for space-in-parens (fixes #5050) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e07fdd4 Fix: code path analysis and labels (fixes #5171) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2417bb2 Fix: "),
          _c("code", [_vm._v("no-unmodified-loop-condition")]),
          _vm._v(" false positive (fixes #5166) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fae1884 Fix: Allow same-line comments in padded-blocks (fixes #5055) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a24d8ad Fix: Improve autoconfig logging (fixes #5119) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e525923 Docs: Correct obvious inconsistencies in rules h2 elements (Mark Pedrotti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("9675b5e Docs: "),
          _c("code", [_vm._v("avoid-escape")]),
          _vm._v(" does not allow backticks (fixes #5147) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("a03919a Fix: "),
          _c("code", [_vm._v("no-unexpected-multiline")]),
          _vm._v(" false positive (fixes #5148) (Feross Aboukhadijeh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "74360d6 Docs: Note no-empty applies to empty block statements (fixes #5105) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6eeaa3f Build: Remove pending tests (fixes #5126) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "02c83df Docs: Update docs/rules/no-plusplus.md (Sheldon Griffin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '0c4de5c New: Added "table" formatter (fixes #4037) (Gajus Kuizinas)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0a59926 Update: 'implied strict mode' ecmaFeature (fixes #4832) (Nick Evans)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "53a6eb3 Fix: Handle singular case in rule-tester error message (fixes #5141) (Bryan Smith)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "97ac91c Build: Increment eslint-config-eslint (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.0.0-rc.0 - February 2, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("973c499 Fix: "),
          _c("code", [_vm._v("sort-imports")]),
          _vm._v(" crash (fixes #5130) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e64b2c2 Breaking: remove "),
          _c("code", [_vm._v("no-empty-label")]),
          _vm._v(" (fixes #5042) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("79ebbc9 Breaking: update "),
          _c("code", [_vm._v("eslint:recommended")]),
          _vm._v(" (fixes #5103) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e1d7368 New: "),
          _c("code", [_vm._v("no-extra-label")]),
          _vm._v(" rule (fixes #5059) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c83b48c Fix: find ignore file only in cwd (fixes #5087) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3a24240 Docs: Fix jsdoc param names to match function param names (Thanos Lefteris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1d79746 Docs: Replace ecmaFeatures setting with link to config page (Thanos Lefteris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e96ffd2 New: "),
          _c("code", [_vm._v("template-curly-spacing")]),
          _vm._v(" rule (fixes #5049) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4b02902 Update: Extended no-console rule (fixes #5095) (EricHenry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "757651e Docs: Remove reference to rules enabled by default (fixes #5100) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0d87f5d Docs: Clarify eslint-disable comments only affect rules (fixes #5005) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1e791a2 New: "),
          _c("code", [_vm._v("no-self-assign")]),
          _vm._v(" rule (fixes #4729) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("c706eb9 Fix: reduced "),
          _c("code", [_vm._v("no-loop-func")]),
          _vm._v(" false positive (fixes #5044) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3275e86 Update: Add extra aliases to consistent-this rule (fixes #4492) (Zachary Alexander Belford)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a227360 Docs: Replace joyent org with nodejs (Thanos Lefteris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b2aedfe New: Rule to enforce newline after each call in the chain (fixes #4538) (Rajendra Patil)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("d67bfdd New: "),
          _c("code", [_vm._v("no-unused-labels")]),
          _vm._v(" rule (fixes #5052) (Toru Nagashima)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.0.0-beta.3 - January 29, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "86a3e3d Update: Remove blank lines at beginning of files (fixes #5045) (Jared Sohn)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4fea752 New: Autoconfiguration from source inspection (fixes #3567) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "519f39f Breaking: Remove deprecated rules (fixes #5032) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c75ee4a New: Add support for configs in plugins (fixes #3659) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("361377f Fix: "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(
            " false positive reading before writing (fixes #5074) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ff2551d Build: Improve "),
          _c("code", [_vm._v("npm run perf")]),
          _vm._v(" command (fixes #5028) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("bcca69b Update: add int32Hint option to "),
          _c("code", [_vm._v("no-bitwise")]),
          _vm._v(" rule (fixes #4873) (Maga D. Zandaqo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e3f2683 Update: config extends dependency lookup (fixes #5023) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a327a06 Fix: Indent rule for allman brace style scenario (fixes #5064) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("afdff6d Fix: "),
          _c("code", [_vm._v("no-extra-bind")]),
          _vm._v(" false positive (fixes #5058) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c1fad4f Update: add autofix support for spaced-comment (fixes #4969, fixes #5030) (Maga D. Zandaqo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '889b942 Revert "Docs: Update readme for legend describing rules icons (refs #4355)" (Nicholas C. Zakas)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("b0f21a0 Fix: "),
          _c("code", [_vm._v("keyword-spacing")]),
          _vm._v(
            " false positive in template strings (fixes #5043) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("53fa5d1 Fix: "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(
            " false positive in a loop condition (fixes #5024) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "385d399 Docs: Update readme for legend describing rules icons (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "505f1a6 Update: Allow parser to be relative to config (fixes #4985) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("79e8a0b New: "),
          _c("code", [_vm._v("one-var-declaration-per-line")]),
          _vm._v(" rule (fixes #1622) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "654e6e1 Update: Check extra Boolean calls in no-extra-boolean-cast (fixes #3650) (Andrew Sutton)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.0.0-beta.2 - January 22, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "3fa834f Docs: Fix formatter links (fixes #5006) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "54b1bc8 Docs: Fix link in strict.md (fixes #5026) (Nick Evans)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e0c5cf7 Upgrade: Espree to 3.0.0 (fixes #5018) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("69f149d Docs: language tweaks (Andres Kalle)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2b33c74 Update: valid-jsdoc to not require @return in constructors (fixes #4976) (Maga D. Zandaqo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "6ac2e01 Docs: Fix description of exported comment (Mickael Jeanroy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "29392f8 New: allow-multiline option on comma-dangle (fixes #4967) (Alberto Gimeno)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "05b8cb3 Update: Module overrides all 'strict' rule options (fixes #4936) (Nick Evans)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8470474 New: Add metadata to few test rules (fixes #4494) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ba11c1b Docs: Add Algolia as sponsor to README (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b28a19d Breaking: Plugins envs and config removal (fixes #4782, fixes #4952) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a456077 Docs: newline-after-var doesn't allow invalid options. (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("3e6a24e Breaking: Change "),
          _c("code", [_vm._v("strict")]),
          _vm._v(' default mode to "safe" (fixes #4961) (alberto)')
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5b96265 Breaking: Update eslint:recommended (fixes #4953) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("7457a4e Upgrade: glob to 6.x (fixes #4991) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d3f4bdd Build: Cleanup for code coverage (fixes #4983) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b8fbaa0 Fix: multiple message in TAP formatter (fixes #4975) (Simon Degraeve)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("990f8da Fix: "),
          _c("code", [_vm._v("getNodeByRangeIndex")]),
          _vm._v(" performance issue (fixes #4989) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "8ac1dac Build: Update markdownlint dependency to 0.1.0 (fixes #4988) (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5cd5429 Fix: function expression doc in call expression (fixes #4964) (Tim Schaub)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("4173baa Fix: "),
          _c("code", [_vm._v("no-dupe-class-members")]),
          _vm._v(" false positive (fixes #4981) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "12fe803 Breaking: Supports Unicode BOM (fixes #4878) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1fc80e9 Build: Increment eslint-config-eslint (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e0a9024 Update: Report newline between template tag and literal (fixes #4210) (Rajendra Patil)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("da3336c Update: Rules should get "),
          _c("code", [_vm._v("sourceType")]),
          _vm._v(" from Program node (fixes #4960) (Nick Evans)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a2ac359 Update: Make jsx-quotes fixable (refs #4377) (Gabriele Petronella)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ee1014d Fix: Incorrect error location for object-curly-spacing (fixes #4957) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b52ed17 Fix: Incorrect error location for space-in-parens (fixes #4956) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9c1bafb Fix: Columns of parse errors are off by 1 (fixes #4896) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5e4841e New: 'id-blacklist' rule (fixes #3358) (Keith Cirkel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '700b8bc Update: Add "allow" option to allow specific operators (fixes #3308) (Rajendra Patil)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d82eeb1 Update: Add describe around rule tester blocks (fixes #4907) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2967402 Update: Add minimum value to integer values in schema (fixes #4941) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7b632f8 Upgrade: Globals to ^8.18.0 (fixes #4728) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "86e6e57 Fix: Incorrect error at EOF for no-multiple-empty-lines (fixes #4917) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7f058f3 Fix: Incorrect location for padded-blocks (fixes #4913) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b3de8f7 Fix: Do not show ignore messages for default ignored files (fixes #4931) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b1360da Update: Support multiLine and singleLine options (fixes #4697) (Rajendra Patil)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "82fbe09 Docs: Small semantic issue in documentation example (fixes #4937) (Marcelo Zarate)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "13a4e30 Docs: Formatting inconsistencies (fixes #4912) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d487013 Update: Option to allow extra parens for cond assign (fixes #3317) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0f469b4 Fix: JSDoc for function expression on object property (fixes #4900) (Tim Schaub)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c2dee27 Update: Add module tests to no-extra-semi (fixes #4915) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5a633bf Update: Add "),
          _c("code", [_vm._v("preferType")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" rule (fixes #3056) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "ebd01b7 Build: Fix version number on release (fixes #4921) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("2d626a3 Docs: Fix typo in changelog (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c4c4139 Fix: global-require no longer warns if require is shadowed (fixes #4812) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("bbf7f27 New: provide config.parser via "),
          _c("code", [_vm._v("parserName")]),
          _vm._v(" on RuleContext (fixes #3670) (Ben Mosher)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.0.0-beta.1 - January 11, 2016")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "6c70d84 Build: Fix prerelease script (fixes #4919) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d5c9435 New: 'sort-imports' rule (refs #3143) (Christian Schuller)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a8cfd56 Fix: remove duplicate of eslint-config-eslint (fixes #4909) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("19a9fbb Breaking: "),
          _c("code", [_vm._v("space-before-blocks")]),
          _vm._v(" ignores after keywords (fixes #1338) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c275b41 Fix: no-extra-parens ExpressionStatement restricted prods (fixes #4902) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b795850 Breaking: don't load ~/.eslintrc when using --config flag (fixes #4881) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "3906481 Build: Add AppVeyor CI (fixes #4894) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("6390862 Docs: Fix missing footnote (Yoshiya Hinosawa)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "e5e06f8 Fix: Jsdoc comment for multi-line function expressions (fixes #4889) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7c9be60 Fix: Fix path errors in windows (fixes #4888) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "a1840e7 Fix: gray text was invisible on Solarized Dark theme (fixes #4886) (Jack Leigh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fc9f528 Docs: Modify unnecessary flag docs in quote-props (Matija Marohnić)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "186e8f0 Update: Ignore camelcase in object destructuring (fixes #3185) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "7c97201 Upgrade: doctrine version to 1.1.0 (fixes #4854) (Tim Schaub)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("ceaf324 New: Add no-new-symbol rule (fixes #4862) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("e2f2b66 Breaking: Remove defaults from "),
          _c("code", [_vm._v("eslint:recommended")]),
          _vm._v(" (fixes #4809) (Ian VanSchooten)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "0b3c01e Docs: Specify default for func-style (fixes #4834) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "008ea39 Docs: Document default for operator assignment (fixes #4835) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("b566f56 Docs: no-new-func typo (alberto)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "1569695 Update: Adds default 'that' for consistent-this (fixes #4833) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("f7b28b7 Docs: clarify "),
          _c("code", [_vm._v("requireReturn")]),
          _vm._v(" option for valid-jsdoc rule (fixes #4859) (Tim Schaub)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("407f329 Build: Fix prerelease script (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "688f277 Fix: Set proper exit code for Node > 0.10 (fixes #4691) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "58715e9 Fix: Use single quotes in context.report messages (fixes #4845) (Joe Lencioni)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5b7586b Fix: do not require a @return tag for @interface (fixes #4860) (Tim Schaub)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d43f26c Breaking: migrate from minimatch to node-ignore (fixes #2365) (Stefan Grönke)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "c07ca39 Breaking: merges keyword spacing rules (fixes #3869) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "871f534 Upgrade: Optionator version to 0.8.1 (fixes #4851) (Eric Johnson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "82d4cd9 Update: Add atomtest env (fixes #4848) (Andres Suarez)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '9c9beb5 Update: Add "ignore" override for operator-linebreak (fixes #4294) (Rajendra Patil)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            '9c03abc Update: Add "allowCall" option (fixes #4011) (Rajendra Patil)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "29516f1 Docs: fix migration guide for no-arrow-condition rule (Peter Newnham)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "2ef7549 Docs: clarify remedy to some prefer-const errors (Turadg Aleahmad)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("1288ba4 Update: Add default limit to "),
          _c("code", [_vm._v("complexity")]),
          _vm._v(" (fixes #4808) (Ian VanSchooten)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "d3e8179 Fix: env is rewritten by modules (fixes #4814) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fd72aba Docs: Example fix for "),
          _c("code", [_vm._v("no-extra-parens")]),
          _vm._v(" rule (fixes #3527) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "315f272 Fix: Change max-warnings type to Int (fixes #4660) (George Zahariev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("5050768 Update: Ask for "),
          _c("code", [_vm._v("commonjs")]),
          _vm._v(" under config init (fixes #3553) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4665256 New: Add no-whitespace-before-property rule (fixes #1086) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "f500d7d Fix: allow extending @scope/eslint/file (fixes #4800) (André Cruz)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "5ab564e New: 'ignoreArrayIndexes' option for 'no-magic-numbers' (fixes #4370) (Christian Schuller)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "97cdb95 New: Add no-useless-constructor rule (fixes #4785) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "b9bcbaf Fix: Bug in no-extra-bind (fixes #4806) (Andres Kalle)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("246a6d2 Docs: Documentation fix (Andres Kalle)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "9ea6b36 Update: Ignore case in jsdoc tags (fixes #4576) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "acdda24 Fix: ignore argument parens in no-unexpected-multiline (fixes #4658) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "4931f56 Update: optionally allow bitwise operators (fixes #4742) (Swaagie)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.0.0-alpha-2 - December 23, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Build: Add prerelease script (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Allow to omit semi for one-line blocks (fixes #4385) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Handle getters and setters in key-spacing (fixes #4792) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: ObjectRestSpread throws error in key-spacing rule (fixes #4763) (Ziad El Khoury Hanna)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Typo in generator-star (alberto)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Backtick behavior in quotes rule (fixes #3090) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Empty schemas forbid any options (fixes #4789) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Remove "),
          _c("code", [_vm._v("isMarkedAsUsed")]),
          _vm._v(" function name (fixes #4783) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: support arrow functions in no-return-assign (fixes #4743) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add license header to Working with Rules guide (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: RuleTester to show parsing errors (fixes #4779) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Escape underscores in no-path-concat (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: configuration for classes in space-before-blocks (fixes #4089) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Typo in no-useless-concat (alberto)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: fix typos, suggests (molee1905)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Typos in space-before-keywords and space-unary-ops (fixes #4771) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: beefy to ^2.0.0, fixes installation errors (fixes #4760) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Typo in no-unexpected-multiline (fixes #4756) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: option to ignore top-level max statements (fixes #4309) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for semi-spacing rule (fixes #3829) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: small typos in code examples (Plusb Preco)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add section on file extensions to user-guide/configuring (adam)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Comma first issue in "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" (fixes #4739, fixes #3456) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-constant-condition false positive (fixes #4737) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Add source property for fatal errors (fixes #3325) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add a comment length option to the max-len rule (fixes #4665) (Ian)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: RuleTester doesn't require any tests (fixes #4681) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Remove path analysis from debug log (fixes #4631) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Set null to property ruleId when fatal is true (fixes #4722) (Sébastien Règne)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Visual Studio compatible formatter (fixes #4708) (rhpijnacker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add greasemonkey environment (fixes #4715) (silverwind)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: always-multiline for comma-dangle import (fixes #4704) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check 1tbs non-block else (fixes #4692) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Apply environment configs last (fixes #3915) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("no-unmodified-loop-condition")]),
          _vm._v(" rule (fixes #4523) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Breaking: deprecate "),
          _c("code", [_vm._v("no-arrow-condition")]),
          _vm._v(" rule (fixes #4417) (Luke Karrys)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add cwd option for cli-engine (fixes #4472) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add no-confusing-arrow rule (refs #4417) (Luke Karrys)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: ensure "),
          _c("code", [_vm._v("ConfigOps.merge")]),
          _vm._v(" do a deep copy (fixes #4682) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-invalid-this")]),
          _vm._v(" allows this in static method (fixes #4669) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Export class syntax for "),
          _c("code", [_vm._v("require-jsdoc")]),
          _vm._v(" rule (fixes #4667) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Update: Add "safe" mode to strict (fixes #3306) (Brandon Mills)'
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v2.0.0-alpha-1 - December 11, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Breaking: Correct links between variables and references (fixes #4615) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Update rule tests for parser options (fixes #4673) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Implement parserOptions (fixes #4641) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: max-len rule overestimates the width of some tabs (fixes #4661) (Nick Evans)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add no-implicit-globals rule (fixes #4542) (Joshua Peek)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("no-use-before-define")]),
          _vm._v(" checks invalid initializer (fixes #4280) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Use oneValuePerFlag for --ignore-pattern option (fixes #4507) (George Zahariev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("array-callback-return")]),
          _vm._v(" rule (fixes #1128) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Handlebars to >= 4.0.5 for security reasons (fixes #4642) (Jacques Favreau)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add class body support to "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" rule (fixes #4372) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Remove space-after-keyword newline check (fixes #4149) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Treat package.json like the rest of configs (fixes #4451) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: writing mistake (molee1905)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add 'method' option to no-empty (fixes #4605) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Remove autofix from eqeqeq (fixes #4578) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Remove ES6 global variables from builtins (fixes #4085) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Handle forbidden LineTerminators in no-extra-parens (fixes #4229) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Option to ignore constructor Fns object-shorthand (fixes #4487) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check YieldExpression argument in no-extra-parens (fixes #4608) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Do not cache "),
          _c("code", [_vm._v("package.json")]),
          _vm._v(" (fixes #4611) (Spain)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Consume no-underscore-dangle allowAfterThis option (fixes #4599) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add no-restricted-imports rule (fixes #3196) (Guy Ellis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: no-extra-semi no longer refers to deprecated rule (fixes #4598) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("consistent-return")]),
          _vm._v(" checks the last (refs #3530, fixes #3373) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: add class option to "),
          _c("code", [_vm._v("no-use-before-define")]),
          _vm._v(" (fixes #3944) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Simplify rule schemas (fixes #3625) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update docs/rules/no-plusplus.md (Xiangyun Chi)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: added bower_components to default ignore (fixes #3550) (Julian Laval)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-unreachable")]),
          _vm._v(
            " with the code path (refs #3530, fixes #3939) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-this-before-super")]),
          _vm._v(" with the code path analysis (refs #3530) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-fallthrough")]),
          _vm._v(" with the code path analysis (refs #3530) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("constructor-super")]),
          _vm._v(" with the code path analysis (refs #3530) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Switch to Espree 3.0.0 (fixes #4334) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Freeze context object (fixes #4495) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add Code of Conduct (fixes #3095) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Breaking: Remove warnings of readonly from "),
          _c("code", [_vm._v("no-undef")]),
          _vm._v(" (fixes #4504) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: allowAfterThis option in no-underscore-dangle (fixes #3435) (just-boris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Adding options unit tests for --ignore-pattern (refs #4507) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Implement yield-star-spacing rule (fixes #4115) (Bryan Smith)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("prefer-rest-params")]),
          _vm._v(" rule (fixes #4108) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(
            " begins to cover separating init (fixes #4474) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-eval")]),
          _vm._v(
            " come to catch indirect eval (fixes #4399, fixes #4441) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Default no-magic-numbers to none. (fixes #4193) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Breaking: Allow empty arrow body (fixes #4411) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Code Path Analysis (fixes #3530) (Toru Nagashima)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.10.3 - December 1, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Docs: Update strict rule docs (fixes #4583) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Reference .eslintrc.* in contributing docs (fixes #4532) (Kai Cataldo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Add for-of to "),
          _c("code", [_vm._v("curly")]),
          _vm._v(" rule (fixes #4571) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ignore space before function in array start (fixes #4569) (alberto)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.10.2 - November 27, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Upgrade: escope@3.3.0 (refs #4485) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Pinned down js-yaml to avoid breaking dep (fixes #4553) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: lines-around-comment with multiple comments (fixes #3509) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: doctrine@0.7.1 (fixes #4545) (Kevin Partington)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Bugfix for eqeqeq autofix (fixes #4540) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Add for-in to "),
          _c("code", [_vm._v("curly")]),
          _vm._v(" rule (fixes #4436) (Kai Cataldo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" unneeded require check fix (fixes #4527) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("brace-style")]),
          _vm._v(
            " ASI fix for if-else condition (fixes #4520) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Add branch update during release process (fixes #4491) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Allow revert commits in commit messages (fixes #4452) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Incorrect location in no-fallthrough (fixes #4516) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-spaced-func")]),
          _vm._v(" had been crashed (fixes #4508) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Add a RestProperty test of "),
          _c("code", [_vm._v("no-undef")]),
          _vm._v(" (fixes #3271) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Load badge from HTTPS (Brian J Brennan)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Update eslint bot messages (fixes #4497) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.10.1 - November 20, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: Revert freezing context object (refs #4495) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("1.10.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.10.0 - November 20, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Docs: Remove dupes from changelog (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: --init to create extensioned files (fixes #4476) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update description of exported comment (fixes #3916) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Move legacy rules to stylistic (files #4111) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Clean up description of recommended rules (fixes #4365) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix home directory config description (fixes #4398) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add class support to "),
          _c("code", [_vm._v("require-jsdoc")]),
          _vm._v(" rule (fixes #4268) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: return type error in "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" rule (fixes #4443) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Display errors at the place where fix should go (fixes #4470) (nightwing)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typo in default "),
          _c("code", [_vm._v("cacheLocation")]),
          _vm._v(" value (Andrew Hutchings)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Handle comments in block-spacing (fixes #4387) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Accept array for "),
          _c("code", [_vm._v("ignorePattern")]),
          _vm._v(" (fixes #3982) (Jesse McCarthy)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: replace label and break with IIFE and return (fixes #4459) (Ilya Panasenko)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-before-keywords false positive (fixes #4449) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Improves performance (refs #3530) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Autofix quotes produces invalid javascript (fixes #4380) (nightwing)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Update indent.md (Nathan Brown)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Disable comment config option (fixes #3901) (Matthew Riley MacPherson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Config files with extensions (fixes #4045, fixes #4263) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Revert "Update: Add JSX exceptions to no-extra-parens (fixes #4229)" (Brandon Mills)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add JSX exceptions to no-extra-parens (fixes #4229) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Replace link to deprecated rule with newer rule (Andrew Marshall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-extend-native")]),
          _vm._v(
            " crashed at empty defineProperty (fixes #4438) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Support empty if blocks in lines-around-comment (fixes #4339) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("curly")]),
          _vm._v(" warns wrong location for "),
          _c("code", [_vm._v("else")]),
          _vm._v(" (fixes #4362) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("id-length")]),
          _vm._v(" properties never option (fixes #4347) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: missing close rbracket in example (@storkme)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Revert "Update: Allow empty arrow body (fixes #4411)" (Nicholas C. Zakas)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: eqeqeq autofix avoids clashes with space-infix-ops (fixes #4423) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Document semi-spacing behaviour (fixes #4404) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Allow empty arrow body (fixes #4411) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Handle comments in comma-spacing (fixes #4389) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Refactor eslint.verify args (fixes #4395) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-undef-init should ignore const (fixes #4284) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix: Add the missing "as-needed" docs to the radix rule (fixes #4364) (Michał Gołębiowski)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix: Display singular/plural version of "line" in message (fixes #4359) (Marius Schulz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add Popular Style Guides (fixes #4320) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: eslint.report can be called w/o node if loc provided (fixes #4220) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: no-implicit-coercion validate AssignmentExpression (fixes #4348) (Ilya Panasenko)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.9.0 - November 6, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            'Update: Make radix accept a "as-needed" option (fixes #4048) (Michał Gołębiowski)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Update the message to include number of lines (fixes #4342) (Brian Delahunty)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: ASI causes problem whether semicolons are used or not (Thai Pangsakulyanont)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Fixer to not overlap ranges among fix objects (fixes #4321) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add default to "),
          _c("code", [_vm._v("max-nested-callbacks")]),
          _vm._v(" (fixes #4297) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check comments in space-in-parens (fixes #4302) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add quotes to error messages to improve clarity (fixes #4313) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: tests failing due to differences in temporary paths (fixes #4324) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make tests compatible with Windows (fixes #4315) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Extract glob and filesystem logic from cli-engine (fixes #4305) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Clarify commit-check messages (fixes #4256) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Upgrade various dependencies (fixes #4303) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Add node 5 to travis build (fixes #4310) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: ensure using correct estraverse (fixes #3951) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: update docs about using gitignore (Mateusz Derks)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Detect and fix wrong linebreaks (fixes #3981) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add no-case-declarations rule (fixes #4278) (Erik Arvidsson)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.8.0 - October 30, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: Check for node property before testing type (fixes #4298) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Specify 'double' as default for quotes (fixes #4270) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Missing errors in space-in-parens (fixes #4257, fixes #3996) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: fixed typo (Mathieu M-Gosselin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("cacheLocation")]),
          _vm._v(" handles paths in windows style. (fixes #4285) (royriojas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: fixed typo (mpal9000)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add support for class in "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" rule (fixes #4279) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: cache-file accepts a directory. (fixes #4241) (royriojas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("maxEOF")]),
          _vm._v(" to no-multiple-empty-lines (fixes #4235) (Adrien Vergé)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: fix option for comma-spacing (fixes #4232) (HIPP Edgar (PRESTA EXT))"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix use of wrong word in configuration doc (Jérémie Astori)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Prepare config before verifying SourceCode (fixes #4230) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: RuleTester come to check AST was not modified (fixes #4156) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: wrong count for 'no-multiple-empty-lines' on last line (fixes #4228) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("allow")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("no-shadow")]),
          _vm._v(" rule (fixes #3035) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Doc: Correct the spelling of Alberto's surname (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Add alberto as a committer (Gyandeep Singh)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Do not stub console in testing (fixes #1328) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check node exists before checking type (fixes #4231) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Option to exclude afterthoughts from no-plusplus (fixes #4093) (Brody McKee)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add rule no-arrow-condition (fixes #3280) (Luke Karrys)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add linebreak style option to eol-last (fixes #4148) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("New: arrow-body-style rule (fixes #4109) (alberto)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.7.3 - October 21, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: Support comma-first style in key-spacing (fixes #3877) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-magic-numbers: variable declarations (fixes #4192) (Ilya Panasenko)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Support ES6 shorthand in key-spacing (fixes #3678) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" array with memberExpression (fixes #4203) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" param function on sameline (fixes #4174) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-multiple-empty-lines fails when empty line at EOF (fixes #4214) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("comma-dangle")]),
          _vm._v(" false positive (fixes #4200) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" prefer problem (fixes #4205) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Add missing single-quote (Kevin Lamping)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: correct no-multiple-empty-lines at EOF (fixes #4140) (alberto)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.7.2 - October 19, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: comma-dangle confused by parens (fixes #4195) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-mixed-spaces-and-tabs (fixes #4189, fixes #4190) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-extend-native disallow using Object.properties (fixes #4180) (Nathan Woltman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-magic-numbers should ignore Number.parseInt (fixes #4167) (Henry Zhu)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.7.1 - October 16, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: id-match schema (fixes #4155) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-magic-numbers should ignore parseInt (fixes #4167) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " param function fix (fixes #4165, fixes #4164) (Gyandeep Singh)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.7.0 - October 16, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: array-bracket-spacing for empty array (fixes #4141) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" arrow function check fix (fixes #4142) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Support .js files for config (fixes #3102) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make eslint-config-eslint work (fixes #4145) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("prefer-arrow-callback")]),
          _vm._v(" had been wrong at arguments (fixes #4095) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update various rules docs (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Create eslint-config-eslint (fixes #3525) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: RuleTester allows string errors in invalid cases (fixes #4117) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Reference no-unexpected-multiline in semi (fixes #4114) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: added exceptions to "),
          _c("code", [_vm._v("lines-around-comment")]),
          _vm._v(" rule. (fixes #2965) (Mathieu M-Gosselin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("matchDescription")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" (fixes #2449) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: check for objects or arrays in array-bracket-spacing (fixes #4083) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Alphabetize Rules lists (Kenneth Chung)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: message templates fail when no parameters are passed (fixes #4080) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " multi-line function call (fixes #4073, fixes #4075) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Improve comma-dangle documentation (Gilad Peleg)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-mixed-tabs-and-spaces fails with some comments (fixes #4086) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("semi")]),
          _vm._v(" to check for do-while loops (fixes #4090) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Fix path related failures on Windows in tests (fixes #4061) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(
            " had been missing some parameters (fixes #4047) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-mixed-spaces-and-tabs with comments and templates (fixes #4077) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("allow")]),
          _vm._v(" option for "),
          _c("code", [_vm._v("no-underscore-dangle")]),
          _vm._v(" rule (fixes #2135) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("allowArrowFunctions")]),
          _vm._v(" option for "),
          _c("code", [_vm._v("func-style")]),
          _vm._v(" rule (fixes #1897) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ignore template literals in no-mixed-tabs-and-spaces (fixes #4054) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Enable CodeClimate (fixes #4068) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-cond-assign")]),
          _vm._v(" had needed double parens in "),
          _c("code", [_vm._v("for")]),
          _vm._v(" (fixes #4023) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Ignore end of function in newline-after-var (fixes #3682) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Performance perf to not ignore jshint file (refs #3765) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: id-match bug incorrectly errors on "),
          _c("code", [_vm._v("NewExpression")]),
          _vm._v(" (fixes #4042) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-trailing-spaces")]),
          _vm._v(" autofix to handle linebreaks (fixes #4050) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: renamed no-magic-number to no-magic-numbers (fixes #4053) (Vincent Lemeunier)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'New: add "consistent" option to the "curly" rule (fixes #2390) (Benoît Zugmeyer)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Option to ignore for loops in init-declarations (fixes #3641) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add webextensions environment (fixes #4051) (Blake Winton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-cond-assign should report assignment location (fixes #4040) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: no-empty-pattern rule (fixes #3668) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Upgrade globals to 8.11.0 (fixes #3599) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Re-tag JSX code fences (fixes #4020) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: no-magic-number rule (fixes #4027) (Vincent Lemeunier)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Remove list of users from README (fixes #3881) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-redeclare")]),
          _vm._v(" and "),
          _c("code", [_vm._v("no-sahadow")]),
          _vm._v(" for builtin globals (fixes #3971) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Add "),
          _c("code", [_vm._v(".eslintignore")]),
          _vm._v(" file for the project (fixes #3765) (Gyandeep Singh)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.6.0 - October 2, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: cache is basically not working (fixes #4008) (Richard Hansen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: a test failure on Windows (fixes #3968) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-invalid-this")]),
          _vm._v(
            " had been missing globals in node (fixes #3961) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("curly")]),
          _vm._v(" with "),
          _c("code", [_vm._v("multi")]),
          _vm._v(" had false positive (fixes #3856) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Add load performance check inside perf function (fixes #3994) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-before-keywords fails with super keyword (fixes #3946) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: CLI should not fail on account of ignored files (fixes #3978) (Dominic Barnes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: brace-style rule incorrectly flagging switch (fixes #4002) (Aparajita Fishman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for space-unary-ops rule (fixes #3976) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for computed-property-spacing (fixes #3975) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for no-multi-spaces rule (fixes #3979) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Report shorthand method names in complexity rule (fixes #3955) (Tijn Kersjes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add note about typeof check for isNaN (fixes #3985) (Daniel Lo Nigro)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: ESLint reports parsing errors with clear prefix. (fixes #3555) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Update markdownlint dependency (fixes #3954) (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("no-mixed-require")]),
          _vm._v(" to have non boolean option (fixes #3922) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: trailing spaces auto fix to check for line breaks (fixes #3940) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("typeof")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("no-undef")]),
          _vm._v(" rule (fixes #3684) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix explanation and typos for accessor-pairs (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix typos for camelcase (alberto)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix typos for max-statements (Danny Guo)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for object-curly-spacing (fixes #3857) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for array-bracket-spacing rule (fixes #3858) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Add schema to "),
          _c("code", [_vm._v("global-require")]),
          _vm._v(" rule (fixes #3923) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Apply lazy loading for rules (fixes #3930) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix typo for arrow-spacing (Danny Guo)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix typos for wrap-regex (Danny Guo)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix explanation for space-before-keywords (Danny Guo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typos for operator-linebreak (Danny Guo)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix typos for callback-return (Danny Guo)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-trailing-spaces autofix to account for blank lines (fixes #3912) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix example in no-negated-condition.md (fixes #3908) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update:warn message use @return when prefer.returns=return (fixes #3889) (闲耘™)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for generator-star-spacing rule (fixes #3873) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for arrow-spacing rule (fixes #3860) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Implement auto fix for block-spacing rule (fixes #3859) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Support allman style for switch statement (fixes #3903) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: no-negated-condition rule (fixes #3740) (alberto)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typo in blog post template (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add env 'nashorn' to support Java 8 Nashorn Engine (fixes #3874) (Benjamin Winterberg)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Prepare for rule doc linting (refs #2271) (Ian VanSchooten)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.5.1 - September 22, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: valid-jsdoc fix for param with properties (fixes #3476) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: valid-jsdoc error with square braces (fixes #2270) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: "),
          _c("code", [_vm._v("doctrine")]),
          _vm._v(" to 0.7.0 (fixes #3891) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("space-before-keywords")]),
          _vm._v(" had been wrong on getters (fixes #3854) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-dupe-args")]),
          _vm._v(
            " had been wrong for nested destructure (fixes #3867) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: io.js is the new Node.js (thefourtheye)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix method signature on working-with-rules docs (fixes #3862) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add related ternary links (refs #3835) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: don’t ignore config if cwd is the home dir (fixes #3846) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("func-style")]),
          _vm._v(" had been warning arrows with "),
          _c("code", [_vm._v("this")]),
          _vm._v(" (fixes #3819) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("space-before-keywords")]),
          _vm._v("; allow opening curly braces (fixes #3789) (Marko Raatikka)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Fix broken .gitattributes generation (fixes #3566) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Fix formatter docs generation (fixes #3847) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.5.0 - September 18, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: invalidate cache when config changes. (fixes #3770) (royriojas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: function body indent issues (fixes #3614, fixes #3799) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add configuration option to "),
          _c("code", [_vm._v("space-before-blocks")]),
          _vm._v(" (fixes #3758) (Phil Vargas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space checking between tokens (fixes #2211) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: env-specified ecmaFeatures had been wrong (fixes #3735) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Change example wording from warnings to problems (fixes #3676) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Generate formatter example docs (fixes #3560) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add --debug flag to CLI (fixes #2692) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update no-undef-init docs (fixes #3170) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update no-unused-expressions docs (fixes #3685) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Clarify node types in no-multi-spaces (fixes #3781) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update new-cap docs (fixes #3798) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("space-before-blocks")]),
          _vm._v(" had conflicted "),
          _c("code", [_vm._v("arrow-spacing")]),
          _vm._v(" (fixes #3769) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("comma-dangle")]),
          _vm._v(
            " had not been checking imports/exports (fixes #3794) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: tests fail due to differences in temporary paths. (fixes #3778) (royriojas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Directory ignoring should work (fixes #3812) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure **/node_modules works in ignore files (fixes #3788) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("space-infix-ops")]),
          _vm._v(" rule (fixes #3801) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-warning-comments")]),
          _vm._v(
            " can't be set via config comment (fixes #3619) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("key-spacing")]),
          _vm._v(
            " should allow 1+ around colon (fixes #3363) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: false alarm of semi-spacing with semi set to never (fixes #1983) (Chen Yicai)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure ./ works correctly with CLI (fixes #3792) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: add more examples + tests for block-scoped-var (fixes #3791) (JT)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" rule (fixes #3734) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("space-before-keywords")]),
          _vm._v(" fails to handle some cases (fixes #3756) (Marko Raatikka)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add if-else example (fixes #3722) (Ian VanSchooten)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: jsx-quotes exception for attributes without value (fixes #3793) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix closing code fence on cli docs (Ian VanSchooten)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("space-before-blocks")]),
          _vm._v(" rule (fixes #3776) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("space-after-keywords")]),
          _vm._v(" rule (fixes #3773) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("semi-spacing")]),
          _vm._v(" had conflicted with "),
          _c("code", [_vm._v("block-spacing")]),
          _vm._v(" (fixes #3721) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("space-before-keywords")]),
          _vm._v(" rule (fixes #3771) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: auto fix for space-before-function-paren rule (fixes #3766) (alberto)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("no-extra-semi")]),
          _vm._v(" rule (fixes #3745) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Refactors the traversing logic (refs #3530) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("space-return-throw-case")]),
          _vm._v(" (fixes #3732) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("no-spaced-func")]),
          _vm._v(" rule (fixes #3728) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("eol-last")]),
          _vm._v(" rule (fixes #3725) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Implement auto fix for "),
          _c("code", [_vm._v("no-trailing-spaces")]),
          _vm._v(" rule (fixes #3723) (Gyandeep Singh)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.4.3 - September 15, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: Directory ignoring should work (fixes #3812) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: jsx-quotes exception for attributes without value (fixes #3793) (Mathias Schreck)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.4.2 - September 15, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: Ensure **/node_modules works in ignore files (fixes #3788) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure ./ works correctly with CLI (fixes #3792) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.4.1 - September 11, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: CLIEngine default cache parameter name (fixes #3755) (Daniel G. Taylor)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Glob pattern from .eslintignore not applied (fixes #3750) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Skip JSDoc from NewExpression (fixes #3744) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Shorten and simplify autocomment for new issues (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.4.0 - September 11, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Docs: Add new formatters to API docs (Ian VanSchooten)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Implement autofixing (fixes #3134) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Remove temporary "),
          _c("code", [_vm._v('"allow-null"')]),
          _vm._v(" (fixes #3705) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(" had been crashed at "),
          _c("code", [_vm._v("/*global $foo*/")]),
          _vm._v(" (fixes #3714) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: check-commit now checks commit message length. (fixes #3706) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: make getScope acquire innermost scope (fixes #3700) (voideanvalue)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix spelling mistake (domharrington)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow whitespace in rule message parameters. (fixes #3690) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Eqeqeq rule with no option does not warn on 'a == null' (fixes #3699) (fediev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-unused-expressions")]),
          _vm._v(" with "),
          _c("code", [_vm._v("allowShortCircuit")]),
          _vm._v(
            " false positive if left has no effect (fixes #3675) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add Node 4 to travis builds (fixes #3697) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Not check for punctuator if on same line as last var (fixes #3694) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Make "),
          _c("code", [_vm._v("quotes")]),
          _vm._v(" docs clearer (fixes #3646) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Increase mocha timeout (fixes #3692) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-extra-bind")]),
          _vm._v(" to flag all arrow funcs (fixes #3672) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update README with release and sponsor info (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("object-curly-spacing")]),
          _vm._v(
            " had been crashing on an empty object pattern (fixes #3658) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-extra-parens")]),
          _vm._v(
            " false positive at IIFE with member accessing (fixes #3653) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("comma-dangle")]),
          _vm._v(" with "),
          _c("code", [_vm._v('"always"')]),
          _vm._v("/"),
          _c("code", [_vm._v('"always-multiline"')]),
          _vm._v(
            " false positive after a rest element (fixes #3627) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("jsx-quotes")]),
          _vm._v(" rule (fixes #2011) (Mathias Schreck)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add linting for second half of rule docs (refs #2271) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(" had not shown correct locations for "),
          _c("code", [_vm._v("/*global")]),
          _vm._v(" (fixes #3617) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("space-after-keywords")]),
          _vm._v(" not working for "),
          _c("code", [_vm._v("catch")]),
          _vm._v(" (fixes #3654) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Incorrectly warning about ignored files (fixes #3649) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Indent rule VariableDeclarator doesn't apply to arrow functions (fixes #3661) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Consuming handlebars@^4.0.0 (fixes #3632) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fixing typos in plugin processor section. (fixes #3648) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Invalid env keys would cause an unhandled exception.(fixes #3265) (Ray Booysen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fixing broken link in documentation (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Check for default assignment in no-unneeded-ternary (fixes #3232) (cjihrig)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("consistent-as-needed")]),
          _vm._v(" mode with "),
          _c("code", [_vm._v("keyword: true")]),
          _vm._v(" (fixes #3636) (Alex Guerrero)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Implement cache in order to only operate on changed files since previous run. (fixes #2998) (Roy Riojas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Grouping related CLI options. (fixes #3612) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Using @override does not require @param or @returns (fixes #3629) (Whitney Young)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Use eslint-env in no-undef (fixes #3616) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("require-jsdoc")]),
          _vm._v(" rule (fixes #1842) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Support glob path on command line (fixes #3402) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Short circuit and ternary support in no-unused-expressions (fixes #2733) (David Warkentin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Replace to npmjs.com (Ryuichi Okumura)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " should only indent chain calls if the first call is single line (fixes #3591) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("quote-props")]),
          _vm._v(
            " should not crash for object rest spread syntax (fixes #3595) (Joakim Carlstein)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Use "),
          _c("code", [_vm._v("globals")]),
          _vm._v(" module for the "),
          _c("code", [_vm._v("commonjs")]),
          _vm._v(" globals (fixes #3606) (Sindre Sorhus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("no-restricted-syntax")]),
          _vm._v(
            " rule to forbid certain syntax (fixes #2422) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-useless-concat")]),
          _vm._v(
            " false positive at numbers (fixes #3575, fixes #3589) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add --max-warnings flag to CLI (fixes #2769) (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add "),
          _c("code", [_vm._v("parser")]),
          _vm._v(" as an option (fixes #3127) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("space-before-keywords")]),
          _vm._v(" rule (fixes #1631) (Marko Raatikka)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Allowing inline comments to disable eslint rules (fixes #3472) (Whitney Young)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Including for(;😉 as valid case in no-constant-condition (Kevin Partington)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add quotes around the label in "),
          _c("code", [_vm._v("no-redeclare")]),
          _vm._v(" error messages (fixes #3583) (Ian VanSchooten)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: correct contributing URL (Dieter Luypaert)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: line number for duplicate object keys error (fixes #3573) (Elliot Lynde)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: global-require rule (fixes #2318) (Jamund Ferguson)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.3.1 - August 29, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" to not crash on empty files (fixes #3570) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Remove unused config file (fixes #2227) (Gyandeep Singh)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.3.0 - August 28, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Build: Autogenerate release blog post (fixes #3562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("no-useless-concat")]),
          _vm._v(" rule (fixes #3506) (Henry Zhu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("keywords")]),
          _vm._v(" flag to "),
          _c("code", [_vm._v("consistent-as-needed")]),
          _vm._v(" mode in "),
          _c("code", [_vm._v("quote-props")]),
          _vm._v(" (fixes #3532) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: adds "),
          _c("code", [_vm._v("numbers")]),
          _vm._v(" option  to quote-props (fixes #2914) (Jose Roberto Vidal)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("quote-props")]),
          _vm._v(
            " rule should ignore computed and shorthand properties (fixes #3557) (fixes #3544) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add config comments for rule examples 'accessor-pairs' to 'no-extra-semi' (refs #2271) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Return to accept "),
          _c("code", [_vm._v("undefined")]),
          _vm._v(" type (fixes #3382) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Added HTML formatter (fixes #3505) (Julian Laval)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: check space after yield keyword in space-unary-ops (fixes #2707) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: (curly) Fix broken code in example (Kent C. Dodds)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Quote var name in "),
          _c("code", [_vm._v("no-unused-vars")]),
          _vm._v(" error messages (refs #3526) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Move methods to SourceCode (fixes #3516) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Don't try too hard to find fault in "),
          _c("code", [_vm._v("no-implicit-coercion")]),
          _vm._v(" (refs #3402) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Detect ternary operator in operator-linebreak rule (fixes #3274) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Clearer plugin rule configuration (fixes #2022) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add quotes around the label in  "),
          _c("code", [_vm._v("no-empty-label")]),
          _vm._v(" error reports (fixes #3526) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Turn off Liquid in example (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Mention CommonJS along with Node.js (fixes #3388) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Make it clear which rules are recommended (fixes #3398) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add links to JSON Schema resources (fixes #3411) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add more info to migration guide (fixes #3439) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: ASI indentation issue (fixes #3514) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Make "),
          _c("code", [_vm._v("no-implicit-coercion")]),
          _vm._v(
            " smarter about numerical expressions (fixes #3510) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("prefer-template")]),
          _vm._v(
            " had not been handling TemplateLiteral as literal node (fixes #3507) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("newline-after-var")]),
          _vm._v(
            " Allow comment + blank after var (fixes #2852) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("unnecessary")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("quote-props")]),
          _vm._v(" (fixes #3381) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " shouldn't check the last line unless it is a punctuator (fixes #3498) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " rule does not indent when doing multi-line chain calls (fixes #3279) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: sort-vars rule fails when memo is undefined (fixes #3474) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("brace-style")]),
          _vm._v(
            " doesn't report some closing brace errors (fixes #3486) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: separate options for block and line comments in "),
          _c("code", [_vm._v("spaced-comment")]),
          _vm._v(" rule (fixes #2897) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " does not check FunctionDeclaration nodes properly (fixes #3173) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('Update: Added "properties" option to '),
          _c("code", [_vm._v("id-length")]),
          _vm._v(
            " rule to ignore property names. (fixes #3450) (Mathieu M-Gosselin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: add new ignore pattern options to no-unused-vars (fixes #2321) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Protractor environment (fixes #3457) (James Whitney)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Added section to shareable config (Gregory Waxman)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Allow pre-parsed code (fixes #1025, fixes #948) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.2.1 - August 20, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            'Fix: "key-spacing" crashes eslint on object literal shorthand properties  (fixes #3463) (Burak Yigit Kaya)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: ignore leading space check for "),
          _c("code", [_vm._v("null")]),
          _vm._v(" elements in comma-spacing (fixes #3392) (Mathias Schreck)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("prefer-arrow-callback")]),
          _vm._v(
            " false positive at recursive functions (fixes #3454) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: one-var rule doesn’t have default options (fixes #3449) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Refactor "),
          _c("code", [_vm._v("no-duplicate-case")]),
          _vm._v(
            " to be simpler and more efficient (fixes #3440) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix trailing spaces in README (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update gyandeeps and add byk (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update plugins documentation for 1.0.0 (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: "),
          _c("code", [_vm._v("object-curly-spacing")]),
          _vm._v(" doc is inaccurate about exceptions (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("object-curly-spacing")]),
          _vm._v(
            " shows the incorrect column for opening brace (fixes #3438) (Burak Yigit Kaya)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.2.0 - August 18, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Update: add support for semicolon in comma-first setup in indent rule  (fixes #3423) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: better JSDoc for indent rule (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Document the second argument of "),
          _c("code", [_vm._v("CLIEngine.executeOnText()")]),
          _vm._v(" (Sindre Sorhus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("no-dupe-class-members")]),
          _vm._v(" rule (fixes #3294) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: exclude "),
          _c("code", [_vm._v("AssignmentExpression")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Property")]),
          _vm._v(
            " nodes from extra indentation on first line (fixes #3391) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Separate indent options for var, let and const (fixes #3339) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Add AssignmentPattern to space-infix-ops (fixes #3380) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix typo: exception label (tienslebien)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Clean up tests for CLI config support (refs #2543) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("block-spacing")]),
          _vm._v(" rule (fixes #3303) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update docs for no-iterator (fixes #3405) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: bump "),
          _c("code", [_vm._v("espree")]),
          _vm._v(" dependency to "),
          _c("code", [_vm._v("2.2.4")]),
          _vm._v(" (fixes #3403) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: false positive on switch 'no duplicate case', (fixes #3408) (Cristian Carlesso)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" test does not recognize aliases for "),
          _c("code", [_vm._v("@param")]),
          _vm._v(" (fixes #3399) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: enable "),
          _c("code", [_vm._v("-c")]),
          _vm._v(
            " flag to accept a shareable config (fixes #2543) (Shinnosuke Watanabe)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Apply plugin given in CLI (fixes #3383) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add commonjs environment (fixes #3377) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update no-unused-var docs (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: trailing commas in object-curly-spacing for import/export (fixes #3324) (Henry Zhu)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Make "),
          _c("code", [_vm._v("baseConfig")]),
          _vm._v(
            " to behave as other config options (fixes #3371) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Docs: Add "Compatibility" section to linebreak-style (Vitor Balocco)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("prefer-arrow-callback")]),
          _vm._v(" rule (fixes #3140) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Clarify what an unused var is (fixes #2342) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Mention double-byte character limitation in max-len (fixes #2370) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: object curly spacing incorrectly warning for import with default and multiple named specifiers (fixes #3370) (Luke Karrys)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Indent rule errors with array of objects (fixes #3329) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Make it clear that "),
          _c("code", [_vm._v("space-infix-ops")]),
          _vm._v(" support "),
          _c("code", [_vm._v("const")]),
          _vm._v(" (fixes #3299) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("prefer-template")]),
          _vm._v(" rule (fixes #3014) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Clarify "),
          _c("code", [_vm._v("no-process-env")]),
          _vm._v(" docs (fixes #3318) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix arrow name typo (fixes #3309) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Improve error message for "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" rule violation (fixes #3340) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: radix rule does not apply for Number.parseInt (ES6) (fixes #3364) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("key-spacing.align")]),
          _vm._v(
            " doesn't pay attention to non-whitespace before key (fixes #3267) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: arrow-parens & destructuring/default params (fixes #3353) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add support for Allman to brace-style rule, brackets on newline (fixes #3347) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Regression no-catch-shadow (1.1.0) (fixes #3322) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: remove note outdated in 1.0.0 (Denis Sokolov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: automatically convert line endings in release script (fixes #2642) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: allow disabling new-cap on object methods (fixes #3172) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Improve checkstyle format (fixes #3183) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Indent rule errors if an array literal starts a new statement (fixes #3328) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Improve validation error messages (fixes #3193) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: fix syntax error in space-before-function-paren (Fabrício Matté)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " rule to check for last line correctly (fixes #3327) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Inconsistent off-by-one errors with column numbers (fixes #3231) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix: Keyword "else" must not be followed by a newline (fixes #3226) (Burak Yigit Kaya)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("id-length")]),
          _vm._v(
            " does not work for most of the new ES6 patterns (fixes #3286) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Spaced Comment Exceptions Not Working (fixes #3276) (Jamund Ferguson)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.1.0 - August 7, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Update: Added as-needed option to arrow-parens (fixes #3277) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: curly-spacing missing import case (fixes #3302) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("eslint-env")]),
          _vm._v(" in comments had not been setting "),
          _c("code", [_vm._v("ecmaFeatures")]),
          _vm._v(" (fixes #2134) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("es6")]),
          _vm._v(" env had been missing "),
          _c("code", [_vm._v("spread")]),
          _vm._v(" and "),
          _c("code", [_vm._v("newTarget")]),
          _vm._v(" (fixes #3281) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Report no-spaced-func on last token before paren (fixes #3289) (Benjamin Woodruff)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check for null elements in indent rule (fixes #3272) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Use backticks for option heading (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-invalid-this")]),
          _vm._v(
            " had been missing jsdoc comment (fixes #3287) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " rule for multi-line objects and arrays (fixes #3236) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: add new "),
          _c("code", [_vm._v("multi-or-nest")]),
          _vm._v(" option for the "),
          _c("code", [_vm._v("curly")]),
          _vm._v(" rule (fixes #1806) (Ivan Nikulin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-cond-assign")]),
          _vm._v(
            " had been missing simplest pattern (fixes #3249) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: id-length rule doesn't catch violations in arrow function parameters (fixes #3275) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Added grep-style formatter (fixes #2991) (Nobody Really)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Split out generic AST methods into utility (fixes #962) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("accessor-pairs")]),
          _vm._v(" false positive (fixes #3262) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("context.getScope()")]),
          _vm._v(
            " returns correct scope in blockBindings (fixes #3254) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Expose "),
          _c("code", [_vm._v("getErrorResults")]),
          _vm._v(" as a static method on "),
          _c("code", [_vm._v("CLIEngine")]),
          _vm._v(" (fixes #3242) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Expose "),
          _c("code", [_vm._v("getFormatter")]),
          _vm._v(" as a static method on "),
          _c("code", [_vm._v("CLIEngine")]),
          _vm._v(" (fixes #3239) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: use correct encoding for id-match.md (fixes #3246) (Matthieu Larcher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: place id-match rule at correct place in README.md (fixes #3245) (Matthieu Larcher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Update no-proto.md (Joe Zimmerman)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typo in object-shorthand docs (Gunnar Lium)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: inquirer dependency (fixes #3241) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " rule for objects and nested one line blocks (fixes #3238, fixes #3237) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix wrong options in examples of key-spacing (keik)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('Docs: Adds missing "not" to semi.md (Marius Schulz)')
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Update no-multi-spaces.md (Kenneth Powers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " to not error on same line nodes (fixes #3228) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Jest environment (fixes #3212) (Darshak Parikh)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.0.0 - July 31, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Update: merge "),
          _c("code", [_vm._v("no-reserved-keys")]),
          _vm._v(" into "),
          _c("code", [_vm._v("quote-props")]),
          _vm._v(" (fixes #1539) (Jose Roberto Vidal)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(" error message (fixes #3220) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Update: Add embertest env (fixes #3205) (ismay)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Correct documentation errors for "),
          _c("code", [_vm._v("id-length")]),
          _vm._v(" rule. (Jess Telford)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Breaking: "),
          _c("code", [_vm._v("indent")]),
          _vm._v(
            " rule to have node specific options (fixes #3210) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-after-keyword shouldn't allow newlines (fixes #3198) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add JSON formatter (fixes #3036) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Switch to RuleTester (fixes #3186) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Breaking: remove duplicate warnings of "),
          _c("code", [_vm._v("no-undef")]),
          _vm._v(" from "),
          _c("code", [_vm._v("block-scoped-var")]),
          _vm._v(" (fixes #3201) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("init-declarations")]),
          _vm._v(" ignores in for-in/of (fixes #3202) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("quotes")]),
          _vm._v(" with "),
          _c("code", [_vm._v('"backtick"')]),
          _vm._v(
            " ignores ModuleSpecifier and LiteralPropertyName (fixes #3181) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-in-parens in Template Strings (fixes #3182) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check for concatenation in no-throw-literal (fixes #3099, fixes #3101) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Remove "),
          _c("code", [_vm._v("eslint-tester")]),
          _vm._v(" from devDependencies (fixes #3189) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Use new ESLintTester (fixes #3187) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("new-cap")]),
          _vm._v(" supports fullnames (fixes #2584) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Non object rule options merge (fixes #3179) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: add id-match rule (fixes #2829) (Matthieu Larcher)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Rule options merge (fixes #3175) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("spaced-comment")]),
          _vm._v(
            " allows a mix of markers and exceptions (fixes #2895) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("block-scoped-var")]),
          _vm._v(
            " issues (fixes #2253, fixes #2747, fixes #2967) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add id-length rule (fixes #2784) (Burak Yigit Kaya)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: New parameters for quote-props rule (fixes #1283, fixes #1658) (Tomasz Olędzki)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.0.0-rc-3 - July 24, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: Make Chai and Mocha as a dependency (fixes #3156) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: traverse "),
          _c("code", [_vm._v("ExperimentalSpread/RestProperty.argument")]),
          _vm._v(" (fixes #3157) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check shareable config package prefix correctly (fixes #3146) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: move redeclaration checking for builtins (fixes #3070) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("quotes")]),
          _vm._v(" with "),
          _c("code", [_vm._v('"backtick"')]),
          _vm._v(" allows directive prologues (fixes #3132) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("ESLintTester")]),
          _vm._v(" path in exposed API (fixes #3149) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Remove AppVeyor badge (Gyandeep Singh)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check no-new-func on CallExpressions (fixes #3145) (Benjamin Woodruff)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.0.0-rc-2 - July 23, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Docs: Mention eslint-tester in migration guide (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Mention variables defined in a global comment (fixes #3137) (William Becker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: add documentation about custom-formatters. (fixes #1260) (royriojas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Multi-line variable declarations indent  (fixes #3139) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: handles blocks in no-use-before-define (fixes #2960) (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("props")]),
          _vm._v(" option of "),
          _c("code", [_vm._v("no-param-reassign")]),
          _vm._v(" (fixes #1600) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Support shared configs named "),
          _c("code", [_vm._v("@scope/eslint-config")]),
          _vm._v(", with shortcuts of "),
          _c("code", [_vm._v("@scope")]),
          _vm._v(" and "),
          _c("code", [_vm._v("@scope/")]),
          _vm._v(" (fixes #3123) (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add ignorePattern, ignoreComments, and ignoreUrls options to max-len (fixes #2934, fixes #2221, fixes #1661) (Benjamin Woodruff)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Increase Windows Mocha timeout (fixes #3133) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: incorrect syntax in the example for rule «one-var» (Alexander Burtsev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Check commit message format at end of tests (fixes #3058) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Move eslint-tester into repo (fixes #3110) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Not load configs outside config with "),
          _c("code", [_vm._v("root: true")]),
          _vm._v("  (fixes #3109) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add config information to README (fixes #3074) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add mysticatea as committer (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Grammar fixes in rule descriptions (refs #3038) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Update sort-vars to ignore Array and ObjectPattern (fixes #2954) (Harry Ho)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var rule incorrectly flagging break/continue with label (fixes #3082) (Aparajita Fishman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: spaces trigger wrong in "),
          _c("code", [_vm._v("no-useless-call")]),
          _vm._v(" and "),
          _c("code", [_vm._v("prefer-spread")]),
          _vm._v(" (fixes #3054) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("arrow-spacing")]),
          _vm._v(
            " allow multi-spaces and line-endings (fixes #3079) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: add missing loop scopes to one-var (fixes #3073) (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: the "),
          _c("code", [_vm._v("no-invalid-this")]),
          _vm._v(" rule (fixes #2815) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: allow empty loop body in no-extra-semi (fixes #3075) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add qunit to environments (fixes #2870) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("space-before-blocks")]),
          _vm._v(" to consider classes (fixes #3062) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Include phantomjs globals (fixes #3064) (Linus Unnebäck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-else-return handles multiple else-if blocks (fixes #3015) (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-*-assgin")]),
          _vm._v(" rules support destructuring (fixes #3029) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: the "),
          _c("code", [_vm._v("no-implicit-coercion")]),
          _vm._v(" rule (fixes #1621) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make no-implied-eval match more types of strings (fixes #2898) (Benjamin Woodruff)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Clarify that bot message is automatic (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Skip rest properties in no-dupe-keys (fixes 3042) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: New issue template (fixes #3048) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: strict rule supports classes (fixes #2977) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: the "),
          _c("code", [_vm._v("prefer-reflect")]),
          _vm._v(" rule (fixes #2939) (Keith Cirkel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: make grammar consistent in rules index (Greg Cochard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix unmatched paren in rule description (Greg Cochard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Small typo fix in no-useless-call documentation (Paul O’Shannessy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: readd phantomjs dependency with locked down version (fixes #3026) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Add IanVS as committer (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "docs: additional computed-property-spacing documentation (fixes #2941) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add let and const examples for newline-after-var (fixes #3020) (James Whitney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Remove unnecessary phantomjs devDependency (fixes #3021) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: added shared builtins list (fixes #2972) (Jose Roberto Vidal)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v1.0.0-rc-1 - July 15, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Upgrade: Espree to 2.2.0 (fixes #3011) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: fix a typo (bartmichu)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: indent rule should recognize single line statements with ASI (fixes #3001, fixes #3000) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Handle CRLF line endings in spaced-comment rule - 2 (fixes #3005) (Burak Yigit Kaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Indent rule error on empty block body (fixes #2999) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: the "),
          _c("code", [_vm._v("no-class-assign")]),
          _vm._v(" rule (fixes #2718) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: the "),
          _c("code", [_vm._v("no-const-assign")]),
          _vm._v(" rule (fixes #2719) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add 1.0.0 migration guide (fixes #2994) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update changelog for 0.24.1 (fixes #2976) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Remove deprecated rules (fixes #1898) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: multi-line + fat arrow indent (fixes #2239) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Create eslint:recommended and add to --init (fixes #2713) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Indent rule (fixes #1797, fixes #1799, fixes #2248, fixes #2343, fixes #2278, fixes #1800) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("context.getDeclaredVariables(node)")]),
          _vm._v(" (fixes #2801) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: the "),
          _c("code", [_vm._v("no-useless-call")]),
          _vm._v(" rule (fixes #1925) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: the "),
          _c("code", [_vm._v("prefer-spread")]),
          _vm._v(" rule (fixes #2946) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("valid-jsdoc")]),
          _vm._v(" counts "),
          _c("code", [_vm._v("return")]),
          _vm._v(" for arrow expressions (fixes #2952) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add exported comment option (fixes #1200) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Default to --reset behavior (fixes #2100) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add arrow-parens and arrow-spacing rule (fixes #2628) (Jxck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Shallow cloning issues in eslint config (fixes #2961) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: Warn on missing rule definition or deprecation (fixes #1549) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: adding some tests for no-redeclare to test named functions (fixes #2953) (Dominic Barnes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add support for root: true in config files (fixes #2736) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: workaround for leading and trailing comments in padded-block (fixes #2336 and fixes #2788) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: object-shorthand computed props (fixes #2937) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Remove invalid check inside "),
          _c("code", [_vm._v("getJSDocComment")]),
          _vm._v(" function (fixes #2938) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Clarify when not to use space-before-blocks (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: "),
          _c("code", [_vm._v("no-loop-func")]),
          _vm._v(
            " allows block-scoped variables (fixes #2517) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('Docs: remove mistaken "off by default" (Jan Schär)')
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Add appveyor CI system (fixes #2923) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix typo in the shareable configs doc (Siddharth Kannan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: max-len to report correct column number (fixes #2926) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: add destructuring support to comma-dangle rule (fixes #2911) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: clarification in no-unused-vars (Jan Schär)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-redeclare")]),
          _vm._v(" checks module scopes (fixes #2903) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: missing quotes in JSON (Jan Schär)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Switch to 1-based columns (fixes #2284) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: array-bracket-spacing examples used space-in-brackets (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add spaced-line-comment deprecation notice (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add space-in-brackets deprecation notice (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Include execScript in no-implied-eval rule (fixes #2873) (Frederik Braun)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Support class syntax for line-around-comment rule (fixes #2894) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: lines-around-comment was crashing in some cases due to a missing check (fixes #2892) (Mathieu M-Gosselin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add init-declarations rule (fixes #2606) (cjihrig)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typo in array-bracket-spacing rule (zallek)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Added missing export syntax support to the block-scoped-var rule. (fixes #2887) (Mathieu M-Gosselin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: gensite target supports rule removal (refs #1898) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Handle CRLF line endings in spaced-comment rule (fixes #2884) (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Attach parent in getNodeByRangeIndex (fixes #2863) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix typo (Bryan Smith)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add serviceworker environment (fixes #2557) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Yoda should ignore comparisons where both sides are constants (fixes #2867) (cjihrig)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Loosens regex rules around intentional fall through comments (Fixes #2811) (greg5green)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add missing schema to rules (fixes #2858) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("require-yield")]),
          _vm._v(" rule (fixes #2822) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: add callback-return rule (fixes #994) (Jamund Ferguson)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.24.1 - July 10, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Docs: Clarify when not to use space-before-blocks (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('Docs: remove mistaken "off by default" (Jan Schär)')
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('Docs: remove mistaken "off by default" (Jan Schär)')
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix typo in the shareable configs doc (Siddharth Kannan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: clarification in no-unused-vars (Jan Schär)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: missing quotes in JSON (Jan Schär)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Revert 1-based column changes in tests for patch (refs #2284) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Shallow cloning issues in eslint config (fixes #2961) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: object-shorthand computed props (fixes #2937) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Remove invalid check inside "),
          _c("code", [_vm._v("getJSDocComment")]),
          _vm._v(" function (fixes #2938) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: max-len to report correct column number (fixes #2926) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: add destructuring support to comma-dangle rule (fixes #2911) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-redeclare")]),
          _vm._v(" checks module scopes (fixes #2903) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Include execScript in no-implied-eval rule (fixes #2873) (Frederik Braun)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Support class syntax for line-around-comment rule (fixes #2894) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: lines-around-comment was crashing in some cases due to a missing check (fixes #2892) (Mathieu M-Gosselin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Added missing export syntax support to the block-scoped-var rule. (fixes #2887) (Mathieu M-Gosselin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Yoda should ignore comparisons where both sides are constants (fixes #2867) (cjihrig)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: array-bracket-spacing examples used space-in-brackets (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add spaced-line-comment deprecation notice (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add space-in-brackets deprecation notice (Brandon Mills)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.24.0 - June 26, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Upgrade: eslint-tester to 0.8.1 (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-dupe-args sparse array crash (fixes #2848) (Chris Walker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-after-keywords should ignore extra parens (fixes #2847) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: add no-unexpected-multiline rule (fixes #746) (Glen Mailer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: refactor handle-callback-err to improve performance (fixes #2841) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Add --init to the CLI options (fixes #2817) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("except-parens")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("no-return-assign")]),
          _vm._v(" rule (fixes #2809) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: handle-callback-err missing arrow functions (fixes #2823) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-extra-semi")]),
          _vm._v(" in class bodies (fixes #2794) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check type to be file when looking for config files (fixes #2790) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: valid-jsdoc to work for object getters (fixes #2407) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add an option as an object to "),
          _c("code", [_vm._v("generator-star-spacing")]),
          _vm._v(" rule (fixes #2787) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Update markdownlint dependency (David Anson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: context report message to handle more scenarios (fixes #2746) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Ignore JsDoc comments by default for "),
          _c("code", [_vm._v("spaced-comment")]),
          _vm._v(" (fixes #2766) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: one-var 'never' option for mixed initialization (Fixes #2786) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix a minor typo in a prefer-const example (jviide)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: comma-dangle always-multiline: no comma right before the last brace (fixes #2091) (Benoît Zugmeyer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow blocked comments with markers and new-line (fixes #2777) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: small fix in quote-props examples (Jose Roberto Vidal)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: object-shorthand rule should not warn for NFEs (fixes #2748) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: arraysInObjects for object-curly-spacing (fixes #2752) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Clarify --rule description (fixes #2773) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: object literals in arrow function bodies (fixes #2702) (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("constructor-super")]),
          _vm._v(" rule (fixes #2720) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("no-this-before-super")]),
          _vm._v(" rule (fixes #2721) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-unary-ops flags expressions starting w/ keyword (fixes #2764) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add block options to "),
          _c("code", [_vm._v("lines-around-comment")]),
          _vm._v(" rule (fixes #2667) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: array-bracket-spacing (fixes #2226) (Jamund Ferguson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: No-shadow rule duplicating error messages (fixes #2706) (Aliaksei Shytkin)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.23.0 - June 14, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Build: Comment out auto publishing of release notes (refs #2640) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix: "extends" within package.json (fixes #2754) (Gyandeep Singh)'
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Upgrade: globals@8.0.0 (fixes #2759) (silverwind)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: eol-last docs fix (fixes #2755) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: btmills is a reviewer (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Revert lock io.js to v2.1.0 (refs #2745) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: computed-property-spacing (refs #2226) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Pin Sinon version (fixes #2742) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(" treats "),
          _c("code", [_vm._v("for-in")]),
          _vm._v("/"),
          _c("code", [_vm._v("for-of")]),
          _vm._v(" with the same way (Fixes #2739) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add links to team members profile (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: add team and ES7 info to readme (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix: don\'t try to strip "line:" prefix from parser errors with no such prefix (fixes #2698) (Tim Cuthbertson)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: never ignore config comment options (fixes #2725) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add clarification to spaced-comment (refs #2588) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add markers to spaced-comment (fixes #2588) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-trailing-spaces now handles skipBlankLines (fixes #2575) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Mark global-strict on by default (fixes #2629) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Allow extends to be an array (fixes #2699) (Justin Morris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("New: globals@7.1.0 (fixes #2682) (silverwind)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: "),
          _c("code", [_vm._v("prefer-const")]),
          _vm._v(" rule (fixes #2333) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: remove hard-coded list of unary keywords in space-unary-ops rule (fixes #2696) (Tim Cuthbertson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Automatically validate rule options (fixes #2595) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: no-lone-blocks does not report block-level scopes (fixes  #2119) (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: yoda onlyEquality option (fixes #2638) (Denis Sokolov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: update comment to align with source code it's referencing (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Misconfigured default option for lines-around-comment rule (fixes #2677) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-shadow")]),
          _vm._v(" allows shadowing in the TDZ (fixes #2568) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: spaced-comment rule (fixes #1088) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check unused vars in exported functions (fixes #2678) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Stringify payload of release notes (fixes #2640) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allowing u flag in regex to properly lint no-empty-character-class (fixes #2679) (Dominic Barnes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: deprecate no-wrap-func (fixes #2644) (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fixing grammar: then -> than (E)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: trailing commas in object-curly-spacing (fixes #2647) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: be consistent about deprecation status (Matthew Dapena-Tretter)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix mistakes in object-curly-spacing docs (Matthew Dapena-Tretter)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: run processors when calling executeOnText (fixes #2331) (Mordy Tikotzky)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: move executeOnText() tests to the correct describe block (fixes #2648) (Mordy Tikotzky)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: add tests to assert that the preprocessor is running (fixes #2651) (Mordy Tikotzky)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Lock io.js to v2.1.0 (fixes #2653) (Ilya Volodin)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.22.1 - May 30, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Build: Remove release notes auto-publish (refs #2640) (Ilya Volodin)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.22.0 - May 30, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Upgrade: escope 3.1.0 (fixes #2310, #2405) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: “consistent-this” incorrectly flagging destructuring of "
          ),
          _c("code", [_vm._v("this")]),
          _vm._v(" (fixes #2633) (David Aurelio)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Upgrade: eslint-tester to 0.7.0 (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: allow shadowed references in no-alert (fixes #1105) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-multiple-empty-lines and template strings (fixes #2605) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: object-curly-spacing (fixes #2225) (Jamund Ferguson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: minor fix for one-var rule (Jamund Ferguson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Shared config being clobbered by other config (fixes #2592) (Dominic Barnes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Update: adds "functions" option to no-extra-parens (fixes #2477) (Jose Roberto Vidal)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix json formatting for lines-around-comments rule (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Improve around function/class names of "),
          _c("code", [_vm._v("no-shadow")]),
          _vm._v(" (fixes #2556, #2552) (Toru Nagashima)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Improve code coverage (fixes #2590) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow scoped configs to have sub-configs (fixes #2594) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Add auto-update of release tag on github (fixes #2566) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: lines-around-comment (fixes #1344) (Jamund Ferguson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Unblock build by increasing code coverage (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: accessor-pairs rule to object initializations (fixes #1638) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: counting of variables statements in one-var (fixes #2570) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Add sudo:false for Travis (fixes #2582) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add rule schemas (refs #2179) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix typo in shareable-configs example (fixes #2571) (Ted Piotrowski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Relax markdownlint rules by disabling style-only items (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Object shorthand rule incorrectly flagging getters/setters (fixes #2563) (Brad Dougherty)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add config validator (refs #2179) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add worker environment (fixes #2442) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New no-empty-character class (fixes #2508) (Jamund Ferguson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Adds --ignore-pattern option. (fixes #1742) (Patrick McElhaney)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.21.2 - May 18, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.21.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: one-var exception for ForStatement.init (fixes #2505) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't throw spurious shadow errors for classes (fixes #2545) (Jimmy Jia)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: valid-jsdoc rule to support exported functions (fixes #2522) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow scoped packages in configuration extends (fixes #2544) (Eric Isakson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Add chatroom to FAQ (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Move Gitter badge (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.21.1 - May 15, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.21.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: loc obj in report fn expects column (fixes #2481) (Varun Verma)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Make sure that all md files end with empty line (fixes #2520) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Added Gitter badge (The Gitter Badger)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: forced no-shadow to check all scopes (fixes #2294) (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: --init indent setting (fixes #2493) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Mention bundling multiple shareable configs (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Not to override the required extended config object directly (fixes #2487) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Update markdownlint dependency (David Anson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: added recursive function example to no-unused-vars (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typo (then -> than) (Vladimir Agafonkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Revert "Fix: sanitise Jekyll interpolation during site generation (fixes #2297)" (Nicholas C. Zakas)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: dot-location should use correct dot token (fixes #2504) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Stop linebreak-style from crashing (fixes #2490) (James Whitney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: rule no-duplicate-case problem with CallExpressions. (fixes #2499) (Matthias Osswald)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Enable full support for eslint-env comments (refs #2134) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Speed up site generation (fixes #2475) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fixing trailing spaces (Fixes #2478) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Update README FAQs (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow comment before comma for comma-spacing rule (fixes #2408) (Gyandeep Singh)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.21.0 - May 9, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.21.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Shareable configs (fixes #2415) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Edge cases for no-wrap-func (fixes #2466) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update ecmaFeatures description (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add dot-location rule. (fixes #1884) (Greg Cochard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add addPlugin method to CLI-engine (Fixes #1971) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Do not check unset declaration types (Fixes #2448) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-redeclare switch scoping (fixes #2337) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check extra scope in no-use-before-define (fixes #2372) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure baseConfig isn't changed (fixes #2380) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't warn for member expression functions (fixes #2402) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Adds skipBlankLines option to the no-trailing-spaces rule (fixes #2303) (Andrew Vaughan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Adding exception for last line (Refs #2423) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: crash on 0 max (fixes #2423) (gcochard)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix object-shorthand arrow functions (fixes #2414) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Improves detection of self-referential functions (fixes #2363) (Jose Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: key-spacing groups must be consecutive lines (fixes #1728) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: grammar fix in no-sync (Tony Lukasavage)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update configuring.md to fix incorrect link. (Ans)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Check --stdin-filename by ignore settings (fixes #2432) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-loop-func")]),
          _vm._v(
            " rule allows functions at init part (fixes #2427) (Toru Nagashima)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add init command (fixes #2302) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-irregular-whitespace should work with irregular line breaks (fixes #2316) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: generator-star-spacing with class methods (fixes #2351) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: no-unneeded-ternary rule to disallow boolean literals in conditional expressions (fixes #2391) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add "),
          _c("code", [_vm._v("restParams")]),
          _vm._v(" to "),
          _c("code", [_vm._v("ecmaFeatures")]),
          _vm._v(" options list (refs: #2346) (Bogdan Savluk)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-in-brackets Cannot read property 'range' (fixes #2392) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Sort the rules (Lukas Böcker)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: Exception option for "),
          _c("code", [_vm._v("no-extend-native")]),
          _vm._v(" and "),
          _c("code", [_vm._v("no-native-reassign")]),
          _vm._v(" (fixes #2355) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-in-brackets import declaration  (fixes #2378) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add uninitialized and initialized options (fixes #2206) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: brace-style to not warn about curly mix ifStatements (fixes #1739) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: npm run profile script should use espree (fixes #2150) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add support for extending configurations (fixes #1637) (Espen Hovlandsdal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Include string literal keys in object-shorthand (Fixes #2374) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Specify language for all code fences, enable corresponding markdownlint rule. (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: linebreak-style rule (fixes #1255) (Erik Müller)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Update: Add "none" option to operator-linebreak rule (fixes #2295) (Casey Visco)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: sanitise Jekyll interpolation during site generation (fixes #2297) (Michael Ficarra)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.20.0 - April 24, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.20.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: support arrow functions in no-extra-parens (fixes #2367) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Column position in space-infix-ops rule (fixes #2354) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: allow plugins to be namespaced (fixes #2360) (Seth Pollack)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: one-var: enable let & const (fixes #2301) (Joey Baker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add meteor to avaiable environments list (bartmichu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Use "),
          _c("code", [_vm._v("Object.assign()")]),
          _vm._v(
            " polyfill for all object merging (fixes #2348) (Sindre Sorhus)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update markdownlint dependency, resolve/suppress new issues. (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: newline-after-var declare and export (fixes #2325) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Some typos and grammar. (AlexKVal)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: newline-after-var to ignore declare in for specifiers (fixes #2317) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: add --stdin-filename option (fixes #1950) (Mordy Tikotzky)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Load .eslintrc in $HOME only if no other .eslintrc is found (fixes #2279) (Jasper Woudenberg)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Add "),
          _c("code", [_vm._v("v8")]),
          _vm._v(
            " module to no-mixed-requires rule (fixes #2320) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: key-spacing with single properties (fixes #2311) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: "),
          _c("code", [_vm._v("no-invalid-regexp")]),
          _vm._v(": add "),
          _c("code", [_vm._v("ecmaFeatures")]),
          _vm._v(" flags for "),
          _c("code", [_vm._v("u")]),
          _vm._v("/"),
          _c("code", [_vm._v("y")]),
          _vm._v(" (Jordan Harband)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: object-shorthand rule (refs: #1617) (Jamund Ferguson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: backticks support for quotes rule (fixes #2153) (borislavjivkov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-in-brackets to work with modules (fixes #2216) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.19.0 - April 11, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.19.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Upgrade: Espree to 2.0.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update one-var documentation (fixes #2210) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add test for no-undef (fixes #2214) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Report better location for padded-blocks error (fixes #2224) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't check concise methods in quote-props (fixes #2251) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Consider tabs for space-in-parens rule (fixes #2191) (Josh Quintana)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var to work with classes (fixes #2280) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Remove trailing spaces, enable corresponding markdownlint rule. (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: padded-blocks with ASI (fixes #2273) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Handle comment lines in newline-after-var (fixed #2237) (Casey Visco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Standardize on '*' for unordered lists, enable corresponding markdownlint rule. (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-undef and no-underscore-dangle to use double quotes (fixes #2258) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Improve grammar and style in comma-dangle.md (Nate Eagleson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Improve grammar and style in padded-blocks.md (Nate Eagleson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update URL in no-wrap-func.md to resolve 404 (Nate Eagleson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typo in command-line-interface.md (Nate Eagleson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typo in working-with-rules.md (Nate Eagleson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Remove hard tabs from *.md, enable corresponding markdownlint rule. (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Function id missing in parent scope when using ecmaFeature "
          ),
          _c("code", [_vm._v("modules")]),
          _vm._v(" for rule block-scoped-var (fixes #2242) (Michael Ferris)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ignore single lines for vertical alignment (fixes #2018) (Ian VanSchooten)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow inline comments in newline-after-var rule (fixes #2229) (Casey Visco)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Espree 2.0.0 and escope 3.0.0 (fixes #2234, fixes #2201, fixes (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Update --no-ignore warning (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Remove jshint files (fixes #2222) (Jeff Tan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: no-empty fix comment change (refs #2188) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: duplicate semi and no-extra-semi errors (fixes #2207) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update processors description (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: semi error on export declaration (fixes #2194) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: operator-linebreak rule (fixes #1405) (Benoît Zugmeyer)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fixing broken links in documentation (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: Espree to 0.12.3 (fixes #2195) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: camelcase rule with {properties: never} shouldn't check assignment (fixes #2189) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Allow modifying base config (fixes #2143) (Meo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: no-continue rule (fixes #1945) (borislavjivkov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("no-empty")]),
          _vm._v(
            " rule should allow any comments (fixes #2188) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix spell in camelcase doc (fixes #2190) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Require semicolon after import/export statements (fixes #2174) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Build: Add linting of Markdown files to "npm test" script (fixes #2182) (David Anson)'
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Build: Fixing site generation (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Fix gensite task to work even if files are missing (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.18.0 - March 28, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.18.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Mark variables as used in module scope (fixes #2137) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: arrow functions need wrapping (fixes #2113) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't crash on empty array pattern item (fixes #2111) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't error on destructured params (fixes #2051) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fixing broken links (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-constant-condition should not flag += (fixes #2155) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure piped in code will trigger correct errors (fixes #2154) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var to handle imports (fixes #2087) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-dupe-args to work with destructuring (fixes #2148) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: key-spacing crash on computed properties (fixes #2120) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: indent crash on caseless switch (fixes #2144) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't warn about destructured catch params (fixes #2125) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Omit setter param from no-unused-vars (fixes #2133) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Cleaning dead links (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Moving documentation out of the repository and modifying build scripts (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update link to Documentation (Kate Lizogubova)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Adding back deprecated space-unary-word-ops documentation (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Unused recursive functions should be flagged (issue2095) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Remove JSX support from no-undef (fixes #2093) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: markVariableAsUsed() should work in Node.js env (fixes #2089) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'New: Add "always" and "never" options to "one-var" rule. (fixes #1619) (Danny Fritz)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: newline-after-var rule (fixes #2057) (Gopal Venkatesan)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: func-names with ES6 classes (fixes #2103) (Marsup)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix: Add "Error" to the "new-cap" rule exceptions (fixes #2098) (Mickaël Tricot)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: vars-on-top conflict with ES6 import (fixes #2099) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fixed JSON syntax (Sajin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: space-before-function-paren rule (fixes #2028) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: rule no-empty also checking for empty catch blocks. (fixes #1841) (Dieter Oberkofler)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: rule camelcase to allow snake_case in object literals. (fixes #1919) (Dieter Oberkofler)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Added option int32Hint for space-infix-ops (fixes #1295) (Kirill Efimov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: no-param-reassign rule (fixes #1599) (Nat Burns)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.17.1 - March 17, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.17.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-func-assign should not fail on import declarations (fixes #2060) (Igor Zalutsky)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var to work with destructuring (fixes #2059) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-redeclare should check Node.js scope (fixes #2064) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-before-function-parentheses generator methods (fixes #2082) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Method name resolution in complexity rule (fixes #2049) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-unused-vars crash from escope workaround (fixes #2042) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: restrict dot-notation keywords to actual ES3 keywords (fixes #2075) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var to work with classes (fixes #2048) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update no-new documentation (fixes #2044) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: yoda range exceptions with this (fixes #2063) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix documentation on configuring eslint with comments (Miguel Ping)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: rule no-duplicate-case problem with MemberExpressions. (fixes #2038) (Dieter Oberkofler)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Exempt \\0 from no-octal-escape (fixes #1923) (Michael Ficarra)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.17.0 - March 14, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.17.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: module import specifiers should be defined (refs #1978) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ignore super in no-undef (refs #1968) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: Espree to v0.12.0 (refs #1968) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: destructured arguments should work in block-scoped-var (fixes #1996) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Line breaking with just carriage return (fixes #2005) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: location of new-cap error messages (fixes #2025) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Stop checking JSX variable use, expose API instead (fixes #1911) (Glen Mailer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check spacing of class methods (fixes #1989) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: no-duplicate-case rule to disallow a duplicate case label (fixes #2015) (Dieter Oberkofler)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Clarify issue requirement for doc pull requests (Ian)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add quotes around object key (Ian)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Add comma-dangle allow-multiline (fixes #1984) (Keith Cirkel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't explode on default export function (fixes #1985) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add AST node exceptions to comma-style. (fixes #1932) (Evan Simmons)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add spread operator to available language options (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: generator-star-spacing rule (fixes #1680, fixes #1949) (Brandon Mills)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.16.2 - March 10, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.16.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure globalReturn isn't on when node:false (fixes #1995) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Downgrade: escope pegged to 2.0.6 (refs #2001) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: escope to 2.0.7 (fixes #1978) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update descriptive text for --no-ignore option. (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: estraverse to latest for ESTree support (fixes #1986) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Global block-scope-var check should work (fixes #1980) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't warn about parens around yield (fixes #1981) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.16.1 - March 8, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.16.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Node.js scoping in block-scoped-var (fixes #1969) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Enable ES6 scoping for more options (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure all export nodes are traversable (fixes #1965) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure class names are marked as used (fixes #1967) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: remove typo that caused a crash (fixes #1963) (Fabricio C Zuardi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v('Docs: Added missing "are" (Sean Wilkinson)')])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.16.0 - March 7, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.16.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Pass correct sourceType to escope (fixes #1959) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Scoping for Node.js (fixes #892) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: strict rule should honor module code (fixes #1956) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add es6 environment (fixes #1864, fixes #1944) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update ecmaFeatures list (fixes #1942) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make no-unused-vars ignore exports (fixes #1903) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Upgrade: Espree to v1.11.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Comment configuration of rule doesn't work (fixes #1792) (Jary)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Rest args should work in no-undef and block-scoped-var (fixes #1543) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: change no-comma-dangle to comma-dangle (fixes #1350) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: space-before-function-parentheses to support generators (fixes #1929) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'New: Adding support for "// eslint-disable-line rule" style comments (Billy Matthews)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Use unversioned sinon file in browser test (fixes #1947) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add mention of compatible parsers (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Better error when given null as rule config (fixes #1760) (Glen Mailer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: no-empty to check TryStatement.handler (fixes #1930) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-before-function-parentheses and object methods (fixes #1920) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: no-dupe-args rule (fixes #1880) (Jamund Ferguson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: comma-spacing should ignore JSX text (fixes #1916) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: made eol-last less strict (fixes #1460) (Glen Mailer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: generator-star middle option (fixes #1808) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Espree to 1.10.0 for classes support (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: no-plusplus.md - auto semicolon insertion (Miroslav Obradović)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Use union types in TokenStore JSDoc (refs #1878) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var to work with destructuring (fixes #1863) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update docs for token-related methods (fixes #1878) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Remove preferGlobal from package.json (fixes #1877) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: allow block bindings in no-inner-declarations (fixes #1893) (Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: getScope and no-use-before-define for arrow functions (fixes #1895) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make no-inner-declarations look for arrow functions (fixes #1892) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Breaking: Change no-space-before-semi to semi-spacing and add "after" option (fixes #1671) (Mathias Schreck)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add support for custom preprocessors (fixes #1817) (Ilya Volodin)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.15.1 - February 26, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.15.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Build: Fix release task (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: check all semicolons in no-space-before-semi (fixes #1885) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Refactor comma-spacing (fixes #1587, fixes #1845) (Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow globalReturn in consistent-return (fixes #1868) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: semi rule should check throw statements (fixes #1873) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Added HolidayCheck AG as user (0xPIT)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: "),
          _c("code", [_vm._v("chalk")]),
          _vm._v(" to 1.0.0 (Sindre Sorhus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add CustomInk to the list of companies (Derek Lindahl)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Alphabetize project & company usage list (Derek Lindahl)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: fix typo (Henry Zhu)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix typo (Brenard Cubacub)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.15.0 - February 21, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.15.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Espree to 1.9.1 (fixes #1816, fixes #1805) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: make rules work with for-of statements (fixes #1859) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Enable globalReturn for Node.js environment (fixes #1158) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Location of extra paren message (fixes #1814) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Remove unnecessary file exists check (fixes #1831) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't count else-if in max-depth (fixes #1835) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't flag for-of statement (fixes #1852) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Test using io.js as well (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Change customformat value to path (suisho)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add a missing word in the Contributing doc (Ben Linskey)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix typo in wrap-iife rule doc title (Ben Linskey)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update pages to fix rendering of lists (David Anson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: new-cap should allow defining exceptions (fixes #1424) (Brian Di Palma)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add requireReturnDescription for valid-jsdoc (fixes #1833) (Brian Di Palma)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: rule no-throw-literal added (fixes #1791) (Dieter Oberkofler)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: multi-line option for the curly rule (fixes #1812) (Hugo Wood)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: fix typo in configuring docs (mendenhallmagic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Backslashes in path (fixes #1818) (Jan Schär)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update pages to fix rendering of lists and fenced code blocks (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: add webpack loader to the docs/integrations page (Maxime Thirouin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: space-before-function-parentheses replaces space-after-function-name and checkFunctionKeyword (fixes #1618) (Mathias Schreck)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.14.1 - February 8, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.14.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Exit code should be 1 for any number of errors (fixes #1795) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check indentation of first line (fixes #1796) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: strict rules shouldn't throw on arrow functions (fixes #1789) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.14.0 - February 7, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.14.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Fix indentation of comment (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: comma-spacing for template literals (fixes #1736) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Add Node.js 0.12 testing (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Remove node from results (fixes #957) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Breaking: Exit code is now error count (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Correct getFormatter() documentation (refs #1723) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Make rules work with arrow functions (fixes #1508, fixes #1509, fixes #1493) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure template string references count (fixes #1542) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-undef to work with arrow functions (fixes #1604) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: Espree to version 1.8.0 (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't throw error for arguments (fixes #1759) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't warn on computed nonliteral properties (fixes #1762) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Allow parser to be configured (fixes #1624) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Added double quotes for JSON keys for comma-spacing and key-spacing rule (Dmitry Polovka)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Rule indent (fixes #1022) (Dmitriy Shekhovtsov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('Revert "New: Rule indent (fixes #1022)" (Nicholas C. Zakas)')
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: fix eslint indentations (fixes #1770) (Dmitriy Shekhovtsov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Scoping issues for no-unused-vars (fixes #1741) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Added "),
          _c("code", [_vm._v("eslint-enable")]),
          _vm._v(" inline (Ivan Fraixedes)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add predefined Meteor globals (fixes #1763) (Johan Brook)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Rule indent (fixes #1022) (Dmitriy Shekhovtsov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Check all assignments for consistent-this (fixes #1513) (Timothy Jones)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Support exceptions in no-multi-spaces (fixes #1755) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Forgotten parentheses in code snippet (Ivan Fraixedes)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: CLIEngine results include warning and error count (fixes #1732) (gyandeeps)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Scoping issues for no-unused-vars (fixes #1733) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add getNodeByRangeIndex method (refs #1755) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Replace getTokenByRange(Index->Start) (refs #1721) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Fast-path for empty input (fixes #546) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow single line else-if (fixes #1739) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't crash when $HOME isn't set (fixes #1465) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make no-multi-spaces work for every case (fixes #1603, fixes #1659) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Show error and warning counts in stylish summary (fixes #1746) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: fixed typo in no-lone-blocks docs (Vitor Balocco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: fixed typo in consistent-return docs (Vitor Balocco)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: remove implied eval check from no-eval (fixes #1202) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Improve CLIEngine.getFormatter() (refs #1723) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Add Backbone plugin link (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: use npm's keyword route (Tom Vincent)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Update sitegen script (Closes #1725) (Ilya Volodin)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.13.0 - January 24, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.13.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: The rule spaced-line-comment now also allows tabs and not only spaces as whitespace. (fixes #1713) (Dieter Oberkofler)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: add Jasmine rules and eslintplugin npm links (Tom Vincent)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make no-redeclare work with let (fixes #917) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add CLIEngine.getFormatter() (fixes #1653) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Breaking: Update escope (fixes #1642) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Switch to using estraverse-fb (fixes #1712) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Update README FAQ (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: no-warning-comments matches on whole word only (fixes #1709) (Nick Fisher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Add JSDoc generation (fixes #1363) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add more info about context (fixes #1330) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: Espree to 1.7.1 (fixes #1706) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Make CLA notice more prominent (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Added globals for: phantom,jquery, prototypejs, shelljs (fixes #1704) (Dmitriy Shekhovtsov)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fixed example for the space-return-throw-case rule (mpal9000)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Except object literal methods from func-names (fixes #1699) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: use global strict mode everywhere (fixes #1691) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add allowPattern option for dot-notation rule (fixes #1679) (Tim Schaub)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Missing undeclared variables in JSX (fixes #1676) (Yannick Croissant)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-unused-expressions rule incorrectly flagging  yield (fixes #1672) (Rémi Gérard-Marchant)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Combine strict mode rules (fixes #1246) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: disregards leading './' in ignore pattern or file name (fixes #1685) (Chris Montrois)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: globals module to latest (fixes #1670) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: generator-star should allow params (fixes #1677) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-unused-vars for JSX (fixes #1673 and fixes #1534) (Yannick Croissant)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add angularjs-eslint link into the integration doc (Emmanuel DEMEY)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.12.0 - January 17, 2015")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.12.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Track JSX global variable correctly (fixes #1534) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Property regex flag checking (fixes #1537) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add angularjs-eslint link into the integration doc (Emmanuel DEMEY)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Expose ecmaFeatures on context (fixes #1648) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Added Fitbit to the list of companies (Igor Zalutsky)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("New: gen-star rule (refs #1617) (Jamund Ferguson)")]),
        _vm._v(" "),
        _c("li", [_vm._v("New: no-var rule (refs #1617) (Jamund Ferguson)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Support JSX spread operator (fixes #1634) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Document ecmaFeatures (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: several dependencies (fixes #1377) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: Broken JSX test (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-bitwise reports on bitwise assignment expressions (fixes #1643) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Find JSXIdentifier refs in no-unused-vars (fixes #1534) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add a couple JSX tests (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: quotes rule ignores JSX literals (fixes #1477) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't warn on JSX literals with newlines (fixes #1533) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Fully enable JSX support (fixes #1640) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Allow parser feature flips (fixes #1602) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow comments in key-spacing groups (fixes #1632) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var reports labels (fixes #1630) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: add newline to no-process-env (fixes #1627) (Tom Vincent)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Update optionator, --no in help (fixes #1134) (George Zahariev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow individual newlines in space-in-brackets (fixes #1614) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Correct alignment in example project tree (Tim Schaub)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Remove references to Esprima (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Remove illegal code fence (Nicholas C. Zakas)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.11.0 - December 30, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.11.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Adding regexp literal exception (fixes #1589) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: padded-blocks incorrectly complained on comments (fixes #1416) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: column location of key-spacing with additional tokens (fixes #1458) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: tag correct commit (refs #1606) (Mathias Schreck)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: Updat Espree to 1.3.1 (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: add es3 config option to dot-notation rule (fixes #1484) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: valid-jsdoc should recognize @class (fixes #1585) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Switch to use Espree (fixes #1595) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: brace-style stroustrup should report on cuddled elseif (fixes #1583) (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Configuration via package.json (fixes #698) (Michael Mclaughlin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Set environments w/ globals (fixes #1577) (Elan Shanker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: yoda treats negative numbers as literals (fixes #1571) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: function arguments now count towards no-shadow check (fixes #1584) (Glen Mailer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: check if next statement is on newline when warning against extra semicolons. (fixes #1580) (Evan You)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: add yoda exception for range tests (fixes #1561) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: space-after-function-name (fixes #1340) (Roberto Vidal)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.10.2 - December 12, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.10.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: detect for...in in no-loop-func (fixes #1573) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: simplify comma-spacing logic (fixes #1562) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: operator-assignment addition is non-commutative (fixes#1556) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.10.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add new-cap exception configurations. (Fixes #1487)  - "
          ),
          _c("code", [_vm._v("newCapsAllowed")]),
          _vm._v("  - "),
          _c("code", [_vm._v("nonNewCapsAllowed")]),
          _vm._v(" (Jordan Harband)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.10.1 - December 6, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.10.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Fix v0.10.0 changelog (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Ensure changelog works with large semver versions (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: comma-spacing and comma-style to work with array literals (fixes #1492) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: better operator regex in use-isnan rule (fixes #1551) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: wrong op index in no-multi-spaces (fixes #1547) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Restrict use-isnan violations to comparison operators. (Fixes #1535) (Jordan Harband)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: comma-spacing has false positives when parenthesis are used (fixes #1457) (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Docs: alphabetize the "Stylistic Issues" section (Jeff Williams)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Build: make the "gensite" target work when DOCS_DIR does not exist (fixes #1530) (Jeff Williams)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: badges should only refer to master branch (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: prevent crash on empty blocks in no-else-return (fixes #1527) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Fix md to html conversion regex (fixes #1525) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.10.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.10.0 - November 27, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.10.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Add Object and Function as exceptions in new-cap (refs #1487) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Allow extensionless files to be passed on CLI (fixes #1131) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: typo: iffe to iife, none to non (Michael Ficarra)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: refactor tokens API (refs #1212) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Allow other file extensions (fixes #801) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add Event to browser globals (fixes #1474) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: check function call arguments in comma-spacing (fixes #1515) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add no-cond-assign option to disallow nested assignments in conditionals (fixes #1444) (Jeff Williams)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: crash in no-multi-spaces on empty array elements (fixes #1418) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Don't explode on directory traversal (fixes #1452) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-fallthrough should work when semis are missing (fixes #1447) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: JSDoc parsing by updating doctrine (fixes #1442) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Update: restore the "runs" global present in Jasmine 1.3 (fixes #1498) (Michał Gołębiowski)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: ignore undefined identifiers in typeof (fixes #1482) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Ignoring empty comments. (fixes #1488) (Greg Cochard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add space-unary-ops rules (#1346) (Marcin Kumorek)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Remove shebang workaround in spaced-line-comment (fixes #1433) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: change 'and' to 'an' in docs/rules/valid-jsdoc.md (fixes #1441) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Add "),
          _c("code", [_vm._v("beforeAll")]),
          _vm._v(" and "),
          _c("code", [_vm._v("afterAll")]),
          _vm._v(" to the Jasmine globals (fixes #1478) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add exception options to space-in-parens (fixes #1368) (David Clark)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Add check for license issues (fixes #782) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: update badges (Yoshua Wuyts)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update pages to fix rendering of lists and fenced code blocks (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: env rules merging for command line config (fixes #1271) (Roberto Vidal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Collect variables declare in switch-case.(fixes #1453) (chris)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: remove extra capture group (Nate-Wilkins)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: allow distinct alignment groups in key-spacing (fixes #1439) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: message for numeric property names in quote-props (fixes #1459) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Remove assumption about the rule config (Alexander Schmidt)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add ability to time individual rules (fixes #1437) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: single quotes (Nate-Wilkins)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix broken code fences in key-spacing docs (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Explain .eslintignore features (fixes #1094) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: ignore node_modules by default (fixes #1163) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Adds clamping to getSource beforeCount (fixes #1427) (Greg Gianforcaro)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: add no-inline-comment rule (fixes #1366) (Greg Cochard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: '.md' to '.html' with anchors (fixes #1415) (Nate-Wilkins)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Filter and sort versions in gensite (fixes #1430) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Escape period in regex (fixes #1428) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Revert \"Fix: '.md' to '.html' with anchors (fixes #1415)\" (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.9.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add operator-assignment rule (fixes #1420) (Brandon Mills)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.9.2 - November 1, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.9.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: '.md' to '.html' with anchors (fixes #1415) (Nate-Wilkins)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow line breaks in key-spacing rule (fixes #1407) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: add coveralls integration (fixes #1411) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: add severity flag for ignored file warning (fixes #1401) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Keep sinon at ~1.10.3 (fixes #1406) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: ! negates .eslintignore patterns (fixes #1093) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: let fs.stat throw if a file does not exist (fixes #1296) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: check switch statements in space-before-blocks (fixes #1397) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: fix rule name in example configuration (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: disable colors during test run (fixes #1395) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: add isPathIgnored method to CLIEngine (fixes #1392) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: changing eslint to ESLint and add missing backtick (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Documents the functionality to load a custom formatter from a file (Adam Baldwin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.9.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Option type for mixed tabs and spaces (fixes #1374) (Max Nordlund)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Nested occurrences of no-else-return now show multiple reports (fixes #1369) (Jordan Hawker)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.9.1 - October 25, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.9.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: fix link on governance model (azu)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: plugins without rulesConfig causes crash (fixes #1388) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.9.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.9.0 - October 24, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.9.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Allow reading from STDIN (fixes #368) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: add --quiet option (fixes #905) (Mathias Schreck)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add support for plugin default configuration (fixes #1358) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make sure shebang comment node is removed (fixes #1352) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Adding in rule for irregular whitespace checking. (fixes #1024) (Jonathan Kingston)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-in-parens should not throw for multiline statements (fixes #1351) (Jary)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Explain global vs. local plugins (fixes #1238) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add docs on Node.js API (fixes #1247) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add recommended keywords for plugins (fixes #1248) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add CLIEngine#getConfigForFile (fixes #1309) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: turn on comma-style for project (fixes #1316) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure messages are sorted by line (fixes #1343) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Added arraysInObjects and objectsInObjects options to space-in-brackets rule (fixes #1265, fixes #1302) (vegetableman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Removed comma spacing check from space-infix-ops (fixes #1361) (vegetableman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: addressed linting errors (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add Contributor Model (fixes #1341) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Add reference to CLA (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: add version numbers to docs (fixes #1170) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-fallthrough incorrectly flagged falls through annotations (fixes #1353) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: separate site publishing form generation (fixes #1356) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add key-spacing rule (fixes #1280) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: add spaced-line-comment rule (fixes #1345) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: added more Related Rules sections (fixes #1347) (Delapouite)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: resolve linting issue in (fixes #1339) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: add space-before-blocks rule (fixes #1277) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Remove moot integration plugins (Sindre Sorhus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: add rule for multiple empty lines (fixes #1254) (Greg Cochard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-shadow rule should consider function expressions (fixes #1322) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: remove globals present only in Jasmine plugins (fixes #1326) (Michał Gołębiowski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: added no-multi-spaces rule (fixes #630) (vegetableman)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Added comma-spacing rule (Fixes #628, Fixes #1319) (vegetableman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: add rule for padded blocks (fixes #1278) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: fix eqeqeq isNullCheck comment (Denis Sokolov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-comma-dangle violation in unit test and Makefile.js/lint not checking return codes (fixes #1306) (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: allow comma-last with object properties having line breaks (fixes #1314) (vegetableman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Added comma-style rule (fixes #1282) (vegetableman)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: add space after function keyword check (fixes #1276) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add missing environments and fix sorting/grouping of rules (fixes #1307, fixes #1308) (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix sorting of rules within each section (David Anson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Correct a few misspelled words (David Anson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update multiple pages to fix rendering of fenced code blocks (David Anson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Added no-process-env rule (fixes #657) (vegetableman)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: add rule ensuring #1258 is fixed by recent rewrite (fixes #1258) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: split propertyName from singleValue in space-in-brackets (fixes #1253) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Update: add "as-needed" option to quote-props rule (fixes #1279) (Michael Ficarra)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: fixed broken link and changed warning level to error level (vegetableman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Docs: Added "the native web" to the list of companies that use ESLint. (Golo Roden)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add BountySource badge to README (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.8.2 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.8.2 - September 20, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.8.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Updated contribution guidelines to add accepted/bounty issues descriptions (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Update README with links and FAQs (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: add finally to space-after-keywords documentation (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: add ignoreCase option to sort-vars (fixes #1272) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: fix typo (Barry Handelman)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix broken Markdown on configuration page (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix reference to wrong rule name (Harry Wolff)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: Most dev dependencies (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Upgrade: shelljs to 0.3.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Upgrade: doctrine to 0.5.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Upgrade: esprima to 1.2.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: eslint-tester to latest (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Load .eslintrc in directory with $HOME as an ancestor (fixes #1266) (Beau Gunderson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: load .eslintrc from HOME (fixes #1262) (Beau Gunderson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add sharable rule settings (fixes #1233) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: upgrade outdated dependencies (fixes #1251) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: fix typo in no-ex-assign documentation (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: add intellij plugin to integrations (ido)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Changing NPM to npm (Peter deHaan)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: strict should check function expressions (fixes #1244) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: fix vars-on-top documentation (fixes #1234) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.8.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fixed a typo in brace-style.md (Anton Antonov)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.8.1 - September 9, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.8.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure exit code is 1 when there's a syntax error (fixes #1239) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: fix up vars-on-top documentation (fixes #1234) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: vars-on-top directive support (fixes #1235) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Avoid mutating node.range in max-len (fixes #1224) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Typo, add missing quotation mark (Ádám Lippai)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: space-in-brackets to allow exceptions (fixes #1142) (Brandyn Bennett)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.8.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.8.0 - September 5, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.8.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Perf-related revert "Fix: Speed up tokens API (refs #1212)" (Nicholas C. Zakas)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-fallthrough: continue affects control flow, too (fixes #1220) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: rewrite no-unused-vars rule (refs #1212) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Error when there's a \\r in .eslintrc (#1172) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added rule disallowing reserved words being used as keys (fixes #1144) (Emil Bay)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: rewrite no-spaced-func rule (refs #1212) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Speed up getScope() (refs #1212) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-extra-strict behavior for named function expressions (fixes #1209) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add Date.UTC to allowed capitalized functions (David Brockman Smoliansky)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New:  Adding 'vars-on-top' rule (fixes #1148) (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Speed up tokens API (refs #1212) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: document plugin usage (fixes #1117) (Mathias Schreck)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: accept plugins from cli (fixes #1113) (Mathias Schreck)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: fix some typos. (Mathias Schreck)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Load plugins from configs (fixes #1115). (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-unused-expressions better directive detection (fixes #1195) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-unused-expressions directive support (fixes #1185) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add 'allowSingleLine' option to brace-style (fixes #1089) (John Gozde)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Spell checking and one extra closing curly in code example (Juga Paazmaya)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: mergeConfigs ensures the plugins property exists (fixes #1191). (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Declare ES6 collections (Map, Set, WeakMap, WeakSet) as built-in globals (fixes #1189) (Michał Gołębiowski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Adding 'plugin' CLI option (fixes #1112) (Greg)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Correct a typo in the error message in tests (Michał Gołębiowski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add no-extra-bind rule to flag unnecessary bind calls (fixes #982) (Bence Dányi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Useless bind call in cli-engine (fixes #1181) (Bence Dányi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Updates "),
          _c("code", [_vm._v("amd")]),
          _vm._v(" description (fixes #1175) (James Whitney)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Adds support for the "),
          _c("code", [_vm._v("jasmine")]),
          _vm._v(" env (fixes #1176) (James Whitney)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: for-in support to no-empty-label rule (fixes #1161) (Marc Harter)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("docs: Update link (Mathias Bynens)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: crash when loading empty eslintrc file (fixes #1164) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-unused-var should respect compound assignments (fixes #1166) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: ES3 "),
          _c("code", [_vm._v("ReservedWord")]),
          _vm._v("s (fixes #1151) Adds ES3 "),
          _c("code", [_vm._v("ReservedWord")]),
          _vm._v("s to the list of keywords in the "),
          _c("code", [_vm._v("dot-notation")]),
          _vm._v(" rule (fixes #1151) (Emil Bay)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Update comment parser to read rule slashes (fixes #1116) (Jary)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: add no-void rule (fixes #1017). (Mike Sidorov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Add rules.import() (fixes #1114) (Mathias Schreck)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Make mergeConfigs() merge plugin entries (fixes #1111) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Breaking: Change no-global-strict to global-strict and add "always" option (fixes #989) (Brandon Mills)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-unreachable should check top-level statements (fixes #1138) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Speed up no-unreachable (fixes #1135) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: advanced handle-callback-err configuration (fixes #1124) (Mathias Schreck)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Expose CLIEngine (fixes #1083) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add link to new Atom linter (fixes #1125) (Gil Pedersen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-after-keywords checks finally of TryStatement (fixes #1122) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: space-after-keywords checks while of DoWhileStatement (fixes #1120) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix: space-after-keywords w/ "never" should allow else-if (fixes #1118) (Michael Ficarra)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: dot-notation rule flags non-keyword reserved words (fixes #1102) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Use xml-escape instead of inline helper (Ref #848) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Added comments support to .eslintignore (fixes #1084) (Vitaly Puzrin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: enabled 'no-trailing-spaces' rule by default (fixes #1051) (Vitaly Puzrin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Breaking: Ignore children of all patterns by adding "/**" (Fixes #1069) (jrajav)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: skip dot files and ignored dirs on traverse (fixes #1077, related to #814) (Vitaly Puzrin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Added Gruntjs plugin on integrations page (Gyandeep Singh)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: don't break node offsets if hasbang present (fixes #1078) (Vitaly Puzrin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Exclude readme/index from rules Resources generation (Fixes #1072) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Change eol-last examples to "),
          _c("code", [_vm._v("<pre>")]),
          _vm._v(" (Fixes #1068) (jrajav)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.7.4 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("New: space-in-parens rule (Closes #627) (jrajav)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.7.4 - July 10, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.7.4 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Fix 'lintinging' typo and ref links (Tom Vincent)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Transform envs option to object in Config (Fixes #1064) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.7.3 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.7.3 - July 9, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.7.3 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Address code review comment for strict rule (refs #1011) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Docs: Update copyright policy (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update documentation for max-len to include description of second option (fixes #1006) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Avoid double warnings for strict rule (fixes #1011) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Check envs for true/false (Fixes #1059) (jrajav)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.7.2 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.7.2 - July 8, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.7.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-mixed-spaces-and-tabs incorrectly flagging multiline comments (fixes #1055) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: new-cap error that throws on non-string member (fixes #1056) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Always make globals an object (Fixes #1049) (jrajav)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.7.1 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.7.1 - July 7, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.7.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add Related Rules sections (Fixes #990) (jrajav)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Check output file isn't dir, fix tests (Fixes #1034) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Updated documentation for several rules (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Updated contributor guide and dev env setup guide (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Implement configuration hierarchy (fixes #963) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: greatly simplify eqeqeq's operator finding logic (fixes #1037) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Add getSourceLines() to core and rule context (fixed #1005) (Jary)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build + Docs: Adding generated resource links to rule docs (Fixes #1021) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ignore unused params for args: 'none' (Fixes #1026) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Point eqeqeq error at operator (Fixes #1029) (jrajav)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: report output to a file (fixes #1027) (Gyandeep Singh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: CLIEngine abstraction for CLI operations; formatters no longer are passed configs (fixes #935) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Allow stdout to drain before exiting (fixes #317) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: add no-undefined rule (fixes #1020) (Michael Ficarra)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Added no-mixed-spaces-and-tabs rule (fixes #1003) (Jary)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Added no-trailing-spaces rule (fixes #995) (Vitaly Puzrin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Factor ignores out of Config (fixes #958) (jrajav)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: rewrite eol-last rule (fixes #1007) (fixes #1008) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: add additional IIFE exception in no-extra-parens (fixes #1004) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Removed reference to brace-style Stroustrup default (fixes #1000) (Caleb Troughton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New: Added eol-last rule (Fixes #996) (Vitaly Puzrin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Put rule severity in messages (Fixes #984); deprecates passing full config to Formatters (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-unused-vars to check only file globals (fixes #975) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Makefile - Check for rule ids in docs titles (Fixes #969) (Delapouite)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: guard-for-in - added missing id in title (Fixes #969) (Delapouite)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Change 'no-yoda' rule to 'yoda' and add \"always\" option (Fixes #959) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Fixes no-unused-vars to check /"),
          _c("em", [_vm._v("globals")]),
          _vm._v("/ (Fixes #955) (jrajav)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: no-eval to also warn on setTimeout and setInterval (fixes #721) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Remove: experimental match() method (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: space-in-brackets now always allows empty object and array literals to have no spaces (fixes #797) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'New: Allow the cli parameter "color" and "no-color" (fixes #954) (Tom Gallacher)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: valid-jsdoc no more warning for multi-level params (Fixes #925) (Delapouite)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Search parent directories for .eslintignore (Fixes #933) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Correct order of arguments passed to assert.equal (fixes #945) (Michał Gołębiowski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Write the summary in stylish formatter in yellow if no errors (fixes #906); test coloring of messages (Michał Gołębiowski)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Corrects configs merging into base config (Fixes #838) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Adding check if char is non-alphabetic to new-cap (Fixes #940) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update about page description (fixes #936) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add '/', forgotten in first commit (Fixes #931) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: Rule "),
          _c("code", [_vm._v("new-cap")]),
          _vm._v(
            " checks capitalized functions (fixes #904) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Mention allowed semicolons in \"never\" mode for 'semi' rule (fixes #931) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Mention Yeoman generator in dev setup (fixes #914) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Remove flaky perf test from Travis (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Refactor .eslintignore functionality (refs #928, fixes #901, fixes #837, fixes #853) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.6.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: Remove JSON support for .eslintignore (fixes #883) (icebox)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.6.2 - May 23, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.6.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Adding per-environment rule configs to docs and doc validation (Fixes #918) (jrajav)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Updated contribution guidelines (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update description of eqeqeq to mention special cases (fixes #924) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var CatchClause handling (fixes #922) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: block-scoped-var respects decls in for and for-in (fixes #919) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Update: Implement eqeqeq option "allow-null" (fixes #910) (Michał Gołębiowski)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: new-cap should allow non-alpha characters (fixes #897) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Refactor ESLintTester to fix dependency hell (fixes #602) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Merge configs with ancestors (Fixes #820) (jrajav)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-fallthrough should respect block statements in case statements (fixes #893) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Fix layout issue in configuration docs (fixes #889) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Enable default-case rule (fixes #881) (icebox)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Enable space-after-keywords (fixes #884) (icebox)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix api double emit on comment nodes (fixes #876) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.6.1 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.6.1 - May 17, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.6.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Optionator to 0.4.0 (fixes #885) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.6.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.6.0 - May 17, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.6.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Remove -r alias for --rule (fixes #882) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update dev setup, contributing, default-case descriptions (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: valid-jsdoc now allows you to optionally turn off parameter description checks (fixes #822) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: brace-style now disallows block statements where curlies are on the same line (fixes #758) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add linting Makefile.js (fixes #870) (icebox)")]),
        _vm._v(" "),
        _c("li", [_vm._v("add rule flag, closes #692 (George Zahariev)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add check between rules doc and index (fixes #865) (icebox)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add Build Next mention in integrations README. (icebox)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "document new IIFE exception for no-extra parens added as part of #655 (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("(fixes #622) Add rule ID on documentation pages (Delapouite)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #655: add IIFE exception to no-extra-parens (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v('add new rule "no-new-require" (Wil Moore III)')]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "exit with non-zero status when tests fail (fixes #858) (Márton Salomváry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "removed unicode zero width space character from messages (fixes #857) (Márton Salomváry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change: --rulesdir now can be specified multiple times (fixes #830) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Node 0.8 no longer supported (fixes #734) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Add typed arrays into builtin environment globals (fixes #846) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Add prototype methods to global scope (fixes #700) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: no-restricted-modules (fixes #791) (Christian)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: Esprima to 1.2 (fixes #842) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: reporting level 2 is an error (fixes #843) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Esprima to 1.2, switch to using Esprima comment attachment (fixes #730) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Semi rule incorrectly flagging extra semicolon (fixes #840) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Update Travis to only test Node 0.10 (refs #734) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('Add "nofunc" option (fixes #829) (Conrad Zimmerman)')
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: no-inner-declarations (fixes #587) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule 'block-scoped-var': correct scope for functions, arguments (fixes #832) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: default-case (fixes #787) (Aliaksei Shytkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Ignored files are excluded unless --force is passed on the CLI (Nick Fisher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixes a typo and a broken link in the documentation (Nick Fisher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Replaces .some() with .indexOf() where appropriate (Nick Fisher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix correct config merge for array values (fixes #819) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Remove warning about ESLint being in Alpha (Nick Fisher)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adds "),
          _c("code", [_vm._v("space-after-keywords")]),
          _vm._v(" rule (fixes #807) (Nick Fisher)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-lonely-if (fixes #790) (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add ignore comments in file (fixes #305) (Aliaksei Shytkin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.5.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change: no-unused-vars default to 'all' (fixes #760) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.5.1 - April 17, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.5.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix general config not to be modified by comment config in files (fixes #806) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("SVG badges (Ryuichi Okumura)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #804: clean up implementation of #803 (which fixed #781) (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Fix perf test to take median of three runs (fixes #781) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: --reset will now properly ignore default rules in environments.json (fixes #800) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Updated contributor guidelines (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added Mocha global variables for TDD style. Fixes #793. (Golo Roden)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-sequences (fixes #561) (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change .eslintignore to plain text (fixes #761) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change 'no-spaced-func' message (fixes #762) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule 'block-scoped-var' works correct when object inits (fixes #783) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Always build docs site on top of origin/master (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.5.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.5.0 - April 10, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.5.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Bump perf limit so Travis won't fail every time (fixes #780) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add tests to cover 100% of eslint.js (Aliaksei Shytkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make sure no-path-concat doesn't flag non-concat operations (fixes #776) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule 'no-unused-var' in functional expression with identifier (fixes #775) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: valid-typeof (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Add global cli flag (ref #692) (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [_vm._v("update to latest Optionator (George Zahariev)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add options for rule 'no-unused-vars' to check all arguments in functions (fixes #728) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: Cleanup package.json (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New: Experimental support for CSS Auron (fixes #765) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lint tests on build (fixes #764) (Aliaksei Shytkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule block-scoped-var works correct with object properties (fixes #755) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breaking: implement eslint-env and remove jshint/jslint environment comment support (fixes #759) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("readme: npm i -> npm install (Linus Unnebäck)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add env flag to cli options summary (fixes #752) (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Give the perf test a better calculated budget (fixes #749) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("give the "),
          _c("code", [_vm._v("env")]),
          _vm._v(" flag type "),
          _c("code", [_vm._v("[String]")]),
          _vm._v(", improve code (fixes #748) (George Zahariev)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #735: add new, more efficient getTokens interfaces (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add --env cli flag (ref #692) (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixes #740 - Make sure callbacks exist before marking them as 'handled'. (mstuart)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #743: wrap-regex rule warns on regex used in dynamic member access (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "replace tab indents with 4 spaces in lib/rules/handle-callback-err.js (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Adding homepage and bugs links to package.json (Peter deHaan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("JSDoc for rules (Anton Rudeshko)")]),
        _vm._v(" "),
        _c("li", [_vm._v("0.4.5 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.4.5 - March 29, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.4.5 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Add perf check into Travis build to better monitor performance regressions (fixes #732) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make sure semi reports correct location of missing semicolon (fixes #726) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add --no-eslintrc cli flag (ref #717) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix #716 crash with reset flag (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed JSON formatting and highlighting (Anton Rudeshko (Tesla))"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #723: block-scoped-var throws on unnamed function expression (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make stroustrup brace-style closing message make sense (fixes #719) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("no-comma-dangle reports correct line number (Andrey Popp)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrade: Esprima to 1.1.1 and EScope to 1.0.1 (fixes #718) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add reset cli flag (refs #692) (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Relax eqeqeq null check (fixes #669) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.4.4 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: handle-callback-err (fixes #567) (Jamund Ferguson)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.4.4 - March 25, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.4.4 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix no-used-vars to report FunctionExpression params (fixes #697). (Andrey Popp)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #711: eslint reports wrong line number for files with shebang (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix for no-unused-vars and MemberExpression (Andrey Popp)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("added no-warning-comments rule (Alexander Schmidt)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #699: brace-style does not check function expressions (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("rewrite block-scoped-var (Michael Ficarra)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "recommend using hasOwnProperty from Object.prototype in guard-for-in docs (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "change conf/environments.json spacing to be simpler and more consistent (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update API to use context.getFilename() instead of .filename. (Loren Segal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Small changes, JSDoc is clarified (Aliaksei Shytkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Move FileFinder to separate file (Aliaksei Shytkin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Cache if file is not found (Aliaksei Shytkin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Use cache on config files seach (Aliaksei Shytkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added .eslintignore to load from parents folders (fixes #681) (Aliaksei Shytkin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("fix 'node-modules' typo in docs (Fred K. Schott)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade to the latest version of doctrine. (Brian Di Palma)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Document optional filename and default it to "),
          _c("code", [_vm._v("input")]),
          _vm._v(". (Loren Segal)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Compatibility for Node 0.8 (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Makefile.js now uses shelljs-nodecli (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("#681 apply all .eslintignore exclusions (Aliaksei Shytkin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add RuleContext.filename property (for eslint/eslint#468). (Loren Segal)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.4.3 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.4.3 - March 18, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.4.3 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #682: rewrite no-constant-condition rule (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixes #673 allow configuration of @return errors via requireReturn - (fixes #673) (Brian Di Palma)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Tweaking inline code formatting for "if, while, dowhile" (Peter deHaan)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixes #677 getJSDocComment() should not search beyond FunctionExpression or FunctionDeclaration parent nodes. (Brian Di Palma)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Relaxed enforcement of camelcase rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixing issue #675. Incorrect triggering of no-else-return rule. (Brian Di Palma)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added style option for wrap-iife (Mathias Schreck)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Issues with named function expressions in no-unused-vars and no-shadow (fixes #662) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: camelcase rule now doesn't flag function calls (fixes #656) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updating documentation description for: no-space-before-semi rule, changing rules to exempt strings with semicolons and test for that condition. Fixes #629. (Jonathan Kingston)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Adding in rule no-space-before-semi to prevent spaces before semicolons. fixes #629 (Jonathan Kingston)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("show NPM version (Paul Verest)")]),
        _vm._v(" "),
        _c("li", [_vm._v("adapt code formatting (Mathias Schreck)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a TextMate 2 integration to the docs (Nate Silva)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.4.2 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.4.2 - March 3, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.4.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #651: disable no-catch-shadow rule in node environment (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed context.report message parsing (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixe #648: wrap-iife rule should actually check that IIFEs are wrapped (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Added "stroustrup" option for brace-style (Ian Christian Myers)'
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.4.1 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.4.1 - February 27, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.4.1 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Created space-in-brackets rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: Allow valid-jsdoc to specify replacement tags (fixes #637) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Ensure getJSDocComment() works for all function declarations (fixes #638) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added broccoli-eslint to integration docs (Christian)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #634: getters/setters shouldn't trigger no-dupe-keys (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update: semi to also enforce not using semicolons (fixes #618) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "New Rule: no-constant-condition  - removed SwitchStatement discriminant check  - removed AssignmentExpression with right Identifier  - fixed copy paste error  - added DoWhileStatement, ForStatement based on discussion: https://github.com/eslint/eslint/pull/624 (fixes #621) (Christian)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: no-constant-condition (fixes #621) (Christian)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adding mimosa-eslint to Build System list (dbashford)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make sure semi flags return statements without a semicolon (fixes #616) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: stylish formatter blue text -> white text (fixes #607) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: radix rule should warn (not throw error) when parseInt() is called without arguments (fixes #611) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Update README.md (Dmitry)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Adding JSDoc comments for TAP format helper functions (Jonathan Kingston)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updating documentation to include TAP format option (Jonathan Kingston)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixing validation issues to TAP formatter (Jonathan Kingston)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adding TAP formatter and basic tests (Jonathan Kingston)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Updated integrations page (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.4.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.4.0 - February 12, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.4.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change: Switch :after to :exit (fixes #605) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make sure no-unused-vars doesn't get confused by nested functions (fixes #584) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update: .eslintrc to check more things (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make sure JSDoc parser accepts JSDoc3-style optional parameters (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Update documentation with linking instructions for ESLintTester (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: valid-jsdoc (fixes #536) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("#595 improved func-names documentation (Kyle Nunery)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("#595 added more func-names tests (Kyle Nunery)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("#595 fix rule message and add more tests (Kyle Nunery)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "use optionator for option parsing, not optimist (George Zahariev)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Include instructions for working with ESLintTester (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "#595 remove needless 'function Foo() {}' in tests (Kyle Nunery)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("#595 fix whitespace (Kyle Nunery)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("#595 fix markdown for js code blocks (Kyle Nunery)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adding information about Yeomen generator (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("#595 add docs for rule func-names (Kyle Nunery)")]),
        _vm._v(" "),
        _c("li", [_vm._v("#595 add func-names rule (Kyle Nunery)")]),
        _vm._v(" "),
        _c("li", [_vm._v("migrate variables array to map (Brandon Mills)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Perf: Move try-catch out of verify() function to allow V8 optimization (refs #574) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Added instructions for running npm run profile (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "refactor variable name lookup into a separate function (Brandon Mills)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("optimize findVariable() in no-unused-vars (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("move to tests/bench (Chris Dickinson)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("add "),
          _c("code", [_vm._v("npm run profile")]),
          _vm._v(". (Chris Dickinson)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "#586 refactor based on https://github.com/eslint/eslint/pull/590#discussion_r9476367 (Christian)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "#586 added no-unreachable jsdoc, documentation note on hoisting case (Christian)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("#586 add hoisting check to no-unreachable (Christian)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("readme: Remove stray asterisk (Timo Tijhof)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "#580 Remove eslint.getAllComments(), related docs, related tests (Christian)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added test for bug fix #582. Test Passes (Shmueli Englard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added curly braces to if statment (Shmueli Englard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added new test for fix to #582 (fixes 582) (Shmueli Englard)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Bug #582: Added check if node.value isn't a string just exit (Shmueli Englard)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update Rule: implement curly options for single-statement bodies (fixes #511) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: no-extra-boolean-cast (fixes #557) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: no-sparse-arrays (fixes #499) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: no-spaced-func is now an error (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: no-process-exit (fixes #568) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: no-labels (fixes #550) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: no-lone-blocks (fixes #512) (Brandon Mills)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added Emacs/Flycheck integration (Nikolai Prokoschenko)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Build: Add perf test (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: no-cond-assign shouldn't throw error when there's a for loop with an empty conditional (fixes #53) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add docs for no-regex-spaces and all doc errors now break build (closes #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rename: regex-spaces to no-regex-spaces (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add docs for no-underscore-dangle (refs #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add docs for no-undef-init (refs #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add docs for no-return-assign (refs #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Misspelling in no-return-assign message (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add docs for no-new-wrappers (refs #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add docs for no-new-object (refs #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add docs for no-implied-eval (refs #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Updated documentation for developing rules (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Testing: Move ESLintTester to be external dependency (fixes #480) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add list of known integrations (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix #570 (dmp42)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("document no-array-constructor rule (Michael Ficarra)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #500: no-array-constructor should not flag 1-argument construction (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #501: no-array-constructor recognises CallExpression form (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "rename no-new-array rule to no-array-constructor; ref #501 (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Make radix rule warn on invalid second parameter (fixes #563) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Added no-floating-decimal docs (refs #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: no-path-concat (fixes #540) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Add some missing rule docs (refs #562) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: CLI should not output anything when there are no warnings (fixes #558) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: no-yoda (fixes #504) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("New Rule: consistent-return (fixes #481) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rewrite configuration documentation to include information about globals (fixes #555) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Allow YAML configuration files (fixes #491) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.3.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.3.0 - January 20, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.3.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Config: Allow comments in JSON configuration files (fixes #492) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Bug: max-len fix to report correct line number (fixes #552) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Build: Use browserify to create browser-ready ESLint (fixes #119) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Docs: Ensure all rules have entry on top-level rules index page (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Add docs for no-fallthrough rule (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Update README.md (Peter deHaan)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Update README.md (Peter deHaan)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Update package.json (Peter deHaan)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Docs: Added documentation for semi rule (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Build: Reset branch coverage target (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update build system to generate eslint.org during release (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Updated setup doc (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix #525 & #528 (Mangled Deutz)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improve no-negated-in-lhs description (David Bruant)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing typo (David Bruant)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Update no-new.md (Tamas Fodor)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Update no-extra-semi.md (Tamas Fodor)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixing broken links in documentation (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Update about page (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Site generation build step and documentation updates to support it (fixes #478) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change message for brace-style rule (fixes #490) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add question about ES6 support to FAQ (fixes #530) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Set unlimited number of listeners for event emitter (fixes #524) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add support for comment events (fixes #531) Add :after events for comments (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add :after events for comments (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Allow config files to have any name (fixes #486). (Aparajita Fishman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("List available formatters (fixes #533). (Aparajita Fishman)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add support for comment events (fixes #531) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add Stylish formatter and make it default. Fixes #517 (Sindre Sorhus)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix missing code exit (Mangled Deutz)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added unit test for calling Config.getConfig with no arguments. (Aparajita Fishman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Typo (Mangled Deutz)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixed docs typo (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Mark functions as used when any method is called on them (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed: Config.getConfig is called either with a file path or with no args (fixes #520) (Aparajita Fishman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix minor bug in no-empty rule (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("add more info for failure messages (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add ruleId to all formatters output (fixes #472) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Remove unused code (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Correctly handle case with both finally and catch in no-empty (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Update documentation for no-unused-vars (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Ensure that bound function expressions are reported as being used (fixes #510) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Allow empty catch/finally blocks (fixes #514) and update documentation (fixes #513) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated contribution guidelines (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add default setting for no-cond-assign (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add build step to check rule consistency (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "update docs: explicit cli args are exempt from eslintignore exclusions (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #505: no-cond-assign should ignore doubly parenthesised tests (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Renamed unnecessary-strict to no-extra-strict (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed missing documentation links (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add build task to check for missing docs and tests for rules (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Slight reorganization of rule groups (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added one-var and sorted some rules (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated Travis badge for new location (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #494: allow shebangs in processed JS files (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #496: lint ignored files when explicitly specified via the CLI (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("More tests (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Upgrade Istanbul (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #495: holey arrays cause no-comma-dangle rule to throw (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Documentation and minor changes (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adding missing package registration (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Adding support for .eslintignore and .jshintignore (Closes #484) (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #482: brace-style bug with multiline conditions (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Switching Travis to use ESLint (Closes #462) (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.2.0 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.2.0 - January 1, 2014")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.2.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Bump code coverage checks (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Take care of unreachable code in case statement (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated rule messaging and added extra tests (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing eslint errors and unittests (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: max-nested-callbacks (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix fall-through rule with nested switch statements (fixes #430) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixed trailing comma (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added more tests for func-style (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed documentation for func-style (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixed linting error (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule to enforce function style (fixes #460) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule is off by default. Updated documentation (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: sort variables. Closes #457 (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Update architecture.md (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change quotes option to avoid-escapes and update docs (fixes #199) (Brandon Payton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add allow-avoiding-escaped-quotes option to quotes rule (fixes #199) (Brandon Payton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Update no-empty-class.md (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated titles on all rule documentation (fixes #348) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing eslint errors in codebase (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #464: space-infix-ops checks for VariableDeclarator init spacing (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add options to no-unused-vars. Fixes #367 (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "rename escape function to xmlEscape in checkstyle formatter (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "The semi rule now reports correct line number (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "context.report now takes optional location (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #454: escape values for XML in checkstyle formatter (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add color to Mocha test reporting (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule no-nested-ternary (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixing no-unused-var and no-redeclare (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #449: no-mixed-requires throws TypeError when grouping is enabled (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed reported line number for trailing comma error (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Update doc title for quote (Matthew DuVall)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #446: join paths without additional delimiters (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("docs: add documentation for quotes rule (Matthew DuVall)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "minor style changes to lib/rules/space-infix-ops.js as requested in #444 (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'remove "function invalid(){ return D }" from some tests (Michael Ficarra)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #429: require spaces around infix operators; enabled by default (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("simplify fix for #442 (Michael Ficarra)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix broken test, ensure tests get run before a release is pushed (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.1.4 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.1.4 - December 5, 2013")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.1.4 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add release scripts to package.json (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed release error in Makefile (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix JSHint warnings (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Make sure 'default' isn't flagged by no-space-returns-throw rule (fixes #442) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing documentation (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixing disabling rules with invalid comments Closes #435 (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "improve assertion on wrong number of errors (Christoph Neuroth)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #431: no-unused-expressions should not flag statement level void (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fixes #437: fragile no-extend-native rule (Michael Ficarra)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "change space-* rule documentation headers to be more descriptive (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Moved to tabs, added comments, a few more tests (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "split GH-332 rule into space-unary-word-ops and space-return-throw-case (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #346: validate strings passed to the RegExp constructor (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "change some documentation extensions from js to md (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #332: unary word operators must be followed by whitespace (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add some docs (Jamund Ferguson)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("DRYing cli tests and improving code coverage (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #371: add no-shadow-restricted-names rule (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added Support for Object.defineProperty() checking (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #333: add rule to disallow gratuitously parenthesised expressions (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("improve rule test coverage (Michael Ficarra)")]),
        _vm._v(" "),
        _c("li", [_vm._v("No Extend Native (Jamund Ferguson)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "change getTokens 2nd/3rd arguments to count tokens, not characters (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #416: no-fallthrough flagging last case + reporting wrong line num (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #415: fix unnecessary-strict rule false positives (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add missing dependency (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update docs related to running unit tests (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add JSHint as missing dependency (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Switch to using ShellJS makefile (fixes #418) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated documentation to reflect test changes (refs #417) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change to eslintTester.addRuleTest (fixes #417) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix false positives for no-script-url (fixes #400) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix lint warning (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixing ESLint warnings, introducing Makefile.js (not yet wired in) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #384: include builtin module list to avoid repl dependency (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.1.3 (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.1.3 - November 25, 2013")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.1.3 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Updated changelog (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Vows is gone. Mocha is now default (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #412: remove last remaining false positives in no-spaced-func (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #407: no-spaced-func rule flagging non-argument-list spaced parens (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add no-extra-semi to configuration (fixes #386) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Converting formatter tests and core (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Don't output anything when there are no errors in compact formatter (fixes #408) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Removing Node 0.11 test - it fails all the time (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Completing conversion of rule's tests to mocha (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "added mocha conversion tests for strict, quote-props and one-var; enhanced one of the invalid one-var tests that was expecting two messages (Michael Paulukonis)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.1.2 - November 23, 2013")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.1.2 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "added mocha tests for radix and quotes; fixed some of the internals on quotes from vows annotations (Michael Paulukonis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "added tests for regex-spaces, strict, unnecessary-strict; fixed some types in overview/author notes in other tests. (Michael Paulukonis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Converting unittests to mocha (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "mocha conversions of tests for 'use-isnan' and 'wrap-iife' (Michael Paulukonis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "added mocha tests semi.js and wrap-regex.js (Michael Paulukonis)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Converting more tests to mocha (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Update CONTRIBUTING.md (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Cleaning up eslintTester (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("DRYing unittests and converting them to mocha (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Reformatted Gruntfile (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add tests to config load order: base, env, user. (icebox)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing indent in gruntfile (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Removing jake, adding Grunt, Travis now runs grunt (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add rules per environments to config. (icebox)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add globals property to the environments. (icebox)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix error about IIFE if the function is in a new (Marsup)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix a broken link in the docs (Brian J Brennan)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add test coverage for additional cases, fix open paren at beginning of expr (Matthew DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing no-undef for eval use case (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fixes #372: disallow negated left operand in "),
          _c("code", [_vm._v("in")]),
          _vm._v(" operator (Michael Ficarra)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixing no-self-compare rule to check for operator (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bug: open parens in args causes no-spaced-func to trigger (Matthew DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #369: restrict UnaryExpressions to delete in no-unused-expressions (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Make sure delete operator isn't flagged as unused expression (fixes #364) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Don't flag ++ or -- as unused expressions (fixes #366) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Ensure that 'use strict' isn't flagged as an unused expression (fixes #361) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Increase test coverage for strict-related rules (refs #361) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Up code coverage numbers (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixes error in new-cap rule when 'new' is used without a constructor (fixes #360) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("added files array in package json (Christian)")]),
        _vm._v(" "),
        _c("li", [_vm._v("removed unused jshint dependency (Christian)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add test coverage for new Foo constructor usage (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Pull code coverage up by removing unused method (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "recognise CallExpression variant of RegExp ctor in no-control-regex rule (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Merge smart-eqeqeq into eqeqeq (Matt DuVall)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Catch additional cases for a.b, new F, iife (Matt DuVall)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.2.0-dev (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Version 0.1.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "rule: no-spaced-func disallow spaces between function identifier and application (Matt DuVall)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.1.1 - November 09, 2013")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Ensure mergeConfigs() doesn't thrown an error when keys are missing in base config (fixes #358) (Nicholas C. Zakas)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.1.0 - November 03, 2013")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Version 0.1.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Updated Readme for v0.1.0 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Bump code coverage verification to 95% across the board (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixed broken links (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added information about runtime rules (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added documentation about configuration files (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added description of -v option (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated architecture documentation (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix bug in no-control-regex (fixes #347) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix link to architecture doc in readme (azu)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule: No control characters in regular expressions (fixes #338) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add escaping = test (Matt DuVall)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Add docs for rule (Matt DuVall)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "rule: no-div-regex for catching ambiguous division operators in regexes (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change context-var to block-scoped-var (Matt DuVall)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Implement config.globals (Oleg Grenrus)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Add 'config-declared global' test (Oleg Grenrus)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adding ability to separate rules with comma (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added rule for missing 'use strict' (fixes #321) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixing unittests and finishing code (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Disabling/enabling rules through comments (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rename rule to context-var and add documentation (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added link to no-global-strict doc in readme (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add try-catch scoping with tests (Matt DuVall)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix linting error (Matt DuVall)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Store FunctionDeclarations in scope as they can be used as literals (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix to use getTokens and add test for MemberExpression usage (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "rule: block-scope-var to check for variables declared in block-scope (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("no-unused-expressions rule: add test and doc mention for "),
          _c("code", [_vm._v("a && b()")]),
          _vm._v(" (Michael Ficarra)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "rule: wrap-regex for parens around regular expression literals (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #308: implement no-unused-expressions rule; ref. jshint rule W030 (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated change log script to filter out merge messages (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Updated changelog (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("0.1.0-dev (Nicholas C. Zakas)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.0.9 - October 5, 2013")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Version 0.0.9 release (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added rule for no global strict mode (fixes #322) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change default on to be errors instead of warnings (fixes #326) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed bug where JSHint was using the wrong file in lint task (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated docs for no-unused vars rule. (Andrew de Andrade)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Removed console.log in tests. (Andrew de Andrade)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added link to roadmap and JSHint feature parity list. (Andrew de Andrade)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed warning when unused var declared as param in FunctionExpression/Declaration can be ignored because later param is used (Andrew de Andrade)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rename test for smartereqeqeq.js to smarter-eqeqeq.js (Andrew de Andrade)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Keep test filename inline with rule name (Andrew de Andrade)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added further instructions for multiline test cases. (Andrew de Andrade)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Protecting private method (Seth McLaughlin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updating look up algorithm for local config files (Seth McLaughlin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing ESLint errors (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented local default config file (Seth McLaughlin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgrading escope version and fixing related bugs (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixing assignment during initialization issue (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "add plain-English regexp description to no-empty-class rule (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #289: no-empty-class flags regexps with... flags (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-catch-shadow (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update no-empty for compatibility with esprima@1.0.4 (fixes #290) (Mark Macdonald)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixing bug with _ in MemberExpression (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-func-assign (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix false warning from no-undef rule (fixes #283) (Mark Macdonald)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Adding eslint to jake (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule no redeclare (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing no use before define issues (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-octal-escape (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix for "),
          _c("code", [_vm._v("no-proto")]),
          _vm._v(" and "),
          _c("code", [_vm._v("no-iterator")]),
          _vm._v(" false positive (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-iterator (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixing type in guard-for-in documentation (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule No use before define (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for the "),
          _c("code", [_vm._v("no-new")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for the "),
          _c("code", [_vm._v("no-eval")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for the "),
          _c("code", [_vm._v("no-caller")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for the "),
          _c("code", [_vm._v("no-bitwise")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("simplify no-empty-class rule (Michael Ficarra)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix "),
          _c("code", [_vm._v("no-empty-class")]),
          _vm._v(" false negatives (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for the "),
          _c("code", [_vm._v("no-alert")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for the "),
          _c("code", [_vm._v("new-parens")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for the "),
          _c("code", [_vm._v("max-params")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for "),
          _c("code", [_vm._v("max-len")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Created link from rules README.md to no-plusplus.md documentation (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for "),
          _c("code", [_vm._v("guard-for-in")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for "),
          _c("code", [_vm._v("dot-notation")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for "),
          _c("code", [_vm._v("curly")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("camelcase")]),
          _vm._v(" rule documentation (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added documentation for "),
          _c("code", [_vm._v("complexity")]),
          _vm._v(" rule (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("no-dangle")]),
          _vm._v(" documentation to "),
          _c("code", [_vm._v("no-comma-dangle")]),
          _vm._v(" (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-empty-class (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Increased test coverage for max-depth (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Increased test coverage for no-shadow (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Increased test coverage on no-mixed-requires (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added docs for eqeqeq and no-with (fixes #262) (Raphael Pigulla)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Create camelcase.md (Micah Eschbacher)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix issues with function in no-unused-vars (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: No shadow (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #252: semi rule errors on VariableDeclarations in ForInStatements (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("rule: max-len to lint maximum length of a line (Matt DuVall)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixes #249 (Raphael Pigulla)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of https://github.com/beardtwizzle/eslint (Jonathan Mahoney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Re-add lines that were accidentally deleted from config (Jonathan Mahoney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add support for pre-defined environment globals (re: #228) (Jonathan Mahoney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-else-return (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Re-add lines that were accidentally deleted from config (Jonathan Mahoney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add support for pre-defined environment globals (re: #228) (Jonathan Mahoney)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix no-unused-vars to report correct line numbers (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no proto (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: No Script URL (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: max-depth (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: Error severity for rules with options. (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: No wrap func (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bug: Fixes semi rule for VariableDeclaration in ForStatement (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Individual perf tests for rules (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix loading rules from a rules directory (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule no-mixed-requires (fixes #221) (Raphael Pigulla)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "bug: Add ForStatement for no-cond-assign check (Matthew DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "JSLint XML formatter now escapes special characters in the evidence and reason attributes. (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Formatter: JSLint XML (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Refactored "),
          _c("code", [_vm._v("max-statements")]),
          _vm._v(" rule. (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix tests broken due to new rule message text (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' into match-jshint-messages (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Refactored "),
          _c("code", [_vm._v("one-var")]),
          _vm._v(" rule. (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "split eslint.define into eslint.defineRule and eslint.defineRules (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed unnecessary rules.js test. (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: one-var (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: No unused variables (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "expose interface for defining new rules at runtime without fs access (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("disallow 00 in no-octal rule (Michael Ficarra)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Increased test coverage for "),
          _c("code", [_vm._v("lib/cli.js")]),
          _vm._v(". (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Increased test coverage for "),
          _c("code", [_vm._v("lib/rules.js")]),
          _vm._v(" (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Increased test coverage for jUnit formatter. (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "scripts/bundle: output bundle+map to /build directory (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "add test for 0X... hex literals in no-octal tests (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "fixes #200: no-octals should not see leading-0 floats as violations (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "add back tests for loading rules from a directory (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "add back in ability to load rules from a directory (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Increased test coverage for "),
          _c("code", [_vm._v("complexity")]),
          _vm._v(" rule. (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Increased test coverage for "),
          _c("code", [_vm._v("max-params")]),
          _vm._v(" rule. (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "also output source map when generating bundle (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: unnecessary-strict (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Improve performance of getTokens (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Performance jake task (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "don't force explicit listing of rules; generate listing for bundle (Michael Ficarra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-dupe-keys (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fixes #145: create a browser bundle (Michael Ficarra)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing no-caller bug (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Check for use of underscore library as an exception for var declarations (Matthew DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of https://github.com/nzakas/eslint into no-underscore-dangle (Matthew DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing spelling (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-empty-label (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add builtin globals to the global scope (fixes #185) (Mark Macdonald)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-loop-func (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of https://github.com/nzakas/eslint into no-underscore-dangle (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Use proper node declarations and "),
          _c("strong", [_vm._v("proto")]),
          _vm._v(" exception (Matt DuVall)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updating no-undef patch (see pull request #164) - Simplify parseBoolean() - Make knowledge of"
          ),
          _c("code", [_vm._v("/*jshint*/")]),
          _vm._v(" and "),
          _c("code", [_vm._v("/*global */")]),
          _vm._v(
            " internal to eslint object - Put user-declared globals in Program scope (Mark Macdonald)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-eq-null (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [_vm._v("fixed broken merge (Raphael Pigulla)")]),
        _vm._v(" "),
        _c("li", [_vm._v("fixes #143 (Raphael Pigulla)")]),
        _vm._v(" "),
        _c("li", [_vm._v("added consistent-this rule (Raphael Pigulla)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: no-sync to encourage async usage (Matt DuVall)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update eslint.json with no-underscore-dangle rule (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule: no-underscore-dangle for func/var declarations (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Warn on finding the bitwise NOT operator (James Allardice)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updating no-undef patch (see pull request #164) 3. Move parsing of "
          ),
          _c("code", [_vm._v("/*global */")]),
          _vm._v(" and "),
          _c("code", [_vm._v("/*jshint */")]),
          _vm._v(" to eslint.js (Mark Macdonald)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Warn on finding a bitwise shift operator (fixes #170) (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix broken test (James Allardice)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add support for the do-while statement to the curly rule (closes #167) (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removing nasty leading underscores (Patrick Brosset)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added tests and test cases for a few files (Patrick Brosset)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("CLI: -f now accepts a file path (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updating no-undef patch (see pull request #164) 1. Move predefined globals to "
          ),
          _c("code", [_vm._v("conf/environments.json")]),
          _vm._v(" 2. Move mixin() to "),
          _c("code", [_vm._v("lib/util.js")]),
          _vm._v(" (Mark Macdonald)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Match messages to JS[LH]int where appropriate, and ensure consistent message formatting (closes #163) (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add support for the do-while statement to the curly rule (closes #167) (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removing nasty leading underscores (Patrick Brosset)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added tests and test cases for a few files (Patrick Brosset)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of github.com:nzakas/jscheck (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added acceptance criteria for rules to docs (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add no-undef (fixes #6) (Mark Macdonald)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing no-self-compare (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: No multiline strings (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "CLI refactor to remove process.exit(), file not found now a regular error message, updated formatters to handle this case (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-self-compare (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule: No unnecessary semicolons (fixes #158) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed error in no-ex-assign when return statement as found in catch clause (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rename no-exc-assign to no-ex-assign and add to config (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed count-spaces to regex-spaces (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Documentation updates (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Put all rules into strict mode and update docs accordingly (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of github.com:nzakas/jscheck (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Ensure getScope() works properly when called from Program node (fixes #148) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: wrap-iife (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("add additional test for no-cond-assign rule (Stephen Murray)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of github.com:nzakas/jscheck (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Experimental support for Jake as a build system (fixes #151) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("fixes #152 (Stephen Murray)")]),
        _vm._v(" "),
        _c("li", [_vm._v("add docs for no-exc-assign (Stephen Murray)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of https://github.com/nzakas/eslint into no-new-object-array-literals (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of https://github.com/nzakas/eslint into count-spaces (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added a test for getting global scope from Program node (refs #148) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add positive test case for "),
          _c("code", [_vm._v("object.Array")]),
          _vm._v(" (Matthew DuVall)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Only support space characters for repetitions (Matthew DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fix line length per code conventions (Stephen Murray)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("fix indentation per code conventions (Stephen Murray)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("fixes #149 (Stephen Murray)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-ternary (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Check that the return statement has an argument before checking its type (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule: count-spaces for multiple spaces in regular expressions (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Update eslint.json configuration file for literal rules (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Created no-label-var rule. (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: no-new-array and no-new-object (Matt DuVall)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added ability to retrieve scope using escope. (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Corrected unused arguments (Patrick Brosset)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Reporting function complexity on function:after and using array push/pop to handle nesting (Patrick Brosset)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixing style issues discovered while npm testing (Patrick Brosset)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "First draft proposal for a cyclomatic complexity ESLint rule (Patrick Brosset)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Corrected file extension on no-plusplus rule documentation. (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Documentation for no-delete-var rule. Closes #129 (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: max-statements (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Better documentation for the "),
          _c("code", [_vm._v("no-plusplus")]),
          _vm._v(" rule. (Ian Christian Myers)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no-plusplus (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: no assignment in return statement (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Updating max-params rule name (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: Function has too many parameters (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Removing merge originals (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rebasing on master (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: Variables should not be deleted (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixes incorrect reporting of missing semicolon (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rebase against master branch (Mathias Bynens)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule to warn on use of Math and JSON as functions (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Formatter: Checkstyle (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [_vm._v("docs: Clean up structure (Mathias Bynens)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Merging no-native-reassign and no-redefine (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no native reassignment (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("0.0.8-dev (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("v0.0.7 released (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Updated Tests, etc. (Jamund Ferguson)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Added jUnit Support (Fixes #16) (Jamund Ferguson)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.0.7 - July 22, 2013")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.0.7 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add code coverage checks to npm test and update rule tests to have better coverage (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed CLI output on serial programatic executions (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Removes line length from code style convention docs (Josh Perez)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adds escapeRegExp and fixes documentation (Josh Perez)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add quotes rule and test coverage for configuration options (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Adds templating for lint messages and refactors rules to use it (Josh Perez)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixes lint rules for unchecked test file (Josh Perez)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changes dotnotation rule to match JSHint style (Josh Perez)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change configInfo to options and add test coverage (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of https://github.com/nzakas/eslint into optional-args-for-rule (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Adds dot notation lint rule (Josh Perez)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Strip trailing underscores in camelcase rule - Fixes #94 (Patrick Brosset)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("add mailing list link (Douglas Campos)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Strip leading underscores in camelcase rule - Fixes #94 (Patrick Brosset)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Created no-dangle rule. (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixed rule name (James Allardice)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Make sure the callee type is Identifier (James Allardice)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add rule for implied eval via setTimeout/Interval (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix rule name in config (James Allardice)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixes #90 -- updates docstrings (Stephen Murray)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixes issue with fs.existsSync on NodeJS 0.6 (Ian Christian Myers)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing -c config option. (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Allow arrays to be passed as multiple args to rule (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Test to make sure empty case with one line break is safe (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: The Function constructor is eval (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Enabled require("eslint") and exposed out CLI. (Ian Christian Myers)'
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Adds test and fix for issue #82 (Mark Macdonald)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of https://github.com/nzakas/eslint into ok (Yusuke Suzuki)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Created brace-style rule. (Ian Christian Myers)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Formatters can now process multiple files at once (Jamund Ferguson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: Do not use 'new' for side effects (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Adds smarter-eqeqeq rule (Josh Perez)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add EditorConfig file for consistent editor/IDE behavior (Jed Hunsaker)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix the positive case for no-unreachable where there is no return statement at all, or if the return is at the end. Those cases should not return any errors. The error condition was not be checked before throwing the rule error. (Joel Feenstra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adds test and fix for no-octal on 0 literal (Mark Macdonald)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Don't report no-empty warnings when a parent is FunctionExpression / FunctionDeclaration (Yusuke Suzuki)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add api.getAncestors (Yusuke Suzuki)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Ensure estraverse version 1.2.0 or later (Yusuke Suzuki)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixes no-alert lint rule for non identifier calls (Josh Perez)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixes exception when init is null (Josh Perez)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixes no-octal check to only check for numbers (Josh Perez)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("0.0.7-dev (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [_vm._v("0.0.6 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Follow the rule naming conventions (James Allardice)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add rule for missing radix argument to parseInt (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Allow return, falls-through comment, and throw for falls-through (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of https://github.com/nzakas/eslint into rule-fall-through (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Globals are not good, declare len (Matt DuVall)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule to add no-fall-through (Matt DuVall)")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("v0.0.6 - July 16, 2013")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("0.0.6 (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Changed semi rule to use tokens instead of source (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Renaming new-parens rule (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Renaming no-new-wrappers rule and adding tests (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add license URL (Nick Schonning)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Remove unused sinon requires (Nick Schonning)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Remove redundant JSHint directives (Nick Schonning)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule: Do not use constructor for wrapper objects (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Test node 0.11 unstable but allow it to fail (Nick Schonning)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rule: Constructor should use parentheses (Ilya Volodin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix reference to "CSS Lint" in Contributing documentation (Brian McKenna)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add git attributes file for line endings (Andy Hu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rename to create an 'index' file in GH web view (Evan Goer)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Avoid accidentally creating a markdown link (Evan Goer)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add headings and correct internal links (Evan Goer)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add wiki files to docs directory (Evan Goer)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add rules for leading/trailing decimal points (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add rule to prevent comparisons with value NaN (James Allardice)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing jshint error (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Rule: no octal literals (Ilya Volodin)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rule: no undefined when initializing variables (Ilya Volodin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Updated CONTRIBUTING.md (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Make sure namespaces are honored in new-cap (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Make sure no-empty also checks for ';;' (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add CLI option to output version (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated contribution guidelines (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixing jshint complaints. (Joel Feenstra)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Converting to a switch statement and declaring variables. (Joel Feenstra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added .jshintrc file (until ESLint can lint itself) and cleaned up JSHint warnings (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Merge branch 'master' of github.com:nzakas/jscheck (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("A bit of cleanup (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add unreachable code detection for switch cases and after continue/break. (Joel Feenstra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add support for detecting unreachable code after a throw or return statement. (Joel Feenstra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix curly brace check when an if statement is the alternate. (Joel Feenstra)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Check for empty switch statements with no cases. (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Added CONTRIBUTING.md (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added rule to check for missing semicolons (fixes #9) (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Verify that file paths exist before reading the file (Matt DuVall)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added guard-for-in rule (fixes #1) (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Run linting with npm test as well (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Removed foo.txt (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated config file with new no-caller ID (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed name of no-arg to no-caller (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Increased test coverage (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Got npm test to work with istanbul, huzzah! (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Moved /config to /conf (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added script to auto-generate changelog (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add "),
          _c("code", [_vm._v("quote-props")]),
          _vm._v(" rule (Mathias Bynens)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Cleaned up relationship between bin/eslint, lib/cli.js, and lib/eslint.js (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add problem count to compact formatter (Nicholas C. Zakas)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix merge conflict (Nicholas C. Zakas)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change reporters to formatters, add format command line option. Also added tests for compact format. (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change reporters to formatters, add format command line option (Nicholas C. Zakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Start development of 0.0.6-dev (Nicholas C. Zakas)")])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}