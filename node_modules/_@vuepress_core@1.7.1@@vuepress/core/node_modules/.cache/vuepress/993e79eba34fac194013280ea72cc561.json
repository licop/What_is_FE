{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/jsdom/Changelog.md?vue&type=template&id=373bb0c2&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/jsdom/Changelog.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "jsdom-changelog" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#jsdom-changelog" } },
          [_vm._v("#")]
        ),
        _vm._v(" jsdom Changelog")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_16-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_16-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 16.4.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Added a not-implemented warning if you try to use the second pseudo-element argument to "
          ),
          _c("code", [_vm._v("getComputedStyle()")]),
          _vm._v(", unless you pass a "),
          _c("code", [_vm._v("::part")]),
          _vm._v(" or "),
          _c("code", [_vm._v("::slotted")]),
          _vm._v(
            " pseudo-element, in which case we throw an error per the spec. (ExE-Boss)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improved the performance of repeated access to "),
          _c("code", [_vm._v("el.tagName")]),
          _vm._v(
            ", which also indirectly improves performance of selector matching and style computation. (eps1lon)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("form.elements")]),
          _vm._v(" to respect the "),
          _c("code", [_vm._v('form=""')]),
          _vm._v(
            " attribute, so that it can contain non-descendant form controls. (ccwebdesign)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("el.focus()")]),
          _vm._v(" to do nothing on disconnected elements. (eps1lon)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("el.focus()")]),
          _vm._v(" to work on SVG elements. (zjffun)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed removing the currently-focused element to move focus to the "
          ),
          _c("code", [_vm._v("<body>")]),
          _vm._v(" element. (eps1lon)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("imgEl.complete")]),
          _vm._v(" to return true for "),
          _c("code", [_vm._v("<img>")]),
          _vm._v(" elements with empty or unset "),
          _c("code", [_vm._v('src=""')]),
          _vm._v(" attributes. (strager)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("imgEl.complete")]),
          _vm._v(" to return true if an error occurs loading the "),
          _c("code", [_vm._v("<img>")]),
          _vm._v(", when canvas is enabled. (strager)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("imgEl.complete")]),
          _vm._v(" to return false if the "),
          _c("code", [_vm._v("<img>")]),
          _vm._v(" element's "),
          _c("code", [_vm._v('src=""')]),
          _vm._v(" attribute is reset. (strager)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("valueMissing")]),
          _vm._v(" validation check for "),
          _c("code", [_vm._v('<input type="radio">')]),
          _vm._v(". (zjffun)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v('translate=""')]),
          _vm._v(" and "),
          _c("code", [_vm._v('draggable=""')]),
          _vm._v(
            " attribute processing to use ASCII case-insensitivity, instead of Unicode case-insensitivity. (zjffun)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_16-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_16-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 16.3.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added firing of "),
          _c("code", [_vm._v("focusin")]),
          _vm._v(" and "),
          _c("code", [_vm._v("focusout")]),
          _vm._v(" when using "),
          _c("code", [_vm._v("el.focus()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("el.blur()")]),
          _vm._v(". (trueadm)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed elements with the "),
          _c("code", [_vm._v('contenteditable=""')]),
          _vm._v(" attribute to be considered as focusable. (jamieliu386)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("window.NodeFilter")]),
          _vm._v(" to be per-"),
          _c("code", [_vm._v("Window")]),
          _vm._v(", instead of shared across all "),
          _c("code", [_vm._v("Window")]),
          _vm._v("s. (ExE-Boss)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed edge-case behavior involving use of objects with "),
          _c("code", [_vm._v("handleEvent")]),
          _vm._v(" properties as event listeners. (ExE-Boss)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed a second failing image load sometimes firing a "),
          _c("code", [_vm._v("load")]),
          _vm._v(" event instead of an "),
          _c("code", [_vm._v("error")]),
          _vm._v(" event, when the "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" package is installed. (strager)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed drawing an empty canvas into another canvas. (zjffun)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_16-2-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_16-2-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 16.2.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("StyleSheetList")]),
          _vm._v(
            " for better spec compliance; notably it no longer inherits from "
          ),
          _c("code", [_vm._v("Array.prototype")]),
          _vm._v(". (ExE-Boss)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("requestAnimationFrame()")]),
          _vm._v(
            " from preventing process exit. This likely regressed in v16.1.0."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("setTimeout()")]),
          _vm._v(
            " to no longer leak the closures passed in to it. This likely regressed in v16.1.0. (AviVahl)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed infinite recursion that could occur when calling "),
          _c("code", [_vm._v("click()")]),
          _vm._v(" on a "),
          _c("code", [_vm._v("<label>")]),
          _vm._v(" element, or one of its descendants.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("getComputedStyle()")]),
          _vm._v(" to consider inline "),
          _c("code", [_vm._v('style=""')]),
          _vm._v(" attributes. (eps1lon)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed several issues with "),
          _c("code", [_vm._v('<input type="number">')]),
          _vm._v("'s "),
          _c("code", [_vm._v("stepUp()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("stepDown()")]),
          _vm._v(
            " functions to be properly decimal-based, instead of floating point-based."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed various issues where updating "),
          _c("code", [_vm._v("selectEl.value")]),
          _vm._v(" would not invalidate properties such as "),
          _c("code", [_vm._v("selectEl.selectedOptions")]),
          _vm._v(". (ExE-Boss)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<input>")]),
          _vm._v("'s "),
          _c("code", [_vm._v("src")]),
          _vm._v(" property, and "),
          _c("code", [_vm._v("<ins>")]),
          _vm._v("/"),
          _c("code", [_vm._v("<del>")]),
          _vm._v("'s "),
          _c("code", [_vm._v("cite")]),
          _vm._v(" property, to properly reflect as URLs.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("window.addEventLister")]),
          _vm._v(", "),
          _c("code", [_vm._v("window.removeEventListener")]),
          _vm._v(", and "),
          _c("code", [_vm._v("window.dispatchEvent")]),
          _vm._v(" to properly be inherited from "),
          _c("code", [_vm._v("EventTarget")]),
          _vm._v(", instead of being distinct functions. (ExE-Boss)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed errors that would occur if attempting to use a DOM object, such as a custom element, as an argument to "
          ),
          _c("code", [_vm._v("addEventListener")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed errors that would occur when closing a window with outstanding requests to "
          ),
          _c("code", [_vm._v("data:")]),
          _vm._v(" URLs.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed sporadic issues with the value of "),
          _c("code", [_vm._v('<input type="month">')]),
          _vm._v(" that could occur in some time zones and for some times.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.implementation.createDocument()")]),
          _vm._v(" to return an "),
          _c("code", [_vm._v("XMLDocument")]),
          _vm._v(", instead of a "),
          _c("code", [_vm._v("Document")]),
          _vm._v(". (ExE-Boss)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed running jsdom in a browser to detect globals more reliably. (ExE-Boss)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_16-2-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_16-2-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 16.2.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("saxes")]),
          _vm._v(", to bring in some BOM-related fixes.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated Acorn-related packages to squelch "),
          _c("code", [_vm._v("npm audit")]),
          _vm._v(" warnings.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_16-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_16-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 16.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Added support for custom elements! Congratulations and thanks to "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/commits?author=pmdartus",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("@pmdartus"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " for making this happen, after ten months of hard work and lots of effort poured into the complex architectural prerequisites in jsdom and supporting packages."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed some issues when trying to use "),
          _c("code", [_vm._v("Attr")]),
          _vm._v(" as a "),
          _c("code", [_vm._v("Node")]),
          _vm._v(", e.g. by checking its "),
          _c("code", [_vm._v("baseURI")]),
          _vm._v(" property or calling "),
          _c("code", [_vm._v("attr.cloneNode()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed a memory leak during parsing that was introduced in v14.0.0."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed edge cases in number/string conversion used for certain element properties that reflected integer attributes."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_16-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_16-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 16.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("console.timeLog()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("Attr")]),
          _vm._v(" to extend "),
          _c("code", [_vm._v("Node")]),
          _vm._v(", to align with specifications. (ExE-Boss)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("<noscript>")]),
          _vm._v(" children to be parsed as nodes, instead of as text, when "),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(" is left as the default of "),
          _c("code", [_vm._v("undefined")]),
          _vm._v(". (ACHP)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgraded "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(" to v2.1.0, which brings along fixes to handling of "),
          _c("code", [_vm._v("rgba()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("hsl()")]),
          _vm._v(" colors. (kraynel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed some selection-related issues when manipulating the value of "
          ),
          _c("code", [_vm._v("<input>")]),
          _vm._v("s and "),
          _c("code", [_vm._v("<textarea>")]),
          _vm._v("s. (Matthew-Goldberg)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed various issues with "),
          _c("code", [_vm._v("setTimeout()")]),
          _vm._v(", "),
          _c("code", [_vm._v("setInterval()")]),
          _vm._v(", and "),
          _c("code", [_vm._v("requestAnimationFrame()")]),
          _vm._v(", particularly around window closing and recursive calls.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_16-0-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_16-0-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 16.0.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed Node v10 and v11 support when "),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(" was set.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the behavior when changing an "),
          _c("code", [_vm._v("<input>")]),
          _vm._v("'s "),
          _c("code", [_vm._v('type=""')]),
          _vm._v(" attribute.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed input validation behavior for "),
          _c("code", [_vm._v('<input type="range">')]),
          _vm._v(" when "),
          _c("code", [_vm._v('max=""')]),
          _vm._v(" is less than "),
          _c("code", [_vm._v('min=""')]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_16-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_16-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 16.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("For this release we'd like to welcome "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/commits?author=pmdartus",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("@pmdartus"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " to the core team. Among other work, he's driven the heroic effort of constructor prototype and reform in jsdom and its dependencies over the last few months, to allow us to move away from shared constructors and prototypes, and set the groundwork for custom elements support ("
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/pull/2548",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("coming soon"), _c("OutboundLink")],
          1
        ),
        _vm._v("!).")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Breaking changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Node v10 is now the minimum supported version.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("The "),
          _c("code", [_vm._v("dom.runVMScript()")]),
          _vm._v(" API has been replaced with the more general "),
          _c("code", [_vm._v("dom.getInternalVMContext()")]),
          _vm._v(" API.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Each jsdom "),
          _c("code", [_vm._v("Window")]),
          _vm._v(
            " now creates new instances of all the web platform globals. That is, our old "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/jsdom/jsdom/blob/35894a6703ed1f4de98942780bd99244ac27f600/README.md#shared-constructors-and-prototypes",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("shared constructor and prototypes"), _c("OutboundLink")],
            1
          ),
          _vm._v(" caveat is no longer in play.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Each jsdom "),
          _c("code", [_vm._v("Window")]),
          _vm._v(
            " now exposes all JavaScript-spec-defined globals uniformly. When "
          ),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(
            " is disabled, it exposes them as aliases of the ones from the outer Node.js environment. Whereas when "
          ),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(
            " is enabled, it exposes fresh copies of each global from the new scripting environment. (Previously, a few typed array classes would always be aliased, and with "
          ),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(" disabled, the other classes would not be exposed at all.)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Other changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("AbstractRange")]),
          _vm._v(", "),
          _c("code", [_vm._v("Range")]),
          _vm._v(", "),
          _c("code", [_vm._v("StaticRange")]),
          _vm._v(", "),
          _c("code", [_vm._v("Selection")]),
          _vm._v(", and "),
          _c("code", [_vm._v("window.getSelection()")]),
          _vm._v(" APIs.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added working constructors for "),
          _c("code", [_vm._v("Comment")]),
          _vm._v(", "),
          _c("code", [_vm._v("Text")]),
          _vm._v(", and "),
          _c("code", [_vm._v("DocumentFragment")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("valueAsDate")]),
          _vm._v(", "),
          _c("code", [_vm._v("valueAsNumber")]),
          _vm._v(", "),
          _c("code", [_vm._v("stepUp()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("stepDown()")]),
          _vm._v(" to "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(" elements. (kraynel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("window.origin")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("document.origin")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<template>")]),
          _vm._v(" to work correctly inside XML documents.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed some bugs which would cause jsdom to choose the wrong character encoding because it was failing to detect "
          ),
          _c("code", [_vm._v("<meta charset>")]),
          _vm._v(" or "),
          _c("code", [_vm._v('<meta http-equiv="charset">')]),
          _vm._v(" elements.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("input.type")]),
          _vm._v(" to default to "),
          _c("code", [_vm._v('"text"')]),
          _vm._v(". (connormeredith)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed incorrect validation errors for "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(" with fractional values for their "),
          _c("code", [_vm._v('step=""')]),
          _vm._v(" attribute. (kontomondo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed incorrect validation errors on readonly "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(" elements.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v('<input type="email" multiple pattern="...">')]),
          _vm._v(" validation.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("fileReader.readAsDataURL()")]),
          _vm._v(" to always base64-encode the result. (ytetsuro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed inserting "),
          _c("code", [_vm._v("<img>")]),
          _vm._v(
            " elements into documents without a browsing context to no longer crash when the "
          ),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" package is installed.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed a memory leak when using "),
          _c("code", [_vm._v("window.setTimeout()")]),
          _vm._v(" or "),
          _c("code", [_vm._v("window.setInterval()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improved the performance of "),
          _c("code", [_vm._v("getComputedStyle()")]),
          _vm._v(". (eps1lon)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_15-2-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_15-2-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 15.2.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("JSDOM.fromURL()")]),
          _vm._v(
            " handling of URLs with hashes in them, to no longer send the hash to the server and append an extra copy of it when constructing the "
          ),
          _c("code", [_vm._v("Document")]),
          _vm._v(". (rchl)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed focusing an already-focused element to correctly do nothing, instead of firing additional "
          ),
          _c("code", [_vm._v("focus")]),
          _vm._v(" events. (eps1lon)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed typo in the not-implemented message for "),
          _c("code", [_vm._v("mediaElement.addTextTrack()")]),
          _vm._v(". (mtsmfm)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgraded "),
          _c("code", [_vm._v("nwsapi")]),
          _vm._v(" minimum version to 2.2.0, which fixes issues with "),
          _c("code", [_vm._v("::-webkit-")]),
          _vm._v(
            " prefixed pseudo-elements and namespaced attribute selectors."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_15-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_15-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 15.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added basic style inheritance in "),
          _c("code", [_vm._v("getComputedStyle()")]),
          _vm._v(" for the "),
          _c("code", [_vm._v("'visibility'")]),
          _vm._v(
            " property. This sets the foundation for further work on inheritance, cascading, and specificity. (eps1lon)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("shadowRoot.activeElement")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("readystatechange")]),
          _vm._v(" events during document loading.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a stub for "),
          _c("code", [_vm._v("form.requestSubmit()")]),
          _vm._v(", to match our existing stub for "),
          _c("code", [_vm._v("form.submit()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("el.tabIndex")]),
          _vm._v("'s default value, when no "),
          _c("code", [_vm._v('tabindex=""')]),
          _vm._v(" attribute was set, to reflect the updated specification.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed the exception thrown by "),
          _c("code", [_vm._v("el.attachShadow()")]),
          _vm._v(
            " on something that's already a shadow host, to reflect the updated specification."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the validation logic for "),
          _c("code", [_vm._v('<input type="range">')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("selectEl.value")]),
          _vm._v(" when no "),
          _c("code", [_vm._v("<option>")]),
          _vm._v(
            " is selected to return the empty string, instead of the value of the first option. (tgohn)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed various correctness issues with "),
          _c("code", [_vm._v("new FormData(formElement)")]),
          _vm._v(". (brendo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed error messages when parsing XML to include the filename, instead of using "
          ),
          _c("code", [_vm._v('"undefined"')]),
          _vm._v(". (papandreou)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed the logic for reflected properties to not be affected by overwriting of "
          ),
          _c("code", [_vm._v("el.getAttributeNS()")]),
          _vm._v(" or "),
          _c("code", [_vm._v("el.setAttributeNS()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Set "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(
            " as an optional ``peerDependency`, which apparently helps with Yarn PnP support."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_15-1-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_15-1-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 15.1.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Moved the "),
          _c("code", [_vm._v("nonce")]),
          _vm._v(" property from "),
          _c("code", [_vm._v("HTMLScriptElement")]),
          _vm._v(" and "),
          _c("code", [_vm._v("HTMLStyleElement")]),
          _vm._v(" to "),
          _c("code", [_vm._v("HTMLElement")]),
          _vm._v(
            ". Note that it is still just a simple reflection of the attribute, and has not been updated for the rest of the changes in "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/html/pull/2373",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("whatwg/html#2373"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("style")]),
          _vm._v(" and "),
          _c("code", [_vm._v("on<event>")]),
          _vm._v(
            " properties to properly track their related attributes for SVG elements. (kbruneel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" merging preflight and response headers. (thiagohirata)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" reserializing "),
          _c("code", [_vm._v("content-type")]),
          _vm._v(" request headers unnecessarily. See "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/mimesniff/issues/84",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("whatwg/mimesniff#84"), _c("OutboundLink")],
            1
          ),
          _vm._v(" for more details. (thiagohirata)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("element.tagName")]),
          _vm._v(
            " to be the ASCII uppercase of the element's qualified name, instead of the Unicode uppercase."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_15-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_15-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 15.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("Headers")]),
          _vm._v(" class from the Fetch standard.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("element.translate")]),
          _vm._v(" getter and setter.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed synchronous "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" on the newly-released Node.js v12.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("form.elements")]),
          _vm._v(" to exclude "),
          _c("code", [_vm._v('<input type="image">')]),
          _vm._v(" elements.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed event path iteration in shadow DOM cases, following spec fixes at "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/dom/pull/686",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("whatwg/dom#686"), _c("OutboundLink")],
            1
          ),
          _vm._v(" and "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/dom/pull/750",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("whatwg/dom#750"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v('pattern=""')]),
          _vm._v(
            " form control validation to apply the given regular expression to the whole string. (kontomondo)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_15-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_15-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 15.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Several potentially-breaking changes, each of them fairly unlikely to actually break anything:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("JSDOM.fromFile()")]),
          _vm._v(" now treats "),
          _c("code", [_vm._v(".xht")]),
          _vm._v(" files as "),
          _c("code", [_vm._v("application/xhtml+xml")]),
          _vm._v(", the same as it does for "),
          _c("code", [_vm._v(".xhtml")]),
          _vm._v(" and "),
          _c("code", [_vm._v(".xml")]),
          _vm._v(". Previously, it would treat them as "),
          _c("code", [_vm._v("text/html")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("If the "),
          _c("code", [_vm._v("JSDOM")]),
          _vm._v(" constructor's "),
          _c("code", [_vm._v("contentType")]),
          _vm._v(" option has a "),
          _c("code", [_vm._v("charset")]),
          _vm._v(
            " parameter, and the first argument to the constructor is a binary data type (e.g. "
          ),
          _c("code", [_vm._v("Buffer")]),
          _vm._v(" or "),
          _c("code", [_vm._v("ArrayBuffer")]),
          _vm._v("), then the "),
          _c("code", [_vm._v("charset")]),
          _vm._v(" will override any sniffed encoding in the same way as a "),
          _c("code", [_vm._v("Content-Type")]),
          _vm._v(" header would in browser scenarios. Previously, the "),
          _c("code", [_vm._v("charset")]),
          _vm._v(" parameter was ignored.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("When using the "),
          _c("code", [_vm._v("Blob")]),
          _vm._v(" or "),
          _c("code", [_vm._v("File")]),
          _vm._v(" constructor with the "),
          _c("code", [_vm._v('endings: "native"')]),
          _vm._v(" option, jsdom will now convert line endings to "),
          _c("code", [_vm._v("\\n")]),
          _vm._v(
            " on all operating systems, for consistency. Previously, on Windows, it would convert line endings to "
          ),
          _c("code", [_vm._v("\\r\\n")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_14-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_14-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 14.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added activation behavior for "),
          _c("code", [_vm._v("<a>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<area>")]),
          _vm._v(" elements whose "),
          _c("code", [_vm._v('href=""')]),
          _vm._v(" points to a "),
          _c("code", [_vm._v("javascript:")]),
          _vm._v(" URL or fragment.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("<datalist>")]),
          _vm._v(" element's "),
          _c("code", [_vm._v("options")]),
          _vm._v(" property.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(" element's "),
          _c("code", [_vm._v("list")]),
          _vm._v(" property.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("PageTransitionEvent")]),
          _vm._v(", and the firing of "),
          _c("code", [_vm._v("pageshow")]),
          _vm._v(" events during loading.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Exposed the "),
          _c("code", [_vm._v("External")]),
          _vm._v(" class as a property of "),
          _c("code", [_vm._v("window")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed HTML fragment parsing (via "),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(" and "),
          _c("code", [_vm._v("outerHTML")]),
          _vm._v(") to be spec-compliant. (pmdartus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed HTML serialization (e.g. via "),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(
            ") breaking after setting certain properties to non-string values."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed how disabling an element would cause its activation behavior to forever be null, even if it were re-enabled."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed all access to attributes to ignore attributes with namespaces, per the spec."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<style>")]),
          _vm._v(
            "s to no longer apply to documents without a browsing context. This includes fixing a crash that would occur with such styles if they had an "
          ),
          _c("code", [_vm._v("@import")]),
          _vm._v(" rule.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<option>")]),
          _vm._v("'s "),
          _c("code", [_vm._v("label")]),
          _vm._v(" and "),
          _c("code", [_vm._v("value")]),
          _vm._v(" properties to return correct values in various edge cases.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("load")]),
          _vm._v(" event during document loading to target the "),
          _c("code", [_vm._v("Document")]),
          _vm._v(", not the "),
          _c("code", [_vm._v("Window")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("pretendToBeVisual")]),
          _vm._v(
            " option to propagate to child subframes, as well as the main "
          ),
          _c("code", [_vm._v("Window")]),
          _vm._v(". (pyrho)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated the minimum "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.npmjs.com/package/nwsapi",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("nwsapi")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " version from v2.1.1 to v2.1.3, bringing along a few fixes in our selector engine."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_14-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_14-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 14.0.0")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Breaking changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("JSDOM.fragment()")]),
          _vm._v(" now creates fragments whose document has no "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://html.spec.whatwg.org/multipage/#concept-document-bc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("browsing context"), _c("OutboundLink")],
            1
          ),
          _vm._v(", i.e. no associated "),
          _c("code", [_vm._v("Window")]),
          _vm._v(". This means the "),
          _c("code", [_vm._v("defaultView")]),
          _vm._v(" property will be null, resources will not load, etc.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("JSDOM.fragment()")]),
          _vm._v(", called with no arguments, now creates a "),
          _c("code", [_vm._v("DocumentFragment")]),
          _vm._v(
            " with no children, instead of with a single child text node whose data was "
          ),
          _c("code", [_vm._v('"undefined"')]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Other changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed a regression in v13.2.0 when calling "),
          _c("code", [_vm._v("element.blur()")]),
          _vm._v(" on a focused element.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed inserting "),
          _c("code", [_vm._v("<link>")]),
          _vm._v(
            " elements into documents with no browsing context to no longer crash if the originating "
          ),
          _c("code", [_vm._v("JSDOM")]),
          _vm._v(" was configured to fetch the resource. Now, per spec, "),
          _c("code", [_vm._v("<link>")]),
          _vm._v(
            " elements only attempt to fetch if they are browsing-context connected."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<template>")]),
          _vm._v(
            " elements to have the correct semantics, of using a separate browsing-context-less document to store its contents. In particular this means resources will not be fetched for elements inside the "
          ),
          _c("code", [_vm._v("<template>")]),
          _vm._v(", as per spec.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_13-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_13-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 13.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added support for "),
          _c("code", [_vm._v("MutationObserver")]),
          _vm._v("s! (pmdartus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added support for XML documents loaded in frames and iframes; previously this would error."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("<progress>")]),
          _vm._v(" element's "),
          _c("code", [_vm._v("value")]),
          _vm._v(", "),
          _c("code", [_vm._v("max")]),
          _vm._v(", and "),
          _c("code", [_vm._v("position")]),
          _vm._v(" properties.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("navigator.plugins")]),
          _vm._v(" and "),
          _c("code", [_vm._v("navigator.mimeTypes")]),
          _vm._v(". (But, they are always empty.)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<summary>")]),
          _vm._v(" elements respond to "),
          _c("code", [_vm._v("click")]),
          _vm._v(" events by toggling their parent "),
          _c("code", [_vm._v("<details>")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<summary>")]),
          _vm._v(" elements to be focusable.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed XML document DOCTYPE parsing to preserve any custom name values."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed XML documents to default to UTF-8, not windows-1252 like HTML documents do."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed all events fired by jsdom to have "),
          _c("code", [_vm._v("isTrusted")]),
          _vm._v(" set to "),
          _c("code", [_vm._v("true")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("DOMParser")]),
          _vm._v("-created documents to have their "),
          _c("code", [_vm._v("readyState")]),
          _vm._v(" set to "),
          _c("code", [_vm._v('"complete"')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed how nested "),
          _c("code", [_vm._v("<fieldset>")]),
          _vm._v("s get disabled.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("getComputedStyle()")]),
          _vm._v(
            " to throw a sensible exception when passed the wrong argument, instead of one that exposes jsdom internals."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgraded our "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/lddubeau/saxes",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("saxes")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " dependency, so that it now correctly errors on XML fragments like "
          ),
          _c("code", [_vm._v('<foo bar:="1"/>')]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_13-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_13-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 13.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("el.insertAdjacentElement()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("el.insertAdjacentText()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the firing of a cancelable "),
          _c("code", [_vm._v("reset")]),
          _vm._v(" event to "),
          _c("code", [_vm._v("form.reset()")]),
          _vm._v(". (epfremmer)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("type")]),
          _vm._v(", "),
          _c("code", [_vm._v("value")]),
          _vm._v(", and "),
          _c("code", [_vm._v("defaultValue")]),
          _vm._v(" properties to "),
          _c("code", [_vm._v("<output>")]),
          _vm._v(" elements, including their form reset behavior. (epfremmer)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("outputEl.htmlFor")]),
          _vm._v(" property.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed the performance of parsing large text nodes, particularly noticeable for large inline "
          ),
          _c("code", [_vm._v("<style>")]),
          _vm._v(" or "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" elements. This regressed in v11.6.0. To learn more, see "),
          _c(
            "a",
            {
              attrs: {
                href: "https://bugs.chromium.org/p/v8/issues/detail?id=6730#c4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("V8 issue #6730"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("style")]),
          _vm._v(" property on "),
          _c("code", [_vm._v("<a>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<area>")]),
          _vm._v(" elements. This regressed in v13.0.0.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("node.isConnected")]),
          _vm._v(
            " to not always return false for nodes inside a shadow tree. (pmdartus)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v('<button type="reset">')]),
          _vm._v(" and "),
          _c("code", [_vm._v('<input type="reset">')]),
          _vm._v(
            " elements to actually perform a form reset when clicked, instead of doing nothing. (epfremmer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("el.setCustomValidity()")]),
          _vm._v(" for "),
          _c("code", [_vm._v("<output>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<fieldset>")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed activation behavior when dispatching bubbling "),
          _c("code", [_vm._v("click")]),
          _vm._v(" events, so that for example calling "),
          _c("code", [_vm._v("el.click()")]),
          _vm._v(
            " on the child of a submit button element will submit the form."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed our XML parsing code to ignore text outside the root element, instead of treating it as an error. (lddubeau)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed XML serialization when elements had an unknown prefix.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed radio button group name matching to be case-sensitive, per "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/whatwg/html/commit/6acdb2122298d2bb7bb839c0a61b4e1f9b0f9bc9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("a spec update"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("focus")]),
          _vm._v("/"),
          _c("code", [_vm._v("blur")]),
          _vm._v(" events to be composed.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("mediaElement.duration")]),
          _vm._v(" to default to "),
          _c("code", [_vm._v("NaN")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("olEl.start")]),
          _vm._v(" to default to "),
          _c("code", [_vm._v("1")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed using "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" against non-existant "),
          _c("code", [_vm._v("file:")]),
          _vm._v(
            " URLs to treat that as a network error, instead of crashing. (pascalbayer) Note that in the future we may completely disable "
          ),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" usage against "),
          _c("code", [_vm._v("file:")]),
          _vm._v(" URLs to follow the browser security model.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.title")]),
          _vm._v(" in SVG documents.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("titleElement.text")]),
          _vm._v(
            " to return the child text content, instead of being the same as "
          ),
          _c("code", [_vm._v("titleElement.innerHTML")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<textarea>")]),
          _vm._v(
            "s to properly account for child CDATA section nodes changing."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the value of "),
          _c("code", [_vm._v("Element.prototype[Symbol.unscopables]")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_13-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_13-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 13.0.0")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Breaking change:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Removed support for v1.x of the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/Automattic/node-canvas",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("canvas")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" package, in favor of v2.x. This also removes support for "),
          _c("code", [_vm._v("canvas-prebuilt")]),
          _vm._v(", since "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" v2.x has a built-in prebuilt version.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Other changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added proper XML serialization, based on the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/w3c-xmlserializer",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("w3c-xmlserializer")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " package. Previously we were just using the HTML serialization, even in XML documents."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("storageEvent.initStorageEvent()")]),
          _vm._v(" method.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added support for the "),
          _c("code", [_vm._v("passive")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("addEventListener()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("relList")]),
          _vm._v(" property to "),
          _c("code", [_vm._v("<a>")]),
          _vm._v(", "),
          _c("code", [_vm._v("<area>")]),
          _vm._v(", and "),
          _c("code", [_vm._v("<link>")]),
          _vm._v(" elements.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed our implementation of the node tree modification constraints (for example the "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("ensure pre-insertion validity"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " algorithm). It is no longer possible to add, remove, or move nodes to create impossible DOM trees. (pmdartus)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_12-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_12-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 12.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Added support for shadow DOM! This includes shadow roots, slots, composed events, and more. (pmdartus)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("element.toggleAttribute()")]),
          _vm._v(" method.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(
            " sometimes sending an empty request body after a preflight request. (andreasf)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("formElement.form")]),
          _vm._v(" property to use an algorithm that also checks the "),
          _c("code", [_vm._v('form=""')]),
          _vm._v(
            " attribute, instead of always looking for the closest ancestor "
          ),
          _c("code", [_vm._v("<form>")]),
          _vm._v(" element. (jamietre)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Stopped swallowing errors when the "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" or "),
          _c("code", [_vm._v("canvas-prebuilt")]),
          _vm._v(" packages were installed, but failed to load. (joscha)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_12-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_12-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 12.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Dramatically upgraded our XML parser, from the unmaintained "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/isaacs/sax-js",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("sax")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" package to the well-maintained "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/lddubeau/saxes",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("saxes")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " replacement. This increases our specification conformance, including rejecting certain ill-formed XML documents that were previously accepted, and properly handling other constructs like empty comments, CDATA sections, and "
          ),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" elements. (lddubeau)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("fieldsetEl.elements")]),
          _vm._v(" and "),
          _c("code", [_vm._v("fieldsetEl.type")]),
          _vm._v(" properties.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("options")]),
          _vm._v(" parameter to "),
          _c("code", [_vm._v("dom.runVMScript()")]),
          _vm._v(". (SimenB)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the ability for custom resource loader "),
          _c("code", [_vm._v("fetch()")]),
          _vm._v(
            " implementations to see what element initiated the fetch. (sarvaje)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("input")]),
          _vm._v(" and "),
          _c("code", [_vm._v("change")]),
          _vm._v(" events for "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(" elements to be trusted and uncancelable.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v('"Fixed" '),
          _c("code", [_vm._v("<script>")]),
          _vm._v("s with the "),
          _c("code", [_vm._v("async")]),
          _vm._v(" attribute to not execute before sync "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(
            "s that precede them. We still do not, in general, have proper execution of scripts during the initial parsing of a document, so this fix is more of a reduction of badness than an alignment with the specification. This behavior regressed in v12.0.0. (sarvaje)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_12-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_12-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 12.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("This major release brings along our "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom#loading-subresources",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("new resource loader API"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ", finally bringing all the capabilities from jsdom v9 to the new (jsdom v10+) API. Thanks very much to "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/sarvaje",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("@sarvaje"), _c("OutboundLink")],
          1
        ),
        _vm._v(" for his work to make this possible!")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Breaking changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("jsdom now requires Node.js v8.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Removed the old jsdom API, as the new API now has all the capabilities you need."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated our "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/inikulin/parse5/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("parse5")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " dependency to v5, which changes the format of the node locations returned by "
          ),
          _c("code", [_vm._v("dom.nodeLocation()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated our "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/whatwg-url",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("whatwg-url")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" dependency to v7, which changes the origin of "),
          _c("code", [_vm._v("file:")]),
          _vm._v(" URLs to be an opaque origin (and thus "),
          _c("code", [_vm._v("file:")]),
          _vm._v(" URLs are no longer same origin to each other).")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Other changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("countReset()")]),
          _vm._v(", "),
          _c("code", [_vm._v("dir()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("dirxml()")]),
          _vm._v(" methods to "),
          _c("code", [_vm._v("console")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("InputEvent")]),
          _vm._v(" class.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("window.status")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("htmlElement.draggable")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("window.frameElement")]),
          _vm._v(" to correctly return an actual "),
          _c("code", [_vm._v("HTMLElement")]),
          _vm._v(" instance, instead of a jsdom internal class.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed cloning of "),
          _c("code", [_vm._v("textarea")]),
          _vm._v(" elements to preserve their values.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("select.selectedOptions")]),
          _vm._v(" sometimes returning outdated results.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed CSS selection APIs sometimes returning outdated results, especially for state pseudo-class selectors like "
          ),
          _c("code", [_vm._v(":checked")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed CSS selection APIs to throw an error for invalid selectors even when used on empty nodes."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("window.name")]),
          _vm._v(" to default to the empty string, per spec, instead of "),
          _c("code", [_vm._v('"nodejs"')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fixed the default User-Agent to say "unknown OS" instead of "undefined" when jsdom is used in web browsers.'
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-12-0" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_11-12-0" } },
          [_vm._v("#")]
        ),
        _vm._v(" 11.12.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("window.localStorage")]),
          _vm._v(", "),
          _c("code", [_vm._v("window.sessionStorage")]),
          _vm._v(", and "),
          _c("code", [_vm._v("StorageEvent")]),
          _vm._v(
            " support. These are currently only stored in-memory; file an issue if you need persistent (on-disk) storage capability so we can discuss adding that. This feature includes the new "
          ),
          _c("code", [_vm._v("storageQuota")]),
          _vm._v(" option for controlling how much can be stored.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("element.closest()")]),
          _vm._v(". (caub)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("hashchange")]),
          _vm._v(" and "),
          _c("code", [_vm._v("popstate")]),
          _vm._v(" events to no longer bubble, per a specification update.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed the old API in Node.js v10 to not throw, when given input that is not a valid file path (such as a typical HTML string)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgraded "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(
            " to v1.0.0, bringing along various fixes to our CSS parser and object model. (eddies)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgraded "),
          _c("code", [_vm._v("nwsapi")]),
          _vm._v(
            " to v2.0.7, bringing along various fixes to our selector engine."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-11-0" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_11-11-0" } },
          [_vm._v("#")]
        ),
        _vm._v(" 11.11.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("node.getRootNode()")]),
          _vm._v(". (FrecksterGIT)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("label.control")]),
          _vm._v(". (FrecksterGIT)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("el.labels")]),
          _vm._v(" for form control elements. (FrecksterGIT)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("contentType")]),
          _vm._v(" of "),
          _c("code", [_vm._v("Document")]),
          _vm._v("s created through "),
          _c("code", [_vm._v("<iframe>")]),
          _vm._v("s.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("contentType")]),
          _vm._v(" and "),
          _c("code", [_vm._v("origin")]),
          _vm._v(" of "),
          _c("code", [_vm._v("Document")]),
          _vm._v("s created through "),
          _c("code", [_vm._v("document.implementation.createDocument()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("sourceEl.srcset")]),
          _vm._v(" to return the value of the "),
          _c("code", [_vm._v('srcset=""')]),
          _vm._v(" attribute, instead of the "),
          _c("code", [_vm._v('cite=""')]),
          _vm._v(" attribute.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("node.normalize()")]),
          _vm._v(" to not modify non-"),
          _c("code", [_vm._v("Text")]),
          _vm._v(" nodes. (lddubeau)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgraded "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(
            " to v0.3.1, bringing along various fixes to our CSS parser and object model. (jsakas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgraded "),
          _c("code", [_vm._v("whatwg-url")]),
          _vm._v(" to v6.4.1, fixing the interaction of "),
          _c("code", [_vm._v("URL")]),
          _vm._v("'s "),
          _c("code", [_vm._v("href")]),
          _vm._v(" and "),
          _c("code", [_vm._v("searchParams")]),
          _vm._v(" properties.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgraded our selector matching engine from "),
          _c("code", [_vm._v("nwsmatcher")]),
          _vm._v(" to "),
          _c("code", [_vm._v("nwsapi")]),
          _vm._v(
            ", bringing along extensive fixes, performance improvements, and additional selector support."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-10-0" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_11-10-0" } },
          [_vm._v("#")]
        ),
        _vm._v(" 11.10.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("event.srcElement")]),
          _vm._v(" and "),
          _c("code", [_vm._v("event.returnValue")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(
            " to correctly set the User-Agent header, and set it on CORS preflight requests. (BehindTheMath)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-9-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-9-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.9.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("node.lookupPrefix()")]),
          _vm._v(", "),
          _c("code", [_vm._v("node.lookupNamespaceURI()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("node.isDefaultNamespace()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the cloning of "),
          _c("code", [_vm._v("Document")]),
          _vm._v(
            "s; previously it would not clone all of the appropriate state, and would sometimes add an extra document type node."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed various edge cases in the "),
          _c("code", [_vm._v("textContent")]),
          _vm._v(" and "),
          _c("code", [_vm._v("nodeValue")]),
          _vm._v(" properties.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("canvas.toBlob()")]),
          _vm._v(
            " to properly pass through the JPEG quality argument, instead of always passing zero to "
          ),
          _c("code", [_vm._v("node-canvas")]),
          _vm._v(". (challakoushik)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-8-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-8-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.8.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added the full constraint validation API, i.e. "),
          _c("code", [_vm._v("willValidate")]),
          _vm._v(", "),
          _c("code", [_vm._v("validity")]),
          _vm._v(", "),
          _c("code", [_vm._v("validationMessage")]),
          _vm._v(", "),
          _c("code", [_vm._v("checkValidity()")]),
          _vm._v(", "),
          _c("code", [_vm._v("reportValidity()")]),
          _vm._v(", and "),
          _c("code", [_vm._v("setCustomValidity()")]),
          _vm._v(", on "),
          _c("code", [_vm._v("HTMLButtonElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("HTMLFieldSetElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("HTMLFormElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("HTMLInputElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("HTMLObjectElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("HTMLOutputElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("HTMLSelectElement")]),
          _vm._v(", and "),
          _c("code", [_vm._v("HTMLTextAreaElement")]),
          _vm._v(". (kontomondo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("getElementById()")]),
          _vm._v(" to "),
          _c("code", [_vm._v("DocumentFragment")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-7-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-7-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.7.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added the boolean return value to "),
          _c("code", [_vm._v("DOMTokenList")]),
          _vm._v("'s "),
          _c("code", [_vm._v("replace()")]),
          _vm._v(" method, per the recent spec addition.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("FileReader")]),
          _vm._v("'s "),
          _c("code", [_vm._v("readAsBinaryString()")]),
          _vm._v(" method, as it has been added back to the specification.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed event handlers to be own properties of each "),
          _c("code", [_vm._v("Window")]),
          _vm._v(", instead of on "),
          _c("code", [_vm._v("Window.prototype")]),
          _vm._v(". (Fetz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed an exception that would sometimes get raised when removing an "
          ),
          _c("code", [_vm._v("<img>")]),
          _vm._v(" element's "),
          _c("code", [_vm._v('src=""')]),
          _vm._v(" attribute. (atsikov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("abort")]),
          _vm._v(" events on "),
          _c("code", [_vm._v("AbortSignal")]),
          _vm._v("s to have their "),
          _c("code", [_vm._v("isTrusted")]),
          _vm._v(" set to true.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed some argument conversions in "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v("'s "),
          _c("code", [_vm._v("open()")]),
          _vm._v(" method.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improved MIME type and "),
          _c("code", [_vm._v("data:")]),
          _vm._v(" URL parsing throughout jsdom, by using the new "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.npmjs.com/package/whatwg-mimetype",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("whatwg-mimetype")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" and "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.npmjs.com/package/data-urls",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("data-urls")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" packages.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed some unnecessary "),
          _c("code", [_vm._v(".webidl")]),
          _vm._v(" files that were included in the npm package.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-6-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-6-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.6.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed another regression (since v11.6.0) in "),
          _c("code", [_vm._v("<style>")]),
          _vm._v(" elements, where they would omit a series of parsing "),
          _c("code", [_vm._v("jsdomError")]),
          _vm._v(" events for any style sheet text containing spaces.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Generally improved the spec-conformance of when "),
          _c("code", [_vm._v("<style>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" elements are evaluated; for example, "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" elements inserted by "),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(" are no longer evaluated.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-6-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-6-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.6.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed one regression (since v11.6.0) in "),
          _c("code", [_vm._v("<style>")]),
          _vm._v(" elements, where their "),
          _c("code", [_vm._v("sheet")]),
          _vm._v(" property would sometimes be "),
          _c("code", [_vm._v("null")]),
          _vm._v(" when it should not be.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed a case where a "),
          _c("code", [_vm._v("<style>")]),
          _vm._v(" element's "),
          _c("code", [_vm._v("sheet")]),
          _vm._v(" property would be left as a "),
          _c("code", [_vm._v("CSSStyleSheet")]),
          _vm._v(" despite it not being in the document.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Another regression remains where we are emitting spurious CSS-parsing "
        ),
        _c("code", [_vm._v("jsdomError")]),
        _vm._v(" events; see "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/issues/2123",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("#2123"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ". We also discovered a large amount of preexisting brokenness around "
        ),
        _c("code", [_vm._v("<style>")]),
        _vm._v(", "),
        _c("code", [_vm._v("<link>")]),
        _vm._v(", and "),
        _c("code", [_vm._v("@import")]),
        _vm._v("; see "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/issues/2124",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("#2124"), _c("OutboundLink")],
          1
        ),
        _vm._v(" for more details.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We'll try to fix these soon, especially the regression.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-6-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-6-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.6.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added a fully-functioning "),
          _c("code", [_vm._v("WebSocket")]),
          _vm._v(" implementation!")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a "),
          _c("code", [_vm._v("window.performance")]),
          _vm._v(" implementation, including the basics of the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://w3c.github.io/hr-time/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("High Resolution Time"), _c("OutboundLink")],
            1
          ),
          _vm._v(" specification: "),
          _c("code", [_vm._v("performance.now()")]),
          _vm._v(", "),
          _c("code", [_vm._v("performance.timeOrigin")]),
          _vm._v(", and "),
          _c("code", [_vm._v("performance.toJSON()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added support for all of the public API of "),
          _c("code", [_vm._v("HTMLMeterElement")]),
          _vm._v(", except for "),
          _c("code", [_vm._v("meterEl.labels")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("locationbar")]),
          _vm._v(", "),
          _c("code", [_vm._v("menubar")]),
          _vm._v(", "),
          _c("code", [_vm._v("personalbar")]),
          _vm._v(", "),
          _c("code", [_vm._v("scrollbars")]),
          _vm._v(", "),
          _c("code", [_vm._v("statusbar")]),
          _vm._v(", and "),
          _c("code", [_vm._v("toolbar")]),
          _vm._v(" properties to "),
          _c("code", [_vm._v("Window")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added more properties to "),
          _c("code", [_vm._v("window.screen")]),
          _vm._v(": "),
          _c("code", [_vm._v("availWidth")]),
          _vm._v(", "),
          _c("code", [_vm._v("availHeight")]),
          _vm._v(", "),
          _c("code", [_vm._v("colorDepth")]),
          _vm._v(", and "),
          _c("code", [_vm._v("pixelDepth")]),
          _vm._v(". All of its properties are now getters as well.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("window.devicePixelRatio")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("getModifierState()")]),
          _vm._v(" to "),
          _c("code", [_vm._v("MouseEvent")]),
          _vm._v(" and "),
          _c("code", [_vm._v("KeyboardEvent")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a setter for "),
          _c("code", [_vm._v("HTMLInputElement")]),
          _vm._v("'s "),
          _c("code", [_vm._v("files")]),
          _vm._v(" property.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added support for the "),
          _c("code", [_vm._v("endings")]),
          _vm._v(" option to the "),
          _c("code", [_vm._v("Blob")]),
          _vm._v(" constructor.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed firing various event firings to have the correct default values, e.g. the properties of "
          ),
          _c("code", [_vm._v("MouseEvent")]),
          _vm._v(" when using "),
          _c("code", [_vm._v("element.click()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the firing of "),
          _c("code", [_vm._v("popstate")]),
          _vm._v(" and "),
          _c("code", [_vm._v("hashchange")]),
          _vm._v(
            " events during fragment navigation to make them trusted events."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("data:")]),
          _vm._v(" URL parsing to not include the fragment portions.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed all URL-accepting properties to properly perform "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://infra.spec.whatwg.org/#javascript-string-convert",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("scalar value string conversion"), _c("OutboundLink")],
            1
          ),
          _vm._v(" and URL resolution.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed many other small edge-case conformance issues in the API surface of various web APIs; see "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/pull/2053",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#2053"), _c("OutboundLink")],
            1
          ),
          _vm._v(" and "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/pull/2081",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#2081"), _c("OutboundLink")],
            1
          ),
          _vm._v(" for more information.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed various APIs to use ASCII lowercasing, instead of Unicode lowercasing, for element and attribute names."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the encoding of a document created via "),
          _c("code", [_vm._v("new Document()")]),
          _vm._v(" to be UTF-8.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed event handler properties behavior when given non-callable objects."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Increased the performance of parsing HTML documents with large numbers of sibling elements."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("probablySupportsContext()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("setContext()")]),
          _vm._v(" from "),
          _c("code", [_vm._v("HTMLCanvasElement")]),
          _vm._v(", per spec updates.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed the nonstandard "),
          _c("code", [_vm._v("window.scrollLeft")]),
          _vm._v(" and "),
          _c("code", [_vm._v("window.scrollTop")]),
          _vm._v(" properties, and the "),
          _c("code", [_vm._v("window.createPopup()")]),
          _vm._v(" method.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-5-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-5-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.5.1")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("(This should have been a minor release; oops.)")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("AbortSignal")]),
          _vm._v(" and "),
          _c("code", [_vm._v("AbortController")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed validation for file "),
          _c("code", [_vm._v("<input>")]),
          _vm._v("s and implemented validation for more input types.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.4.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("For this release we'd like to welcome "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/commits?author=Zirro",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("@Zirro"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " to the core team; his contributions over the course of this year have enhanced jsdom immensely."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added a rudimentary set of SVG element classes, namely "),
          _c("code", [_vm._v("SVGElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("SVGGraphicsElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("SVGSVGElement")]),
          _vm._v(", "),
          _c("code", [_vm._v("SVGTests")]),
          _vm._v(", "),
          _c("code", [_vm._v("SVGAnimatedString")]),
          _vm._v(", "),
          _c("code", [_vm._v("SVGNumber")]),
          _vm._v(", and "),
          _c("code", [_vm._v("SVGStringList")]),
          _vm._v(
            ". The main impact here is that SVG elements are now instances of "
          ),
          _c("code", [_vm._v("SVGElement")]),
          _vm._v(", instead of being simply "),
          _c("code", [_vm._v("Element")]),
          _vm._v(" (as they were in v11.3.0) or "),
          _c("code", [_vm._v("HTMLUnknownElement")]),
          _vm._v(
            " (as they were in v11.2.0 and previously). The only concrete subclass that is implemented is "
          ),
          _c("code", [_vm._v("SVGSVGElement")]),
          _vm._v(", for "),
          _c("code", [_vm._v("<svg>")]),
          _vm._v(
            " itself; other tags will not map to their correct classes, because those classes are not yet implemented."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the new "),
          _c("code", [_vm._v("pretendToBeVisual")]),
          _vm._v(" option, which controls the presence of the new "),
          _c("code", [_vm._v("requestAnimationFrame()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("cancelAnimationFrame()")]),
          _vm._v(" methods, and the new values of "),
          _c("code", [_vm._v("document.hidden")]),
          _vm._v("/"),
          _c("code", [_vm._v("document.visibilityState")]),
          _vm._v(". "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/jsdom/jsdom#pretending-to-be-a-visual-browser",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("See the README"), _c("OutboundLink")],
            1
          ),
          _vm._v(" for more information. (SimenB)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("append()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("prepend()")]),
          _vm._v(" methods to "),
          _c("code", [_vm._v("Document")]),
          _vm._v(", "),
          _c("code", [_vm._v("DocumentFragment")]),
          _vm._v(", and "),
          _c("code", [_vm._v("Element")]),
          _vm._v(". (caub)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("before()")]),
          _vm._v(", "),
          _c("code", [_vm._v("after()")]),
          _vm._v(", and "),
          _c("code", [_vm._v("replaceWith()")]),
          _vm._v(" methods to "),
          _c("code", [_vm._v("DocumentType")]),
          _vm._v(", "),
          _c("code", [_vm._v("Element")]),
          _vm._v(", and "),
          _c("code", [_vm._v("CharacterData")]),
          _vm._v(". (caub)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("node.isConnected")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("node.isSameNode()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added support for parsing CDATA sections in XML documents, including in "
          ),
          _c("code", [_vm._v("domParser.parseFromString()")]),
          _vm._v(". (myabc)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added appropriate "),
          _c("code", [_vm._v("input.value")]),
          _vm._v(" getter/setter logic for "),
          _c("code", [_vm._v('<input type="file">')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Significantly improved the spec-compliance of "),
          _c("code", [_vm._v("NamedNodeMap")]),
          _vm._v(", i.e. of "),
          _c("code", [_vm._v("element.attributes")]),
          _vm._v(
            ", such that retrieving named or indexed properties will now always work properly."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("domParser.parseFromString()")]),
          _vm._v(
            " to not parse HTML character entities in XML documents. (myabc)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("xhr.abort()")]),
          _vm._v(" to clear any set headers.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" to always decoded responses as UTF-8 when "),
          _c("code", [_vm._v("responseType")]),
          _vm._v(" is set to "),
          _c("code", [_vm._v('"json"')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(
            " CORS header handling, especially with regard to preflights and Access-Control-Allow-Headers. (ScottAlbertine)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the behavior of "),
          _c("code", [_vm._v("radioButton.click()")]),
          _vm._v(" to fire appropriate "),
          _c("code", [_vm._v("input")]),
          _vm._v(" and "),
          _c("code", [_vm._v("change")]),
          _vm._v(" events. (liqwid)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("querySelector()")]),
          _vm._v("/"),
          _c("code", [_vm._v("querySelectorAll()")]),
          _vm._v(" behavior for SVG elements inside "),
          _c("code", [_vm._v("<template>")]),
          _vm._v(" contents "),
          _c("code", [_vm._v("DocumentFragment")]),
          _vm._v("s, including those created by "),
          _c("code", [_vm._v("JSDOM.fragment()")]),
          _vm._v(". (caub)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed the line number reporting in exception stack traces when using "
          ),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" elements, when "),
          _c("code", [_vm._v("includeNodeLocations")]),
          _vm._v(" is set.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed the "),
          _c("code", [_vm._v("<applet>")]),
          _vm._v(" element, "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/html/pull/1399",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("following the spec"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.3.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("For this release we'd like to formally welcome "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/commits?author=TimothyGu",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("@TimothyGu"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " to the core team, as a prolific contributor. He will join the illustrious ranks of those who do so much work on jsdom that we no longer note their names in the changelog."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("table.tHead")]),
          _vm._v(", "),
          _c("code", [_vm._v("table.tFoot")]),
          _vm._v(", and "),
          _c("code", [_vm._v("table.caption")]),
          _vm._v(" setters, and the "),
          _c("code", [_vm._v("table.createTBody()")]),
          _vm._v(" method.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("CompositionEvent")]),
          _vm._v(" and "),
          _c("code", [_vm._v("WheelEvent")]),
          _vm._v(" classes.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a "),
          _c("code", [_vm._v("<details>")]),
          _vm._v(" element implementation. (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added stub "),
          _c("code", [_vm._v("<marquee>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<picture>")]),
          _vm._v(" element implementations. (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("uiEvent.initUIEvent()")]),
          _vm._v(", "),
          _c("code", [_vm._v("keyboardEvent.initKeyboardEvent()")]),
          _vm._v(", and "),
          _c("code", [_vm._v("mouseEvent.initiMouseEvent()")]),
          _vm._v(" to match the latest specifications.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Converted "),
          _c("code", [_vm._v("DOMTokenList")]),
          _vm._v(" (used by, e.g., "),
          _c("code", [_vm._v("element.classList")]),
          _vm._v(
            ') to use proxies for improved specification compliance and "liveness".'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("DOMException")]),
          _vm._v(
            " class to be spec-compliant, including its constructor signature."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed some subtle interactions between inline event handlers and other event listeners."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed the element interface used when creating many of the more obscure elements."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the behavior of the "),
          _c("code", [_vm._v("table.rows")]),
          _vm._v(" getter, and the "),
          _c("code", [_vm._v("table.createCaption()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("table.deleteRow()")]),
          _vm._v(" methods.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed incorrect sharing of methods between interfaces that used mixins (e.g. previously "
          ),
          _c("code", [
            _vm._v("document.querySelector === documentFragment.querySelector")
          ]),
          _vm._v(", incorrectly).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("FocusEvent")]),
          _vm._v(" creation, which regressed in v11.2.0.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("UIEvent")]),
          _vm._v(" to only allow initializing with "),
          _c("code", [_vm._v("Window")]),
          _vm._v(" objects for its "),
          _c("code", [_vm._v("view")]),
          _vm._v(" property.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the behavior of "),
          _c("code", [_vm._v("tr.rowIndex")]),
          _vm._v(" and "),
          _c("code", [_vm._v("tr.deleteCall()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the element interface for "),
          _c("code", [_vm._v("<td>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<th>")]),
          _vm._v(" to be simply "),
          _c("code", [_vm._v("HTMLTableCellElement")]),
          _vm._v(", and improved that class's spec compliance.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed calling "),
          _c("code", [_vm._v("label.click()")]),
          _vm._v(
            " to not trigger the labeled control's activation behavior when the control is disabled. (schreifels)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.getElementsByName()")]),
          _vm._v(" to return a "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(" instead of a "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(". (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Significantly sped up synchronous "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(". (Zirro)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.2.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This release brings with it a much-awaited infrastructure change, as part of "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/webidl2js/releases/tag/v7.3.0",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("webidl2js v7.3.0"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ' by the ever-amazing TimothyGu: jsdom can now generate spec-compliant versions of classes that have "'
        ),
        _c("code", [_vm._v("Proxy")]),
        _vm._v(
          '-like" behavior, i.e. allow getting or setting keys in unusual ways. This enables a number of improvements, also by TimothyGu:'
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            'Significantly improved the spec-compliance and "liveness" of both '
          ),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(" and "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(", such that retrieving properties via indices or (in "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v("'s case) "),
          _c("code", [_vm._v("id")]),
          _vm._v("/"),
          _c("code", [_vm._v("name")]),
          _vm._v(" values will always work correctly.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("element.dataset")]),
          _vm._v(" support.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added indexed and named access to "),
          _c("code", [_vm._v("<select>")]),
          _vm._v(" elements, as well as the corresponding "),
          _c("code", [_vm._v("item()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("namedItem()")]),
          _vm._v(" methods.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added suport for "),
          _c("code", [_vm._v("FileList")]),
          _vm._v(" indexed properties, i.e. "),
          _c("code", [_vm._v("fileList[i]")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Made "),
          _c("code", [_vm._v("select.options")]),
          _vm._v(" an instance of the newly-implemented "),
          _c("code", [_vm._v("HTMLOptionsCollection")]),
          _vm._v(", instead of just a "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This infrastructure will allow us to improve and implement many other similar behaviors; that work is being tracked in "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/issues/1129",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("#1129"), _c("OutboundLink")],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In addition to these improvements to the object model, we have more work to share:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added no-op APIs "),
          _c("code", [_vm._v("document.clear()")]),
          _vm._v(", "),
          _c("code", [_vm._v("document.captureEvents()")]),
          _vm._v(", "),
          _c("code", [_vm._v("document.releaseEvents()")]),
          _vm._v(", "),
          _c("code", [_vm._v("window.external.AddSearchProvider()")]),
          _vm._v(", and "),
          _c("code", [_vm._v("window.external.IsSearchProviderInstalled()")]),
          _vm._v(". (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added active checks to prevent reentrancy in "),
          _c("code", [_vm._v("TreeWalker")]),
          _vm._v(" and "),
          _c("code", [_vm._v("NodeIterator")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated the interaction between a "),
          _c("code", [_vm._v("<textarea>")]),
          _vm._v("'s "),
          _c("code", [_vm._v("value")]),
          _vm._v(", "),
          _c("code", [_vm._v("defaultValue")]),
          _vm._v(", and "),
          _c("code", [_vm._v("textContent")]),
          _vm._v(" per "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/whatwg/html/commit/5afbba1cf62ee01bc6af3fd220d01f3f7591a0fc",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("a recent spec change"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed elements with "),
          _c("code", [_vm._v('id="undefined"')]),
          _vm._v(" shadowing the "),
          _c("code", [_vm._v("undefined")]),
          _vm._v(" property of the global object. (TimothyGu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed matching in "),
          _c("code", [_vm._v("getElementsByClassName()")]),
          _vm._v(
            " to be ASCII case-insensitive, instead of using JavaScript's "
          ),
          _c("code", [_vm._v("toLowerCase()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Improved some behaviors around navigating to fragments. (ForbesLindesay)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improved "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" and "),
          _c("code", [_vm._v("FileReader")]),
          _vm._v(" behavior, mainly around event handlers, "),
          _c("code", [_vm._v("abort()")]),
          _vm._v(", and network errors.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improved edge-case spec compliance of "),
          _c("code", [_vm._v("NodeIterator")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("javascript:")]),
          _vm._v(' URL "navigation" via '),
          _c("code", [_vm._v("window.location")]),
          _vm._v(
            ", at least by evaluating the side effects. It still doesn't actually navigate anywhere. (ForbesLindesay)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("whatwg-url")]),
          _vm._v(
            " to v6.1.0, bringing along origin serialization changes and "
          ),
          _c("code", [_vm._v("URLSearchParams")]),
          _vm._v(" among various other fixes. (ForbesLindesay)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("javascript:")]),
          _vm._v(
            " URL loading for iframes to do proper percent-decoding and error reporting."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed corrupted "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" responses when they were over 1 MiB.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed timers to not start after a window is "),
          _c("code", [_vm._v("close()")]),
          _vm._v(
            "d, which could cause strange errors since most objects are unusable at that point. (Enverbalalic)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_11-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_11-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 11.0.0")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Breaking changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Custom parsers, via the "),
          _c("code", [_vm._v("parser")]),
          _vm._v(
            " option to the old API, can no longer be specified. They were never tested, often broken, and a maintenance burden. The defaults, of "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.npmjs.com/package/parse5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("parse5"), _c("OutboundLink")],
            1
          ),
          _vm._v(" for HTML and "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.npmjs.com/package/sax",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("sax"), _c("OutboundLink")],
            1
          ),
          _vm._v(" for XML, now always apply.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Due to a parse5 upgrade, the location info objects returned by "
          ),
          _c("code", [_vm._v("dom.nodeLocation()")]),
          _vm._v(" or the old API's "),
          _c("code", [_vm._v("jsdom.nodeLocation()")]),
          _vm._v(" now have a different structure.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed how "),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(
            " applies to event handler attributes; now they will no longer be converted into event handler functions unless "
          ),
          _c("code", [_vm._v('runScripts: "dangerously"')]),
          _vm._v(" is set. However, event handler "),
          _c("em", [_vm._v("properties")]),
          _vm._v(" will now work with any "),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(" option value, instead of being blocked.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Other changes:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Overhauled how event handler properties and attributes work to follow the spec. In particular, this adds various "
          ),
          _c("code", [_vm._v("oneventname")]),
          _vm._v(
            " properties to various prototypes, ensures the correct order when interleaving event handlers and other event listeners, and ensures that event handlers are evaluated with the correct values in scope."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgraded parse5 from v1 to v3, bringing along several correctness improvements to HTML parsing. (Zirro)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("Location")]),
          _vm._v(
            " properties to be on the instance, instead of the prototype, and to be non-configurable."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Significantly improved the performance of "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(", and thus of parsing large documents. (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Significantly improved the performance of "),
          _c("code", [_vm._v("getComputedStyle()")]),
          _vm._v(
            " by removing unsupported selectors from the default style sheet. (flaviut)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed all web platform methods that accepted web platform objects to perform proper type checks on them, throwing a "
          ),
          _c("code", [_vm._v("TypeError")]),
          _vm._v(" when given invalid values. (TimothyGu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("Symbol.toStringTag")]),
          _vm._v(
            " properties to be non-writable and non-enumerable. (TimothyGu)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("tokenList.remove()")]),
          _vm._v(" when the "),
          _c("code", [_vm._v("DOMTokenList")]),
          _vm._v(" corresponded to a non-existant attribute. (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("fileReader.abort()")]),
          _vm._v(" to terminate ongoing reads properly.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("xhr.send()")]),
          _vm._v(" to support array buffer views, not just "),
          _c("code", [_vm._v("ArrayBuffer")]),
          _vm._v("s. (ondras)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed non-"),
          _c("code", [_vm._v("GET")]),
          _vm._v(" requests to "),
          _c("code", [_vm._v("data:")]),
          _vm._v(" URLs using "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(". (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed form submission to no longer happen for disconnected forms."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed body event handler attributes to be treated like all others in terms of how they interact with "
          ),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Many updates per recent spec changes: (Zirro)\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Updated "),
              _c("code", [_vm._v("tokenList.replace()")]),
              _vm._v(" edge-case behavior.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Invalid qualified names now throw "),
              _c("code", [_vm._v('"InvalidCharacterError"')]),
              _vm._v(" "),
              _c("code", [_vm._v("DOMException")]),
              _vm._v("s, instead of "),
              _c("code", [_vm._v('"NamespaceError"')]),
              _vm._v(" "),
              _c("code", [_vm._v("DOMException")]),
              _vm._v("s.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("input.select()")]),
              _vm._v(
                " to no longer throw on types where selection does not apply."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Updated "),
              _c("code", [_vm._v("event.initEvent()")]),
              _vm._v(
                " and various related methods to have additional defaults."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Stopped lowercasing headers in "),
              _c("code", [_vm._v("XMLHttpRequest")]),
              _vm._v(" responses.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Started lowercasing headers in "),
              _c("code", [_vm._v("xhr.getAllResponseHeaders()")]),
              _vm._v(
                ", and separating the header values with a comma-space (not just a comma)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Allow a redirect after a CORS preflight when using "),
              _c("code", [_vm._v("XMLHttpRequest")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Tweaked username/password CORS treatment when using "),
              _c("code", [_vm._v("XMLHttpRequest")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("xhr.overrideMimeType()")]),
              _vm._v(" to no longer throw for invalid input.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("blob.close()")]),
              _vm._v(" and "),
              _c("code", [_vm._v("blob.isClosed()")]),
              _vm._v(".")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed some remaining not-per-spec "),
          _c("code", [_vm._v("toString()")]),
          _vm._v(
            " methods on various prototypes, which were made redundant in v10.1.0 but we forgot to remove."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_10-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_10-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 10.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Added the value sanitization algorithm for password, search, tel, text, color, email, and url input types. (Zirro)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("Symbol.toStringTag")]),
          _vm._v(" to all web platform classes, so that now "),
          _c("code", [_vm._v("Object.prototype.toString.call()")]),
          _vm._v(" works as expected on jsdom objects.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("select.selectedOptions")]),
          _vm._v(" property.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed the "),
          _c("code", [_vm._v("toString()")]),
          _vm._v(" methods on various prototypes that returned "),
          _c("code", [_vm._v('"[object ClassName]"')]),
          _vm._v(" in an attempt to fake the "),
          _c("code", [_vm._v("Symbol.toStringTag")]),
          _vm._v(" behavior.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(
            " to pre-allocate a 1 MiB buffer, which it grows exponentially as needed, in order to avoid frequent buffer allocation and concatenation. (skygon)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed a variety of properties that were meant to always return the same object, to actually do so. (Zirro)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed inheritance of the "),
          _c("code", [_vm._v("runScripts")]),
          _vm._v(" and "),
          _c("code", [_vm._v("resources")]),
          _vm._v(" options into iframes.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed an uncaught exception that occurred if you called "),
          _c("code", [_vm._v("xhr.abort()")]),
          _vm._v(" during a "),
          _c("code", [_vm._v("readystatechange")]),
          _vm._v(" event.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_10-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_10-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 10.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This release includes a complete overhaul of jsdom's API for creating and manipulating jsdoms. The new API is meant to be much more intuitive and have better defaults, with complete documentation in the newly-overhauled README. We hope you like it!"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "As discussed in the new README, the old API is still available and supported via "
        ),
        _c("code", [_vm._v('require("jsdom/lib/old-api.js")')]),
        _vm._v(
          ", at least until we have ported all of its features over to the new API. It will, however, not be gaining any new features, and we suggest you try the new API unless you really need the customizable resource loading the old API provides."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Apart from the new API, the following changes were made, with breaking changes bolded:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Removed support for Node.js v4 and v5")]),
          _vm._v(
            ", as we have started using new JavaScript features only supported in Node.js v6 onwards."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [
            _vm._v("Changed the "),
            _c("code", [_vm._v("omitJsdomErrors")]),
            _vm._v(" option to "),
            _c("code", [_vm._v("omitJSDOMErrors")])
          ]),
          _vm._v(", for consistency "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://w3ctag.github.io/design-principles/#casing-rules",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("with web platform APIs"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("document.dir")]),
          _vm._v(". (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated the "),
          _c("code", [_vm._v("<a>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<area>")]),
          _vm._v(
            " APIs to the latest specification, and fixed a few bugs with them. (makana)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<img>")]),
          _vm._v(" elements to no longer fire "),
          _c("code", [_vm._v("load")]),
          _vm._v(
            " events unless their image data is actually loaded (which generally only occurs when the "
          ),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" package is installed).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(
            " preflights to forward approved preflight headers to the actual request. (mbroadst)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("htmlElement.dir")]),
          _vm._v(" to properly restrict its values to "),
          _c("code", [_vm._v('"ltr"')]),
          _vm._v(", "),
          _c("code", [_vm._v('"rtl"')]),
          _vm._v(", or "),
          _c("code", [_vm._v('"auto"')]),
          _vm._v(". (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed setting "),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(" to the empty string to no longer be a no-op. (Zirro)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the origin-checking logic in "),
          _c("code", [_vm._v("window.postMessage()")]),
          _vm._v(", so that now you don't always have to pass an origin of "),
          _c("code", [_vm._v('"*"')]),
          _vm._v(". (jmlopez-rod)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improved the "),
          _c("code", [_vm._v("xhr.open()")]),
          _vm._v(
            " error message when there are not enough arguments. (lencioni)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-12-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-12-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.12.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("Option")]),
          _vm._v(" named constructor. (NAlexPear)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added support for the "),
          _c("code", [_vm._v("canvas-prebuilt")]),
          _vm._v(" npm package as an alternative to "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(". (asturur)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("setTimeout()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("setInterval()")]),
          _vm._v(" to always return a positive integer, instead of returning "),
          _c("code", [_vm._v("0")]),
          _vm._v(" the first time were called. (yefremov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("jsdom.env()")]),
          _vm._v(" to preserve URL fragments across redirects. (josephfrazier)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("optionEl.text")]),
          _vm._v(" and "),
          _c("code", [_vm._v("optionEl.value")]),
          _vm._v(" to be more spec-compliant.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("event.stopImmediatePropagation()")]),
          _vm._v(
            " to actually stop immediate propagation, not just propagation."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("clearTimeout()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("clearInterval()")]),
          _vm._v(" to work correctly when using jsdom browserified.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-11-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-11-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.11.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added dummy properties "),
          _c("code", [_vm._v("offsetTop")]),
          _vm._v(", "),
          _c("code", [_vm._v("offsetLeft")]),
          _vm._v(", "),
          _c("code", [_vm._v("offsetWidth")]),
          _vm._v(", and "),
          _c("code", [_vm._v("offsetHeight")]),
          _vm._v(" that always return "),
          _c("code", [_vm._v("0")]),
          _vm._v(", and "),
          _c("code", [_vm._v("offsetParent")]),
          _vm._v(" which always returns "),
          _c("code", [_vm._v("null")]),
          _vm._v(", for all HTML elements. (yefremov)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed various edge cases in our type conversions applied to method arguments and setters throughout the web platform APIs implemented by jsdom."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-10-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-10-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.10.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("forEach")]),
          _vm._v(", "),
          _c("code", [_vm._v("keys")]),
          _vm._v(", "),
          _c("code", [_vm._v("values")]),
          _vm._v(", and "),
          _c("code", [_vm._v("entries")]),
          _vm._v(" methods to "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("event.cancelBubble")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added dummy properties "),
          _c("code", [_vm._v("scrollWidth")]),
          _vm._v(", "),
          _c("code", [_vm._v("scrollHeight")]),
          _vm._v(", "),
          _c("code", [_vm._v("clientTop")]),
          _vm._v(", "),
          _c("code", [_vm._v("clientLeft")]),
          _vm._v(", "),
          _c("code", [_vm._v("clientWidth")]),
          _vm._v(", and "),
          _c("code", [_vm._v("clientHeight")]),
          _vm._v(" that always return "),
          _c("code", [_vm._v("0")]),
          _vm._v(" to all elements. (alistairjcbrown)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated many aspects of "),
          _c("code", [_vm._v("Blob")]),
          _vm._v(", "),
          _c("code", [_vm._v("File")]),
          _vm._v(", and "),
          _c("code", [_vm._v("FileReader")]),
          _vm._v(" to better match the File API specification. (TimothyGu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the progress and readystatechange events fired by "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" to match recent specification changes and test updates.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("element.getClientRects()")]),
          _vm._v(
            " to return an empty array, instead of an array containing a dummy bounding box. (alistairjcbrown)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("navigator.vendor")]),
          _vm._v(" to return "),
          _c("code", [_vm._v('"Apple Computer, Inc."')]),
          _vm._v(" instead of "),
          _c("code", [_vm._v('"Google Inc."')]),
          _vm._v(", since we have chosen the WebKit "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://html.spec.whatwg.org/multipage/webappapis.html#concept-navigator-compatibility-mode",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("navigator compatibility mode"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-9-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-9-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.9.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Removed the use of "),
          _c("code", [_vm._v("array.includes")]),
          _vm._v(" to fix a compatibility issue with Node.js v4.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-9-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-9-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.9.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("CDATASection")]),
          _vm._v(" nodes, including "),
          _c("code", [_vm._v("document.createCDATASection")]),
          _vm._v(". (snuggs)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("node.wholeText")]),
          _vm._v(". (jdanyow)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a setter for "),
          _c("code", [_vm._v("document.body")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("document.embeds")]),
          _vm._v(", "),
          _c("code", [_vm._v("document.plugsin")]),
          _vm._v(", and "),
          _c("code", [_vm._v("document.scripts")]),
          _vm._v(
            ". These were supposed to be added in 9.5.0 but were mistakenly omitted."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("element.insertAdjacentHTML")]),
          _vm._v(
            " to work when the element has null or the document as its parent node, as long as the insertion position is "
          ),
          _c("code", [_vm._v('"afterbegin"')]),
          _vm._v(" or "),
          _c("code", [_vm._v('"beforeend"')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fixed form submission to only hit the "not implemented" virtual console message when form submission is '
          ),
          _c("em", [_vm._v("not")]),
          _vm._v(" canceled, instead of when it is.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed an issue where the event listener was not being correctly removed when using the "
          ),
          _c("code", [_vm._v("{ once: true }")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("addEventListener")]),
          _vm._v(". (i8-pi)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed an error that was thrown when using "),
          _c("code", [_vm._v("XHTMLHttpRequest")]),
          _vm._v(
            " and POSTing JSON contents to an endpoint that requires CORS while using an "
          ),
          _c("code", [_vm._v("Authorization")]),
          _vm._v(" header. (dunnock)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.body")]),
          _vm._v(" and "),
          _c("code", [_vm._v("document.title")]),
          _vm._v(" to act more correctly in various edge cases.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(
            " named access to return the first element encountered, not the last."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-8-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-8-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.8.3")
      ]),
      _vm._v(" "),
      _c("ul", [_c("li", [_vm._v("Fixed syntax errors in Node.js v4.")])]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-8-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-8-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.8.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("DOMTokenList")]),
          _vm._v(" and "),
          _c("code", [_vm._v("getElementsByClassName")]),
          _vm._v(
            " to only split on ASCII whitespace, not all Unicode whitespace."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-8-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-8-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.8.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed an error that occurred when passing no class names to "
          ),
          _c("code", [_vm._v("getElementsByClassName")]),
          _vm._v(", e.g. "),
          _c("code", [_vm._v('getElementsByClassName("")')]),
          _vm._v(" or "),
          _c("code", [_vm._v('getElementsByClassName(" ")')]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-8-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-8-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.8.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("blob.isClosed")]),
          _vm._v(" property. (TimothyGu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("file.lastModified")]),
          _vm._v(" property to be on "),
          _c("code", [_vm._v("File")]),
          _vm._v(" instead of on "),
          _c("code", [_vm._v("Blob")]),
          _vm._v(". (TimothyGu)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("file.lastModified")]),
          _vm._v(" property to default to the time of the "),
          _c("code", [_vm._v("File")]),
          _vm._v(
            " object's creation, not the time that the property is accessed. (TimothyGu)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed a minor edge-case regression where non-HTML elements with the name "
          ),
          _c("code", [_vm._v('"iframe"')]),
          _vm._v(" became focusable in v9.7.0.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-7-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-7-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.7.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed a performance regression introduced in 9.5.0 for modifying the DOM. It was particularly noticable during initial parsing of a document with many elements; for example, one test showed parsing ten thousand elements taking 36.4 seconds, whereas after this fix it is back to a more reasonable 0.4 seconds."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-7-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-7-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.7.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("EventListenerOptions")]),
          _vm._v(" support to "),
          _c("code", [_vm._v("addEventListener")]),
          _vm._v(" and "),
          _c("code", [_vm._v("removeEventListener")]),
          _vm._v(", including both the "),
          _c("code", [_vm._v("once")]),
          _vm._v(" and "),
          _c("code", [_vm._v("capture")]),
          _vm._v(" options. (GianlucaGuarini)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("document.hasFocus()")]),
          _vm._v(" (acusti)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed the focus management to ensure that focusing something inside an "
          ),
          _c("code", [_vm._v("iframe")]),
          _vm._v(" will also focus the "),
          _c("code", [_vm._v("iframe")]),
          _vm._v(" itself. (acusti)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-6-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-6-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.6.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("HTMLCollection.prototype[Symbol.iterator]")]),
          _vm._v(", so you can use "),
          _c("code", [_vm._v("for")]),
          _vm._v("-"),
          _c("code", [_vm._v("of")]),
          _vm._v(" loops over "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v("s now. (i8-pi)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("file.lastModified")]),
          _vm._v(" to return the current time as the default, instead of "),
          _c("code", [_vm._v("0")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed cloning of "),
          _c("code", [_vm._v("Attr")]),
          _vm._v("s to properly clone the namespace prefix.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Tweaked "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(
            " progress event ordering slightly to better match the spec and browsers."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Tweaked the behavior of calling "),
          _c("code", [_vm._v("event.stopPropagation")]),
          _vm._v(" and "),
          _c("code", [_vm._v("event.stopImmediatePropagation")]),
          _vm._v(" on already-dispatched events, per "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/whatwg/dom/commit/806d4aab584f6fc38c21f8e088b51b8ba3e27e20",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _vm._v("the latest changes to the DOM Standard"),
              _c("OutboundLink")
            ],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-5-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-5-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.5.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("document.scripts")]),
          _vm._v(", "),
          _c("code", [_vm._v("document.embeds")]),
          _vm._v(", and "),
          _c("code", [_vm._v("document.plugins")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.getElementsByTagName")]),
          _vm._v(" and "),
          _c("code", [_vm._v("document.getElementsByTagNameNS")]),
          _vm._v(" to return "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v("s instead of "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v("s, and to follow the spec algorithms more exactly.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed various "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v("-returning getters such as "),
          _c("code", [_vm._v("document.applets")]),
          _vm._v(" or "),
          _c("code", [_vm._v("table.cells")]),
          _vm._v(" to be more spec-compliant.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the resource loader to respect the "),
          _c("code", [_vm._v("agent")]),
          _vm._v(" and "),
          _c("code", [_vm._v("agentClass")]),
          _vm._v(" options, not just the "),
          _c("code", [_vm._v("agentOptions")]),
          _vm._v(" one.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("console.groupCollapse")]),
          _vm._v(" to be "),
          _c("code", [_vm._v("console.groupCollapsed")]),
          _vm._v(" (and changed the virtual console accordingly).")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-4-5" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-4-5" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.4.5")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("error")]),
          _vm._v(
            " events from failed resource loads going missing since v9.4.3. I really should have tested that release better."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-4-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-4-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.4.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed a leftover "),
          _c("code", [_vm._v("console.log")]),
          _vm._v(" introduced in the error handling path in v9.4.3.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-4-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-4-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.4.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed spurious "),
          _c("code", [_vm._v('"jsdomError"')]),
          _vm._v(
            "s occuring when closing a window, due to aborted resource loads."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-4-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-4-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.4.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed what would happen when inline event handlers (such as "
          ),
          _c("code", [_vm._v("element.onclick")]),
          _vm._v(") would return non-boolean values (such as "),
          _c("code", [_vm._v("undefined")]),
          _vm._v(
            "); it would previously erroneously cancel the event, in many cases. (dmethvin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Upgraded the minimum tough-cookie version to ensure all installations are protected against "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://nodesecurity.io/advisories/130",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("a security advisory"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-4-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-4-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.4.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Implemented the cloning steps for "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(
            " elements, so that cloned inputs properly copy over their value, checkedness, dirty value flag, and dirty checkedness flag. (matthewp)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.4.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("DOMParser")]),
          _vm._v(" API. It is spec-compliant, including producing "),
          _c("code", [_vm._v("<parsererror>")]),
          _vm._v(
            " elements, except that the produced documents do not have the same URL as the creating document (they instead always have "
          ),
          _c("code", [_vm._v('"about:blank"')]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added strict XML parsing when using "),
          _c("code", [_vm._v('parsingMode: "xml"')]),
          _vm._v(
            ". Creating documents will now fail, just like in a browser, when ill-formed XHTML markup is used."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added some rudimentary application of XML "),
          _c("code", [_vm._v("<!ENTITY")]),
          _vm._v(" declarations.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("window.frameElement")]),
          _vm._v(", although without appropriate cross-origin security checks.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("jsdom.evalVMScript")]),
          _vm._v(" public API.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added more custom request agent support: you can now pass "),
          _c("code", [_vm._v("agent")]),
          _vm._v(" and "),
          _c("code", [_vm._v("agentClass")]),
          _vm._v(" in addition to "),
          _c("code", [_vm._v("agentOptions")]),
          _vm._v(". (frarees)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated our elements-being-disabled semantics to more closely match the spec, in particular with regard to being descendants of "
          ),
          _c("code", [_vm._v("<fieldset disabled>")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("FormData")]),
          _vm._v(" for "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/whatwg/xhr/commit/1a75845e67792418a7721d516266ad01a90f2062",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("recent spec fixes"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ": blobs, files, and filenames should now all work like you'd expect."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated the "),
          _c("code", [_vm._v("FormData")]),
          _vm._v(" constructor to use the proper, rather-complex, "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://html.spec.whatwg.org/multipage/forms.html#constructing-form-data-set",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("constructing the form data set"), _c("OutboundLink")],
            1
          ),
          _vm._v(" algorithm.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed all constructors that appears as globals on the jsdom "
          ),
          _c("code", [_vm._v("window")]),
          _vm._v(" object to be non-enumerable.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" elements to load when they gain a "),
          _c("code", [_vm._v("src")]),
          _vm._v(" attribute while in a document.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v('<link rel="stylesheet">')]),
          _vm._v(" elements to load when their "),
          _c("code", [_vm._v("href")]),
          _vm._v(" attributes change while in a document.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the loading of external "),
          _c("code", [_vm._v("<img>")]),
          _vm._v("s (when the "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(
            " npm package is installed) that were specified via relative URL; this regressed in 9.2.1."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<iframe>")]),
          _vm._v(" documents to have the correct "),
          _c("code", [_vm._v("referrer")]),
          _vm._v(" value (viz. the URL of their parent).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the value of "),
          _c("code", [_vm._v("input.checked")]),
          _vm._v(" inside "),
          _c("code", [_vm._v("click")]),
          _vm._v(" events on checkboxes.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed the window object's named properties to correctly return the "
          ),
          _c("code", [_vm._v("<iframe>")]),
          _vm._v(" element or the "),
          _c("code", [_vm._v("<iframe>")]),
          _vm._v("'s window in appropriate scenarios involving "),
          _c("code", [_vm._v("name")]),
          _vm._v(" vs. "),
          _c("code", [_vm._v("id")]),
          _vm._v(" attributes on the "),
          _c("code", [_vm._v("<iframe>")]),
          _vm._v(". (matthewp)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.3.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("Audio")]),
          _vm._v(" named constructor.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("Image")]),
          _vm._v(" named constructor to follow the spec more closely (e.g. "),
          _c("code", [_vm._v("Image.prototype")]),
          _vm._v(" is now equal to "),
          _c("code", [_vm._v("HTMLImageElement.prototype")]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("tabIndex")]),
          _vm._v(
            " setter, which regressed in 9.1.0, to no longer cause errors."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Made submit buttons and labels respond to click event cancelation correctly, preventing form submission and re-dispatching to the relevant form control. (marcandre)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed unhandled errors thrown in XHR event handlers being swallowed; they now properly are redirected to the virtual console."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-2-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-2-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.2.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<input>")]),
          _vm._v("'s "),
          _c("code", [_vm._v("selectionStart")]),
          _vm._v(", "),
          _c("code", [_vm._v("selectionEnd")]),
          _vm._v(", and "),
          _c("code", [_vm._v("selectionDirection")]),
          _vm._v(
            " getters to return null, instead of throwing, for elements that do not allow selection, per "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/html/pull/1006",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("a recent spec change"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<base>")]),
          _vm._v("'s "),
          _c("code", [_vm._v("href")]),
          _vm._v(
            " getter logic to return the attribute value instead of the empty string for unparseable URLs, per "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/html/pull/1064",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("a recent spec change"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed the referrer sent when retrieving external resources to be the document's URL, not the document's base URL."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed suppression of all "),
          _c("code", [_vm._v("error")]),
          _vm._v(" events on "),
          _c("code", [_vm._v("window")]),
          _vm._v(" beyond the first one.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("new URL")]),
          _vm._v(" to correctly throw for unparseable URLs, and all of "),
          _c("code", [_vm._v("URL")]),
          _vm._v(
            "'s setters to correctly ignore invalid input instead of throwing."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("StyleSheetList.prototype.item")]),
          _vm._v(" to return "),
          _c("code", [_vm._v("null")]),
          _vm._v(" instead of "),
          _c("code", [_vm._v("undefined")]),
          _vm._v(" for out-of-bounds indices. (Ginden)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(
            " minimum version to ensure all jsdom installs (not just fresh ones) get the benefit of "
          ),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v("'s recently-better "),
          _c("code", [_vm._v("background")]),
          _vm._v(" and "),
          _c("code", [_vm._v("width")]),
          _vm._v(" setters.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("jsdom.changeURL(window, newURL)")]),
          _vm._v(
            " for allowing you to override a window's existing URL. (mummybot)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("proxy")]),
          _vm._v(
            " option to be applied to all requests; previously it was not always passed through. (nicolashenry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(
            " response header filtering for cross-origin requests; this also fixes "
          ),
          _c("code", [_vm._v("ProgressEvent")]),
          _vm._v("s fired from such XHRs. (nicolashenry)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Added a somewhat-reasonable implementation of focus and focus events. Although the full complexity of focus is not implemented, the following improvements have been made:\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("Only elements which are focusable can be focused.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added the "),
              _c("code", [_vm._v("FocusEvent")]),
              _vm._v(" class, and now "),
              _c("code", [_vm._v("focus")]),
              _vm._v(" and "),
              _c("code", [_vm._v("blur")]),
              _vm._v(" events are fired appropriately.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("tabIndex")]),
              _vm._v(" now returns "),
              _c("code", [_vm._v("0")]),
              _vm._v(" by default for focusable elements.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Reimplemented "),
          _c("code", [_vm._v("navigator")]),
          _vm._v(" to be to-spec:\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("appCodeName")]),
              _vm._v(", "),
              _c("code", [_vm._v("product")]),
              _vm._v(", "),
              _c("code", [_vm._v("productSub")]),
              _vm._v(", "),
              _c("code", [_vm._v("vendor")]),
              _vm._v(", and "),
              _c("code", [_vm._v("vendorSub")]),
              _vm._v("; also changes "),
              _c("code", [_vm._v("userAgent")]),
              _vm._v(", "),
              _c("code", [_vm._v("appName")]),
              _vm._v(", "),
              _c("code", [_vm._v("platform")]),
              _vm._v(", and "),
              _c("code", [_vm._v("version")]),
              _vm._v(
                " to be more browser-like instead of based on various Node.js information."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("language")]),
              _vm._v(" and "),
              _c("code", [_vm._v("languages")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("onLine")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("javaEnabled()")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("noUI")]),
              _vm._v(".")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("formEl.action")]),
          _vm._v(
            " to return a value resolved relative to the document URL, or to return the document URL if the corresponding attribute is missing or empty."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Sped up XPath execution. (vsemozhetbyt)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("window.close()")]),
          _vm._v(
            " not correctly clearing event listeners on the document. (Ojek)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed a regression introduced in v9.0.0 where invalid CSS would cause a crash while attempting to parse it. Instead, a "
          ),
          _c("code", [_vm._v('"jsdomError"')]),
          _vm._v(" will now be emitted to the virtual console.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_9-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_9-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 9.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This major release removes jsdom's support for mutation events. Mutation events were never well-specified, and the modern DOM Standard omits them in the hopes that they can be removed from browsers (although this has not yet happened in major browser engines). We had hoped to implement their modern alternative, mutation observers, before performing this removal, to give jsdom users the same capabilities."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "However, recent performance investigations revealed that mutation events were the major bottleneck in most jsdom operations; tools like "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/bterlson/ecmarkup",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("ecmarkup"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " which make heavy use of jsdom had their running time halved by removing mutation events, which add serious overhead to every DOM mutation. As such, we are doing a major release with them removed, so that jsdom users can benefit from this massive performance gain."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Mutation observer support is "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/issues/639",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("in progress"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          "; please use the GitHub reactions feature to vote on that issue if you are impacted by this removal and are hoping for mutation observer support to replace it."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Your normal change log follows:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Removed mutation events")]),
          _vm._v(", as discussed above.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("DOMTokenList.prototype.replace")]),
          _vm._v(" method. (nicolashenry)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("DOMTokenList.prototype.contains")]),
          _vm._v(
            " to no longer validate its arguments, as per the latest spec. (nicolashenry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Made various improvements to XMLHttpRequest (nicolashenry):\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("Added the "),
              _c("code", [_vm._v("responseURL")]),
              _vm._v(" property.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Updated methods, headers, and header values to use the "),
              _c("code", [_vm._v("ByteString")]),
              _vm._v(" algorithm.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed the default "),
              _c("code", [_vm._v("statusText")]),
              _vm._v(" to be "),
              _c("code", [_vm._v('""')]),
              _vm._v(" instead of "),
              _c("code", [_vm._v('"OK"')]),
              _vm._v(".")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("Blob")]),
          _vm._v(" constructor's "),
          _c("code", [_vm._v("type")]),
          _vm._v(" validation. (nicolashenry)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-5-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-5-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.5.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added encoding handling (nicolashenry)\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("jsdom.env")]),
              _vm._v(
                ", when given a URL or file, will decode the resulting bytes using signals like the "
              ),
              _c("code", [_vm._v("Content-Type")]),
              _vm._v(" header, "),
              _c("code", [_vm._v("<meta charset>")]),
              _vm._v(
                " declaration, or presence of a BOM, in the same manner as web browsers."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Fetching external resources, via mechanisms such as XMLHttpRequest or "
              ),
              _c("code", [_vm._v("<script>")]),
              _vm._v("/"),
              _c("code", [_vm._v("<link>")]),
              _vm._v("/"),
              _c("code", [_vm._v("<iframe>")]),
              _vm._v(" tags, will also account for such signals.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("jsdom.jsdom()")]),
              _vm._v(
                ', which takes a string, still sets a "UTF-8" encoding by default, since there are no bytes or headers for it to sniff an encoding from.'
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("iframe.sandbox")]),
          _vm._v(
            " property, since it was not implemented and simply crashed when used."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("element.sourceIndex")]),
          _vm._v(
            " property, since it was nonstandard (Internet Explorer only)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed setting proxied inline event handlers, such as "),
          _c("code", [_vm._v("doc.body")]),
          _vm._v("'s "),
          _c("code", [_vm._v('onload=""')]),
          _vm._v(
            " attribute, for documents that do not have a browsing context."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-4-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-4-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.4.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed an issue where setting "),
          _c("code", [_vm._v("selected")]),
          _vm._v(" on an multi-select would clear all other selectedness.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.4.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added an implementation of the "),
          _c("code", [_vm._v("TreeWalker")]),
          _vm._v(" class (and "),
          _c("code", [_vm._v("document.createTreeWalker")]),
          _vm._v("). (garycourt)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed a few minor bugs in URL parsing and the "),
          _c("code", [_vm._v("URL")]),
          _vm._v(" API, by upgrading to "),
          _c("code", [_vm._v("whatwg-url")]),
          _vm._v(" v2.0.1.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed a few issues with generated files in the published package, which seem to have impacted webpack users."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-3-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-3-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.3.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed an issue where if you modified "),
          _c("code", [_vm._v("Object.prototype")]),
          _vm._v(
            ", spurious attributes would show up on your jsdom nodes. (deckar01)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.3.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added image loading and decoding, when the "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(
            " npm package is installed (lehni). In practice, this means that if you enable fetching "
          ),
          _c("code", [_vm._v('"img"')]),
          _vm._v(" external resources, then:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("img.naturalWidth")]),
              _vm._v(", "),
              _c("code", [_vm._v("img.naturalHeight")]),
              _vm._v(", "),
              _c("code", [_vm._v("img.width")]),
              _vm._v(", "),
              _c("code", [_vm._v("img.height")]),
              _vm._v(", "),
              _c("code", [_vm._v("img.complete")]),
              _vm._v(", and "),
              _c("code", [_vm._v("img.currentSrc")]),
              _vm._v(" will update themselves correctly as the image loads")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("load")]),
              _vm._v(" and "),
              _c("code", [_vm._v("error")]),
              _vm._v(" events will fire on the "),
              _c("code", [_vm._v("<img>")]),
              _vm._v(" element, according to how well image decoding goes.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "You can draw images onto canvases, using the newly-enabled "
              ),
              _c("code", [_vm._v("canvasContext.drawImage")]),
              _vm._v(" API.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("canvasContext.createPattern")]),
          _vm._v(" and "),
          _c("code", [_vm._v("canvasContext.toBlob")]),
          _vm._v(", when the "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" npm package is installed. (lehni)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a basic implementation of the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://w3c.github.io/page-visibility/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Page Visibility API"), _c("OutboundLink")],
            1
          ),
          _vm._v(", in particular a "),
          _c("code", [_vm._v("document.hidden")]),
          _vm._v(" property that always returns "),
          _c("code", [_vm._v("true")]),
          _vm._v(", and a "),
          _c("code", [_vm._v("document.visibilityState")]),
          _vm._v(" property that always returns "),
          _c("code", [_vm._v('"prerender"')]),
          _vm._v(". This is a more standard alternative to our proprietary "),
          _c("code", [_vm._v("navigator.noUI")]),
          _vm._v(
            ", which will be removed whenever we release v9.0.0. (kapouer)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added correct click behavior for inputs (jeffcarp):\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("change")]),
              _vm._v(" and "),
              _c("code", [_vm._v("input")]),
              _vm._v(" events now fire appropriately")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                'The "click in progress" flag is implemented, so you cannot click while a click is in progress'
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Canceling a click event appropriately resets radio buttons and checkboxes"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated our XMLHttpRequest implementation with a variety of fixes and features, including preliminary CORS support. (nicolashenry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a "),
          _c("code", [_vm._v("strictSSL")]),
          _vm._v(
            " top-level option to govern all requests jsdom makes. (nicolashenry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "XHTML frames and iframes are now parsed as XML instead of HTML. (nicolashenry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("document.origin")]),
          _vm._v(" and "),
          _c("code", [_vm._v("document.lastModified")]),
          _vm._v(". (nicolashenry)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("scriptEl.text")]),
          _vm._v(" getter and setter to follow the spec.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed script execution to check against the canonical list of JavaScript MIME types and only execute those scripts as JavaScript."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-1-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-1-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.1.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed input selection methods and properties to properly differentiate between inputs that can be selected outright vs. textual inputs which allow variable-length selection. (yaycmyk)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("attr.nodeName")]),
          _vm._v(", which was "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/dom/issues/171",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("recently re-added to the spec"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added click-proxying behavior from "),
          _c("code", [_vm._v("<label>")]),
          _vm._v("s to their labeled form elements. (yaycmyk)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a setter for "),
          _c("code", [_vm._v("element.classList")]),
          _vm._v(" per recent spec changes (it forwards to "),
          _c("code", [_vm._v("element.classList.value")]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated our attributes implementation in a few ways for recent spec changes and to fix discovered bugs:\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("element.getAttributeNames()")]),
              _vm._v(". ("),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://github.com/whatwg/dom/issues/115",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("spec addition"), _c("OutboundLink")],
                1
              ),
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("setAttributeNode")]),
              _vm._v(" and "),
              _c("code", [_vm._v("setAttributeNodeNS")]),
              _vm._v(
                " can now replace an attribute node, instead of removing the old one and adding a new one; this avoids changing the order in the attribute list. ("
              ),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://github.com/whatwg/dom/issues/116",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("spec change"), _c("OutboundLink")],
                1
              ),
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("NamedNodeMap")]),
              _vm._v(
                " named properties are now lowercase (except in edge cases involving XML documents or non-HTML elements). ("
              ),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://github.com/whatwg/dom/issues/141",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("spec change"), _c("OutboundLink")],
                1
              ),
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("NamedNodeMap")]),
              _vm._v(" named properties are now non-enumerable.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("The "),
              _c("code", [_vm._v('"DOMAttrModified"')]),
              _vm._v(" mutation event's "),
              _c("code", [_vm._v("relatedNode")]),
              _vm._v(" is now the new "),
              _c("code", [_vm._v("Attr")]),
              _vm._v(" object, not the "),
              _c("code", [_vm._v("Node")]),
              _vm._v(", as per spec.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("DOMTokenList")]),
          _vm._v(" to have a "),
          _c("code", [_vm._v("value")]),
          _vm._v(" property per "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/dom/issues/119",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("recent spec changes"), _c("OutboundLink")],
            1
          ),
          _vm._v("; its "),
          _c("code", [_vm._v("toString")]),
          _vm._v(" serialization also changed slightly.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("tc.headers")]),
          _vm._v(" to be a "),
          _c("code", [_vm._v("DOMTokenList")]),
          _vm._v(" that simply reflects the "),
          _c("code", [_vm._v("headers")]),
          _vm._v(
            " attribute; previously it was a string, with its computation doing some weird stuff."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.implementation.createDocument()")]),
          _vm._v(
            " to create a document with its parsing mode set to XML, which affects a variety of DOM APIs in small ways."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("EventTarget.prototype.constructor")]),
          _vm._v(" to be correct; it was previously "),
          _c("code", [_vm._v("Window")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("option.index")]),
          _vm._v(" for "),
          _c("code", [_vm._v("<option>")]),
          _vm._v("s not inside a "),
          _c("code", [_vm._v("<select>")]),
          _vm._v(" to no longer error.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("tc.cellIndex")]),
          _vm._v(" for "),
          _c("code", [_vm._v("<td>")]),
          _vm._v("s and "),
          _c("code", [_vm._v("<th>")]),
          _vm._v("s not inside a "),
          _c("code", [_vm._v("<tr>")]),
          _vm._v(" to no longer error.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("tr.sectionRowIndex")]),
          _vm._v(" for "),
          _c("code", [_vm._v("<tr>")]),
          _vm._v("s not inside a "),
          _c("code", [_vm._v("<table>")]),
          _vm._v(", "),
          _c("code", [_vm._v("<tbody>")]),
          _vm._v(", "),
          _c("code", [_vm._v("<thead>")]),
          _vm._v(", or "),
          _c("code", [_vm._v("<tfoot>")]),
          _vm._v(" to no longer error.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed the "),
          _c("code", [_vm._v('"keyevents"')]),
          _vm._v(" alias for "),
          _c("code", [_vm._v('"keyboardevent"')]),
          _vm._v(" when using "),
          _c("code", [_vm._v("document.createEvent")]),
          _vm._v(", "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/whatwg/dom/issues/148",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("per recent spec changes"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-0-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-0-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.0.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("this")]),
          _vm._v(" value when you pass a "),
          _c("code", [_vm._v("{ handleEvent() { ... } }")]),
          _vm._v(" object to "),
          _c("code", [_vm._v("addEventListener")]),
          _vm._v(". (thetalecrafter)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-0-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-0-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.0.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("HTMLOptionElement.prototype.label")]),
          _vm._v("; a typo was causing it to not work at all. (karlhorky)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(
            " minimum version to ensure all jsdom installs (not just fresh ones) get the benefit of "
          ),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v("'s recently-better "),
          _c("code", [_vm._v("padding")]),
          _vm._v(" and "),
          _c("code", [_vm._v("margin")]),
          _vm._v(" parsing/CSSOM.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-0-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-0-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.0.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed an issue where custom user agents would not propagate to "
          ),
          _c("code", [_vm._v("navigator.userAgent")]),
          _vm._v(" in frames and iframes.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improved our "),
          _c("code", [_vm._v("document.activeElement")]),
          _vm._v(
            " implementation to be a bit smarter; we still don't have full focus/blur/active element semantics, but at least now it falls back to the "
          ),
          _c("code", [_vm._v("<body>")]),
          _vm._v(
            " element when the active element is removed from the document or when no element has been focused yet."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-0-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-0-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.0.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed an issue where the "),
          _c("code", [_vm._v("this")]),
          _vm._v(
            " inside event handler callbacks was not equal to the event's current target. (Surprisingly there were no tests for this!)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_8-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_8-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 8.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This major release includes a large rewrite of most of the DOM and HTML classes exposed in jsdom. A lot of their behavior is generated from their specs' IDL syntax, taking care of many type conversions, attribute/property reflections, and much more. Many properties that were previously not present are now available, and almost everything behaves in a more spec-compliant way. Additionally, for these classes all of their implementation details are no longer available as underscore-prefixed properties, but instead are hidden behind a single symbol."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Although normally jsdom does not mark a new major release for changes that simply update us to the latest specs or hide internal implementation details better, the magnitude of the changes is so extensive that we want to bump the major version in order to ensure that consumers perform adequate testing before upgrading. But, you should definitely upgrade! The new stuff is really awesome!"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Reimplemented "),
          _c("code", [_vm._v("Location")]),
          _vm._v(", "),
          _c("code", [_vm._v("History")]),
          _vm._v(", and "),
          _c("code", [_vm._v("HTMLHyperlinkElementUtils")]),
          _vm._v(" (used by both "),
          _c("code", [_vm._v("HTMLAnchorElement")]),
          _vm._v(" and "),
          _c("code", [_vm._v("HTMLAreaElement")]),
          _vm._v(") according to the latest specs, and using the latest "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/whatwg-url",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("whatwg-url"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " package. This greatly improves our correctness on URL resolution and navigation (to the extent we support navigation, i.e. "
          ),
          _c("code", [_vm._v("pushState")]),
          _vm._v(
            " and changing the hash). It should also improve parsing speed as we no longer parse and resolve URLs during parsing."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("Element.prototype.insertAdjacentHTML")]),
          _vm._v(". (kasperisager)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("Node.prototype.adoptNode")]),
          _vm._v(", and adopt nodes during insertion instead of throwing "),
          _c("code", [_vm._v('"WrongDocumentError"')]),
          _vm._v("s. (dmethvin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added a stub "),
          _c("code", [_vm._v("Element.prototype.getClientRects")]),
          _vm._v(" to match our stub "),
          _c("code", [_vm._v("getBoundingClientRect")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("setTimeout")]),
          _vm._v(" and "),
          _c("code", [_vm._v("setInterval")]),
          _vm._v(" to return numeric IDs, instead of objects. (alvarorahul)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("setTimeout")]),
          _vm._v(" and "),
          _c("code", [_vm._v("setInterval")]),
          _vm._v(
            " to accept string arguments to eval, and to pass along extra arguments after the first two."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed certain style shorthand properties not updating their component properties or parsing correctly. (dpvc)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("Event")]),
          _vm._v(
            " object creation to always initialize the event objects, unless using "
          ),
          _c("code", [_vm._v("document.createEvent")]),
          _vm._v(", even for events with name "),
          _c("code", [_vm._v('""')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed iframes to go through the custom resource loader. (chrmarti)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "http://www.w3.org/TR/2003/CR-DOM-Level-3-LS-20031107/load-save.html",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v('"DOM Load and Save"'), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " stub implementation. That spec was never implemented in browsers, and jsdom only contained stubs."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Removed other minor unimplemented, stub, or no-longer-standard APIs from "DOM Level 3", like the user-data API, '
          ),
          _c("code", [_vm._v("DOMError")]),
          _vm._v(", "),
          _c("code", [_vm._v("DOMConfiguration")]),
          _vm._v(", and "),
          _c("code", [_vm._v("DOMStringList")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_7-2-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_7-2-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 7.2.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("canvasEl.toDataURL()")]),
          _vm._v(", with the "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" npm package installed; a recent update to the "),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" package broke how we were passing arguments to do.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("data:")]),
          _vm._v(" URL parsing to allow empty contents, e.g. "),
          _c("code", [_vm._v("data:text/css;base64,")]),
          _vm._v(". (sebmck)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_7-2-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_7-2-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 7.2.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed a regression in XML parsing of attributes with a namespace URL but no prefix (e.g. "
          ),
          _c("code", [
            _vm._v('<math xmlns="http://www.w3.org/1998/Math/MathML">')
          ]),
          _vm._v(").")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_7-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_7-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 7.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added support for text selection APIs on "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<textarea>")]),
          _vm._v("! (sjelin and yaycmyk)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Replaced our default XML parser with "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.npmjs.com/package/sax",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("sax"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ", thus fixing many (but not all) issues with XML and XHTML parsing. To get a flavor of the issues fixed, check out these now-closed bugs: "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/issues/393",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#393"), _c("OutboundLink")],
            1
          ),
          _vm._v(", "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/issues/651",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#651"), _c("OutboundLink")],
            1
          ),
          _vm._v(", "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/issues/415",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#415"), _c("OutboundLink")],
            1
          ),
          _vm._v(", "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/issues/1276",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#1276"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("<canvas>")]),
          _vm._v(
            " tag to reset its contents when its width or height changed, including the change from the default 300 × 150 canvas. (Applies only when using the "
          ),
          _c("code", [_vm._v("canvas")]),
          _vm._v(" npm package.)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed an issue where "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(
            "s would get confused when they contained elements with numeric "
          ),
          _c("code", [_vm._v("id")]),
          _vm._v("s or "),
          _c("code", [_vm._v("name")]),
          _vm._v("s.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed an issue with doctype parsing confusing the system ID and public ID."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Made the task posted by "),
          _c("code", [_vm._v("postMessage")]),
          _vm._v(
            " use the inside-jsdom timer queue, instead of the Node.js one. This allows easier mocking. (cpojer)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_7-1-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_7-1-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 7.1.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("When "),
          _c("code", [_vm._v("<iframe>")]),
          _vm._v(
            "s have unresolvable URLs, jsdom will no longer crash, but will instead just load "
          ),
          _c("code", [_vm._v("about:blank")]),
          _vm._v(" into them. (This is the spec behavior.)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.writeln")]),
          _vm._v(
            " to correctly handle multiple arguments; previously it ignored all after the first."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("FileList")]),
          _vm._v(" objects to no longer have a property named "),
          _c("code", [_vm._v('"undefined"')]),
          _vm._v(". (jfremy)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_7-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_7-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 7.1.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This is a rather large release bringing with it several important re-implementations of DOM and HTML APIs."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Our "),
          _c("code", [_vm._v("EventTarget")]),
          _vm._v(
            " implementation has been rewritten from scratch to follow the spec exactly. This should improve any edge case misbehaviors."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Our "),
          _c("code", [_vm._v("Event")]),
          _vm._v(
            " class hierarchy has been rewritten and fleshed out, fixing many gaps in functionality.\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("Previously missing classes "),
              _c("code", [_vm._v("KeyboardEvent")]),
              _vm._v(" and "),
              _c("code", [_vm._v("TouchEvent")]),
              _vm._v(" are now implemented.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Almost all supported "),
              _c("code", [_vm._v("Event")]),
              _vm._v(" subclasses now have constructors. ("),
              _c("code", [_vm._v("TouchEvent")]),
              _vm._v(" does not yet, and "),
              _c("code", [_vm._v("MutationEvent")]),
              _vm._v(" is specified to not have one.)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "All classes now have correct public APIs, e.g. getters instead of data properties, missing properties added, and constructors that correctly allow setting all the supported properties."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v('document.createEvent("customevent", ...)')]),
              _vm._v(" now correctly creates a "),
              _c("code", [_vm._v("CustomEvent")]),
              _vm._v(" instead of an "),
              _c("code", [_vm._v("Event")]),
              _vm._v(", and "),
              _c("code", [_vm._v("CustomEvent.prototype.initProgressEvent")]),
              _vm._v(" has been replaced with "),
              _c("code", [_vm._v("CustomEvent.prototype.initCustomEvent")]),
              _vm._v(".")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("The "),
          _c("code", [_vm._v("Attr")]),
          _vm._v(
            " class and related attribute-manipulating methods has been rewritten to follow the latest specification. In particular, "
          ),
          _c("code", [_vm._v("Attr")]),
          _vm._v(" is no longer a subclass of "),
          _c("code", [_vm._v("Node")]),
          _vm._v(", and no longer has child text nodes.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("The "),
          _c("code", [_vm._v("<template>")]),
          _vm._v(
            " element implementation has been greatly improved, now passing most web platform tests. Its "
          ),
          _c("code", [_vm._v(".content")]),
          _vm._v(
            " property no longer has an extra intermediate document fragment; it no longer has child nodes; and related parts of the parser and serializer have been fixed, including "
          ),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(" and "),
          _c("code", [_vm._v("outerHTML")]),
          _vm._v(", to now work as specified.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("querySelector")]),
          _vm._v(", "),
          _c("code", [_vm._v("querySelectorAll")]),
          _vm._v(", and "),
          _c("code", [_vm._v("matches")]),
          _vm._v(" now correctly throw "),
          _c("code", [_vm._v('"SyntaxError"')]),
          _vm._v(" "),
          _c("code", [_vm._v("DOMException")]),
          _vm._v("s for invalid selectors, instead of just "),
          _c("code", [_vm._v("Error")]),
          _vm._v(" instances.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("Node.prototype")]),
          _vm._v("'s "),
          _c("code", [_vm._v("insertBefore")]),
          _vm._v(", "),
          _c("code", [_vm._v("replaceChild")]),
          _vm._v(", and "),
          _c("code", [_vm._v("appendChild")]),
          _vm._v(" methods now check their arguments more correctly.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "The browser builds now have regained the ability to fetch URLs for content and the like; this had been broken due to an issue with the browser-request package, which is no longer necessary anyway."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_7-0-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_7-0-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 7.0.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed an issue where inside jsdom "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" code, "),
          _c("code", [_vm._v("/regexpliteral/ instanceof RegExp")]),
          _vm._v(" would be "),
          _c("code", [_vm._v("false")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_7-0-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_7-0-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 7.0.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed two bugs with "),
          _c("code", [_vm._v("Node.prototype.isEqualNode")]),
          _vm._v(":\n"),
          _c("ul", [
            _c("li", [
              _vm._v("It would previously always return "),
              _c("code", [_vm._v("true")]),
              _vm._v(" for comparing any two doctypes.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "It would throw an error when trying to compare two elements that had attributes."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Enforced that "),
          _c("code", [_vm._v("document.implementation.createDocumentType")]),
          _vm._v(" requires all three of its arguments.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_7-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_7-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 7.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This major release has as its headlining feature a completely re-written "
        ),
        _c("code", [_vm._v("XMLHttpRequest")]),
        _vm._v(" implementation, in a heroic effort by "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/nicolashenry",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("@nicolashenry"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ". It includes a number of other smaller improvements and fixes. The breaking changes are highlighted in bold below."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Node.js 4.0 onward is now required")]),
          _vm._v(", as we have begun using ES2015 features only present there.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Completely re-implemented "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" and related classes (nicolashenry):\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Includes support for "),
              _c("code", [_vm._v("Blob")]),
              _vm._v(", "),
              _c("code", [_vm._v("File")]),
              _vm._v(", "),
              _c("code", [_vm._v("FileList")]),
              _vm._v(", "),
              _c("code", [_vm._v("FileReader")]),
              _vm._v(", "),
              _c("code", [_vm._v("FormData")]),
              _vm._v(", "),
              _c("code", [_vm._v("ProgressEvent")]),
              _vm._v(", and the supporting "),
              _c("code", [_vm._v("XMLHttpRequestUpload")]),
              _vm._v(", and "),
              _c("code", [_vm._v("XMLHttpRequestEventTarget")]),
              _vm._v(" interfaces.")
            ]),
            _vm._v(" "),
            _c("li", [_vm._v("Includes support for synchronous XHRs.")]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Adds some new request-management abilities, documented in the readme. In short, the "
              ),
              _c("code", [_vm._v("pool")]),
              _vm._v(", "),
              _c("code", [_vm._v("agentOptions")]),
              _vm._v(", and "),
              _c("code", [_vm._v("userAgent")]),
              _vm._v(" options are new, and resource loads can now be aborted.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "These implementations are extremely complete and standards-compliant, passing 136 newly-introduced web platform tests."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("document.charset")]),
          _vm._v(", an alias for "),
          _c("code", [_vm._v("document.characterSet")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("HTMLTemplateElement.prototype.content")]),
          _vm._v(", for getting the contents of a "),
          _c("code", [_vm._v("<template>")]),
          _vm._v(" element as a document fragment. (rickychien)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Implemented "loose" cookie parsing, giving correct execution of code like '
          ),
          _c("code", [_vm._v('document.cookie = "foo"')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Several fixes related to event dispatching and creation, including the addition of "
          ),
          _c("code", [_vm._v("Event.prototype.stopImmediatePropagation")]),
          _vm._v(" and the constants "),
          _c("code", [_vm._v("NONE")]),
          _vm._v(", "),
          _c("code", [_vm._v("CAPTURING_PHASE")]),
          _vm._v(", "),
          _c("code", [_vm._v("AT_TARGET")]),
          _vm._v(", and "),
          _c("code", [_vm._v("BUBBLING_PHASE")]),
          _vm._v(
            ". This accounted for another 15 newly-passing web platform tests. (nicolashenry)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.styleSheets")]),
          _vm._v(
            " to correctly track the removal of stylesheets from the document. (AVGP)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("created")]),
          _vm._v(" jsdom lifecycle callback receiving a different "),
          _c("code", [_vm._v("window")]),
          _vm._v(" object than the "),
          _c("code", [_vm._v("loaded")]),
          _vm._v(" or "),
          _c("code", [_vm._v("done")]),
          _vm._v(" callbacks when scripting was enabled.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [
            _vm._v(
              "Invalid URLs are no longer allowed when creating a jsdom document"
            )
          ]),
          _vm._v("; the URL must be parseable, or an error will be thrown.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [
            _vm._v("The "),
            _c("code", [_vm._v("{ omitJsdomErrors }")]),
            _vm._v(" option of the virtual console has moved")
          ]),
          _vm._v(
            "; it is no longer provided when creating the virtual console, but instead when calling "
          ),
          _c("code", [_vm._v("sendTo")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_6-5-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_6-5-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 6.5.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed an issue where with "),
          _c("code", [_vm._v("jsdom.jsdom")]),
          _vm._v(", you had to pass "),
          _c("code", [_vm._v("referrer")]),
          _vm._v(" and "),
          _c("code", [_vm._v("cookie")]),
          _vm._v(" options as top-level, whereas with "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(", you had to nest them under a "),
          _c("code", [_vm._v("document")]),
          _vm._v(
            " option. This was unnecessarily confusing. Now both possibilities are allowed for both functions. (The readme only documents the top-level version, though.)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_6-5-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_6-5-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 6.5.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("NodeList.prototype[Symbol.iterator]")]),
          _vm._v(", so you can now use "),
          _c("code", [_vm._v("for")]),
          _vm._v("-"),
          _c("code", [_vm._v("of")]),
          _vm._v(" loops with "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v("s.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_6-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_6-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 6.4.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("jsdom.nodeLocation(node)")]),
          _vm._v(" to get the location within the source text of a given node.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("jsdom.reconfigureWindow(window, { top })")]),
          _vm._v(" to allow changing the value of a window's "),
          _c("code", [_vm._v("top")]),
          _vm._v(" property.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("element")]),
          _vm._v(
            " argument to the custom resource loader, so you can customize resource loads depending on which element loaded them."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("getElementsByClassName")]),
          _vm._v(
            " to match the spec. It now correctly splits on whitespace to try to find elements with all the given classes; it returns a "
          ),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(" instead of a "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v("; and it memoizes the result.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(" and "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(" to match the spec. The most noticable change is that "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v(" no longer inherits from "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_6-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_6-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 6.3.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added a fully spec-compliant implementation of "),
          _c("code", [_vm._v("window.atob")]),
          _vm._v(" and "),
          _c("code", [_vm._v("window.btoa")]),
          _vm._v(". (jeffcarp)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed many issues with our "),
          _c("code", [_vm._v("<canvas>")]),
          _vm._v(" implementation:\n"),
          _c("ul", [
            _c("li", [
              _vm._v("With the "),
              _c("code", [_vm._v("canvas")]),
              _vm._v(" npm package installed, "),
              _c("code", [_vm._v("<canvas>")]),
              _vm._v(" elements are now properly "),
              _c("code", [_vm._v("instanceof HTMLCanvasElement")]),
              _vm._v(" and "),
              _c("code", [_vm._v("instanceof HTMLElement")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("<canvas>")]),
              _vm._v(
                " elements now present the same uniform spec-compliant API both with and without the "
              ),
              _c("code", [_vm._v("canvas")]),
              _vm._v(
                " npm package installed. If the package is not installed, some of the methods will cause not-implemented "
              ),
              _c("code", [_vm._v("jsdomError")]),
              _vm._v(" events to be emitted on the virtual console.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("The "),
              _c("code", [_vm._v("width")]),
              _vm._v(" and "),
              _c("code", [_vm._v("height")]),
              _vm._v(" properties now correctly reflect the "),
              _c("code", [_vm._v("width")]),
              _vm._v(" and "),
              _c("code", [_vm._v("height")]),
              _vm._v(
                " attributes, and have the appropriate default values of "
              ),
              _c("code", [_vm._v("300")]),
              _vm._v(" and "),
              _c("code", [_vm._v("150")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("With the "),
              _c("code", [_vm._v("canvas")]),
              _vm._v(" npm package installed, "),
              _c("code", [_vm._v("<canvas>")]),
              _vm._v(
                " elements now generally play better with other parts of jsdom, e.g., "
              ),
              _c("code", [_vm._v("document.getElementById")]),
              _vm._v(" actually works with them.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Introduced and upated many of our element classes, so that at least every tag name/element class pair is now correct, even if some of the classes are stubs. In particular:\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("Complete implementations were added for "),
              _c("code", [_vm._v("HTMLDataElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLSpanElement")]),
              _vm._v(", and "),
              _c("code", [_vm._v("HTMLTimeElement")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Stubs were added for "),
              _c("code", [_vm._v("HTMLDataListElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLDialogElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLEmbedElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLMeterElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLOutputElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLProgressElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLSourceElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLTemplateElement")]),
              _vm._v(", and "),
              _c("code", [_vm._v("HTMLTrackElement")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("HTMLAudioElement")]),
              _vm._v(" was implemented in full, although its "),
              _c("code", [_vm._v("HTMLMediaElement")]),
              _vm._v(
                " base, where most of its functionality is, is still largely a stub."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("HTMLTableSectionElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLTableRowElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLTableCellElement")]),
              _vm._v(", "),
              _c("code", [_vm._v("HTMLTableDataCellElement")]),
              _vm._v(", and "),
              _c("code", [_vm._v("HTMLTableHeaderCellElement")]),
              _vm._v(" were updated to the latest spec.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("HTMLIsIndexElement")]),
              _vm._v(
                " was removed; it has never been produced by the parser since 1.0.0-pre.1, and so it has been just a vestigial global property."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Appropriate constants were added to "),
              _c("code", [_vm._v("HTMLMediaElement")]),
              _vm._v(".")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated everything having to do with base URLs to be per-spec:\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Node.prototype.baseURI")]),
              _vm._v(" property to get the node's owner document's base URL.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("HTMLBaseElement")]),
              _vm._v("'s "),
              _c("code", [_vm._v("href")]),
              _vm._v(
                " getter now contains appropriate fallbacks and always returns an absolute URL, per spec."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("If there are no "),
              _c("code", [_vm._v("base")]),
              _vm._v(" elements in an "),
              _c("code", [_vm._v('"about:blank"')]),
              _vm._v(
                " iframe document, the base URL correctly falls back to the parent window's base URL."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("When you provide a "),
          _c("code", [_vm._v("url: ...")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("jsdom.jsdom()")]),
          _vm._v(" or "),
          _c("code", [_vm._v("jsdom.env()")]),
          _vm._v(
            ", the given string is now attempted to be resolved as a URL before it is installed as "
          ),
          _c("code", [_vm._v("document.URL")]),
          _vm._v(".\n"),
          _c("ul", [
            _c("li", [
              _vm._v("So for example, providing "),
              _c("code", [_vm._v('url: "http://example.com"')]),
              _vm._v(" will mean "),
              _c("code", [_vm._v("document.URL")]),
              _vm._v(" returns "),
              _c("code", [_vm._v('"http://example.com/"')]),
              _vm._v(", with a trailing slash.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "In a future major release, we will start throwing if strings that cannot be parsed as valid absolute URL are provided for this option."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_6-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_6-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 6.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added a full-featured, spec-compliant "),
          _c("code", [_vm._v("Element.prototype.classList")]),
          _vm._v(", closing out a three-year old issue! (wacii)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Made "),
          _c("code", [_vm._v("virtualConsole.sendTo(console)")]),
          _vm._v(" forward "),
          _c("code", [_vm._v('"jsdomError"')]),
          _vm._v("s to "),
          _c("code", [_vm._v("console")]),
          _vm._v(" by calling "),
          _c("code", [_vm._v("console.error")]),
          _vm._v(". This can be turned off by doing "),
          _c("code", [
            _vm._v("virtualConsole.sendTo(console, { omitJsdomErrors: true })")
          ]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed errors when trying to parse invalid doctype declarations, like "
          ),
          _c("code", [_vm._v("<!DOCTYPE>")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed spurious "),
          _c("code", [_vm._v('"jsdomError"')]),
          _vm._v("s that were emitted after calling "),
          _c("code", [_vm._v("window.close()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("DOMSubtreeModified")]),
          _vm._v(
            " event to fire in more cases. Note that our mutation events implementation remains incomplete, and will eventually be removed (in a major release) once we implement mutation observers. (selam)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_6-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_6-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 6.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added basic implementations of "),
          _c("code", [_vm._v("HTMLMediaElement")]),
          _vm._v(" and "),
          _c("code", [_vm._v("HTMLVideoElement")]),
          _vm._v(", back-ported from Facebook's Jest project. (cpojer)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_6-0-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_6-0-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 6.0.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [
            _vm._v("XMLHttpRequest.prototype.getAllResponseHeaders")
          ]),
          _vm._v(" to not crash when used with "),
          _c("code", [_vm._v("file:")]),
          _vm._v(" URLs. (justinmchase)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("XMLHttpRequest.prototype.response")]),
          _vm._v(" to correctly return the response text even when "),
          _c("code", [_vm._v("responseType")]),
          _vm._v(" was unset. (justinmchase)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_6-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_6-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 6.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This major release is focused on massive improvements in speed, URL parsing, and error handling. The potential breaking changes are highlighted in bold below; the largest ones are around the "
        ),
        _c("code", [_vm._v("jsdom.env")]),
        _vm._v(" error-handling paradigm.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("This release also welcomes "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/jsdom/jsdom/commits/master?author=Joris-van-der-Wel",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("long-time contributer"), _c("OutboundLink")],
          1
        ),
        _vm._v(" "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/Joris-van-der-Wel/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("@Joris-van-der-Wel"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " to the core team. You may recognize him from earlier changelogs. We're very happy to have his help in making jsdom awesome!"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("io.js 2.0 onward is now required")]),
          _vm._v(", as we have begun using ES2015 features only present there.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Improved performance dramatically, by ~10000x in some cases, due to the following changes:\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Overhauled the named properties tracker to not walk the entire tree, thus greatly speeding up the setting of "
              ),
              _c("code", [_vm._v("id")]),
              _vm._v(" and "),
              _c("code", [_vm._v("name")]),
              _vm._v(" attributes (including during parsing).")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Overhauled everything dealing with tree traversal to use a new library, "
              ),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://github.com/jsdom/js-symbol-tree",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("symbol-tree"), _c("OutboundLink")],
                1
              ),
              _vm._v(
                ", to turn many operations that were previously O(n^2) or O(n) into O(n) or O(1)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Sped up "),
              _c("code", [_vm._v("node.compareDocumentPosition")]),
              _vm._v(" and anything that used it (like "),
              _c("code", [_vm._v("node.contains")]),
              _vm._v(
                ") by doing more intelligent tree traversal instead of directly implementing the specced algorithm."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Overhauled how error handling works in jsdom:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("window.onerror")]),
              _vm._v(" (or "),
              _c("code", [_vm._v('window.addEventListener("error", ...)')]),
              _vm._v(
                ") now work, and will catch all script errors, similar to in browsers. This also introduces the "
              ),
              _c("code", [_vm._v("ErrorEvent")]),
              _vm._v(" class, incidentally.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "The virtual console is now the destination for several types of errors from jsdom, using "
              ),
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://github.com/jsdom/jsdom#virtual-console-jsdomerror-error-reporting",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [
                  _vm._v("the new event "),
                  _c("code", [_vm._v('"jsdomError"')]),
                  _c("OutboundLink")
                ],
                1
              ),
              _vm._v(
                ". This includes: errors loading external resources; script execution errors unhandled by "
              ),
              _c("code", [_vm._v("window.onerror")]),
              _vm._v(
                "; and not-implemented warnings resulting from calling methods like "
              ),
              _c("code", [_vm._v("window.alert")]),
              _vm._v(" which jsdom explicitly does not support.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Since script errors are now handled by "),
              _c("code", [_vm._v("window.onerror")]),
              _vm._v(
                " and the virtual console, they are no longer included in the initialization process. This results in two changes to "
              ),
              _c("code", [_vm._v("jsdom.env")]),
              _vm._v(" and the initialization lifecycle:\n"),
              _c("ul", [
                _c("li", [
                  _c("strong", [
                    _vm._v("The "),
                    _c("code", [_vm._v("load(errors, window)")]),
                    _vm._v(" callback was changed to "),
                    _c("code", [_vm._v("onload(window)")])
                  ]),
                  _vm._v(
                    ", to reflect that it is now just sugar for setting a "
                  ),
                  _c("code", [_vm._v("window.onload")]),
                  _vm._v(" handler.")
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("strong", [
                    _vm._v("The "),
                    _c("code", [_vm._v("done(errors, window)")]),
                    _vm._v(" callback (i.e., the default callback for "),
                    _c("code", [_vm._v("jsdom.env")]),
                    _vm._v(") has become "),
                    _c("code", [_vm._v("done(error, window)")])
                  ]),
                  _vm._v(
                    ", and like every other io.js callback now simply gives you a single error object, instead of an array of them."
                  )
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Nodes no longer have a nonstandard "),
              _c("code", [_vm._v("errors")]),
              _vm._v(" array, or a "),
              _c("code", [_vm._v("raise")]),
              _vm._v(" method used to put things in that array.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "URL parsing and resolution was entirely overhauled to follow "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "http://url.spec.whatwg.org/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("the URL standard"), _c("OutboundLink")],
            1
          ),
          _vm._v("!\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "This fixes several long-standing bugs and hacks in the jsdom URL parser, which already had a mess of gross patches on top of the built-in io.js parser to be more web-compatible."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("The new "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://url.spec.whatwg.org/#url",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [
                  _c("code", [_vm._v("URL")]),
                  _vm._v(" class"),
                  _c("OutboundLink")
                ],
                1
              ),
              _vm._v(" has been added to "),
              _c("code", [_vm._v("window")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("The interfaces for "),
              _c("code", [_vm._v("HTMLAnchorElement.prototype")]),
              _vm._v(" and "),
              _c("code", [_vm._v("document.location")]),
              _vm._v(" (as well as "),
              _c("code", [_vm._v("URL")]),
              _vm._v(", of course) are now uniformized to follow the "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://url.spec.whatwg.org/#api",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [
                  _c("code", [_vm._v("URLUtils")]),
                  _vm._v(" API"),
                  _c("OutboundLink")
                ],
                1
              ),
              _vm._v(" (minus "),
              _c("code", [_vm._v("searchParams")]),
              _vm._v(" for now).")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("strong", [
                _vm._v(
                  "As part of this change, you may need to start passing in "
                ),
                _c("code", [_vm._v("file:")]),
                _vm._v(" URLs to "),
                _c("code", [_vm._v("jsdom.env")]),
                _vm._v(
                  " where previously you were able to get away with passing in filenames."
                )
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the "),
          _c("code", [_vm._v("XMLHttpRequest.prototype.response")]),
          _vm._v(" getter.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("StyleSheetList.prototype.item")]),
          _vm._v(" to actually work. (chad3814)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the browser "),
          _c("code", [_vm._v("vm")]),
          _vm._v(" shim to properly add the built-in global properties ("),
          _c("code", [_vm._v("Object")]),
          _vm._v(", "),
          _c("code", [_vm._v("Array")]),
          _vm._v(
            ", etc.) to the sandbox. If you were running jsdom inside a web worker and most of your scripts were broken, this should fix that."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("hashchange")]),
          _vm._v(" event to correctly fire "),
          _c("code", [_vm._v("HashChangeEvent")]),
          _vm._v(" instances, with correct properties "),
          _c("code", [_vm._v("newURL")]),
          _vm._v(" and "),
          _c("code", [_vm._v("oldURL")]),
          _vm._v(" (instead of the incorrect "),
          _c("code", [_vm._v("newUrl")]),
          _vm._v(" and "),
          _c("code", [_vm._v("oldUrl")]),
          _vm._v(" used previously).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed usage of the setimmediate library, as it required "),
          _c("code", [_vm._v("eval")]),
          _vm._v(" and thus did not work in CSP scenarios.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Finally, if you're a loyal jsdom fan whose made it this far into the changelog, I'd urge you to come join us in "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/issues/1139",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("#1139"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ", where we are brainstorming a modernized jsdom API that could get rid of many of the warts in the current one."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-6-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-6-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.6.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed an accidentally-created global "),
          _c("code", [_vm._v("attribute")]),
          _vm._v(" variable if you ever called "),
          _c("code", [_vm._v("createAttributeNS")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Dependency upgrades fixed a couple of bugs, although you would have gotten these anyway with a clean jsdom v5.6.0 install:\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("Parsing of CSS properties that use "),
              _c("code", [_vm._v('url("quoted string")')]),
              _vm._v(" now works correctly, as of "),
              _c("code", [_vm._v("cssstyle")]),
              _vm._v(" v0.2.29.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Selectors for the empty string, like "),
              _c("code", [_vm._v('div[title=""]')]),
              _vm._v(", now work correctly, as of "),
              _c("code", [_vm._v("nwmatcher")]),
              _vm._v(" v1.3.6.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-6-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-6-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.6.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("virtualConsole.sendTo")]),
          _vm._v(" now returns "),
          _c("code", [_vm._v("this")]),
          _vm._v(", allowing for "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/jsdom/jsdom/tree/60ccb9b318d0bae8fe37e19af5af444b9c98ddac#forward-a-windows-console-output-to-the-iojs-console",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("a nice shorthand"), _c("OutboundLink")],
            1
          ),
          _vm._v(". (jeffcarp)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-5-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-5-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.5.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("postMessage")]),
          _vm._v(
            " support, for communicating between parent windows, iframes, and combinations thereof. It's missing a few semantics, especially around origins, as well as MessageEvent source. Objects are not yet structured cloned, but instead passed by reference. But it's working, and awesome! (jeffcarp)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rewrote cloning code (underlying "),
          _c("code", [_vm._v("cloneNode")]),
          _vm._v(" and "),
          _c("code", [_vm._v("importNode")]),
          _vm._v("), fixing a number of issues:\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Elements with weird tag names, of the type that only the parser can normally create, can now be cloned ("
              ),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://github.com/jsdom/jsdom/issues/1142",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("#1142"), _c("OutboundLink")],
                1
              ),
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Doctypes can now be cloned, per the latest spec.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Attrs cannot be cloned, per the latest spec (although they still have a "
              ),
              _c("code", [_vm._v("cloneNode")]),
              _vm._v(" method for now due to legacy).")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Document clones now correctly copy over the URL and content-type."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed any virtual console output from iframes to be proxied to the parent window's virtual console. (jeffcarp)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("type")]),
          _vm._v(" property of "),
          _c("code", [_vm._v("<button>")]),
          _vm._v(" elements to correctly default to "),
          _c("code", [_vm._v("submit")]),
          _vm._v(", and to stay within the allowed range.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed clicking on submit "),
          _c("code", [_vm._v("<button>")]),
          _vm._v("s to submit their containing form; previously only "),
          _c("code", [_vm._v('<input type="submit">')]),
          _vm._v(" worked. (rxgx)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.open()")]),
          _vm._v(" to return "),
          _c("code", [_vm._v("this")]),
          _vm._v(", per spec. (ryanseddon)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Additionally, Joris-van-der-Wel added "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/jsdom/jsdom/blob/master/Contributing.md#running-the-benchmarks",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("a benchmarking framework"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ", and a number of benchmarks, which should help us avoid performance regressions going forward, and also make targeted performance fixes. We're already investigating "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/issues/1156",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("some real-world issues"), _c("OutboundLink")],
          1
        ),
        _vm._v(" using this framework. Very exciting!")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-4-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-4-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.4.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Incorporated upstream fix for setting "),
          _c("code", [_vm._v("el.style.cssText")]),
          _vm._v(
            " to an invalid value, which should be ignored instead of causing an error to be thrown. This same bug has also caused an error while setting the style attribute to an invalid value, ever since 5.4.0. (Joris-van-der-Wel; chad3814 upstream)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-4-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-4-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.4.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed license metadata to conform to latest npm standards.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-4-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-4-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.4.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed to work with browserify again (regression introduced in v5.4.0)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.4.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This is a pretty exciting release! It includes a couple features I never really anticipated jsdom being awesome enough to have, but our wonderful contributors powered through and made them happen anyway:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added support for the default HTML stylesheet when using "),
          _c("code", [_vm._v("window.getComputedStyle")]),
          _vm._v("! (akhaku)\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Notably, this makes jQuery's "),
              _c("code", [_vm._v("show()")]),
              _vm._v(" and "),
              _c("code", [_vm._v("hide()")]),
              _vm._v(" methods now work correctly; see "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://github.com/jsdom/jsdom/issues/994",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("#994"), _c("OutboundLink")],
                1
              ),
              _vm._v(".")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added support for named properties on "),
          _c("code", [_vm._v("window")]),
          _vm._v(": any elements with an "),
          _c("code", [_vm._v("id")]),
          _vm._v(" attribute, or certain elements with a "),
          _c("code", [_vm._v("name")]),
          _vm._v(" attribute, will cause properties to show up on the "),
          _c("code", [_vm._v("window")]),
          _vm._v(
            ", and thus as global variables within the jsdom. (Joris-van-der-Wel)\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Although this is fairly unfortunate browser behavior, it's standardized and supported everywhere, so the fact that jsdom now supports this too means we can run a lot of scripts that would previously fail."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Previously, we only supported this for "),
              _c("code", [_vm._v("<iframe>")]),
              _vm._v("s, and our implementation was quite buggy: e.g., "),
              _c("code", [_vm._v('<iframe name="addEventListener">')]),
              _vm._v(" would override "),
              _c("code", [_vm._v("window.addEventListener")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Now that we have the infrastructure in place, we anticipate expanding our support so that this works on e.g. "
              ),
              _c("code", [_vm._v("HTMLFormElement")]),
              _vm._v("s as well in the future.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("We also have a bunch more fixes and additions:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Implemented the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://dom.spec.whatwg.org/#nondocumenttypechildnode",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _c("code", [_vm._v("NonDocumentTypeChildNode")]),
              _c("OutboundLink")
            ],
            1
          ),
          _vm._v(" mixin. Practically, this means adding "),
          _c("code", [_vm._v("nextElementSibling")]),
          _vm._v(" and "),
          _c("code", [_vm._v("previousElementSibling")]),
          _vm._v(" to "),
          _c("code", [_vm._v("Element")]),
          _vm._v(" and the various types of "),
          _c("code", [_vm._v("CharacterData")]),
          _vm._v(". (brandon-bethke-neudesic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("StyleSheetList")]),
          _vm._v(" to inherit from "),
          _c("code", [_vm._v("Array")]),
          _vm._v(", as per the latest CSSOM spec.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Overhauled the handling of attributes throughout the DOM, to follow the spec more exactly.\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v("Our "),
              _c("code", [_vm._v("NamedNodeMap")]),
              _vm._v(" implementation is up to date, as are the various "),
              _c("code", [_vm._v("Element")]),
              _vm._v(
                " methods; other places in the code that deal with attributes now all go through a spec-compliant set of helpers."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Some weirdnesses around the "),
              _c("code", [_vm._v("style")]),
              _vm._v(" attribute were fixed along the way; see e.g. "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://github.com/jsdom/jsdom/issues/1109",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("#1109"), _c("OutboundLink")],
                1
              ),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("However, "),
              _c("code", [_vm._v("Attr")]),
              _vm._v(
                " objects themselves are not yet spec-compliant (e.g., they still inherit from "
              ),
              _c("code", [_vm._v("Node")]),
              _vm._v("). That's coming soon.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed an unfortunate bug where "),
          _c("code", [_vm._v("getElementById")]),
          _vm._v(" would fail to work correctly on "),
          _c("code", [_vm._v("<img>")]),
          _vm._v(" elements whose "),
          _c("code", [_vm._v("id")]),
          _vm._v(" attributes were modified. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("virtualConsole")]),
          _vm._v(" option to work with "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(", not just "),
          _c("code", [_vm._v("jsdom.jsdom")]),
          _vm._v(". (jeffcarp)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed a few functions that were erroneously added to "),
          _c("code", [_vm._v("window")]),
          _vm._v(": "),
          _c("code", [_vm._v("mapper")]),
          _vm._v(", "),
          _c("code", [_vm._v("mapDOMNodes")]),
          _vm._v(", and "),
          _c("code", [_vm._v("visitTree")]),
          _vm._v(". (Joris-van-der-Wel)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.3.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added a "),
          _c("code", [_vm._v("virtualConsole")]),
          _vm._v(" option to the document creation methods, along with the "),
          _c("code", [_vm._v("jsdom.createVirtualConsole")]),
          _vm._v(" factory. (See "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/jsdom/jsdom/blob/dbf88666d1152576237ed1c741263f5516bb4005/README.md#capturing-console-output",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("examples in the readme"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ".) With this option you can install a virtual console before the document is even created, thus allowing you to catch any virtual console events that occur during initialization. (jeffcarp)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Implemented much of the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://dom.spec.whatwg.org/#interface-parentnode",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("ParentNode")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" mixin (Joris-van-der-Wel):\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Moved "),
              _c("code", [_vm._v("children")]),
              _vm._v(" from "),
              _c("code", [_vm._v("Node")]),
              _vm._v(" to "),
              _c("code", [_vm._v("ParentNode")]),
              _vm._v(", i.e., made it available on "),
              _c("code", [_vm._v("Document")]),
              _vm._v(", "),
              _c("code", [_vm._v("DocumentFragment")]),
              _vm._v(", and "),
              _c("code", [_vm._v("Element")]),
              _vm._v(", but not other types of nodes.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Made "),
              _c("code", [_vm._v("children")]),
              _vm._v(" a "),
              _c("code", [_vm._v("HTMLCollection")]),
              _vm._v(" instead of a "),
              _c("code", [_vm._v("NodeList")]),
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("firstElementChild")]),
              _vm._v(", "),
              _c("code", [_vm._v("lastElementChild")]),
              _vm._v(", and "),
              _c("code", [_vm._v("childElementCount")]),
              _vm._v(".")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented the "),
          _c("code", [_vm._v("outerHTML")]),
          _vm._v(" setter. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("outerHTML")]),
          _vm._v(" getter for "),
          _c("code", [_vm._v("<select>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<form>")]),
          _vm._v(". (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed various issues with window-less documents, so that they no longer give incorrect results or blow up in strange ways. You can create such documents with e.g. "
          ),
          _c("code", [_vm._v("document.implementation.createHTMLDocument()")]),
          _vm._v(". (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed relative stylesheet resolution when using "),
          _c("code", [_vm._v("@import")]),
          _vm._v(". (dbo)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added support for the "),
          _c("code", [_vm._v("NodeIterator")]),
          _vm._v(" class from the DOM Standard. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fixed an issue with the initial request where it was not sharing its cookie jar with the subsequent requests, sometimes leading to a "possible EventEmitter memory leak detected" warning. (inikulin)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Updated tough-cookie to 0.13.0, bringing along many spec compliance fixes. (inikulin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added a fast failure in Node.js™ with a clear error message, so that people don't get confused by syntax errors."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-0-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-0-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.0.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.cookie")]),
          _vm._v(" setter to no longer ignore "),
          _c("code", [_vm._v("null")]),
          _vm._v("; instead it correctly sets a cookie of "),
          _c("code", [_vm._v('"null"')]),
          _vm._v(". (Chrome is not compliant to the spec in this regard.)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed documents created with "),
          _c("code", [_vm._v('parsingMode: "xml"')]),
          _vm._v(" to no longer get "),
          _c("code", [_vm._v('"<html><head></head><body></body></html>"')]),
          _vm._v(" automatically inserted when calling "),
          _c("code", [_vm._v("jsdom.jsdom()")]),
          _vm._v(" with no arguments.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the "),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(" setter to no longer ignore "),
          _c("code", [_vm._v("undefined")]),
          _vm._v("; instead it correctly sets the innerHTML to "),
          _c("code", [_vm._v('"undefined"')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.write")]),
          _vm._v(" to throw for XML documents as per the spec.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("document.write")]),
          _vm._v(" to accept more than one argument (they get concatenated).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v('document.write("")')]),
          _vm._v(" to no longer try to write "),
          _c("code", [_vm._v('"<html><head></head><body></body></html>"')]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_5-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 5.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This release overhauls how cookies are handled in jsdom to be less fiddly and more like-a-browser. The work for this was done by "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/inikulin",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("@inikulin"), _c("OutboundLink")],
          1
        ),
        _vm._v(", who is also our beloved parse5 maintainer.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "You should only need to worry about upgrading to this release if you use jsdom's cookie handling capabilities beyond the basics of reading and writing to "
        ),
        _c("code", [_vm._v("document.cookie")]),
        _vm._v(". If that describes you, here's what changed:")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("options.jar")]),
          _vm._v(" and "),
          _c("code", [_vm._v("options.document.cookieDomain")]),
          _vm._v(" from the configuration for creating jsdom documents.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Instead, there is now a new option, "),
          _c("code", [_vm._v("options.cookieJar")]),
          _vm._v(", which accepts cookie jars created by the new "),
          _c("code", [_vm._v("jsdom.createCookieJar()")]),
          _vm._v(
            " API. You should use this if you intend to share cookie jars among multiple jsdom documents."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Within a given cookie jar, cookie access is now automatically handled on a domain basis, as the browser does, with the domain calculated from the document's URL (supplied as "
          ),
          _c("code", [_vm._v("options.url")]),
          _vm._v(" when creating a document). This supplants the former "),
          _c("code", [_vm._v("options.document.cookieDomain")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In addition to these changes to the public API, the following new cookie-related features came along for the ride:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Implemented automatic cookie-jar sharing with descendant "),
          _c("code", [_vm._v("<iframe>")]),
          _vm._v(
            "s. (So, if the iframe is same-domain, it can automatically access the appropriate cookies.)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Let "),
          _c("code", [_vm._v("options.document.cookie")]),
          _vm._v(
            " accept arrays, instead of just strings, for if you want to set multiple cookies at once."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Finally, it's worth noting that we now delegate our cookie handling in general to the "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://www.npmjs.com/package/tough-cookie",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("tough-cookie"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " package, which should hopefully mean that it now captures many of the behaviors that were previously missing (for example "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/issues/1027",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("#1027"), _c("OutboundLink")],
          1
        ),
        _vm._v("). @inikulin is working on "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/goinstant/tough-cookie/pull/30",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _vm._v(
              "a large pull request to fix tough-cookie to be more spec compliant"
            ),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          ", which should automatically be picked up by jsdom installs once it is merged."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-5-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-5-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.5.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Removed unnecessary browserify dependency that was erroneously included in 4.5.0."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-5-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-5-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.5.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("document.currentScript")]),
          _vm._v(". (jeffcarp)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.4.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("All resources are now loaded with the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.npmjs.com/package/request",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("request"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " package, which means that e.g. GZIPped resources will be properly uncompressed, redirects will be followed, and more. This was previously the case only for URLs passed directly to "
          ),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(
            ", and not for sub-resources inside the resulting page. (ssesha)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.3.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Made the click behavior for radio buttons and checkboxes work when doing "
          ),
          _c("code", [_vm._v("el.dispatchEvent(clickEvent)")]),
          _vm._v(", not just when doing "),
          _c("code", [_vm._v("el.click()")]),
          _vm._v(". (brandon-bethke-neudesic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("defaultPrevented")]),
          _vm._v(" property to "),
          _c("code", [_vm._v("Event")]),
          _vm._v(" instances, reflecting whether "),
          _c("code", [_vm._v("ev.preventDefault()")]),
          _vm._v(" has been called. (brandon-bethke-neudesic)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Moved the "),
          _c("code", [_vm._v("click()")]),
          _vm._v(" method from "),
          _c("code", [_vm._v("HTMLInputElement.prototype")]),
          _vm._v(" to "),
          _c("code", [_vm._v("HTMLElement.prototype")]),
          _vm._v(", per the latest spec.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Made the "),
          _c("code", [_vm._v("click()")]),
          _vm._v(" method trigger a "),
          _c("code", [_vm._v("MouseEvent")]),
          _vm._v(" instead of just an "),
          _c("code", [_vm._v("Event")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added a second parameter to "),
          _c("code", [_vm._v("UIEvent")]),
          _vm._v(", "),
          _c("code", [_vm._v("MouseEvent")]),
          _vm._v(", and "),
          _c("code", [_vm._v("MutationEvent")]),
          _vm._v(", which for now just behaves the same as that for "),
          _c("code", [_vm._v("Event")]),
          _vm._v(". (Rich-Harris)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added a second parameter to the "),
          _c("code", [_vm._v("Event")]),
          _vm._v(" constructor, which allows you to set the "),
          _c("code", [_vm._v("bubbles")]),
          _vm._v(" and "),
          _c("code", [_vm._v("cancelable")]),
          _vm._v(" properties. (brandon-bethke-neudesic)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-0-5" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-0-5" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.0.5")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("HTMLUnknownElement")]),
          _vm._v(" and fix the parser/"),
          _c("code", [_vm._v("document.createElement")]),
          _vm._v(" to create those instead of "),
          _c("code", [_vm._v("HTMLElement")]),
          _vm._v(" for unknown elements.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed issues with named and indexed properties on "),
          _c("code", [_vm._v("window")]),
          _vm._v(", as well as "),
          _c("code", [_vm._v("window.length")]),
          _vm._v(", with regard to "),
          _c("code", [_vm._v("<frame>")]),
          _vm._v("s/"),
          _c("code", [_vm._v("<iframe>")]),
          _vm._v("s being added and removed from the document.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("Note:")]),
        _vm._v(
          " this probably should have been a minor version number increment (i.e. 4.1.0 instead of 4.0.5), since it added "
        ),
        _c("code", [_vm._v("HTMLUnknownElement")]),
        _vm._v(". We apologize for the deviation from semver.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-0-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-0-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.0.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed parsing of doctypes by relying on the information provided by the html parser if possible."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-0-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-0-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.0.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed events fired from "),
          _c("code", [_vm._v("EventTarget")]),
          _vm._v("s to execute their handlers in FIFO order, as per the spec.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed a case where "),
          _c("code", [_vm._v("childNodes")]),
          _vm._v(" would not be correctly up to date in some cases. (medikoo)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Sped up window creation with "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(
            " by ~600%, for the special case when no scripts are to be executed."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-0-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-0-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.0.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("EventTarget")]),
          _vm._v(" is now correctly in the prototype chain of "),
          _c("code", [_vm._v("Window")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("EventTarget")]),
          _vm._v(
            " argument validation is now correct according to the DOM Standard."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("DOMException")]),
          _vm._v(
            " now behaves more like it should per Web IDL. In particular it has a more comprehensive set of constants, and instances now have "
          ),
          _c("code", [_vm._v("name")]),
          _vm._v(" properties.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v('new Event("click")')]),
          _vm._v(" can now be dispatched. (lovebear)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("document.createEvent")]),
          _vm._v(
            " now behaves more like it should according to the DOM Standard: it accepts a wider range of arguments, but will throw if an invalid one is given. (lovebear)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed a regression in our browser support that required Chrome 41 as of 4.0.1; now Chrome 40 will work, as well as (in theory, although less well-tested) the latest stable versions of Firefox and IE."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-0-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-0-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.0.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed: "),
          _c("code", [_vm._v("Node.prototype.contains")]),
          _vm._v(
            " to always return a boolean. This was a regression in 3.1.1. (Joris-van-der-Wel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed: "),
          _c("code", [_vm._v("Document.prototype")]),
          _vm._v(" no longer contains its own "),
          _c("code", [_vm._v("ownerDocument")]),
          _vm._v(" getter, instead correctly delegating to "),
          _c("code", [_vm._v("Node.prototype")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed: some edge cases regarding running "),
          _c("code", [_vm._v("<script>")]),
          _vm._v("s in browserified jsdom.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "A couple fixes from updated dependencies (although you would have gotten these anyway with a fresh install, due to floating version specifiers):\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "csstyle minimum version bumped from 0.2.21 to 0.2.23, fixing handling of "
              ),
              _c("code", [_vm._v("0")]),
              _vm._v(
                " when setting numeric CSS properties and parsing of shorthand "
              ),
              _c("code", [_vm._v("font")]),
              _vm._v(" declarations.")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "parse5 minimum version bumped from 1.3.1 to 1.3.2 to, fixing the parsing of "
              ),
              _c("code", [_vm._v("<form>")]),
              _vm._v(" elements inside "),
              _c("code", [_vm._v("<template>")]),
              _vm._v(" elements.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_4-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_4-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 4.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("This release relies on the newly-overhauled "),
        _c("code", [_vm._v("vm")]),
        _vm._v(
          " module of io.js to eliminate the Contextify native module dependency. jsdom should now be much easier to use and install, without requiring a C++ compiler toolchain!"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Note that as of this release, jsdom no longer works with Node.js™, and instead requires io.js. You are still welcome to install a release in "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/jsdom/jsdom/tree/3.x",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("the 3.x series"), _c("OutboundLink")],
          1
        ),
        _vm._v(" if you are stuck on legacy technology like Node.js™.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("In the process of rewriting parts of jsdom to use "),
        _c("code", [_vm._v("vm")]),
        _vm._v(", a number of related fixes were made regarding the "),
        _c("code", [_vm._v("Window")]),
        _vm._v(" object:")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("In some cases, state was implicitly shared between "),
          _c("code", [_vm._v("Window")]),
          _vm._v(
            " instances—especially parser- and serializer-related state. This is no longer the case, thankfully."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("A number of properties of "),
          _c("code", [_vm._v("Window")]),
          _vm._v(
            " were updated for spec compliance: some data properties became accessors, and all methods moved from the prototype to the instance."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("The non-standard "),
          _c("code", [_vm._v("document.parentWindow")]),
          _vm._v(" was removed, in favor of the standard "),
          _c("code", [_vm._v("document.defaultView")]),
          _vm._v(". Our apologies for encouraging use of "),
          _c("code", [_vm._v("parentWindow")]),
          _vm._v(" in our README, tests, and examples.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_3-1-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_3-1-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 3.1.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Some fixes to the "),
          _c("code", [_vm._v("NOT_IMPLEMENTED")]),
          _vm._v(
            " internal helper, which should eliminate the cases where calling e.g. "
          ),
          _c("code", [_vm._v("window.alert")]),
          _vm._v(" crashes your application.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed a global variable leak when triggering "),
          _c("code", [_vm._v("NOT_IMPLEMENTED")]),
          _vm._v(" methods, like "),
          _c("code", [_vm._v("window.location.reload")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed the URL resolution algorithm to handle "),
          _c("code", [_vm._v("about:blank")]),
          _vm._v(
            " properly on all systems (previously it only worked on Windows). This is especially important since as of 3.0.0 the default URL is "
          ),
          _c("code", [_vm._v("about:blank")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed, at least partially, the ability to run "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(
            "s inside a browserified jsdom instance. This is done by dynamically rewriting the source code so that global variable references become explicit references to "
          ),
          _c("code", [_vm._v("window.variableName")]),
          _vm._v(", so it is not foolproof.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_3-1-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_3-1-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 3.1.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("Node.prototype.isEqualNode")]),
          _vm._v(
            " to the algorithm of the DOM Standard, fixing a bug where it would throw an error along the way."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("Node.prototype.isSameNode")]),
          _vm._v(
            ", which is not present in the DOM Standard (and was just a verbose "
          ),
          _c("code", [_vm._v("===")]),
          _vm._v(" check anyway).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed a couple small issues while browserifying, mainly around "
          ),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(". However, while doing so discovered that "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(
            "s in general don't work too well in a browserified jsdom; see "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/issues/1023",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#1023"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_3-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_3-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 3.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added support for "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/jsdom/jsdom#custom-external-resource-loader",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("custom external resource loading"), _c("OutboundLink")],
            1
          ),
          _vm._v(". (tobie)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_3-0-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_3-0-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 3.0.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed some stray byte-order marks in a couple files, which incidentally "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/substack/node-browserify/issues/1095",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("break Browserify"), _c("OutboundLink")],
            1
          ),
          _vm._v(". (sterpe)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_3-0-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_3-0-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 3.0.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed another edge case where unchecking a radio button would incorrectly uncheck radio buttons outside the containing form. (zpao)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_3-0-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_3-0-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 3.0.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fixed errors when serializing text nodes (possibly only occurred when inside "
          ),
          _c("code", [_vm._v("<template>")]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Handle null bytes being passed to "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v("'s autodetecting capabilities. (fluffybunnies)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Handle empty HTML strings being passed to "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v("'s "),
          _c("code", [_vm._v("html")]),
          _vm._v(" option. (fluffybunnies)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_3-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_3-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 3.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This release updates large swathes of the DOM APIs to conform to the standard, mostly by removing old stuff. It also fixes a few bugs, introduces a couple new features, and changes some defaults."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "3.0.x will be the last release of jsdom to support Node.js. All future releases (starting with 4.0.0) will require "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://iojs.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("io.js"), _c("OutboundLink")],
          1
        ),
        _vm._v(", whose "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/iojs/io.js/blob/v1.x/CHANGELOG.md#vm",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _vm._v("new "),
            _c("code", [_vm._v("vm")]),
            _vm._v(" module"),
            _c("OutboundLink")
          ],
          1
        ),
        _vm._v(
          " will allow us to remove our contextify native-module dependency. (Given that I submitted the relevant patch to joyent/node "
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/joyent/node/commit/7afdba6e0bc3b69c2bf5fdbd59f938ac8f7a64c5",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("1.5 years ago"), _c("OutboundLink")],
          1
        ),
        _vm._v(", I'm very excited that we can finally use it!)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("By default documents now use "),
          _c("code", [_vm._v("about:blank")]),
          _vm._v(
            " as their URL, instead of trying to infer some type of file URL from the call site (in Node.js) or using "
          ),
          _c("code", [_vm._v("location.href")]),
          _vm._v(" (in browsers).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Introduced a new "virtual console" abstraction for capturing console output from inside the page. '
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom#capturing-console-output",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _vm._v("See the readme for more information."),
              _c("OutboundLink")
            ],
            1
          ),
          _vm._v(" Note that "),
          _c("code", [_vm._v("console.error")]),
          _vm._v(
            " will no longer contribute to the (non-standard, and likely dying in the future) "
          ),
          _c("code", [_vm._v("window.errors")]),
          _vm._v(" array. (jeffcarp)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added the named "),
          _c("code", [_vm._v("new Image(width, height)")]),
          _vm._v(" constructor. (vinothkr)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed an exception when using "),
          _c("code", [_vm._v("querySelector")]),
          _vm._v(" with selectors like "),
          _c("code", [_vm._v("div:last-child > span[title]")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Removed all traces of entities, entity types, notations, default attributes, and CDATA sections."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Differentiated between XML and HTML documents better, for example in how they handle the casing of tag names and attributes."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated "),
          _c("code", [_vm._v("DOMImplementation")]),
          _vm._v(" to mostly work per-spec, including removing "),
          _c("code", [_vm._v("addFeature")]),
          _vm._v(" and "),
          _c("code", [_vm._v("removeFeature")]),
          _vm._v(" methods, the "),
          _c("code", [_vm._v("ownerDocument")]),
          _vm._v(" property, and making "),
          _c("code", [_vm._v("hasFeature")]),
          _vm._v(" always return "),
          _c("code", [_vm._v("true")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Re-did the "),
          _c("code", [_vm._v("CharacterData")]),
          _vm._v(
            " implementation to follow the algorithms in the DOM Standard; this notably removes a few exceptions that were previously thrown."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Re-did "),
          _c("code", [_vm._v("Comment")]),
          _vm._v(", "),
          _c("code", [_vm._v("Text")]),
          _vm._v(", and "),
          _c("code", [_vm._v("ProcessingInstruction")]),
          _vm._v(" to follow the DOM Standard and derive from "),
          _c("code", [_vm._v("CharacterData")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Re-did "),
          _c("code", [_vm._v("DocumentType")]),
          _vm._v(
            " to follow the DOM Standard and be much simpler, notably removing notations, entities, and default attributes."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed a variety of accessors on "),
          _c("code", [_vm._v("Node")]),
          _vm._v(", "),
          _c("code", [_vm._v("Element")]),
          _vm._v(", "),
          _c("code", [_vm._v("Attr")]),
          _vm._v(", and "),
          _c("code", [_vm._v("Document")]),
          _vm._v(
            "; some were removed that were nonstandard (especially setters); others were updated to reflect the spec; etc."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Re-did name/qname validation, which is done by various APIs, to work with the xml-name-validator package and some centralized algorithms."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Made the XML parser at least somewhat aware of processing instructions."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Cleaned up doctype parsing and association between doctypes and documents. More exotic doctypes should parse better now."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("document.contentType")]),
          _vm._v(
            " now is generally inferred from the parsing mode of the document."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Moved some properties to "),
          _c("code", [_vm._v("Document.prototype")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Window.prototype")]),
          _vm._v(
            " instead of setting them as own properties during the document/window creation. This should improve memory usage (as well as spec compliance)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_2-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_2-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 2.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'This release is largely a refactoring release to remove the defunct concept of "levels" from jsdom, in favor of the '
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://wiki.whatwg.org/wiki/FAQ#What_does_.22Living_Standard.22_mean.3F",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("living standard model"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " that browsers follow. Although the code is still organized that way, that's now "
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/jsdom/jsdom/blob/2ff5747488ad4b518fcef97a026c82eab42a0a14/lib/README.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("noted as a historical artifact"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ". The public API changes while doing so were fairly minimal, but this sets the stage for a cleaner jsdom code structure going forward."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Removed: "),
          _c("code", [_vm._v("jsdom.level")]),
          _vm._v(", and the "),
          _c("code", [_vm._v("level")]),
          _vm._v(" option from "),
          _c("code", [_vm._v("jsdom.jsdom")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: the nonstandard "),
          _c("code", [_vm._v("Element.prototype.matchesSelector")]),
          _vm._v(" method was replaced with the standard "),
          _c("code", [_vm._v("Element.prototype.matches")]),
          _vm._v(". (KenPowers)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("querySelector")]),
          _vm._v(
            " correctly coerces its argument to a string (1.2.2 previously fixed this for "
          ),
          _c("code", [_vm._v("querySelectorAll")]),
          _vm._v(").")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-5-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-5-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.5.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: missing "),
          _c("code", [_vm._v("window.console")]),
          _vm._v(" methods, viz. "),
          _c("code", [_vm._v("assert")]),
          _vm._v(", "),
          _c("code", [_vm._v("clear")]),
          _vm._v(", "),
          _c("code", [_vm._v("count")]),
          _vm._v(", "),
          _c("code", [_vm._v("debug")]),
          _vm._v(", "),
          _c("code", [_vm._v("group")]),
          _vm._v(", "),
          _c("code", [_vm._v("groupCollapse")]),
          _vm._v(", "),
          _c("code", [_vm._v("groupEnd")]),
          _vm._v(", "),
          _c("code", [_vm._v("table")]),
          _vm._v(", "),
          _c("code", [_vm._v("time")]),
          _vm._v(", "),
          _c("code", [_vm._v("timeEnd")]),
          _vm._v(", and "),
          _c("code", [_vm._v("trace")]),
          _vm._v(". All except "),
          _c("code", [_vm._v("assert")]),
          _vm._v(" do nothing for now, but see "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/issues/979",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#979"), _c("OutboundLink")],
            1
          ),
          _vm._v(" for future plans. (jeffcarp)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Tweak: make "),
          _c("code", [_vm._v("childNodes")]),
          _vm._v(
            ", and the many places in jsdom that use it, much faster. (Joris-van-der-Wel)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-4-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-4-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.4.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Tweak: faster implementation of "),
          _c("code", [_vm._v("NodeList.prototype.length")]),
          _vm._v(", which should speed up common operations like "),
          _c("code", [_vm._v("appendChild")]),
          _vm._v(" and similar. (Joris-van-der-Wel)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.4.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("HTMLInputElement.prototype.checked")]),
          _vm._v(" and "),
          _c("code", [_vm._v("defaultChecked")]),
          _vm._v(" now behave per the spec. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("HTMLOptionElement.prototype.selected")]),
          _vm._v(" now behaves per the spec. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("HTMLInputElement.prototype.value")]),
          _vm._v(" now behaves per the spec. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("HTMLTextAreaElement.prototype.value")]),
          _vm._v(" and "),
          _c("code", [_vm._v("defaultValue")]),
          _vm._v(" now behave per the spec. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("HTMLTextAreaElement.prototype.defaultValue")]),
          _vm._v(" now has a setter, and "),
          _c("code", [_vm._v("HTMLTextAreaElement.prototype.textLength")]),
          _vm._v(" now exists. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: resetting a "),
          _c("code", [_vm._v("<form>")]),
          _vm._v(
            " now behaves per spec for all different types of form elements. (Joris-van-der-Wel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: radio buttons reset other radio buttons correctly now per the spec. (Joris-van-der-Wel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("document.cloneNode")]),
          _vm._v(" now works. (AVGP)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("hasAttribute")]),
          _vm._v(" is now case-insensitive, as it should be. (AVGP)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("div.toString()")]),
          _vm._v(" now returns "),
          _c("code", [_vm._v("[object HTMLDivElement]")]),
          _vm._v(". (AVGP)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-3-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-3-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.3.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: check if "),
          _c("code", [_vm._v("module.parent")]),
          _vm._v(
            " exists before using it to construct a document's initial URL. Apparently some testing frameworks like Jest do not correctly emulate the module environment; this compensates. (SegFaultx64)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-3-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-3-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.3.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: changing attributes on "),
          _c("code", [_vm._v("<option>")]),
          _vm._v(
            " elements will now have the correct consequences. For example changing the "
          ),
          _c("code", [_vm._v("id")]),
          _vm._v(" attribute now interacts correctly with "),
          _c("code", [_vm._v("document.getElementById")]),
          _vm._v(". (Joris-van-der-Wel)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.3.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: moved "),
          _c("code", [_vm._v("focus")]),
          _vm._v(" and "),
          _c("code", [_vm._v("blur")]),
          _vm._v(" methods to "),
          _c("code", [_vm._v("HTMLElement.prototype")]),
          _vm._v(
            ", instead of having them only be present on certain element prototypes. Our focus story is still not very spec-compliant, but this is a step in the right direction. (vincentsiao)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-2-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-2-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.2.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Tweak: improve performance of "),
          _c("code", [_vm._v("Node.prototype.insertBefore")]),
          _vm._v(", "),
          _c("code", [_vm._v("Node.prototype.removeChild")]),
          _vm._v(", and several "),
          _c("code", [_vm._v("AttributeList")]),
          _vm._v(" methods. (Joris-van-der-Wel)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-2-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-2-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.2.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("querySelectorAll")]),
          _vm._v(
            " correctly coerces its argument to a string; notably this allows you to pass arrays. (jeffcarp)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: the "),
          _c("code", [_vm._v("data")]),
          _vm._v(
            " setter on text nodes correctly coerces the new value to a string. (medikoo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("document.toString()")]),
          _vm._v(" now returns "),
          _c("code", [_vm._v("[object HTMLDocument]")]),
          _vm._v(". (jeffcarp)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-2-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-2-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.2.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: handling of "),
          _c("code", [_vm._v("<template>")]),
          _vm._v(
            " element parsing and serialization, now that it is supported by parse5. (inikulin)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-2-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-2-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.2.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("NodeFilter")]),
          _vm._v(", in particular its constants. (fhemberger)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: initial "),
          _c("code", [_vm._v("history.length")]),
          _vm._v(" should be "),
          _c("code", [_vm._v("1")]),
          _vm._v(", not "),
          _c("code", [_vm._v("0")]),
          _vm._v(". (rgrove)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("history.pushState")]),
          _vm._v(" and "),
          _c("code", [_vm._v("history.replaceState")]),
          _vm._v(" should not fire the "),
          _c("code", [_vm._v("popstate")]),
          _vm._v(" event. (rgrove)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-1-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-1-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.1.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("document.implementation.createHTMLDocument()")]),
          _vm._v(". (fhemberger)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("localName")]),
          _vm._v(" was sometimes "),
          _c("code", [_vm._v("null")]),
          _vm._v(" for elements when it should not be. (fhemberger)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-0-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.0.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Update: no longer requiring separate "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(" and "),
          _c("code", [_vm._v("cssstyle-browserify")]),
          _vm._v(" dependencies; now "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(" can be used directly. This also un-pins the "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(
            " dependency so that future fixes arrive as they appear upstream."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-0-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.0.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: temporarily pin "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(" dependency to at most 0.2.18 until "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/chad3814/CSSStyleDeclaration/issues/20",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("chad3814/CSSStyleDeclaration#20"), _c("OutboundLink")],
            1
          ),
          _vm._v(" is fixed.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: browserifying jsdom should work better now that the required packages are included as "
          ),
          _c("code", [_vm._v("dependencies")]),
          _vm._v(" instead of "),
          _c("code", [_vm._v("devDependencies")]),
          _vm._v(". (Sebmaster)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: using "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(" in a browser environment now correctly defaults "),
          _c("code", [_vm._v("options.url")]),
          _vm._v(" to "),
          _c("code", [_vm._v("location.href")]),
          _vm._v(" instead of trying to infer a reasonable "),
          _c("code", [_vm._v("fil://")]),
          _vm._v(
            " URL using techniques that fail in the browser. (rattrayalex)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-0-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.0.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: the return value of "),
          _c("code", [_vm._v("EventTarget.prototype.dispatchEvent")]),
          _vm._v(" should be "),
          _c("code", [_vm._v("true")]),
          _vm._v(" when the default is "),
          _c("em", [_vm._v("not")]),
          _vm._v(" prevented; previously it was the opposite. (eventualbuddha)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_1-0-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 1.0.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("For a consolidated list of changes from 0.11.1 to 1.0.0, see "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/jsdom/jsdom/wiki/Changes-from-0.11.1-to-1.0.0",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("this wiki page"), _c("OutboundLink")],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Remove: nonstandard "),
          _c("code", [_vm._v("EventTarget.getListeners")]),
          _vm._v("; "),
          _c("code", [_vm._v("EventTarget.forwardIterator")]),
          _vm._v("; "),
          _c("code", [_vm._v("EventTarget.backwardIterator")]),
          _vm._v("; "),
          _c("code", [_vm._v("EventTarget.singleIterator")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Remove: nonstandard "),
          _c("code", [_vm._v("document.innerHTML")]),
          _vm._v(". (jorendorff)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("value")]),
          _vm._v(" and "),
          _c("code", [_vm._v("defaultValue")]),
          _vm._v(" properties of a "),
          _c("code", [_vm._v("HTMLInputElement")]),
          _vm._v(" are now correctly synced to the "),
          _c("code", [_vm._v('value=""')]),
          _vm._v(" attribute. (Sebmaster)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-pre-7" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_1-0-0-pre-7" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-pre.7")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Remove: support for old, untested HTML and XML parsers, namely davglass/node-htmlparser and isaacs/sax-js. In the future we plan to work toward a standardized parsing interface that other parsers can implement, instead of adding custom code to jsdom for various parsers. This interface still is being decided though, as it needs to support complex things like pausing the parse stream (for "
          ),
          _c("code", [_vm._v("document.write")]),
          _vm._v(") and parsing disconnected fragments (for "),
          _c("code", [_vm._v("document.innerHTML")]),
          _vm._v("). (Sebmaster)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: new "),
          _c("code", [_vm._v("parsingMode")]),
          _vm._v(
            " configuration, to allow you to manually specify XML or HTML. (Sebmaster)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: jsdom will no longer use the presence of "),
          _c("code", [_vm._v("<?xml")]),
          _vm._v(
            " or similar to attempt to auto-detect XHTML documents. Instead, it will by default treat them the same as browsers do, with the "
          ),
          _c("code", [_vm._v("<?xml")]),
          _vm._v(
            " declaration just being a bogus comment. If you need your document interpreted as XHTML instead of HTML, use the "
          ),
          _c("code", [_vm._v("parsingMode")]),
          _vm._v(" option. (Sebmaster)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Tweak: memoize various DOM-querying functions (e.g. "),
          _c("code", [_vm._v("getElementsByTagName")]),
          _vm._v(", "),
          _c("code", [_vm._v("querySelector")]),
          _vm._v(", etc.) to improve performance. (ccarpita)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-pre-6" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_1-0-0-pre-6" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-pre.6")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: another parsing issues with void elements and "),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(
            ", this time related to disconnected nodes. This was a regression between 0.11.1 and 1.0.0-pre.1. (paton)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: same-named radio inputs should not be mutually exclusive unless they are in the same form. (stof)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-pre-5" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_1-0-0-pre-5" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-pre.5")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: sometimes calling "),
          _c("code", [_vm._v("window.close()")]),
          _vm._v(" would cause a segfault. (paton)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-pre-4" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_1-0-0-pre-4" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-pre.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: attributes and elements now have their "),
          _c("code", [_vm._v("prefix")]),
          _vm._v(", "),
          _c("code", [_vm._v("localName")]),
          _vm._v(", and "),
          _c("code", [_vm._v("namespaceURI")]),
          _vm._v(" properties set correctly in all cases. (Excepting "),
          _c("code", [_vm._v("application/xhtml+xml")]),
          _vm._v(" mode, which jsdom does not support yet.) (Sebmaster)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-pre-3" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_1-0-0-pre-3" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-pre.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: void elements no longer parsed correctly when using "),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(
            ". This was a regression between 0.11.1 and 1.0.0-pre.1. (Sebmaster)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-pre-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_1-0-0-pre-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-pre.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: parsing and serialization of attributes in the form "),
          _c("code", [_vm._v("x:y")]),
          _vm._v(", e.g. "),
          _c("code", [_vm._v("xmlns:xlink")]),
          _vm._v(" or "),
          _c("code", [_vm._v("xlink:href")]),
          _vm._v(
            ". This was a regression between 0.11.1 and 1.0.0-pre.1. (Sebmaster)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-pre-1" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_1-0-0-pre-1" } },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-pre.1")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This is a prerelease of jsdom's first major version. It incorporates several great additions, as well as a general cleanup of the API surface, which make it more backward-incompatible than usual. Starting with the 1.0.0 release, we will be following semantic versioning, so that you can depend on stability within major version ranges. But we still have "
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/jsdom/jsdom/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("a few more issues"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " before we can get there, so I don't want to do 1.0.0 quite yet."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("This release owes a special thanks to "),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/Sebmaster",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("@Sebmaster"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ", for his amazing work taking on some of the hardest problems in jsdom and solving them with gusto."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "major-changes" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#major-changes" } },
          [_vm._v("#")]
        ),
        _vm._v(" Major changes")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "jsdom now can be browserified into a bundle that works in web workers! This is highly experimental, but also highly exciting! (lawnsea)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("An overhaul of the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom#initialization-lifecycle",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("initialization lifecycle"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ", to bring more control and address common use cases. (Sebmaster)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("The excellent "),
          _c(
            "a",
            {
              attrs: {
                href: "https://npmjs.org/package/parse5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("parse5"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " HTML parser is now the default parser, fixing many parsing bugs and giving us full, official-test-suite-passing HTML parsing support. This especially impacts documents that didn't include optional tags like "
          ),
          _c("code", [_vm._v("<html>")]),
          _vm._v(", "),
          _c("code", [_vm._v("<head>")]),
          _vm._v(", or "),
          _c("code", [_vm._v("<body>")]),
          _vm._v(
            " in their source. We also use parse5 for serialization, fixing many bugs there. (Sebmaster)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "As part of the new parser story, we are not supporting XML for now. It might work if you switch to a different parser (e.g. htmlparser2), but in the end, HTML and XML are very different, and we are not attempting to be an XML DOM. That said, we eventually want to support XML to the same extent browsers do (i.e., support XHTML and SVG, with an appropriate MIME type switch); this is being planned in "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/jsdom/jsdom/issues/820",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("#820"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "removed-jsdom-apis" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#removed-jsdom-apis" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Removed jsdom APIs")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("jsdom.createWindow")]),
          _vm._v(": use "),
          _c("code", [_vm._v("document.parentWindow")]),
          _vm._v(" after creating a document")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("jsdom.html")]),
          _vm._v(": use "),
          _c("code", [_vm._v("jsdom.jsdom")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("jsdom.version")]),
          _vm._v(": use "),
          _c("code", [_vm._v('require("jsdom/package.json").version')])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("jsdom.level")]),
          _vm._v(
            ": levels are deprecated and will probably be removed in 2.0.0"
          )
        ]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("jsdom.dom")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("jsdom.browserAugmentation")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("jsdom.windowAugmentation")])])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "changed-jsdom-apis" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#changed-jsdom-apis" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Changed jsdom APIs")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("jsdom.jsdom")]),
          _vm._v(" no longer takes a level as its second argument.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("jsdom.jQueryify")]),
          _vm._v(" now requires a jQuery URL, since "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "http://blog.jquery.com/2014/07/03/dont-use-jquery-latest-js/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _vm._v("always picking the latest was a bad idea"),
              _c("OutboundLink")
            ],
            1
          ),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "removed-non-standard-dom-apis" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#removed-non-standard-dom-apis" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Removed non-standard DOM APIs")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("document.createWindow")]),
          _vm._v(": use "),
          _c("code", [_vm._v("document.parentWindow")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("document.innerHTML")]),
          _vm._v(" and "),
          _c("code", [_vm._v("document.outerHTML")]),
          _vm._v(": use the new "),
          _c("code", [_vm._v("jsdom.serializeDocument")]),
          _vm._v(" to include the DOCTYPE, or use "),
          _c("code", [_vm._v("document.documentElement.outerHTML")]),
          _vm._v(" to omit it.")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "other-fixes" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#other-fixes" } },
          [_vm._v("#")]
        ),
        _vm._v(" Other fixes")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Allow empty strings to be passed to "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(". (michaelmior)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix for a memory leak in "),
          _c("code", [_vm._v("EventTarget.prototype.dispatchEvent")]),
          _vm._v(". (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Make event listeners in the capture phase also fire on the event target. (Joris-van-der-Wel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Correctly reset "),
          _c("code", [_vm._v("eventPhase")]),
          _vm._v(" and "),
          _c("code", [_vm._v("currentTarget")]),
          _vm._v(" on events, before and after a dispatch. (Joris-van-der-Wel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix "),
          _c("code", [_vm._v("document.cookie = null")]),
          _vm._v(" to not throw, but instead just do nothing. (kapouer)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-11-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-11-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.11.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("Node.prototype.parentElement")]),
          _vm._v(". (lukasbuenger)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: attributes that are reflected as properties should be "),
          _c("code", [_vm._v("''")]),
          _vm._v(" when not present, instead of "),
          _c("code", [_vm._v("null")]),
          _vm._v(". (Note that "),
          _c("code", [_vm._v("getAttribute")]),
          _vm._v(" still returns "),
          _c("code", [_vm._v("null")]),
          _vm._v(" for them). (thejameskyle)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("textContent")]),
          _vm._v(
            " now works for nodes that do not have children, like text nodes for example. (hayes)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("jsdom.jQueryify")]),
          _vm._v(
            " was using the wrong URL for jQuery by default. (lukasbuenger)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-11-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-11-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.11.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: new default level, "),
          _c("code", [_vm._v("living")]),
          _vm._v(", reflecting our focus on the "),
          _c(
            "a",
            {
              attrs: {
                href: "http://dom.spec.whatwg.org/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("DOM Living Standard"), _c("OutboundLink")],
            1
          ),
          _vm._v(" and the "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "http://www.whatwg.org/specs/web-apps/current-work/multipage/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("HTML Living Standard"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ", which are what browsers actually implement. This should open the door for more features of the modern DOM and HTML specs to be implemented in jsdom. (robotlovesyou)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("Node.prototype.contains")]),
          _vm._v(" now implemented. (robotlovesyou)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("navigator.cookieEnabled")]),
          _vm._v(" now implemented; it always returns "),
          _c("code", [_vm._v("true")]),
          _vm._v(". (Sebmaster)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: DOCTYPEs no longer have their "),
          _c("code", [_vm._v("name")]),
          _vm._v(
            " property uppercased during parsing, and appear in the output of "
          ),
          _c("code", [_vm._v("document.innerHTML")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("Node.prototype.compareDocumentPosition")]),
          _vm._v(
            " implemented correctly; various document position constants added to the "
          ),
          _c("code", [_vm._v("Node")]),
          _vm._v(" constructor. (robotlovesyou)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("DocumentType.prototype.parentNode")]),
          _vm._v(" now returns the document node, not "),
          _c("code", [_vm._v("null")]),
          _vm._v(". (robotlovesyou)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: various "),
          _c("code", [_vm._v("navigator")]),
          _vm._v(
            " properties are now getters, not data properties. (Sebmaster)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: a bug involving invalid script paths and "),
          _c("code", [_vm._v("jsdom.jQueryify")]),
          _vm._v(". (Sebmaster)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-10-6" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-10-6" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.10.6")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: remaining URL properties to "),
          _c("code", [_vm._v("window.location")]),
          _vm._v(" and "),
          _c("code", [_vm._v("HTMLAnchorElement")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: the presence of "),
          _c("code", [_vm._v("String.prototype.normalize")]),
          _vm._v(
            ", which is available by default in Node 0.11.13 onwards, caused reflected attributes to break. (brock8503)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: iframes now correctly load "),
          _c("code", [_vm._v("about:blank")]),
          _vm._v(" when the "),
          _c("code", [_vm._v("src")]),
          _vm._v(" attribute is empty or missing. (mcmathja)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: documents containing only whitespace now correctly generate wrapper documents, just like blank documents do. (nikolas)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Tweak: lazy-load the request module, to improve overall jsdom loading time. (tantaman)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-10-5" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-10-5" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.10.5")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: the list of void elements has been updated to match the latest HTML spec."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: when serializing void elements, don't include a "),
          _c("code", [_vm._v("/")]),
          _vm._v(": i.e. the result is now "),
          _c("code", [_vm._v("<br>")]),
          _vm._v(" instead of "),
          _c("code", [_vm._v("<br />")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-10-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-10-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.10.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: another case was found where jQuery 1.11's "),
          _c("code", [_vm._v("show()")]),
          _vm._v(" method would cause errors.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("querySelector")]),
          _vm._v(" and "),
          _c("code", [_vm._v("querySelectorAll")]),
          _vm._v(" methods to "),
          _c("code", [_vm._v("DocumentFragment")]),
          _vm._v("s. (Joris-van-der-Wel)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-10-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-10-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.10.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: various defaults on "),
          _c("code", [_vm._v("HTMLAnchorElement")]),
          _vm._v(" and "),
          _c("code", [_vm._v("window.location")]),
          _vm._v(" should not be "),
          _c("code", [_vm._v("null")]),
          _vm._v("; they should usually be the empty string.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-10-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-10-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.10.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: Using jQuery 1.11's "),
          _c("code", [_vm._v("show()")]),
          _vm._v(" method would cause an error to be thrown.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("window.location")]),
          _vm._v(" properties were not updating correctly after using "),
          _c("code", [_vm._v("pushState")]),
          _vm._v(" or "),
          _c("code", [_vm._v("replaceState")]),
          _vm._v(". (toomanydaves)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-10-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-10-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.10.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("window.location.port")]),
          _vm._v(" should default to "),
          _c("code", [_vm._v('""')]),
          _vm._v(", not "),
          _c("code", [_vm._v("null")]),
          _vm._v(". (bpeacock)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-10-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-10-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.10.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: a more complete "),
          _c("code", [_vm._v("document.cookie")]),
          _vm._v(
            " implementation, that supports multiple cookies. Note that options like "
          ),
          _c("code", [_vm._v("path")]),
          _vm._v(", "),
          _c("code", [_vm._v("max-age")]),
          _vm._v(", etc. are still ignored. (dai-shi)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-9-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-9-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.9.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Add: implement attribute ordering semantics from WHATWG DOM spec, and in general overhaul attribute storage implementation to be much more awesome and accurate. (lddubeau)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("port")]),
          _vm._v(" and "),
          _c("code", [_vm._v("protocol")]),
          _vm._v(" to "),
          _c("code", [_vm._v("HTMLAnchorElement")]),
          _vm._v(". (sporchia)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: make "),
          _c("code", [_vm._v("HTMLInputElement")]),
          _vm._v(" not have a "),
          _c("code", [_vm._v("type")]),
          _vm._v(" "),
          _c("em", [_vm._v("attribute")]),
          _vm._v(" by default. It still has a default value for the "),
          _c("code", [_vm._v("type")]),
          _vm._v(" "),
          _c("em", [_vm._v("property")]),
          _vm._v(", viz. "),
          _c("code", [_vm._v('"text"')]),
          _vm._v(". (aredridel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Fix: treat empty namespace URI as meaning "no namespace" with the '
          ),
          _c("code", [_vm._v("getAttributeNS")]),
          _vm._v(", "),
          _c("code", [_vm._v("hasAttributeNS")]),
          _vm._v(", and "),
          _c("code", [_vm._v("setAttributeNS")]),
          _vm._v(" functions. (lddubeau)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: reference typed arrays in a way that doesn't immediately break on Node 0.6. Node 0.6 isn't supported in general, though. (kangax)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-11" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-11" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.11")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Add: store and use cookies between requests; customizable cookie jars also possible. (stockholmux)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: attributes named the same as prototype properties of "),
          _c("code", [_vm._v("NamedNodeMap")]),
          _vm._v(" no longer break jsdom. (papandreou)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("removeAttributeNS")]),
          _vm._v(" should not throw on missing attributes. (lddubeau)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: remove "),
          _c("code", [_vm._v("__proto__")]),
          _vm._v(", "),
          _c("code", [_vm._v("__defineGetter__")]),
          _vm._v(", and "),
          _c("code", [_vm._v("__defineSetter__")]),
          _vm._v(
            " usage, as part of a project to make jsdom work better across multiple environments. (lawnsea)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-10" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-10" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.10")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("hash")]),
          _vm._v(" property to "),
          _c("code", [_vm._v("HTMLAnchorElement")]),
          _vm._v(". (fr0z3nk0)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-9" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-9" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.9")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Upgrade: "),
          _c("code", [_vm._v("cssom")]),
          _vm._v(" to 0.3.0, adding support for "),
          _c("code", [_vm._v("@-moz-document")]),
          _vm._v(" and fixing a few other issues.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Upgrade: "),
          _c("code", [_vm._v("cssstyle")]),
          _vm._v(
            " to 0.2.6, adding support for many shorthand properties and better unit handling."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-8" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-8" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.8")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: avoid repeated "),
          _c("code", [_vm._v("NodeList.prototype.length")]),
          _vm._v(" calculation, for a speed improvement. (peller)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-7" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-7" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.7")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("host")]),
          _vm._v(" property to "),
          _c("code", [_vm._v("HTMLAnchorElement")]),
          _vm._v(". (sporchia)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-6" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-6" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.6")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: stop accidentally modifying "),
          _c("code", [_vm._v("Error.prototype")]),
          _vm._v(". (mitar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: a dummy "),
          _c("code", [_vm._v("getBoundingClientRect")]),
          _vm._v(" method, that returns "),
          _c("code", [_vm._v("0")]),
          _vm._v(
            " for all properties of the rectangle, is now implemented. (F1LT3R)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-5" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-5" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.5")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("href")]),
          _vm._v(" property on "),
          _c("code", [_vm._v("CSSStyleSheet")]),
          _vm._v(" instances for external CSS files. (FrozenCow)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: typed array constructors on the "),
          _c("code", [_vm._v("window")]),
          _vm._v(". (nlacasse)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("querySelector")]),
          _vm._v(" and "),
          _c("code", [_vm._v("querySelectorAll")]),
          _vm._v(" should be on the prototypes of "),
          _c("code", [_vm._v("Element")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Document")]),
          _vm._v(", not own-properties. (mbostock)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: when auto-detecting whether the first parameter to "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(
            " is a HTML string or a filename, deal with long strings correctly instead of erroring. (baryshev)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: basic "),
          _c("code", [_vm._v("window.history")]),
          _vm._v(" support, including "),
          _c("code", [_vm._v("back")]),
          _vm._v(", "),
          _c("code", [_vm._v("forward")]),
          _vm._v(", "),
          _c("code", [_vm._v("go")]),
          _vm._v(", "),
          _c("code", [_vm._v("pushState")]),
          _vm._v(", and "),
          _c("code", [_vm._v("replaceState")]),
          _vm._v(". (ralphholzmann)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: if an "),
          _c("code", [_vm._v("<?xml?>")]),
          _vm._v(
            " declaration starts the document, will try to parse as XML, e.g. not lowercasing the tags. (robdodson)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: tag names passed to "),
          _c("code", [_vm._v("createElement")]),
          _vm._v(" are coerced to strings before evaluating.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-1-hotfix" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_0-8-1-hotfix" } },
          [_vm._v("#")]
        ),
        _vm._v(" 0.8.1 (hotfix)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: a casing issue that prevented jsdom from loading on Unix and Solaris systems. (dai-shi)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("window.location.replace")]),
          _vm._v(" was broken. (dai-shi)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: update minimum htmlparser2 version, to ensure you get the latest parsing-related bugfixes."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-8-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-8-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.8.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: working "),
          _c("code", [_vm._v("XMLHttpRequest")]),
          _vm._v(" support, including cookie passing! (dai-shi)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: there is now a "),
          _c("code", [_vm._v("window.navigator.noUI")]),
          _vm._v(
            " property that evaluates to true, if you want to specifically distinguish jsdom in your tests."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-7-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-7-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.7.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Change: the logic when passing "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(
            " a string is more accurate, and you can be explicit by using the "
          ),
          _c("code", [_vm._v("html")]),
          _vm._v(", "),
          _c("code", [_vm._v("url")]),
          _vm._v(", or "),
          _c("code", [_vm._v("file")]),
          _vm._v(" properties. This is a breaking change in the behavior of "),
          _c("code", [_vm._v("html")]),
          _vm._v(
            ", which used to do the same auto-detection logic as the string-only version."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: errors raised in scripts are now passed to "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v("'s callback. (airportyh)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: set "),
          _c("code", [_vm._v("window.location.href")]),
          _vm._v(" correctly when using "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(
            " to construct a window from a URL, when that URL causes a redirect. (fegs)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: a more complete and accurate "),
          _c("code", [_vm._v("window.location")]),
          _vm._v(" object, which includes firing "),
          _c("code", [_vm._v("hashchange")]),
          _vm._v(" events when the hash is changed. (dai-shi)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: when using a non-implemented feature, mention exactly what it was that is not implemented in the error message. (papandreou)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-6-5" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-6-5" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.6.5")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: custom attributes whose names were the same as properties of "
          ),
          _c("code", [_vm._v("Object.prototype")]),
          _vm._v(", e.g. "),
          _c("code", [_vm._v('"constructor"')]),
          _vm._v(", would confuse jsdom massively.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-6-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-6-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.6.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: CSS selectors which contain commas inside quotes are no longer misinterpreted. (chad3814)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("<img>")]),
          _vm._v(" elements now fire "),
          _c("code", [_vm._v("load")]),
          _vm._v(" events when their "),
          _c("code", [_vm._v("src")]),
          _vm._v(" attributes are changed. (kapouer)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-6-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-6-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.6.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: better automatic detection of URLs vs. HTML fragments when using "
          ),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(". (jden)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-6-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-6-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.6.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: URL resolution to be amazing and extremely browser-compatible, including the interplay between the document's original URL, any "
          ),
          _c("code", [_vm._v("<base>")]),
          _vm._v(" tags that were set, and any relative "),
          _c("code", [_vm._v("href")]),
          _vm._v(
            "s. This impacts many parts of jsdom having to do with external resources or accurate "
          ),
          _c("code", [_vm._v("href")]),
          _vm._v(" and "),
          _c("code", [_vm._v("src")]),
          _vm._v(" attributes. (deitch)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: access to frames and iframes via named properties. (adrianlang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: node-canvas integration, which had been broken since 0.5.7."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-6-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-6-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.6.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Make the code parseable with Esprima. (squarooticus)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Use the correct "),
          _c("code", [_vm._v("package.json")]),
          _vm._v(" field "),
          _c("code", [_vm._v('"repository"')]),
          _vm._v(" instead of "),
          _c("code", [_vm._v('"repositories"')]),
          _vm._v(" to prevent npm warnings. (jonathanong)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-6-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-6-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.6.0")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Integrated a new HTML parser, "),
        _c(
          "a",
          {
            attrs: {
              href: "https://npmjs.org/package/htmlparser2",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("htmlparser2"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          ", from fb55. This is an actively maintained and much less buggy parser, fixing many of our parsing issues, including:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parsing elements with optional closing tags, like "),
          _c("code", [_vm._v("<p>")]),
          _vm._v(" or "),
          _c("code", [_vm._v("<td>")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("The "),
          _c("code", [_vm._v("innerHTML")]),
          _vm._v(" of "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" tags no longer cuts off the first character.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Empty attributes now have "),
          _c("code", [_vm._v('""')]),
          _vm._v(" as their value instead of the attribute name.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Multiline attributes no longer get horribly mangled.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Attribute names can now be any value allowed by HTML5, including crazy things like "
          ),
          _c("code", [_vm._v("^")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Attribute values can now contain any value allowed by HTML5, including e.g. "
          ),
          _c("code", [_vm._v(">")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-5-7" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-5-7" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.5.7")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: make event handlers attached via "),
          _c("code", [_vm._v("on<event>")]),
          _vm._v(" more spec-compatible, supporting "),
          _c("code", [_vm._v("return false")]),
          _vm._v(" and passing the "),
          _c("code", [_vm._v("event")]),
          _vm._v(" argument. (adrianlang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: make the getter for "),
          _c("code", [_vm._v("textContent")]),
          _vm._v(
            " more accurate, e.g. in cases involving comment nodes or processing instruction nodes. (adrianlang)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: make "),
          _c("code", [_vm._v("<canvas>")]),
          _vm._v(" behave like a "),
          _c("code", [_vm._v("<div>")]),
          _vm._v(" when the "),
          _c("code", [_vm._v("node-canvas")]),
          _vm._v(" package isn't available, instead of crashing. (stepheneb)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-5-6" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-5-6" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.5.6")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("on<event>")]),
          _vm._v(" properties are correctly updated when using "),
          _c("code", [_vm._v("setAttributeNode")]),
          _vm._v(", "),
          _c("code", [_vm._v("attributeNode.value =")]),
          _vm._v(", "),
          _c("code", [_vm._v("removeAttribute")]),
          _vm._v(", and "),
          _c("code", [_vm._v("removeAttributeNode")]),
          _vm._v("; before it only worked with "),
          _c("code", [_vm._v("setAttribute")]),
          _vm._v(". (adrianlang)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("HTMLCollection")]),
          _vm._v("s now have named properties based on their members' "),
          _c("code", [_vm._v("id")]),
          _vm._v(" and "),
          _c("code", [_vm._v("name")]),
          _vm._v(" attributes, e.g. "),
          _c("code", [_vm._v("form.elements.inputId")]),
          _vm._v(" is now present. (adrianlang)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-5-5" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-5-5" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.5.5")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("readOnly")]),
          _vm._v(" and "),
          _c("code", [_vm._v("selected")]),
          _vm._v(
            " properties were not correct when their attribute values were falsy, e.g. "
          ),
          _c("code", [_vm._v('<option selected="">')]),
          _vm._v(". (adrianlang)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-5-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-5-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.5.4")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This release, and all future releases, require at least Node.js 0.8."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Add: parser can now be set via "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(" configuration. (xavi-)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: accessing "),
          _c("code", [_vm._v("rowIndex")]),
          _vm._v(
            " for table rows that are not part of a table would throw. (medikoo)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: several places in the code accidentally created global variables, or referenced nonexistant values. (xavi-)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("<img>")]),
          _vm._v(" elements' "),
          _c("code", [_vm._v("src")]),
          _vm._v(" properties now evaluate relative to "),
          _c("code", [_vm._v("location.href")]),
          _vm._v(", just like "),
          _c("code", [_vm._v("<a>")]),
          _vm._v(" elements' "),
          _c("code", [_vm._v("href")]),
          _vm._v(" properties. (brianmaissy)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-5-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-5-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.5.3")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This release is compatible with Node.js 0.6, whereas all future releases will require at least Node.js 0.8."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("getAttributeNS")]),
          _vm._v(" now returns "),
          _c("code", [_vm._v("null")]),
          _vm._v(" for attributes that are not present, just like "),
          _c("code", [_vm._v("getAttribute")]),
          _vm._v(". (mbostock)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: "),
          _c("code", [_vm._v('"request"')]),
          _vm._v(
            " dependency pinned to version 2.14 for Node.js 0.6 compatibility."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-5-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-5-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.5.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: stylesheets with "),
          _c("code", [_vm._v("@-webkit-keyframes")]),
          _vm._v(" rules were crashing calls to "),
          _c("code", [_vm._v("getComputedStyle")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: handling of "),
          _c("code", [_vm._v("features")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: retain the value of the "),
          _c("code", [_vm._v("style")]),
          _vm._v(" attribute until the element's "),
          _c("code", [_vm._v("style")]),
          _vm._v(" property is touched. (papandreou)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-5-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-5-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.5.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("selectedIndex")]),
          _vm._v(" now changes correctly in response to "),
          _c("code", [_vm._v("<option>")]),
          _vm._v(" elements being selected. This makes "),
          _c("code", [_vm._v("<select>")]),
          _vm._v(
            " elements actually work like you would want, especially with jQuery. (xcoderzach)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("checked")]),
          _vm._v(
            " works correctly on radio buttons, i.e. only one can be checked and clicking on one does not uncheck it. Previously they worked just like checkboxes. (xcoderzach)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("click()")]),
          _vm._v(" on "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(" elements now fires a click event. (xcoderzach)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-5-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-5-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.5.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: Make "),
          _c("code", [_vm._v("contextify")]),
          _vm._v(
            " a non-optional dependency. jsdom never worked without it, really, so this just caused confusion."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-4-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-4-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.4.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("selected")]),
          _vm._v(" now returns true for the first "),
          _c("code", [_vm._v("<option>")]),
          _vm._v(" in a "),
          _c("code", [_vm._v("<select>")]),
          _vm._v(" if nothing is explicitly set.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: tweaks to accuracy and speed of the "),
          _c("code", [_vm._v("querySelectorAll")]),
          _vm._v(" implementation.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-4-1-hotfix" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_0-4-1-hotfix" } },
          [_vm._v("#")]
        ),
        _vm._v(" 0.4.1 (hotfix)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: crashes when loading HTML files with "),
          _c("code", [_vm._v("<a>")]),
          _vm._v(" tags with no "),
          _c("code", [_vm._v("href")]),
          _vm._v(" attribute. (eleith)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-4-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-4-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.4.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("getAttribute")]),
          _vm._v(" now returns "),
          _c("code", [_vm._v("null")]),
          _vm._v(
            " for attributes that are not present, as per DOM4 (but in contradiction to DOM1 through DOM3)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: static "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v("-returning methods (such as "),
          _c("code", [_vm._v("querySelectorAll")]),
          _vm._v(") now return a real "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(" instance.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(
            "s no longer expose nonstandard properties to the world, like "
          ),
          _c("code", [_vm._v("toArray")]),
          _vm._v(", without first prefixing them with an underscore.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(
            "s no longer inconsistently have array methods. Previously, live node lists would have "
          ),
          _c("code", [_vm._v("indexOf")]),
          _vm._v(
            ", while static node lists would have them all. Now, they have no array methods at all, as is correct per the specification."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-3-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-3-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.3.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: stylesheets with "),
          _c("code", [_vm._v("@media")]),
          _vm._v(" rules were crashing calls to "),
          _c("code", [_vm._v("getComputedStyle")]),
          _vm._v(", e.g. those in jQuery's initialization.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-3-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-3-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.3.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: make "),
          _c("code", [_vm._v("document.write")]),
          _vm._v(
            " calls insert new elements correctly. (johanoverip, kblomquist)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("<input>")]),
          _vm._v(" tags with no "),
          _c("code", [_vm._v("type")]),
          _vm._v(" attribute now return a default value of "),
          _c("code", [_vm._v('"text"')]),
          _vm._v(" when calling "),
          _c("code", [_vm._v('inputEl.getAttribute("type")')]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-3-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-3-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.3.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            'Fix: stylesheets with "joining" rules (i.e. those containing comma-separated selectors) now apply when using '
          ),
          _c("code", [_vm._v("getComputedStyle")]),
          _vm._v(". (chad3814, godmar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: support for running the tests using @aredridel's "),
          _c(
            "a",
            {
              attrs: {
                href: "https://npmjs.org/package/html5",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("html5"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " parser, as a prelude toward maybe eventually making this the default and fixing various parsing bugs."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-3-1-hotfix" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_0-3-1-hotfix" } },
          [_vm._v("#")]
        ),
        _vm._v(" 0.3.1 (hotfix)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: crashes when invalid selectors were present in stylesheets."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-3-0" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-3-0" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.3.0")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: a real "),
          _c("code", [_vm._v("querySelector")]),
          _vm._v(
            " implementation, courtesy of the nwmatcher project, solves many outstanding "
          ),
          _c("code", [_vm._v("querySelector")]),
          _vm._v(" bugs.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: "),
          _c("code", [_vm._v("matchesSelector")]),
          _vm._v(", again via nwmatcher.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: support for styles coming from "),
          _c("code", [_vm._v("<style>")]),
          _vm._v(" and "),
          _c("code", [_vm._v('<link rel="stylesheet">')]),
          _vm._v(" elements being applied to the results of "),
          _c("code", [_vm._v("window.getComputedStyle")]),
          _vm._v(". (chad3814)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: basic implementation of "),
          _c("code", [_vm._v("focus()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("blur()")]),
          _vm._v(" methods on appropriate elements. More work remains.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: script filenames containing spaces will now work when passed to "
          ),
          _c("code", [_vm._v("jsdom.env")]),
          _vm._v(". (TomNomNom)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: elements with IDs "),
          _c("code", [_vm._v("toString")]),
          _vm._v(", "),
          _c("code", [_vm._v("hasOwnProperty")]),
          _vm._v(", etc. could cause lots of problems.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Change: A window's "),
          _c("code", [_vm._v("load")]),
          _vm._v(
            " event always fires asynchronously now, even if no external resources are necessary."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Change: turning off mutation events is not supported, since doing so breaks external-resource fetching."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-19" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-19" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.19")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fix: URL resolution was broken on pages that included "),
          _c("code", [_vm._v("href")]),
          _vm._v("-less "),
          _c("code", [_vm._v("<base>")]),
          _vm._v(" tags.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: avoid putting "),
          _c("code", [_vm._v("attr")]),
          _vm._v(" in the global scope when using node-canvas. (starsquare)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: New "),
          _c("code", [_vm._v("SkipExternalResources")]),
          _vm._v(" feature accepts a regular expression. (fgalassi)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-18" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-18" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.18")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Un-revert: cssstyle has fixed its memory problems, so we get back accurate "
          ),
          _c("code", [_vm._v("cssText")]),
          _vm._v(" and "),
          _c("code", [_vm._v("style")]),
          _vm._v(" properties again.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-17-hotfix" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_0-2-17-hotfix" } },
          [_vm._v("#")]
        ),
        _vm._v(" 0.2.17 (hotfix)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Revert: had to revert the use of the cssstyle package. "),
          _c("code", [_vm._v("cssText")]),
          _vm._v(" and "),
          _c("code", [_vm._v("style")]),
          _vm._v(" properties are no longer as accurate.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: cssstyle was causing out-of-memory errors on some larger real-world pages, e.g. reddit.com."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-16" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-16" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.16")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Update: Sizzle version updated to circa September 2012.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: when setting a text node's value to a falsy value, convert it to a string instead of coercing it to "
          ),
          _c("code", [_vm._v('""')]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Use the cssstyle package for "),
          _c("code", [_vm._v("CSSStyleDeclaration")]),
          _vm._v(", giving much more accurate "),
          _c("code", [_vm._v("cssText")]),
          _vm._v(" and "),
          _c("code", [_vm._v("style")]),
          _vm._v(" properties on all elements. (chad3814)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: the "),
          _c("code", [_vm._v("checked")]),
          _vm._v(
            " property on checkboxes and radiobuttons now reflects the attribute correctly."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: "),
          _c("code", [_vm._v("HTMLOptionElement")]),
          _vm._v("'s "),
          _c("code", [_vm._v("text")]),
          _vm._v(" property should return the option's text, not its value.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: make the "),
          _c("code", [_vm._v("name")]),
          _vm._v(
            " property only exist on certain specific tags, and accurately reflect the corresponding "
          ),
          _c("code", [_vm._v("name")]),
          _vm._v(" attribute.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: don't format "),
          _c("code", [_vm._v("outerHTML")]),
          _vm._v(" (especially important for "),
          _c("code", [_vm._v("<pre>")]),
          _vm._v(" elements).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: remove the "),
          _c("code", [_vm._v("value")]),
          _vm._v(" property from "),
          _c("code", [_vm._v("Text")]),
          _vm._v(" instances (e.g. text nodes).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: don't break in the presence of a "),
          _c("code", [_vm._v("String.prototype.normalize")]),
          _vm._v(" method, like that of sugar.js.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: include level3/xpath correctly.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: many more tests passing, especially related to file:/// URLs on Windows. Tests can now be run with "
          ),
          _c("code", [_vm._v("npm test")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-15" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-15" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.15")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: make sure that doctypes don't get set as the documentElement (Aria Stewart)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: HTTP proxy support for jsdom.env (Eugene Ware)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: .hostname and .pathname properties to Anchor elements to comply with WHATWG standard (Avi Deitcher)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Only decode HTML entities in text when not inside a "),
          _c("code", [_vm._v("<script>")]),
          _vm._v(" or "),
          _c("code", [_vm._v("<style>")]),
          _vm._v(" tag. (Andreas Lind Petersen)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: HTMLSelectElement single selection implemented its type incorrectly as 'select' instead of 'select-one' (John Roberts)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-14" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-14" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.14")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: when serializing single tags use ' />' instead of '/>' (kapouer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: support for contextify simulation using vm.runInContext (trodrigues)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: allow jsdom.env's config.html to handle file paths which contain spaces (shinuza)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Isolate QuerySelector from prototype (Nao Iizuka)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: setting textContent to '' or clears children (Jason Davies)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: jsdom.env swallows exceptions that occur in the callback (Xavi)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-13" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-13" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.13")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: remove unused style property which was causing explosions in 0.2.12 and node 0.4.7"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-12" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-12" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.12")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: do not include gmon.out/v8.log/tests in npm distribution"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-11" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-11" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.11")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Add: allow non-unique element ids (Avi Deitcher)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: make contexify an optional dependency (Isaac Schlueter)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: scripts injected by jsdom are now marked with a 'jsdom' class for serialization's sake (Peter Lyons)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: definition for ldquo entity (Andrew Morton)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: access NamedNodeMap items via property (Brian McDaniel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: upgrade sizzle from 1.0 to "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/jquery/sizzle/commit/fe2f618106bb76857b229113d6d11653707d0b22",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("fe2f6181"), _c("OutboundLink")],
            1
          ),
          _vm._v(" which is roughly 1.5.1")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: documentation now includes "),
          _c("code", [_vm._v("jsdom.level(x, 'feature')")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: make "),
          _c("code", [_vm._v("toArray")]),
          _vm._v(" and "),
          _c("code", [_vm._v("item")]),
          _vm._v(" on "),
          _c("code", [_vm._v("NodeList")]),
          _vm._v(" objects non-enumerable properties")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: a reference to "),
          _c("code", [_vm._v("window.close")]),
          _vm._v(" in the readme")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: Major performance boost (Felix Gnass)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: Using querySelector "),
          _c("code", [_vm._v(":not()")]),
          _vm._v(" throws a "),
          _c("code", [_vm._v("ReferenceError")]),
          _vm._v(" (Felix Gnass)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-10" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-10" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.10")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Fix: problems with lax dependency versions")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: CSSOM constructors are hung off of the dom (Brian McDaniel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: move away from deprecated 'sys' module")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: attribute event handlers on bubbling path aren't called (Brian McDaniel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: setting textarea.value to markup should not be parsed (Andreas Lind Petersen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: content of script tags should not be escaped (Ken Sternberg)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: DocumentFeatures for iframes with no src attribute. (Brian McDaniel) Closes #355"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: 'trigger' to 'raise' to be a bit more descriptive")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: When "),
          _c("code", [_vm._v("ProcessExternalResources['script']")]),
          _vm._v(" is disabled, do "),
          _c("em", [_vm._v("not")]),
          _vm._v(" run inline event handlers. #355")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: verbose flag to test runner (to show tests as they are running and finishing)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-9" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-9" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.9")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: ensure features are properly reset after a jsdom.env invocation. Closes #239"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: ReferenceError in the scanForImportRules helper function"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: bug in appendHtmlToElement with HTML5 parser (Brian McDaniel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add: jsonp support (lheiskan)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: for setting script element's text property (Brian McDaniel)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: for jsdom.env src bug")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: test for jsdom.env src bug (multiple done calls)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: NodeList properties should enumerate like arrays (Felix Gnass)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: when downloading a file, include the url.search in file path"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: test for making a jsonp request with jquery from jsdom window"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add: test case for issue #338")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: double load behavior when mixing jsdom.env's "),
          _c("code", [_vm._v("scripts")]),
          _vm._v(" and "),
          _c("code", [_vm._v("src")]),
          _vm._v(" properties (cjroebuck)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-8-hotfix" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_0-2-8-hotfix" } },
          [_vm._v("#")]
        ),
        _vm._v(" 0.2.8 (hotfix)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: inline event handlers are ignored by everything except for the javascript context"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-7-hotfix" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#_0-2-7-hotfix" } },
          [_vm._v("#")]
        ),
        _vm._v(" 0.2.7 (hotfix)")
      ]),
      _vm._v(" "),
      _c("ul", [_c("li", [_vm._v("Fix stylesheet loading")])]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-6" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-6" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.6")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Add: support for window.location.search and document.cookie (Derek Lindahl)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: jsdom.env now has a document configuation option which allows users to change the referer of the document (Derek Lindahl)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: allow users to use different jsdom levels in the same process (sinegar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: removeAttributeNS no longer has a return value (Jason Davies)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: support for encoding/decoding all html entities from html4/5 (papandreou)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: jsdom.env() accepts the same features object seen in jsdom.jsdom and friends"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-5" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-5" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.5")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: serialize special characters in Element.innerHTML/Element.attributes like a grade A browser (Jason Priestley)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: ensure Element.getElementById only returns elements that are attached to the document"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: ensure an Element's id is updated when changing the nodeValue of the 'id' attribute (Felix Gnass)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Add: stacktrace to error reporter (Josh Marshall)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: events now bubble up to the window (Jason Davies)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: initial window.location.hash support (Josh Marshall)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: Node#insertBefore should do nothing when both params are the same node (Jason Davies)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: fixes for DOMAttrModified mutation events (Felix Gnass)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.4")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: adding script to invalid/incomplete dom (document.documentElement) now catches the error and passes it in the "
          ),
          _c("code", [_vm._v(".env")]),
          _vm._v(" callback (Gregory Tomlinson)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Cleanup: trigger and html tests")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add: support for inline event handlers (ie: "),
          _c("code", [_vm._v("<div onclick='some.horrible.string()'>")]),
          _vm._v(") (Brian McDaniel)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix: script loading over https (Brian McDaniel) #280")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: using style.setProperty updates the style attribute (Jimmy Mabey)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add: invalid markup is reported as an error and attached to the associated element and document"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: crash when setChild() failes to create new DOM element (John Hurliman)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Added test for issue #287.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Added support for inline event handlers.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Moved frame tests to test/window/frame.js and cleaned up formatting."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Moved script execution tests to test/window/script.js.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix a crash when setChild() fails to create a new DOM element"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Override CSSOM to update style attribute")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.3")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fix: segfault due to window being garbage collected prematurely\nNOTE: you must manually close the window to free memory (window.close())"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.2")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Switch to Contextify to manage the window's script execution."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: allow nodelists to have a length of 0 and toArray to return an empty array"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: style serialization; issues #230 and #259")]),
        _vm._v(" "),
        _c("li", [_vm._v("Fix: Incomplete DOCTYPE causes JavaScript error")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: indentation, removed outdated debug code and trailing whitespace."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Prevent JavaScript error when parsing incomplete "),
          _c("code", [_vm._v("<!DOCTYPE>")]),
          _vm._v(". Closes #259.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Adding a test from brianmcd that ensures that setTimeout callbacks execute in the context of the window"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixes issue 250: make "),
          _c("code", [_vm._v("document.parentWindow === window")]),
          _vm._v(" work")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added test to ensure that timer callbacks execute in the window context."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixes 2 issues in ResourceQueue")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Make frame/iframe load/process scripts if the parent has the features enabled"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_0-2-1" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#_0-2-1" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 0.2.1")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Javascript execution fixes [#248, #163, #179]")]),
        _vm._v(" "),
        _c("li", [_vm._v("XPath (Yonathan and Daniel Cassidy)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Start of cssom integration (Yonathan)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Conversion of tests to nodeunit! (Martin Davis)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Added sizzle tests, only failing 3/15")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Set the title node's textContent rather than its innerHTML #242.  (Andreas Lind Petersen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "The textContent getter now walks the DOM and extract the text properly. (Andreas Lind Petersen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Empty scripts won't cause jsdom.env to hang #172 (Karuna Sagar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Every document has either a body or a frameset #82. (Karuna Sagar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added the ability to grab a level by string + feature. ie: jsdom.level(2, 'html') (Aria Stewart)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Cleaned up htmlencoding and fixed character (de)entification #147, #177 (Andreas Lind Petersen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("htmlencoding.HTMLDecode: Fixed decoding of "),
          _c("code", [_vm._v("&lt;")]),
          _vm._v(", "),
          _c("code", [_vm._v("&gt;")]),
          _vm._v(", "),
          _c("code", [_vm._v("&amp;")]),
          _vm._v(", and "),
          _c("code", [_vm._v("&apos;")]),
          _vm._v(". Closes #147 and #177.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Require dom level as a string or object. (Aria Stewart)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "JS errors ar triggered on the script element, not document. (Yonathan)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added configuration property 'headers' for HTTP request headers. (antonj)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Attr.specified is readonly - Karuna Sagar")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Removed return value from setAttributeNS() #207 (Karuna Sagar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Pass the correct script filename to runInContext. (robin)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add http referrer support for the download() function. (Robin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "First attempt at fixing the horrible memory leak via window.stopTimers() (d-ash)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Use vm instead of evals binding (d-ash)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Add a way to set the encoding of the jsdom.env html request.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixed various typos/lint problems (d-ash)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "The first parameter download is now the object returned by URL.parse(). (Robin)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed serialization of elements with a style attribute.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added src config option to jsdom.env() (Jerry Sievert)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed dead code from getNamedItemNS() (Karuna Sagar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Changes to language/javascript so jsdom would work on v0.5.0-pre (Gord Tanner)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Correct spelling of "Hierarchy request error" (Daniel Cassidy)'
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Node and Exception type constants are available in all levels. (Daniel Cassidy)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Use \\n instead of \\r\\n during serialization")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed auto-insertion of body/html tags  (Adrian Makowski)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Adopt unowned nodes when added to the tree. (Aria Stewart)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fix the selected and defaultSelected fields of "),
          _c("code", [_vm._v("option")]),
          _vm._v(" element. - Yonathan")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix: EventTarget.getListeners() now returns a shallow copy so that listeners can be safely removed while an event is being dispatched. (Felix Gnass)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added removeEventListener() to DOMWindow (Felix Gnass)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added the ability to pre-load scripts for jsdom.env() (Jerry Sievert)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Mutation event tests/fixes (Felix Gnass)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Changed HTML serialization code to (optionally) pretty print while traversing the tree instead of doing a regexp-based postprocessing. (Andreas Lind Petersen)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Relative and absolute urls now work as expected")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "setNamedItem no longer sets Node.parentNode #153 (Karuna Sagar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added missing semicolon after entity name - Felix Gnass")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added NodeList#indexOf implementation/tests (Karuna Sagar)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "resourceLoader.download now works correctly with https and redirects (waslogic)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Scheme-less URLs default to the current protocol #87 (Alexander Flatter)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Simplification the prevSibling(), appendChild(), insertBefore() and replaceChild() code (Karuna Sagar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Javascript errors use core.Node.trigger (Alexander Flatter)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Add core.Document.trigger in level1/core and level2/events; Make DOMWindow.console use it (Alexander Flatter)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Resource resolver fixes (Alexander Flatter)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fix serialization of doctypes with new lines #148 (Karuna Sagar)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Child nodes are calculated immediately instead of after .length is called #169, #171, #176 (Karuna Sagar)"
          )
        ])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}