{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/csso/CHANGELOG.md?vue&type=template&id=4e72f148&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/csso/CHANGELOG.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfNC0yLTAtbm92ZW1iZXItMjYtMjAyMCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzQtMi0wLW5vdmVtYmVyLTI2LTIwMjAiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiA0LjIuMCAoTm92ZW1iZXIgMjYsIDIwMjApIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHJpbSBDdXN0b20gUHJvcGVydHkgdmFsdWVzIHdoZW4gcG9zc2libGUgKCMzOTMpIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeGVkIHJlbW92aW5nIHVuaXQgZm9yIHplcm8tbGVuZ3RoIGRpbWVudGlvbnMgaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1pbigpIildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWF4KCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjbGFtcCgpIildKSwKICAgICAgICAgIF92bS5fdigiIGZ1bmN0aW9ucyAoIzQyNikiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgY3Jhc2ggb24gYmFkIHZhbHVlIGluIFRSQkwgZGVjbGFyYXRpb24gdmFsdWUgKCM0MTIpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfNC0xLTEtbm92ZW1iZXItMTUtMjAyMCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzQtMS0xLW5vdmVtYmVyLTE1LTIwMjAiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiA0LjEuMSAoTm92ZW1iZXIgMTUsIDIwMjApIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCBidWlsZCBzZXR1cCB0byBleGNsdWRlIGZ1bGwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1kbi9kYXRhIildKSwKICAgICAgICAgIF92bS5fdigiIHRoYXQgcmVkdWNlZCB0aGUgbGliIHNpemU6XG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiZGlzdC9jc3NvLmpzOiA3OTQuNUtiIC0+IDI1NS4yS2IiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiZGlzdC9jc3NvLm1pbi5qczogMzk0LjRLYiAtPiAxOTQuMktiIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInBhY2thZ2Ugc2l6ZTogMjM3Ljgga0IgLT4gMTU2LjEga0IiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigicGFja2FnZSB1bnBhY2tlZCBzaXplOiAxLjMgTUIgLT4gNTg2Ljgga0IiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl80LTEtMC1vY3RvYmVyLTI3LTIwMjAiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI180LTEtMC1vY3RvYmVyLTI3LTIwMjAiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiA0LjEuMCAoT2N0b2JlciAyNywgMjAyMCkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkJ1bXBlZCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jc3N0cmVlL2Nzc3RyZWUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJDU1NUcmVlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiXjEuMC4wIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeGVkIHdyb25nbHkgbWVyZ2luZyBvZiBUUkJMIHZhbHVlcyB3aGVuIG9uZSBvZiB0aGVtIGNvbnRhaW5zICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInZhcigpIildKSwKICAgICAgICAgIF92bS5fdigiICgjNDIwKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRml4ZWQgd3JvbmdseSBtZXJnaW5nIG9mIHBzZXVkbyBjbGFzcyBhbmQgZWxlbWVudCB3aXRoIHRoZSBzYW1lIG5hbWUsIGUuZy4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOi1tcy1pbnB1dC1wbGFjZWhvbGRlciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyIildKSwKICAgICAgICAgIF92bS5fdigiICgjMzgzLCAjNDE2KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGaXhlZCB3cm9uZ2x5IG1lcmdpbmcgb2YgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm92ZXJmbG93IildKSwKICAgICAgICAgIF92bS5fdigiIGZhbGxiYWNrICgjNDE1KSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzQtMC0zLW1hcmNoLTI0LTIwMjAiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI180LTAtMy1tYXJjaC0yNC0yMDIwIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgNC4wLjMgKE1hcmNoIDI0LCAyMDIwKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUHJldmVudGVkIHBlcmNlbnQgc2lnbiByZW1vdmFsIGluICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmbGV4IildKSwKICAgICAgICAgIF92bS5fdigiLyIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItbXMtZmxleCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoIzQxMCkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeGVkIHJlc3RydWN0dXJpbmcgb3B0aW1pc2F0aW9uIGluIHNvbWUgY2FzZXMgKEBjaGFybGVzc3VoICYgQGNoc3VoLCAjMzU4LCAjNDExKSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJCdW1wZWQgZGVwZW5kZW5jaWVzIChAQXZpVmFobCwgIzQwOSkiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl80LTAtMi1vY3RvYmVyLTI4LTIwMTkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI180LTAtMi1vY3RvYmVyLTI4LTIwMTkiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiA0LjAuMiAoT2N0b2JlciAyOCwgMjAxOSkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaXhlZCBjbGVhbiBzdGFnZSB0byBhdm9pZCBleGNlcHRpb25zIHdoZW4gc291cmNlIGhhcyB1bnBhcnNlZCBvciBiYWQgcGFydHMgKCMzODApIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgd3JvbmcgcGVyY2VudGFnZSBzaWduIHJlbW92YWwgZm9yIHplcm8gdmFsdWVzICgjMzk1KSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzQtMC0xLW9jdG9iZXItMjItMjAxOSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzQtMC0xLW9jdG9iZXItMjItMjAxOSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDQuMC4xIChPY3RvYmVyIDIyLCAyMDE5KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQnVtcGVkIENTU1RyZWUgdG8gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vY3NzdHJlZS9jc3N0cmVlL3JlbGVhc2VzL3RhZy92MS4wLjAtYWxwaGEuMzciLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX2MoImNvZGUiLCBbX3ZtLl92KCIxLjAuMC1hbHBoYS4zNyIpXSksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gYXZvaWQgc291cmNlIG1hcCBnZW5lcmF0aW9uIGluY29uc2lzdGVuY3kgYWNyb3NzIE5vZGUuanMgdmVyc2lvbnMiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzQtMC0wLW9jdG9iZXItMjEtMjAxOSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzQtMC0wLW9jdG9iZXItMjEtMjAxOSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDQuMC4wIChPY3RvYmVyIDIxLCAyMDE5KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkRyb3BwZWQgc3VwcG9ydCBmb3IgTm9kZS5qcyA8IDgiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlJlZnJlc2hlZCBkZXYgZGVwZW5kZW5jaWVzIGFuZCBzY3JpcHRzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkJ1bXBlZCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jc3N0cmVlL2Nzc3RyZWUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJDU1NUcmVlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMS4wLjAtYWxwaGEuMzYiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKCMzOTkpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgYnVuZGxlIGZpbGVzOiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGlzdC9jc3NvLmpzIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGlzdC9jc3NvLm1pbi5qcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBpbnN0ZWFkIHNpbmdsZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGlzdC9jc3NvLWJyb3dzZXIuanMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKG1pbiB2ZXJzaW9uKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJFeHBvc2UgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbXByZXNzKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYXMgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN5bnRheC5jb21wcmVzcygpIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8zLTUtMS1qdW5lLTctMjAxOCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzMtNS0xLWp1bmUtNy0yMDE4IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMy41LjEgKEp1bmUgNywgMjAxOCkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkJ1bXBlZCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jc3N0cmVlL2Nzc3RyZWUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJDU1NUcmVlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMS4wLjAtYWxwaGEuMjkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKGZpeGVzIHNvbWUgaXNzdWVzKSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzMtNS0wLWphbnVhcnktMTQtMjAxOCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzMtNS0wLWphbnVhcnktMTQtMjAxOCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDMuNS4wIChKYW51YXJ5IDE0LCAyMDE4KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTWlncmF0ZWQgdG8gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vY3NzdHJlZS9jc3N0cmVlIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQ1NTVHJlZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjEuMC4wLWFscGhhLjI3IildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8zLTQtMC1ub3ZlbWJlci0zLTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18zLTQtMC1ub3ZlbWJlci0zLTIwMTciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAzLjQuMCAoTm92ZW1iZXIgMywgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBZGRlZCBwZXJjZW50IHNpZ24gcmVtb3ZhbCBmb3IgemVybyBwZXJjZW50YWdlcyBmb3Igc29tZSBwcm9wZXJ0aWVzIHRoYXQgaXMgc2FmZSAoQFJ1YmFYYSwgIzI4NikiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW1vdmVkIHVuaXQgcmVtb3ZhbCBmb3IgemVybyB2YWx1ZXMgaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi1tcy1mbGV4IildKSwKICAgICAgICAgIF92bS5fdigiIGR1ZSBpdCBicmVha3MgZmxleCBpbiBJRTEwLzExICgjMzYyKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSW1wcm92ZWQgcGVyZm9ybWFuY2Ugb2Ygc2VsZWN0b3JzIGNvbXBhcmlzb24gKEBzbWVsdWtvdiwgIzM0MykiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzMtMy0xLW9jdG9iZXItMTctMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzMtMy0xLW9jdG9iZXItMTctMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDMuMy4xIChPY3RvYmVyIDE3LCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgbWVyZ2Ugb2YgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInBvc2l0aW9uIildKSwKICAgICAgICAgIF92bS5fdigiIGRlY2xhcmF0aW9ucyB3aGVuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdGlja3kiKV0pLAogICAgICAgICAgX3ZtLl92KCIgZmFsbGJhY2sgaXMgdXNpbmcgKEBncnV6emlsa2luLCAjMzU2KSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzMtMy0wLW9jdG9iZXItMTItMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzMtMy0wLW9jdG9iZXItMTItMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDMuMy4wIChPY3RvYmVyIDEyLCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTWlncmF0ZWQgdG8gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vY3NzdHJlZS9jc3N0cmVlIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQ1NTVHJlZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjEuMC4wLWFscGhhMjUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNoYW5nZWQgQVNUIGZvcm1hdCAoc2VlICIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2Nzc3RyZWUvY3NzdHJlZS9ibG9iL21hc3Rlci9ISVNUT1JZLm1kIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJDU1NUcmVlIGNoYW5nZSBsb2ciKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiIGZvciBkZXRhaWxzKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJGaXhlZCBwZXJmb3JtYW5jZSBpc3N1ZSB3aGVuIGdlbmVyYXRlIENTUyB3aXRoIHNvdXJjZSBtYXAgKHF1YWRyYXRpYyBpbmNyZWFzZSBpbiB0aW1lIGRlcGVuZGluZyBvbiB0aGUgc2l6ZSBvZiB0aGUgQ1NTKSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8zLTItMC1zZXB0ZW1iZXItMTAtMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzMtMi0wLXNlcHRlbWJlci0xMC0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMy4yLjAgKFNlcHRlbWJlciAxMCwgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaXhlZCBuYW1lZCBjb2xvciBjb21wcmVzc2lvbiB0byBhcHBseSBvbmx5IHdoZW4gYW4gaWRlbnRpZmllciBpcyBndWFyYW50ZWVkIHRvIGJlIGEgY29sb3IiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZGRlZCBsaWZ0aW5nIG9mICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAa2V5ZnJhbWVzIildKSwKICAgICAgICAgIF92bS5fdigiIHRvIHRoZSBiZWdpbm5pbmcgb2Ygc3R5bGUgc2hlZXQgKGNodW5rKSwgYnV0IGFmdGVyICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAY2hhcnNldCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBpbXBvcnQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcnVsZXMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgcmVtb3ZhbCBvZiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQGtleWZyYW1lcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBtZWRpYSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBzdXBwb3J0cyIpXSksCiAgICAgICAgICBfdm0uX3YoIiB3aXRoIG5vIHByZWx1ZGUiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgcmVtb3ZhbCBvZiBkdXBsaWNhdGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBrZXlmcmFtZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKCMyMDIpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkIG5ldyBvcHRpb24gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZvcmNlTWVkaWFNZXJnZSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gZm9yY2UgbWVkaWEgcnVsZXMgbWVyZ2luZy4gSXQncyB1bnNhZmUgaW4gZ2VuZXJhbCwgYnV0IHdvcmtzIGZpbmUgaW4gbWFueSBjYXNlcy4gVXNlIGl0IG9uIHlvdXIgb3duIHJpc2sgKCMzNTApIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQnVtcGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDU1NUcmVlIildKSwKICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIxLjAuMC1hbHBoYTIzIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8zLTEtMS1hcHJpbC0yNS0yMDE3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMy0xLTEtYXByaWwtMjUtMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDMuMS4xIChBcHJpbCAyNSwgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaXhlZCBjcmFzaCBvbiBhIG51bWJlciBwcm9jZXNzaW5nIHdoZW4gaXQgdXNlZCBub3QgaW4gYSBsaXN0ICgjMzM1KSIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMy0xLTAtYXByaWwtMjQtMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzMtMS0wLWFwcmlsLTI0LTIwMTciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAzLjEuMCAoQXByaWwgMjQsIDIwMTcpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCBvcHRpbWlzYXRpb24gZm9yICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJub25lIildKSwKICAgICAgICAgIF92bS5fdigiIGtleXdvcmQgaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJvcmRlciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm91dGxpbmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcHJvcGVydGllcyAoQHpvb2Jlc3RpaywgIzQxKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRlZCByZXBsYWNpbmcgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJnYmEoeCwgeCwgeCwgMCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRyYW5zcGFyZW50IildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpeGVkIHBsdXMgc2lnbiBvbWl0dGluZyBmb3IgbnVtYmVycyBmb2xsb3dpbmcgaWRlbnRpZmllciwgaGV4IGNvbG9yLCBudW1iZXIgb3IgdW5pY29kZSByYW5nZSwgc2luY2UgaXQgY2FuIGNoYW5nZSB0aGUgbWVhbmluZyBvZiBDU1MgKGUuZy4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY2FsYygxcHgrMnB4KSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBoYXMgYmVlbiBvcHRpbWl6ZWQgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNhbGMoMXB4MnB4KSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBiZWZvcmUsIG5vdyBpdCBzdGF5cyB0aGUgc2FtZSkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW1wcm92ZWQgdXNhZ2UgZmlsdGVyaW5nIGZvciBuZXN0ZWQgc2VsZWN0b3JzIChpLmUuIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOm50aC0qKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI6aGFzKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI6bWF0Y2hlcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgb3RoZXIgcHNldWRvcykiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW1wbGVtZW50ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJsYWNrbGlzdCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmaWx0ZXJpbmcgaW4gdXNhZ2UgKCMzMzQsIHNlZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jc3MvY3NzbyNibGFjay1saXN0LWZpbHRlcmluZyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkJsYWNrIGxpc3QgZmlsdGVyaW5nIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkltcHJvdmVkIHdoaXRlIHNwYWNlIHJlbW92aW5nLCBub3cgd2hpdGUgc3BhY2VzIGFyZSByZW1vdmluZyBpbiB0aGUgYmVnaW5uaW5nIGFuZCBhdCB0aGUgZW5kaW5nIG9mIHNlcXVlbmNlcywgYW5kIGJldHdlZW4gc3R5bGVzaGVldCBhbmQgYmxvY2sgbm9kZXMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJCdW1wZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNTU1RyZWUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjEuMC4wLWFscGhhMTkiKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzMtMC0xLW1hcmNoLTE0LTIwMTciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18zLTAtMS1tYXJjaC0xNC0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMy4wLjEgKE1hcmNoIDE0LCAyMDE3KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgZGVjbGFyYXRpb24gbWVyZ2luZyB3aGVuIGRlY2xhcmF0aW9uIGNvbnRhaW5zIGFuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIhaW1wb3J0YW50IildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8zLTAtMC1tYXJjaC0xMy0yMDE3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMy0wLTAtbWFyY2gtMTMtMjAxNyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDMuMC4wIChNYXJjaCAxMywgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk1pZ3JhdGVkIHRvICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2Nzc3RyZWUvY3NzdHJlZSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkNTU1RyZWUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGFzIEFTVCBiYWNrZW5kIGFuZCBleHBvc2VkIGl0cyBBUEkgYmVoaW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzeW50YXgiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcHJvcGVydHkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRXh0cmFjdGVkIENMSSBpbnRvIHN0YW5kYWxvbmUgcGFja2FnZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jc3MvY3Nzby1jbGkiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJjc3MvY3Nzby1jbGkiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8yLTMtMS1qYW51YXJ5LTYtMjAxNyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzItMy0xLWphbnVhcnktNi0yMDE3IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMi4zLjEgKEphbnVhcnkgNiwgMjAxNykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZGVkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJcXDAiKV0pLAogICAgICAgICAgX3ZtLl92KCIgSUUgaGFjayBzdXBwb3J0ICgjMzIwKSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzItMy0wLW9jdG9iZXItMjUtMjAxNiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzItMy0wLW9jdG9iZXItMjUtMjAxNiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDIuMy4wIChPY3RvYmVyIDI1LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWRkZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJlZm9yZUNvbXByZXNzIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYWZ0ZXJDb21wcmVzcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBvcHRpb25zIHN1cHBvcnQgKCMzMTYpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJGaXhlZCBjcmFzaCBvbiBlbXB0eSBhcmd1bWVudCBpbiBmdW5jdGlvbiAoIzMxNykiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8yLTItMS1qdWx5LTI1LTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18yLTItMS1qdWx5LTI1LTIwMTYiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAyLjIuMSAoSnVseSAyNSwgMjAxNikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaXhlZCBzaG9ydGhhbmQgb3B0aW1pc2F0aW9uIGlzc3VlIHdoZW4gdmFsdWUgaGFzIGEgY29sb3IgdmFsdWUgb3Igc29tZXRoaW5nIHVua25vd24gKCMzMTEpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4ZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImN1cnNvciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBicm9rZW4gZmFsbGJhY2sgKCMzMDYpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMi0yLTAtanVuZS0yMy0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMi0yLTAtanVuZS0yMy0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMi4yLjAgKEp1bmUgMjMsIDIwMTYpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnQgQVNUIGNsb25pbmcgYnkgYWRkaW5nICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjbG9uZSgpIildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2Nzcy9jc3NvI2Nsb25lYXN0IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiZnVuY3Rpb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY2xvbmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vY3NzL2Nzc28jY29tcHJlc3Nhc3Qtb3B0aW9ucyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIm9wdGlvbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgZm9yICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb21wcmVzcygpIildKSwKICAgICAgICAgIF92bS5fdigiIGZ1bmN0aW9uICgjMjk2KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRml4IHBhcnNlIGFuZCB0cmFuc2xhdGUgYXR0cmlidXRlIHNlbGVjdG9yIHdpdGggZmxhZ3MgYnV0IHcvbyBvcGVyYXRvciAoaS5lLiAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJbYXR0ck5hbWUgaV0iKV0pLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJEb24ndCBtZXJnZSBydWxlcyB3aXRoIGZsYWdnZWQgYXR0cmlidXRlIHNlbGVjdG9ycyB3aXRoIG90aGVycyAoIzI5MSkiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGFrZSBpbiBhY2NvdW50IGZ1bmN0aW9ucyB3aGVuIG1lcmdlIFRSQkwtcHJvcGVydGllcyAoIzI5NywgdGhhbmtzIHRvIEBBcnR1ckFyYWxpbikiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW1wcm92ZSBwYXJ0aWFsIG1lcmdlICgjMzA0KSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVHdlYWsgc2Nhbm5lciwgcmVkdWNlIGNvZGUgZGVvcHRpbWl6YXRpb25zIGFuZCBvdGhlciBzbWFsbCBpbXByb3ZlbWVudHMiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzItMS0xLW1heS0xMS0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMi0xLTEtbWF5LTExLTIwMTYiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAyLjEuMSAoTWF5IDExLCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4IHdyb25nIGRlY2xhcmF0aW9uIHdpdGggIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlxcOSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBoYWNrIG1lcmdlICgjMjk1KSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzItMS0wLW1heS04LTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18yLTEtMC1tYXktOC0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMi4xLjAgKE1heSA4LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTmV3IG9wdGlvbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY29tbWVudHMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gc3BlY2lmeSB3aGF0IGNvbW1lbnRzIHRvIGxlZnQ6ICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJleGNsYW1hdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZpcnN0LWV4Y2xhbWF0aW9uIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9uZSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFkZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib2Zmc2V0IildKSwKICAgICAgICAgIF92bS5fdigiIHRvIENTUyBwYXJzZSBlcnJvciBkZXRhaWxzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpeCB0b2tlbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib2Zmc2V0IildKSwKICAgICAgICAgIF92bS5fdigiIGNvbXB1dGF0aW9uIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMi0wLTAtYXByaWwtNS0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMi0wLTAtYXByaWwtNS0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMi4wLjAgKEFwcmlsIDUsIDIwMTYpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJObyBtb3JlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJnb256YWxlcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBBU1QgZm9ybWF0IGFuZCByZWxhdGVkIGNvZGUiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWluaWZ5KCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtaW5pZnlCbG9jaygpIildKSwKICAgICAgICAgIF92bS5fdigiIGlzIGFsd2F5cyByZXR1cm4gYW4gb2JqZWN0IGFzIHJlc3VsdCBub3cgKGkuZS4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJ7IGNzczogU3RyaW5nLCBtYXA6IFNvdXJjZU1hcEdlbmVyYXRvciBvciBudWxsIH0iKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2UoKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmV0dXJucyBBU1QgaW4gbmV3IGZvcm1hdCAoc28gY2FsbGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaW50ZXJuYWwiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiRHluYW1pYyBzY2FubmVyIGltcGxlbWVudGVkIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiTmV3IEFTVCBmb3JtYXQgKyBkeW5hbWljIHNjYW5uZXIgPSBwZXJmb3JtYW5jZSBib29zdCBhbmQgbGVzcyBtZW1vcnkgY29uc3VtcHRpb24iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIk5vIG1vcmUgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb250ZXh0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhcmd1bWVudCwgY29udGV4dCBzaG91bGQgYmUgc3BlY2lmaWVkIHZpYSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9wdGlvbnMiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiU3VwcG9ydGVkIGNvbnRleHRzIG5vdzogIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdHlsZXNoZWV0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhdHJ1bGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImF0cnVsZUV4cHJlc3Npb24iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJ1bGVzZXQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlbGVjdG9yIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzaW1wbGVTZWxlY3RvciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYmxvY2siKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImRlY2xhcmF0aW9uIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2YWx1ZSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJEcm9wICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibmVlZFBvc2l0aW9ucyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgb3B0aW9uLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInBvc2l0aW9ucyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgb3B0aW9uIHNob3VsZCBiZSB1c2VkIGluc3RlYWQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkRyb3AgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuZWVkSW5mbyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgb3B0aW9uLCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImluZm8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgb2JqZWN0IGlzIGF0dGFjaGluZyB0byBub2RlcyB3aGVuIHNvbWUgaW5mb3JtYXRpb24gaXMgcmVxdWVzdGVkIGJ5ICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib3B0aW9ucyIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcHRpb25zIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIHNob3VsZCBiZSBhbiBvYmplY3QsIG90aGVyd2lzZSBpdCB0cmVhdHMgYXMgZW1wdHkgb2JqZWN0IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb21wcmVzcygpIildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIk5vIG1vcmUgQVNUIGNvbnZlcnRpbmcgKHBlcmZvcm1hbmNlIGJvb3N0IGFuZCBsZXNzIG1lbW9yeSBjb25zdW1wdGlvbikiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkRyb3AgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvdXRwdXRBc3QiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG9wdGlvbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiUmV0dXJucyBhbiBvYmplY3QgYXMgcmVzdWx0IGluc3RlYWQgb2YgQVNUIChpLmUuICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigieyBhc3Q6IE9iamVjdCB9IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkRyb3AgbWV0aG9kczogIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImp1c3REb0l0KCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdHJpbmdpZnkoKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNsZWFuSW5mbygpIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTgtMS1tYXJjaC0zMC0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS04LTEtbWFyY2gtMzAtMjAxNiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuOC4xIChNYXJjaCAzMCwgMjAxNikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJEb24ndCByZW1vdmUgc3BhY2VzIGFmdGVyIGZ1bmN0aW9uL2JyYWNlcy91cmxzIHNpbmNlIHVuc2FmZSAoIzI4OSkiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtOC0wLW1hcmNoLTI0LTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTgtMC1tYXJjaC0yNC0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS44LjAgKE1hcmNoIDI0LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVXNhZ2UgZGF0YSBzdXBwb3J0OlxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRmlsdGVyIHJ1bGVzZXRzIGJ5IHRhZyBuYW1lcywgY2xhc3MgbmFtZXMgYW5kIGlkcyB3aGl0ZSBsaXN0cy4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiTW9yZSBhZ2dyZXNzaXZlIHJ1bGVzZXQgbW92aW5nIHVzaW5nIGNsYXNzIG5hbWUgc2NvcGVzIGluZm9ybWF0aW9uLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiTmV3IENMSSBvcHRpb24gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItLXVzYWdlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byBwYXNzIHVzYWdlIGRhdGEgZmlsZS4iKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkltcHJvdmUgaW5pdGlhbCBydWxlc2V0IG1lcmdlXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJDaGFuZ2Ugb3JkZXIgb2YgcnVsZXNldCBwcm9jZXNzaW5nLCBub3cgaXQncyBsZWZ0IHRvIHJpZ2h0LiBQcmV2aW91c2x5IHVubWVyZ2VkIHJ1bGVzZXRzIG1heSBwcmV2ZW50IGxvb2t1cCBhbmQgb3RoZXIgcnVsZXNldHMgbWVyZ2UuIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkRpZmZlcmVuY2UgaW4gcHNldWRvIHNpZ25hdHVyZSBqdXN0IHByZXZlbnRzIHJ1bGVzZXQgbWVyZ2luZywgYnV0IGRvbid0IHN0b3AgbG9va3VwLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiU2ltcGxpZnkgYmxvY2sgY29tcGFyaXNvbiAocGVyZm9ybWFuY2UpLiIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJOZXcgbWV0aG9kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjc3NvLm1pbmlmeUJsb2NrKCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgZm9yIGNzcyBibG9jayBjb21wcmVzc2lvbiAoZS5nLiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3R5bGUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYXR0cmlidXRlIGNvbnRlbnQpLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSdWxlc2V0IG1lcmdlIGltcHJvdmVtZW50OiBhdC1ydWxlcyB3aXRoIGJsb2NrIChsaWtlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAbWVkaWEiKV0pLAogICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBzdXBwb3J0cyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIpIG5vdyBjYW4gYmUgc2tpcHBlZCBkdXJpbmcgcnVsZXNldCBtZXJnZSBsb29rdXAgaWYgZG9lc24ndCBjb250YWluIHNvbWV0aGluZyBwcmV2ZW50cyBpdC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGSVg6IEFkZCBuZWdhdGlvbiAoIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjpub3QoKSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIpIHRvIHBzZXVkbyBzaWduYXR1cmUgdG8gYXZvaWQgdW5zYWZlIG1lcmdlIChvbGQgYnJvd3NlcnMgZG9lc24ndCBzdXBwb3J0IGl0KS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRklYOiBDaGVjayBuZXN0ZWQgcGFydHMgb2YgdmFsdWUgd2hlbiBjb21wdXRlIGNvbXBhdGliaWxpdHkuIEl0IGZpeGVzIHVuc2FmZSBwcm9wZXJ0eSBtZXJnaW5nLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS03LTEtbWFyY2gtMTYtMjAxNiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtNy0xLW1hcmNoLTE2LTIwMTYiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjcuMSAoTWFyY2ggMTYsIDIwMTYpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAicGFzcyBibG9jayBtb2RlIHRvIHRva2VuaXplciBmb3IgY29ycmVjdCBwYXJzaW5nIG9mIGRlY2xhcmF0aW9ucyBwcm9wZXJ0aWVzIHdpdGggIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLy8iKV0pLAogICAgICAgICAgX3ZtLl92KCIgaGFjayIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJmaXggd3JvbmdseSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQGltcG9ydCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBjaGFyc2V0IildKSwKICAgICAgICAgIF92bS5fdigiIHJlbW92YWwgb24gZG91YmxlIGV4Y2xhbWF0aW9uIGNvbW1lbnQiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTctMC1tYXJjaC0xMC0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS03LTAtbWFyY2gtMTAtMjAxNiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuNy4wIChNYXJjaCAxMCwgMjAxNikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInN1cHBvcnQgZm9yICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy12YXJpYWJsZXMvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQ1NTIEN1c3RvbSBQcm9wZXJ0aWVzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAoIzI3OSkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgInJld29yayBSVEJMIHByb3BlcnRpZXMgbWVyZ2Ug4oCTIGJldHRlciBtZXJnZSBmb3IgdmFsdWVzIHdpdGggc3BlY2lhbCB1bml0cyBhbmQgZG9uJ3QgbWVyZ2UgdmFsdWVzIHdpdGggQ1NTLXdpZGUga2V5d29yZHMgKCMyNTUpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInJlbW92ZSByZWR1bmRhbnQgdW5pdmVyc2FsIHNlbGVjdG9ycyAoIzE3OCkiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigidGFrZSBpbiBhY2NvdW50ICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIhaW1wb3J0YW50IildKSwKICAgICAgICAgIF92bS5fdigiIHdoZW4gY2hlY2sgZm9yIHByb3BlcnR5IG92ZXJyaWRpbmcgKCMyODApIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImRvbid0IG1lcmdlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0ZXh0LWFsaWduIildKSwKICAgICAgICAgIF92bS5fdigiIGRlY2xhcmF0aW9ucyB3aXRoIHNvbWUgdmFsdWVzICgjMjgxKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJhZGQgc3BhY2VzIGFyb3VuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiL2RlZXAvIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBjb21iaW5hdG9yIG9uIHRyYW5zbGF0ZSwgc2luY2UgaXQgdG9nZXRoZXIgd2l0aCB1bml2ZXJzYWwgc2VsZWN0b3IgY2FuIHByb2R1Y2UgYSBjb21tZW50IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImJldHRlciBrZXl3b3JkIGFuZCBwcm9wZXJ0eSBuYW1lIHJlc29sdmluZyAodG9sZXJhbnQgdG8gaGFja3MgYW5kIHNvIG9uKSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImludGVncmF0aW9uIGltcHJvdmVtZW50c1xuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoImNvbXByZXNzaW9uIGxvZyBmdW5jdGlvbiBjb3VsZCBiZSBjdXN0b21pemVkIGJ5ICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibG9nZ2VyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBvcHRpb24gZm9yICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY29tcHJlc3MoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWluaWZ5KCkiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigibWFrZSBwb3NzaWJsZSB0byBzZXQgaW5pdGlhbCBsaW5lIGFuZCBjb2x1bW4gZm9yIHBhcnNlciIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTYtNC1tYXJjaC0xLTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTYtNC1tYXJjaC0xLTIwMTYiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjYuNCAoTWFyY2ggMSwgMjAxNikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJucG0iKV0pLCBfdm0uX3YoIiBwdWJsaXNoIGlzc3VlICgjMjc2KSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtNi0zLWZlYnJ1YXJ5LTI5LTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTYtMy1mZWJydWFyeS0yOS0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS42LjMgKEZlYnJ1YXJ5IDI5LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiYWRkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaWxlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0byBnZW5lcmF0ZWQgc291cmNlIG1hcCBzaW5jZSBvdGhlciB0b29scyBjYW4gcmVsYXkgb24gaXQgaW4gc291cmNlIG1hcCB0cmFuc2Zvcm0gY2hhaW4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtNi0yLWZlYnJ1YXJ5LTI5LTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTYtMi1mZWJydWFyeS0yOS0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS42LjIgKEZlYnJ1YXJ5IDI5LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigidHdlYWsgc29tZSBwYXJzZSBlcnJvciBtZXNzYWdlcyBhbmQgdGhlaXIgcG9zaXRpb25zIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImZpeCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOm5vdCgpIildKSwKICAgICAgICAgIF92bS5fdigiIHBhcnNpbmcgYW5kIHNlbGVjdG9yIGdyb3VwcyBpbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiOm5vdCgpIildKSwKICAgICAgICAgIF92bS5fdigiIGlzIHN1cHBvcnRlZCBub3cgKCMyMTUpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5lZWRQb3NpdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwYXJzZXIgb3B0aW9uIGlzIGRlcHJlY2F0ZWQsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwb3NpdGlvbnMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgb3B0aW9uIHNob3VsZCBiZSB1c2VkIGluc3RlYWQgKCIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuZWVkUG9zaXRpb24iKV0pLAogICAgICAgICAgX3ZtLl92KCIgaXMgdXNlZCBzdGlsbCBpZiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicG9zaXRpb25zIildKSwKICAgICAgICAgIF92bS5fdigiIG9wdGlvbiBvbWl0dGVkKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJleHBvc2UgaW50ZXJuYWwgQVNUIEFQSSBhcyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY3Nzby5pbnRlcm5hbC4qIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWluaWZ5KCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYWRkcyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic291cmNlc0NvbnRlbnQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYnkgZGVmYXVsdCB3aGVuIHNvdXJjZSBtYXAgaXMgZ2VuZXJhdGVkIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImJyaW5nIGJhY2sgc3VwcG9ydCBmb3Igbm9kZS5qcyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMC4xMCIpXSksCiAgICAgICAgICBfdm0uX3YoIiB1bnRpbCBtYWpvciByZWxlYXNlICgjMjc1KSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtNi0xLWZlYnJ1YXJ5LTI4LTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTYtMS1mZWJydWFyeS0yOC0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS42LjEgKEZlYnJ1YXJ5IDI4LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImZpeCBleGNlcHRpb24gb24gemVybyBsZW5ndGggZGltZW5zaW9uIGNvbXByZXNzIG91dHNpZGUgZGVjbGFyYXRpb24gKCMyNzMpIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTYtMC1mZWJydWFyeS0yNy0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS02LTAtZmVicnVhcnktMjctMjAxNiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuNi4wIChGZWJydWFyeSAyNywgMjAxNikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoInNvdXJjZSBtYXBzIHN1cHBvcnQiKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJwYXJzZXIgcmVtYWtlOlxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInZhcmlvdXMgcGFyc2luZyBpc3N1ZXMgZml4ZWQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiZml4IHVuaWNvZGUgc2VxdWVuY2UgcHJvY2Vzc2luZyBpbiBpZGVudCAoIzE5MSkiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoInN1cHBvcnQgZm9yIGZsYWdzIGluIGF0dHJpYnV0ZSBzZWxlY3RvciAoIzI3MCkiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoInBvc2l0aW9uIChsaW5lIGFuZCBjb2x1bW4pIG9mIHBhcnNlIGVycm9yICgjMTA5KSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiNHggcGVyZm9ybWFuY2UgYm9vc3QsIGxlc3MgbWVtb3J5IGNvbnN1bXB0aW9uIildKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImNvbXByZXNzb3IgcmVmYWN0b3JpbmdcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgImludGVybmFsIEFTVCBpcyB1c2luZyBkb3VibHkgbGlua2VkIGxpc3RzICh3aXRoIHNhZmUgdHJhbnNmb3JtYXRpb24gc3VwcG9ydCBkdXJpbmcgaXRlcmF0aW9uKSBpbnN0ZWFkIG9mIGFycmF5cyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigicmVuYW1lICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVzdHJ1Y3R1cmluZyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZXN0cnVjdHVyZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgb3B0aW9uIGZvciAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1pbmlmeSgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi8iKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbXByZXNzKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlc3RydWN0dXJpbmciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGlzIGFsaWFzIGZvciAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlc3RydWN0dXJlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBub3csIHdpdGggbG93ZXIgcHJpb3JpdHkpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJ1bnF1b3RlIHVybHMgd2hlbiBwb3NzaWJsZSAoIzE0MSwgIzYwKSIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigic2V0dXAgY29kZSBjb3ZlcmFnZSBhbmQgYSBudW1iZXIgb2YgcmVsYXRlZCBmaXhlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiYWRkIGVzbGludCB0byBjaGVjayB1bnVzZWQgdGhpbmdzIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS01LTQtamFudWFyeS0yNy0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS01LTQtamFudWFyeS0yNy0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS41LjQgKEphbnVhcnkgMjcsIDIwMTYpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJvbmUgbW9yZSBmaXggKGluICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZXN0cnVjdFJ1bGVzZXQiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRoaXMgdGltZSkgd2l0aCBtZXJnZSBvZiBydWxlc2V0cyB3aGVuIGEgcnVsZXNldCB3aXRoIHNhbWUgc3BlY2lmaWNpdHkgcGxhY2VzIGJldHdlZW4gdGhlbSAoIzI2NCkiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJkaXNhYmxlIHBhcnRpYWwgbWVyZ2Ugb2YgcnVsZXNldHMgaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBrZXlmcmFtZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcnVsZXNldHMgKHVudGlsIHN1cmUgaXQncyBjb3JyZWN0KSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtNS0zLWphbnVhcnktMjUtMjAxNiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtNS0zLWphbnVhcnktMjUtMjAxNiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuNS4zIChKYW51YXJ5IDI1LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImRvbid0IG92ZXJyaWRlIGRpc3BsYXkgdmFsdWVzIHdpdGggZGlmZmVyZW50IGJyb3dzZXIgc3VwcG9ydCAoIzI1OSkiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJmaXggcHVibGlzaCBpc3N1ZSAob25lIG9mIG1vZHVsZXMgbGVhayBpbiBkZXZlbG9wbWVudCBzdGF0ZSkiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTUtMi1qYW51YXJ5LTI0LTIwMTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTUtMi1qYW51YXJ5LTI0LTIwMTYiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjUuMiAoSmFudWFyeSAyNCwgMjAxNikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJkb24ndCBtZXJnZSBydWxlc2V0cyBpZiBiZXR3ZWVuIHRoZW0gYSBydWxlc2V0IHdpdGggc2FtZSBzcGVjaWZpY2l0eSAoIzI2NCkiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtNS0xLWphbnVhcnktMTQtMjAxNiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtNS0xLWphbnVhcnktMTQtMjAxNiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuNS4xIChKYW51YXJ5IDE0LCAyMDE2KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiZW5zdXJlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBpcyBub3QgdXNlZCBhcyBhbiBpZGVudGlmaWVyIGluIGF0dHJpYnV0ZSBzZWxlY3RvcnMgKHRoYW5rcyB0byBAbWF0aGlhc2J5bmVucykiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJmaXggYnJva2VuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJqdXN0RG9JdCgpIildKSwKICAgICAgICAgIF92bS5fdigiIGZ1bmN0aW9uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJ2YXJpb3VzIHNtYWxsIGZpeGVzIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS01LTAtamFudWFyeS0xNC0yMDE2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS01LTAtamFudWFyeS0xNC0yMDE2IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS41LjAgKEphbnVhcnkgMTQsIDIwMTYpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicGFyc2VyIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwYXJzZXIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBQYXJzZXIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFtfYygibGkiLCBbX3ZtLl92KCJhdHRhY2ggbWludXMgdG8gbnVtYmVyIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNvbXByZXNzb3IiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbXByZXNzb3IiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbXByZXNzb3IiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInNwbGl0IGNvZGUgYmFzZSBpbnRvIHNtYWxsIG1vZHVsZXMgYW5kIHJlbGF0ZWQgcmVmYWN0b3JpbmciKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiaW50cm9kdWNlIGludGVybmFsIEFTVCBmb3JtYXQgZm9yIGNvbXByZXNzb3IgKCIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJnb256YWxlcyIpXSksCiAgICAgICAgICBfdm0uX3YoIuKGkiIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpbnRlcm5hbCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImludGVybmFsIildKSwKICAgICAgICAgIF92bS5fdigi4oaSIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdvbnphbGVzIildKSwKICAgICAgICAgIF92bS5fdigiIGNvbnZlcnRvcnMsIHdhbGtlcnMsIHRyYW5zbGF0b3IpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJ2YXJpb3VzIG9wdGltaXphdGlvbnM6IG5vIHNuYXBzaG90cywgdXNpbmcgY2FjaGVzIGFuZCBpbmRleGVzIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInNvcnQgc2VsZWN0b3JzLCBtZXJnZSBzZWxlY3RvcnMgaW4gYWxwaGFiZXQgb3JkZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImNvbXB1dGUgc2VsZWN0b3IncyBzcGVjaWZpY2l0eSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiYmV0dGVyIHJ1bGVzZXQgcmVzdHJ1Y3R1cmluZywgaW1wcm92ZSBjb21wcmVzc2lvbiBvZiBwYXJ0aWFsbHkgZXF1YWwgYmxvY2tzIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImJldHRlciBydWxlc2V0IG1lcmdlIOKAkyBub3Qgb25seSBjbG9zZXN0IGJ1dCBhbHNvIGRpc2pvaW5lZCBieSBvdGhlciBydWxlc2V0cyB3aGVuIHNhZmUiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJqb2luICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAbWVkaWEiKV0pLAogICAgICAgICAgX3ZtLl92KCIgd2l0aCBzYW1lIHF1ZXJ5IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm91dHB1dEFzdCIpXSksCiAgICAgICAgICBfdm0uX3YoIiDigJMgbmV3IG9wdGlvbiB0byBzcGVjaWZ5IG91dHB1dCBBU1QgZm9ybWF0ICgiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ29uemFsZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYnkgZGVmYXVsdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgInJlbW92ZSBxdW90ZXMgc3Vycm91bmRpbmcgYXR0cmlidXRlIHZhbHVlcyBpbiBhdHRyaWJ1dGUgc2VsZWN0b3JzIHdoZW4gcG9zc2libGUgKCM3MykiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJyZXBsYWNlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmcm9tIildKSwKICAgICAgICAgIF92bS5fdigi4oaSIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjAlIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMTAwJSIpXSksCiAgICAgICAgICBfdm0uX3YoIuKGkiIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0byIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhdCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQGtleWZyYW1lcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoIzIwNSkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigicHJldmVudCBwYXJ0aWFsIG1lcmdlIG9mIHJ1bGVzZXRzIGF0ICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAa2V5ZnJhbWVzIildKSwKICAgICAgICAgIF92bS5fdigiICgjODAsICMxOTcpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJhcGkiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2FwaSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIEFQSSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigid2Fsa2VyIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ29uemFsZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgQVNUIHdhcyBpbXBsZW1lbnRlZCIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiY2xpIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjbGkiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBDTEkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIm5ldyBvcHRpb24gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi0tc3RhdCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAob3V0cHV0IHN0YXQgaW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN0ZGVyciIpXSksCiAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigibmV3IG9wdGlvbmFsIHBhcmFtZXRlciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibGV2ZWwiKV0pLAogICAgICAgICAgX3ZtLl92KCIgZm9yICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItLWRlYnVnIildKSwKICAgICAgICAgIF92bS5fdigiIG9wdGlvbiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtNC00LWRlY2VtYmVyLTEwLTIwMTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTQtNC1kZWNlbWJlci0xMC0yMDE1IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS40LjQgKERlY2VtYmVyIDEwLCAyMDE1KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgInByZXZlbnQgcmVtb3ZhbCBvZiBzcGFjZXMgYWZ0ZXIgYnJhY2VzIHRoYXQgYmVmb3JlIGlkZW50aWZpZXIgdGhhdCBicmVha2luZyBhdC1ydWxlcyBleHByZXNzaW9ucyAoIzI1OCkiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtNC0zLWRlY2VtYmVyLTQtMjAxNSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtNC0zLWRlY2VtYmVyLTQtMjAxNSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuNC4zIChEZWNlbWJlciA0LCAyMDE1KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImZpeCB1bmljb2RlLXJhbmdlIHBhcnNpbmcgdGhhdCBjYXVzZSB0byB3cm9uZyBmdW5jdGlvbiBkZXRlY3Rpb24gKCMyNTApIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTQtMi1ub3ZlbWJlci05LTIwMTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTQtMi1ub3ZlbWJlci05LTIwMTUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjQuMiAoTm92ZW1iZXIgOSwgMjAxNSkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImFsbG93IHNwYWNlcyBiZXR3ZWVuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcm9naWQ6IildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCByZXN0IHBhcnQgb2YgdmFsdWUgZm9yIElFJ3MgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZpbHRlciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwcm9wZXJ0eSBhcyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYXV0b3ByZWZpeGVyIildKSwKICAgICAgICAgIF92bS5fdigiIGdlbmVyYXRlcyB0aGlzIGtpbmQgb2YgY29kZSAoIzI0OSkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiZml4ZXMgZm9yIFdpbmRvd3M6XG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiY29ycmVjdCBwcm9jZXNzaW5nIG5ldyBsaW5lcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJub3JtYWxpemUgZmlsZSBjb250ZW50IGluIHRlc3Qgc3VpdGUiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImZpeGVzIHRvIHdvcmsgaW4gc3RyaWN0IG1vZGUgKCMyNTIpIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJpbml0IGNvbXByZXNzb3IgZGljdGlvbmFyaWVzIGZvciBldmVyeSBjc3MgYmxvY2sgKCMyNDgsICMyNTEpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImJ1bXAgdWdsaWZ5LWpzIHZlcnNpb24iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTQtMS1vY3RvYmVyLTIwLTIwMTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTQtMS1vY3RvYmVyLTIwLTIwMTUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjQuMSAoT2N0b2JlciAyMCwgMjAxNSkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImFsbG93IG1lcmdlIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGlzcGxheSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwcm9wZXJ0eSAoIzE2NywgIzI0NCkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigibW9yZSBhY2N1cmF0ZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVjdCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNsaXAiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcHJvcGVydHkgdmFsdWUpIG1lcmdlIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJmaXggdHlwbyB3aGVuIHNwZWNpZnlpbmcgb3B0aW9ucyBpbiBjbGkgKHRoYW5rcyB0byBAVGFyaXRzeW4pIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiZml4IHNhZmUgdW5pdCB2YWx1ZXMgbWVyZ2Ugd2l0aCBrZXl3b3JkIHZhbHVlcyAoIzI0NCkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImZpeCB3cm9uZyBkZXNjZW5kYW50IGNvbWJpbmF0b3IgcmVtb3ZhbCAoIzI0NikiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiYnVpbGQgYnJvd3NlciB2ZXJzaW9uIG9uICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcmVwdWJsaXNoIildKSwKICAgICAgICAgIF92bS5fdigiICh0aGFua3MgdG8gQHNpbGVudHJvYWNoKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAicGFyc2VyOiBzdG9yZSB3aGl0ZXNwYWNlcyBhcyBzaW5nbGUgdG9rZW4gKHBlcmZvcm1hbmNlIGFuZCByZWR1Y2UgbWVtb3J5IGNvbnN1bXB0aW9uKSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJyZWFycmFuZ2UgY29tcHJlc3MgdGVzdHMgbGF5b3V0IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS00LW9jdG9iZXItMTYtMjAxNSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtNC1vY3RvYmVyLTE2LTIwMTUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjQgKE9jdG9iZXIgMTYsIDIwMTUpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQnJpbmdpbmcgcHJvamVjdCBiYWNrIHRvIGxpZmUuIENoYW5nZWQgZmlsZXMgc3RydWN0dXJlLCBjbGVhbmVkIHVwIGFuZCByZWZhY3RvcmVkIG1vc3Qgb2Ygc291cmNlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJjb21tb24iIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbW1vbiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENvbW1vbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigic2luZ2xlIGNvZGUgYmFzZSAobm8gbW9yZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3JjIildKSwKICAgICAgICAgIF92bS5fdigiIGZvbGRlcikiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiYnVpbGQgYnJvd3NlciB2ZXJzaW9uIHdpdGggIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJyb3dzZXJpZnkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKG5vIG1vcmUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1ha2UiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIGFuZCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2ViIildKSwKICAgICAgICAgIF92bS5fdigiIGZvbGRlciksIGJyb3dzZXIgdmVyc2lvbiBpcyBhdmFpbGFibGUgYXQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImRpc3QvY3Nzby1icm93c2VyLmpzIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigibWFpbiBmaWxlIGlzICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsaWIvaW5kZXguanMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbm93IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIm1pbmltYWwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5vZGUuanMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdmVyc2lvbiBpcyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMC4xMiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBub3ciKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgInJlc3RyaWN0IGZpbGUgbGlzdCB0byBwdWJsaXNoIG9uIG5wbSAobm8gbW9yZSB1c2VsZXNzIGZvbGRlcnMgYW5kIGZpbGVzIGluIHBhY2thZ2UpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiYWRkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJqc2NzIildKSwKICAgICAgICAgIF92bS5fdigiIHRvIGNvbnRyb2wgY29kZSBzdHlsZSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJhdXRvbWF0ZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ2gtcGFnZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdXBkYXRlIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJ1dGlsIGZ1bmN0aW9ucyByZXdvcmtlZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigidHJhbnNsYXRvciByZXdvcmtlZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigidGVzdCBzdWl0ZSByZXdvcmtlZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiY29tcHJlc3NvciByZWZhY3RvcmVkIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJpbml0aWFsIHBhcnNlciByZWZhY3RvcmluZyIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYXBpLTIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2FwaS0yIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgQVBJIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJuZXcgbWV0aG9kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtaW5pZnkoc3JjLCBvcHRpb25zKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgb3B0aW9uczpcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZXN0cnVjdHVyaW5nIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiDigJMgaWYgc2V0IHRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmFsc2UiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCBkaXNhYmxlIHN0cnVjdHVyZSBvcHRpbWlzYXRpb25zICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRydWUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGJ5IGRlZmF1bHQpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkZWJ1ZyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiAtIG91dHB1dHMgaW50ZXJtZWRpYXRlIHN0YXRlIG9mIENTUyBkdXJpbmcgY29tcHJlc3Npb24gKCIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmFsc2UiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGJ5IGRlZmF1bHQpIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJkZXByZWNhdGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImp1c3REb0l0KCkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbWV0aG9kICh1c2UgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1pbmlmeSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBpbnN0ZWFkKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJyZW5hbWUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRyZWVUb1N0cmluZygpIildKSwKICAgICAgICAgIF92bS5fdigiIG1ldGhvZCB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RyaW5naWZ5KCkiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJkcm9wICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcmludFRyZWUoKSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBtZXRob2QiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQVNUIG5vZGUgaW5mb1xuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbHVtbiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib2Zmc2V0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhZGRlZCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibG4iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHJlbmFtZWQgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsaW5lIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiZml4IGxpbmUgY291bnRpbmcgYWNyb3NzIG11bHRpcGxlIGZpbGVzIGFuZCBpbnB1dCB3aXRoIENSIExGICgjMTQ3KSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNsaS0yIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjbGktMiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENMSSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiY29tcGxldGVseSByZXdvcmtlZCwgdXNlICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2xhaG1hdGl5L2NsYXAiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJjbGFwIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB0byBwYXJzZSBhcmd2IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJhZGQgc3VwcG9ydCBmb3IgaW5wdXQgZnJvbSBzdGRpbiAoIzEyOCkiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiZHJvcCB1bmRvY3VtZW50ZWQgYW5kIG9ic29sZXRlZCBvcHRpb25zICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItLXJ1bGUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItLXBhcnNlciIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoc3VwcG9zZSBub2JvZHkgdXNlIGl0KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJkcm9wICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItb2ZmIildKSwKICAgICAgICAgIF92bS5fdigiIGFsaWFzIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLS1yZXN0cnVjdHVyZS1vZmYiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGFzIGluY29ycmVjdCAob25seSBvbmUgbGV0dGVyIG9wdGlvbnMgc2hvdWxkIHN0YXJ0cyB3aXRoIHNpbmdsZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItIildKSwKICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJuZXcgb3B0aW9uICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItLWRlYnVnIildKSwKICAgICAgICAgIF92bS5fdigiIHRoYXQgcmVmbGVjdGluZyB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib3B0aW9ucy5kZWJ1ZyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1pbmlmeSIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwYXJzaW5nLWFuZC1vcHRpbWl6YXRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwYXJzaW5nLWFuZC1vcHRpbWl6YXRpb25zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUGFyc2luZyBhbmQgb3B0aW1pemF0aW9ucyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImtlZXAgYWxsIGV4Y2xhbWF0aW9uIGNvbW1lbnRzICgjMTk0KSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJhZGQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi9kZWVwLyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBjb21iaW5hdG9yIHN1cHBvcnQgKCMyMDkpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImF0dHJpYnV0ZSBzZWxlY3RvclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImFsbG93IGNvbG9uIGluIGF0dHJpYnV0ZSBuYW1lICgjMjM3KSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJzdXBwb3J0IGZvciBuYW1lc3BhY2VzICgjMjMzKSIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJjb2xvclxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInN1cHBvcnQgYWxsIGNzcy9odG1sIGNvbG9ycyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJjb252ZXJ0ICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaHNsYSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZ2JhIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJobHMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmdiIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoImNvbnZlcnQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZ2JhIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB3aXRoIDEgYXMgYWxwaGEgdmFsdWUgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZ2IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgjMTIyKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiaW50ZXJwb2xhdGUgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZ2IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJnYmEiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHBlcmNlbnRhZ2UgdmFsdWVzIHRvIGFic29sdXRlIHZhbHVlcyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigicmVwbGFjZSBwZXJjZW50YWdlIHZhbHVlcyBpbiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJnYmEiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGZvciBub3JtYWxpemVkL2ludGVycG9sYXRlZCB2YWx1ZXMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImxvd2VyY2FzZSBoZXggY29sb3JzIGFuZCBjb2xvciBuYW1lcyAoIzE2OSkiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJmaXggY29sb3IgbWluaWZpY2F0aW9uIHdoZW4gaGV4IHZhbHVlIHJlcGxhY2VkIGZvciBjb2xvciBuYW1lICgjMTc2KSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiZml0IHJnYiB2YWx1ZXMgdG8gMC4uMjU1IHJhbmdlICgjMTgxKSIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJjYWxjXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigicmVtb3ZlIHNwYWNlcyBmb3IgbXVsdGlwbGUgb3BlcmF0b3IgaW4gY2FsYyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJkb24ndCByZW1vdmUgdW5pdHMgaW5zaWRlIGNhbGMgKCMyMjIpIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoImZpeCB3cm9uZyB3aGl0ZSBzcGFjZSByZW1vdmFsIGFyb3VuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIisiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi0iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgjMjI4KSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiZG9uJ3QgcmVtb3ZlIHVuaXRzIGluICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmbGV4IildKSwKICAgICAgICAgIF92bS5fdigiIHByb3BlcnR5IGFzIGl0IGNvdWxkIGNoYW5nZSB2YWx1ZSBtZWFuaW5nICgjMjAwKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJkb24ndCBtZXJnZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiXFw5IildKSwKICAgICAgICAgIF92bS5fdigiIGhhY2sgdmFsdWVzICgjMjMxKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAibWVyZ2UgcHJvcGVydHkgdmFsdWVzIG9ubHkgaWYgdGhleSBoYXZlIHRoZSBzYW1lIGZ1bmN0aW9ucyAoIzE1MCwgIzIyNykiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiZG9uJ3QgbWVyZ2UgcHJvcGVydHkgdmFsdWVzIHdpdGggc29tZSBzb3J0IG9mIHVuaXRzICgjMTQwLCAjMTYxKSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImZpeCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiIWltcG9ydGFudCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBpc3N1ZSBmb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRvcC1yaWdodC1ib3R0b20tbGVmdCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwcm9wZXJ0aWVzICgjMTg5KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJmaXggIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRvcC1yaWdodC1ib3R0b20tbGVmdCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwcm9wZXJ0aWVzIG1lcmdlICgjMTM5LCAjMTc1KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigic3VwcG9ydCBmb3IgdW5pY29kZS1yYW5nZSAoIzE0OCkiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImRvbid0IGNyYXNoIG9uIHJ1bGVzZXQgd2l0aCBubyBzZWxlY3RvciAoIzEzNSkiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigidG9sZXJhbnQgdG8gY2xhc3MgbmFtZXMgdGhhdCBzdGFydHMgd2l0aCBkaWdpdCAoIzk5LCAjMTA1KSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiZml4IGJhY2tncm91bmQgY29tcHJlc3NpbmcgKCMxNzApIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0zLTEyLW9jdG9iZXItOC0yMDE1IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0zLTEyLW9jdG9iZXItOC0yMDE1IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4zLjEyIChPY3RvYmVyIDgsIDIwMTUpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDYXNlIGluc2Vuc2l0aXZlIGNoZWNrIGZvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiIWltcG9ydGFudCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoIzE4NykiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRml4IHByb2JsZW1zIHdpdGggdXNpbmcgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNzc28iKV0pLAogICAgICAgICAgX3ZtLl92KCIgYXMgY2xpIGNvbW1hbmQgb24gV2luZG93cyAoIzgzLCAjMTM2LCAjMTQyIGFuZCBvdGhlcnMpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlbW92ZSBieXRlIG9yZGVyIG1hcmtlciAodGhlIFVURi04IEJPTSkgZnJvbSBpbnB1dCIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRG9uJ3Qgc3RyaXAgc3BhY2UgYmV0d2VlbiBmdW5rdGlvbi1mdW5rdGlvbiBhbmQgZnVua3Rpb24tdmhhc2ggKCMxMzQpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkRvbid0IG1lcmdlIFRSQkwgdmFsdWVzIGhhdmluZyBcXDkgKGhhY2sgZm9yIElFOCBpbiBib290c3RyYXApICgjMTU5LCAjMjE0LCAjMjMwLCAjMjMxIGFuZCBvdGhlcnMpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkRvbid0IHN0cmlwIHVuaXRzIG9mZiBkaW1lbnNpb25zIG9mIG5vbi1sZW5ndGggKCMyMjYsICMyMjkgYW5kIG90aGVycykiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMy03LWZlYnJ1YXJ5LTExLTIwMTMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTMtNy1mZWJydWFyeS0xMS0yMDEzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4zLjcgKEZlYnJ1YXJ5IDExLCAyMDEzKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgW19jKCJsaSIsIFtfdm0uX3YoIkdvbnphbGVzIDEuMC43LiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS0zLTYtbm92ZW1iZXItMjYtMjAxMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMy02LW5vdmVtYmVyLTI2LTIwMTIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjMuNiAoTm92ZW1iZXIgMjYsIDIwMTIpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbX2MoImxpIiwgW192bS5fdigiR29uemFsZXMgMS4wLjYuIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTMtNS1vY3RvYmVyLTI4LTIwMTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLTMtNS1vY3RvYmVyLTI4LTIwMTIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjMuNSAoT2N0b2JlciAyOCwgMjAxMikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJHb256YWxlcyAxLjAuNS4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlByb3RlY3RpbmcgY29weXJpZ2h0IG5vdGljZXMgaW4gQ1NTOiBodHRwczovL2dpdGh1Yi5jb20vY3NzL2Nzc28vaXNzdWVzLzkyIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlplcm8gQ1NTIHRocm93cyBhbiBlcnJvcjogaHR0cHM6Ly9naXRodWIuY29tL2Nzcy9jc3NvL2lzc3Vlcy85NiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkRvbid0IG1pbmlmeSB0aGUgc2Vjb25kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIwcyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgaW4gRmlyZWZveCBmb3IgYW5pbWF0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2Nzcy9jc3NvL2lzc3Vlcy8xMDAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSmFwYW4gbWFudWFsIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJCRU0gcmVhZHkgZG9jdW1lbnRhdGlvbiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMy00LW9jdG9iZXItMTAtMjAxMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMy00LW9jdG9iZXItMTAtMjAxMiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuMy40IChPY3RvYmVyIDEwLCAyMDEyKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkBwYWdlIGluc2lkZSBAbWVkaWEgQ2F1c2VzIEVycm9yOiBodHRwczovL2dpdGh1Yi5jb20vY3NzL2Nzc28vaXNzdWVzLzkwIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTMtMy1vY3RvYmVyLTktMjAxMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMy0zLW9jdG9iZXItOS0yMDEyIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4zLjMgKE9jdG9iZXIgOSwgMjAxMikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdDU1NPIDEuMy4yIGNvbXByZXNzZXMgIi50LTEiIGFuZCAiLnQtMDEiIGFzIGlkZW50aWNhbCBjbGFzc2VzOiBodHRwczovL2dpdGh1Yi5jb20vY3NzL2Nzc28vaXNzdWVzLzg4JwogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTMtMi1vY3RvYmVyLTgtMjAxMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMy0yLW9jdG9iZXItOC0yMDEyIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4zLjIgKE9jdG9iZXIgOCwgMjAxMikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJmaWx0ZXIgKyBpbXBvcnRhbnQgYnJlYWtzIENTU08gdjEuMy4xOiBodHRwczovL2dpdGh1Yi5jb20vY3NzL2Nzc28vaXNzdWVzLzg3IgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8xLTMtMS1vY3RvYmVyLTgtMjAxMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzEtMy0xLW9jdG9iZXItOC0yMDEyIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4zLjEgKE9jdG9iZXIgOCwgMjAxMikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICciZmlsdGVyIiBJRSBwcm9wZXJ0eSBicmVha3MgQ1NTTyB2MS4zLjA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jc3MvY3Nzby9pc3N1ZXMvODYnCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzEtMy0wLW9jdG9iZXItNC0yMDEyIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS0zLTAtb2N0b2Jlci00LTIwMTIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAxLjMuMCAoT2N0b2JlciA0LCAyMDEyKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlBlQ29kZSBDU1MgcGFyc2VyIHJlcGxhY2VkIGJ5IEdvbnphbGVzIENTUyBwYXJzZXIiKV0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}