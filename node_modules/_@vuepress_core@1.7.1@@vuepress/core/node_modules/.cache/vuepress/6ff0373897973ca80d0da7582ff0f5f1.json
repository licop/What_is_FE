{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/tar/README.md?vue&type=template&id=78588895&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/tar/README.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "node-tar" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#node-tar" } },
          [_vm._v("#")]
        ),
        _vm._v(" node-tar")
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href: "https://travis-ci.org/npm/node-tar",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("img", {
              attrs: {
                src: "https://travis-ci.org/npm/node-tar.svg?branch=master",
                alt: "Build Status"
              }
            }),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "./benchmarks" } }, [_vm._v("Fast")]),
        _vm._v(" and full-featured Tar for Node.js")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The API is designed to mimic the behavior of "),
        _c("code", [_vm._v("tar(1)")]),
        _vm._v(
          " on unix systems.\nIf you are familiar with how tar works, most of this will hopefully be\nstraightforward for you.  If not, then hopefully this module can teach\nyou useful unix skills that may come in handy someday 😃"
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "background" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#background" } },
          [_vm._v("#")]
        ),
        _vm._v(" Background")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'A "tar file" or "tarball" is an archive of file system entries\n(directories, files, links, etc.)  The name comes from "tape archive".\nIf you run '
        ),
        _c("code", [_vm._v("man tar")]),
        _vm._v(
          " on almost any Unix command line, you'll learn\nquite a bit about what it can do, and its history."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Tar has 5 main top-level commands:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_c("code", [_vm._v("c")]), _vm._v(" Create an archive")]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("r")]),
          _vm._v(" Replace entries within an archive")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("u")]),
          _vm._v(
            " Update entries within an archive (ie, replace if they're newer)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("t")]),
          _vm._v(" List out the contents of an archive")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("x")]),
          _vm._v(" Extract an archive to disk")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The other flags and options modify how this top level function works."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "high-level-api" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#high-level-api" } },
          [_vm._v("#")]
        ),
        _vm._v(" High-Level API")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "These 5 functions are the high-level API.  All of them have a\nsingle-character name (for unix nerds familiar with "
        ),
        _c("code", [_vm._v("tar(1)")]),
        _vm._v(") as well\nas a long name (for everyone else).")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "All the high-level functions take the following arguments, all three\nof which are optional and may be omitted."
        )
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("code", [_vm._v("options")]),
          _vm._v(" - An optional object specifying various options")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("paths")]),
          _vm._v(" - An array of paths to add or extract")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("callback")]),
          _vm._v(
            " - Called when the command is completed, if async.  (If\nsync or no file specified, providing a callback throws a\n"
          ),
          _c("code", [_vm._v("TypeError")]),
          _vm._v(".)")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If the command is sync (ie, if "),
        _c("code", [_vm._v("options.sync=true")]),
        _vm._v(
          "), then the\ncallback is not allowed, since the action will be completed immediately."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If a "),
        _c("code", [_vm._v("file")]),
        _vm._v(" argument is specified, and the command is async, then a\n"),
        _c("code", [_vm._v("Promise")]),
        _vm._v(
          " is returned.  In this case, if async, a callback may be\nprovided which is called when the command is completed."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If a "),
        _c("code", [_vm._v("file")]),
        _vm._v(" option is not specified, then a stream is returned.  For\n"),
        _c("code", [_vm._v("create")]),
        _vm._v(", this is a readable stream of the generated archive.  For\n"),
        _c("code", [_vm._v("list")]),
        _vm._v(" and "),
        _c("code", [_vm._v("extract")]),
        _vm._v(
          " this is a writable stream that an archive should\nbe written into.  If a file is not specified, then a callback is not\nallowed, because you're already getting a stream to work with."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("replace")]),
        _vm._v(" and "),
        _c("code", [_vm._v("update")]),
        _vm._v(" only work on existing archives, and so require\na "),
        _c("code", [_vm._v("file")]),
        _vm._v(" argument.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Sync commands without a file argument return a stream that acts on its\ninput immediately in the same tick.  For readable streams, this means\nthat all of the data is immediately available by calling\n"
        ),
        _c("code", [_vm._v("stream.read()")]),
        _vm._v(
          ".  For writable streams, it will be acted upon as soon\nas it is provided, but this can be at any time."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "warnings-and-errors" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#warnings-and-errors" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Warnings and Errors")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Tar emits warnings and errors for recoverable and unrecoverable situations,\nrespectively.  In many cases, a warning only affects a single entry in an\narchive, or is simply informing you that it's modifying an entry to comply\nwith the settings provided."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Unrecoverable warnings will always raise an error (ie, emit "),
        _c("code", [_vm._v("'error'")]),
        _vm._v(
          " on\nstreaming actions, throw for non-streaming sync actions, reject the\nreturned Promise for non-streaming async operations, or call a provided\ncallback with an "
        ),
        _c("code", [_vm._v("Error")]),
        _vm._v(
          " as the first argument).  Recoverable errors will\nraise an error only if "
        ),
        _c("code", [_vm._v("strict: true")]),
        _vm._v(" is set in the options.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Respond to (recoverable) warnings by listening to the "),
        _c("code", [_vm._v("warn")]),
        _vm._v(" event.\nHandlers receive 3 arguments:")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("code")]),
          _vm._v(
            " String.  One of the error codes below.  This may not match\n"
          ),
          _c("code", [_vm._v("data.code")]),
          _vm._v(", which preserves the original error code from fs and zlib.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("message")]),
          _vm._v(" String.  More details about the error.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("data")]),
          _vm._v(" Metadata about the error.  An "),
          _c("code", [_vm._v("Error")]),
          _vm._v(
            " object for errors raised by\nfs and zlib.  All fields are attached to errors raisd by tar.  Typically\ncontains the following fields, as relevant:\n"
          ),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("tarCode")]),
              _vm._v(" The tar error code.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("code")]),
              _vm._v(
                " Either the tar error code, or the error code set by the\nunderlying system."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("file")]),
              _vm._v(" The archive file being read or written.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("cwd")]),
              _vm._v(
                " Working directory for creation and extraction operations."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("entry")]),
              _vm._v(" The entry object (if it could be created) for "),
              _c("code", [_vm._v("TAR_ENTRY_INFO")]),
              _vm._v(",\n"),
              _c("code", [_vm._v("TAR_ENTRY_INVALID")]),
              _vm._v(", and "),
              _c("code", [_vm._v("TAR_ENTRY_ERROR")]),
              _vm._v(" warnings.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("header")]),
              _vm._v(
                " The header object (if it could be created, and the entry could\nnot be created) for "
              ),
              _c("code", [_vm._v("TAR_ENTRY_INFO")]),
              _vm._v(" and "),
              _c("code", [_vm._v("TAR_ENTRY_INVALID")]),
              _vm._v(" warnings.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("recoverable")]),
              _vm._v(" Boolean.  If "),
              _c("code", [_vm._v("false")]),
              _vm._v(", then the warning will emit an\n"),
              _c("code", [_vm._v("error")]),
              _vm._v(", even in non-strict mode.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "error-codes" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#error-codes" } },
          [_vm._v("#")]
        ),
        _vm._v(" Error Codes")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _c("code", [_vm._v("TAR_ENTRY_INFO")]),
            _vm._v(
              "  An informative error indicating that an entry is being\nmodified, but otherwise processed normally.  For example, removing "
            ),
            _c("code", [_vm._v("/")]),
            _vm._v(" or\n"),
            _c("code", [_vm._v("C:\\")]),
            _vm._v(" from absolute paths if "),
            _c("code", [_vm._v("preservePaths")]),
            _vm._v(" is not set.")
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("code", [_vm._v("TAR_ENTRY_INVALID")]),
            _vm._v(
              " An indication that a given entry is not a valid tar\narchive entry, and will be skipped.  This occurs when:"
            )
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [_vm._v("a checksum fails,")]),
            _vm._v(" "),
            _c("li", [
              _vm._v("a "),
              _c("code", [_vm._v("linkpath")]),
              _vm._v(" is missing for a link type, or")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("a "),
              _c("code", [_vm._v("linkpath")]),
              _vm._v(" is provided for a non-link type.")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("If every entry in a parsed archive raises an "),
            _c("code", [_vm._v("TAR_ENTRY_INVALID")]),
            _vm._v(
              " error,\nthen the archive is presumed to be unrecoverably broken, and\n"
            ),
            _c("code", [_vm._v("TAR_BAD_ARCHIVE")]),
            _vm._v(" will be raised.")
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("code", [_vm._v("TAR_ENTRY_ERROR")]),
            _vm._v(
              " The entry appears to be a valid tar archive entry, but\nencountered an error which prevented it from being unpacked.  This occurs\nwhen:"
            )
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _vm._v("an unrecoverable fs error happens during unpacking,")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("an entry has "),
              _c("code", [_vm._v("..")]),
              _vm._v(" in the path and "),
              _c("code", [_vm._v("preservePaths")]),
              _vm._v(" is not set, or")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("an entry is extracting through a symbolic link, when "),
              _c("code", [_vm._v("preservePaths")]),
              _vm._v(" is\nnot set.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("code", [_vm._v("TAR_ENTRY_UNSUPPORTED")]),
            _vm._v(
              "  An indication that a given entry is\na valid archive entry, but of a type that is unsupported, and so will be\nskipped in archive creation or extracting."
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("code", [_vm._v("TAR_ABORT")]),
            _vm._v(
              "  When parsing gzipped-encoded archives, the parser will\nabort the parse process raise a warning for any zlib errors encountered.\nAborts are considered unrecoverable for both parsing and unpacking."
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("code", [_vm._v("TAR_BAD_ARCHIVE")]),
            _vm._v(
              "  The archive file is totally hosed.  This can happen for\na number of reasons, and always occurs at the end of a parse or extract:"
            )
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _vm._v(
                "An entry body was truncated before seeing the full number of bytes."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "The archive contained only invalid entries, indicating that it is\nlikely not an archive, or at least, not an archive this library can\nparse."
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _c("code", [_vm._v("TAR_BAD_ARCHIVE")]),
            _vm._v(
              " is considered informative for parse operations, but\nunrecoverable for extraction.  Note that, if encountered at the end of an\nextraction, tar WILL still have extracted as much it could from the\narchive, so there may be some garbage files to clean up."
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Errors that occur deeper in the system (ie, either the filesystem or zlib)\nwill have their error codes left intact, and a "
        ),
        _c("code", [_vm._v("tarCode")]),
        _vm._v(
          " matching one of\nthe above will be added to the warning metadata or the raised error object."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Errors generated by tar will have one of the above codes set as the\n"
        ),
        _c("code", [_vm._v("error.code")]),
        _vm._v(
          " field as well, but since errors originating in zlib or fs will\nhave their original codes, it's better to read "
        ),
        _c("code", [_vm._v("error.tarCode")]),
        _vm._v(" if you wish\nto see how tar is handling the issue.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "examples" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#examples" } },
          [_vm._v("#")]
        ),
        _vm._v(" Examples")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The API mimics the "),
        _c("code", [_vm._v("tar(1)")]),
        _vm._v(
          " command line functionality, with aliases\nfor more human-readable option and function names.  The goal is that\nif you know how to use "
        ),
        _c("code", [_vm._v("tar(1)")]),
        _vm._v(" in Unix, then you know how to use\n"),
        _c("code", [_vm._v("require('tar')")]),
        _vm._v(" in JavaScript.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("To replicate "),
        _c("code", [_vm._v("tar czf my-tarball.tgz files and folders")]),
        _vm._v(", you'd do:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("tar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("c")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    gzip"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("true")
            ]),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v("gzip options"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(">")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n    file"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'my-tarball.tgz'")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'some'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'files'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'and'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'folders'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("then")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("_")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=>")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" tarball has been created "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("To replicate "),
        _c("code", [_vm._v("tar cz files and folders > my-tarball.tgz")]),
        _vm._v(", you'd do:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("tar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("c")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// or tar.create")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    gzip"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _c("span", { pre: true, attrs: { class: "token boolean" } }, [
              _vm._v("true")
            ]),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v("gzip options"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(">")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'some'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'files'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'and'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'folders'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("pipe")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("fs"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("createWriteStream")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'my-tarball.tgz'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("To replicate "),
        _c("code", [_vm._v("tar xf my-tarball.tgz")]),
        _vm._v(" you'd do:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("tar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("x")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("  "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// or tar.extract(")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    file"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'my-tarball.tgz'")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("then")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("_")
            ]),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=>")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" tarball has been dumped "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" cwd "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("To replicate "),
        _c("code", [
          _vm._v("cat my-tarball.tgz | tar x -C some-dir --strip=1")
        ]),
        _vm._v(":")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("fs"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("createReadStream")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'my-tarball.tgz'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("pipe")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("\n  tar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("x")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    strip"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token constant" } }, [
              _vm._v("C")
            ]),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'some-dir'")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// alias for cwd:'some-dir', also ok")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("To replicate "),
        _c("code", [_vm._v("tar tf my-tarball.tgz")]),
        _vm._v(", do this:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("tar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("t")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n  file"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'my-tarball.tgz'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n  "),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("onentry")]
            ),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("entry")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=>")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("do")
            ]),
            _vm._v(" whatever "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("with")
            ]),
            _vm._v(" it "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("To replicate "),
        _c("code", [_vm._v("cat my-tarball.tgz | tar t")]),
        _vm._v(" do:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("fs"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("createReadStream")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'my-tarball.tgz'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("pipe")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("tar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("t")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n  "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("on")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'entry'")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("entry")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=>")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("do")
            ]),
            _vm._v(" whatever "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("with")
            ]),
            _vm._v(" it "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("To do anything synchronous, add "),
        _c("code", [_vm._v("sync: true")]),
        _vm._v(
          " to the options.  Note\nthat sync functions don't take a callback and don't return a promise.\nWhen the function returns, it's already done.  Sync methods without a\nfile argument return a sync stream, which flushes immediately.  But,\nof course, it still won't be done until you "
        ),
        _c("code", [_vm._v(".end()")]),
        _vm._v(" it.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("To filter entries, add "),
        _c("code", [_vm._v("filter: <function>")]),
        _vm._v(" to the options.\nTar-creating methods call the filter with "),
        _c("code", [_vm._v("filter(path, stat)")]),
        _vm._v(
          ".\nTar-reading methods (including extraction) call the filter with\n"
        ),
        _c("code", [_vm._v("filter(path, entry)")]),
        _vm._v(".  The filter is called in the "),
        _c("code", [_vm._v("this")]),
        _vm._v("-context of\nthe "),
        _c("code", [_vm._v("Pack")]),
        _vm._v(" or "),
        _c("code", [_vm._v("Unpack")]),
        _vm._v(" stream object.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The arguments list to "),
        _c("code", [_vm._v("tar t")]),
        _vm._v(" and "),
        _c("code", [_vm._v("tar x")]),
        _vm._v(
          " specify a list of filenames\nto extract or list, so they're equivalent to a filter that tests if\nthe file is in the list."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("For those who "),
        _c("em", [_vm._v("aren't")]),
        _vm._v(" fans of tar's single-character command names:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "tar.c === tar.create\ntar.r === tar.replace (appends to archive, file is required)\ntar.u === tar.update (appends if newer, file is required)\ntar.x === tar.extract\ntar.t === tar.list\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Keep reading for all the command descriptions and options, as well as\nthe low-level API that they are built on."
        )
      ]),
      _vm._v(" "),
      _c(
        "h3",
        { attrs: { id: "tar-c-options-filelist-callback-alias-tar-create" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#tar-c-options-filelist-callback-alias-tar-create"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" tar.c(options, fileList, callback) [alias: tar.create]")
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Create a tarball archive.")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("fileList")]),
        _vm._v(
          " is an array of paths to add to the tarball.  Adding a\ndirectory also adds its children recursively."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("An entry in "),
        _c("code", [_vm._v("fileList")]),
        _vm._v(" that starts with an "),
        _c("code", [_vm._v("@")]),
        _vm._v(
          " symbol is a tar archive\nwhose entries will be added.  To add a file that starts with "
        ),
        _c("code", [_vm._v("@")]),
        _vm._v(",\nprepend it with "),
        _c("code", [_vm._v("./")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("file")]),
          _vm._v(
            " Write the tarball archive to the specified filename.  If this\nis specified, then the callback will be fired when the file has been\nwritten, and a promise will be returned that resolves when the file\nis written.  If a filename is not specified, then a Readable Stream\nwill be returned which will emit the file data. [Alias: "
          ),
          _c("code", [_vm._v("f")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("sync")]),
          _vm._v(
            " Act synchronously.  If this is set, then any provided file\nwill be fully written after the call to "
          ),
          _c("code", [_vm._v("tar.c")]),
          _vm._v(
            ".  If this is set,\nand a file is not provided, then the resulting stream will already\nhave the data ready to "
          ),
          _c("code", [_vm._v("read")]),
          _vm._v(" or "),
          _c("code", [_vm._v("emit('data')")]),
          _vm._v(" as soon as you\nrequest it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " The current working directory for creating the archive.\nDefaults to "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(".  [Alias: "),
          _c("code", [_vm._v("C")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("prefix")]),
          _vm._v(" A path portion to prefix onto the entries in the archive.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("gzip")]),
          _vm._v(
            " Set to any truthy value to create a gzipped archive, or an\nobject with settings for "
          ),
          _c("code", [_vm._v("zlib.Gzip()")]),
          _vm._v(" [Alias: "),
          _c("code", [_vm._v("z")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("filter")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(path, stat)")]),
          _vm._v(" for each\nentry being added.  Return "),
          _c("code", [_vm._v("true")]),
          _vm._v(" to add the entry to the archive,\nor "),
          _c("code", [_vm._v("false")]),
          _vm._v(" to omit it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("portable")]),
          _vm._v(" Omit metadata that is system-specific: "),
          _c("code", [_vm._v("ctime")]),
          _vm._v(", "),
          _c("code", [_vm._v("atime")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(", "),
          _c("code", [_vm._v("gid")]),
          _vm._v(", "),
          _c("code", [_vm._v("uname")]),
          _vm._v(", "),
          _c("code", [_vm._v("gname")]),
          _vm._v(", "),
          _c("code", [_vm._v("dev")]),
          _vm._v(", "),
          _c("code", [_vm._v("ino")]),
          _vm._v(", and "),
          _c("code", [_vm._v("nlink")]),
          _vm._v(".  Note\nthat "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " is still included, because this is necessary for other\ntime-based operations.  Additionally, "
          ),
          _c("code", [_vm._v("mode")]),
          _vm._v(
            ' is set to a "reasonable\ndefault" for most unix systems, based on a '
          ),
          _c("code", [_vm._v("umask")]),
          _vm._v(" value of "),
          _c("code", [_vm._v("0o22")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped\nfrom absolute paths. [Alias: "),
          _c("code", [_vm._v("P")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("mode")]),
          _vm._v(" The mode to set on the created file archive")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noDirRecurse")]),
          _vm._v(
            " Do not recursively archive the contents of\ndirectories. [Alias: "
          ),
          _c("code", [_vm._v("n")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("follow")]),
          _vm._v(
            " Set to true to pack the targets of symbolic links.  Without\nthis option, symbolic links are archived as such. [Alias: "
          ),
          _c("code", [_vm._v("L")]),
          _vm._v(", "),
          _c("code", [_vm._v("h")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noPax")]),
          _vm._v(
            " Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " values for entries.\nNote that this prevents using other mtime-based features like\n"
          ),
          _c("code", [_vm._v("tar.update")]),
          _vm._v(" or the "),
          _c("code", [_vm._v("keepNewer")]),
          _vm._v(" option with the resulting tar archive.\n[Alias: "),
          _c("code", [_vm._v("m")]),
          _vm._v(", "),
          _c("code", [_vm._v("no-mtime")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("mtime")]),
          _vm._v(" Set to a "),
          _c("code", [_vm._v("Date")]),
          _vm._v(" object to force a specific "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(" for\neverything added to the archive.  Overridden by "),
          _c("code", [_vm._v("noMtime")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The following options are mostly internal, but can be modified in some\nadvanced use cases, such as re-using caches between runs."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("linkCache")]),
          _vm._v(
            " A Map object containing the device and inode value for\nany file whose nlink is > 1, to identify hard links."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("statCache")]),
          _vm._v(" A Map object that caches calls "),
          _c("code", [_vm._v("lstat")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("readdirCache")]),
          _vm._v(" A Map object that caches calls to "),
          _c("code", [_vm._v("readdir")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("jobs")]),
          _vm._v(
            " A number specifying how many concurrent jobs to run.\nDefaults to 4."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxReadSize")]),
          _vm._v(" The maximum buffer size for "),
          _c("code", [_vm._v("fs.read()")]),
          _vm._v(" operations.\nDefaults to 16 MB.")
        ])
      ]),
      _vm._v(" "),
      _c(
        "h3",
        { attrs: { id: "tar-x-options-filelist-callback-alias-tar-extract" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#tar-x-options-filelist-callback-alias-tar-extract"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" tar.x(options, fileList, callback) [alias: tar.extract]")
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Extract a tarball archive.")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("fileList")]),
        _vm._v(
          " is an array of paths to extract from the tarball.  If\nno paths are provided, then all the entries are extracted."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If the archive is gzipped, then tar will detect this and unzip it."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Note that all directories that are created will be forced to be\nwritable, readable, and listable by their owner, to avoid cases where\na directory prevents extraction of child entries by virtue of its\nmode."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Most extraction errors will cause a "),
        _c("code", [_vm._v("warn")]),
        _vm._v(" event to be emitted.  If\nthe "),
        _c("code", [_vm._v("cwd")]),
        _vm._v(
          " is missing, or not a directory, then the extraction will\nfail completely."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " Extract files relative to the specified directory.  Defaults\nto "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(
            ".  If provided, this must exist and must be a\ndirectory. [Alias: "
          ),
          _c("code", [_vm._v("C")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("file")]),
          _vm._v(
            " The archive file to extract.  If not specified, then a\nWritable stream is returned where the archive data should be\nwritten. [Alias: "
          ),
          _c("code", [_vm._v("f")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("sync")]),
          _vm._v(" Create files and directories synchronously.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("filter")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(path, entry)")]),
          _vm._v(" for each\nentry being unpacked.  Return "),
          _c("code", [_vm._v("true")]),
          _vm._v(" to unpack the entry from the\narchive, or "),
          _c("code", [_vm._v("false")]),
          _vm._v(" to skip it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("newer")]),
          _vm._v(
            " Set to true to keep the existing file on disk if it's newer\nthan the file in the archive. [Alias: "
          ),
          _c("code", [_vm._v("keep-newer")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("keep-newer-files")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("keep")]),
          _vm._v(
            " Do not overwrite existing files.  In particular, if a file\nappears more than once in an archive, later copies will not\noverwrite earlier copies. [Alias: "
          ),
          _c("code", [_vm._v("k")]),
          _vm._v(", "),
          _c("code", [_vm._v("keep-existing")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths, paths containing "),
          _c("code", [_vm._v("..")]),
          _vm._v(", and\nextracting through symbolic links.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped from\nabsolute paths, "),
          _c("code", [_vm._v("..")]),
          _vm._v(
            " paths are not extracted, and any file whose\nlocation would be modified by a symbolic link is not extracted.\n[Alias: "
          ),
          _c("code", [_vm._v("P")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("unlink")]),
          _vm._v(
            " Unlink files before creating them.  Without this option,\ntar overwrites existing files, which preserves existing hardlinks.\nWith this option, existing hardlinks will be broken, as will any\nsymlink that would affect the location of an extracted file. [Alias:\n"
          ),
          _c("code", [_vm._v("U")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strip")]),
          _vm._v(
            " Remove the specified number of leading path elements.\nPathnames with fewer elements will be silently skipped.  Note that\nthe pathname is edited after applying the filter, but before\nsecurity checks. [Alias: "
          ),
          _c("code", [_vm._v("strip-components")]),
          _vm._v(", "),
          _c("code", [_vm._v("stripComponents")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preserveOwner")]),
          _vm._v(" If true, tar will set the "),
          _c("code", [_vm._v("uid")]),
          _vm._v(" and "),
          _c("code", [_vm._v("gid")]),
          _vm._v(" of\nextracted entries to the "),
          _c("code", [_vm._v("uid")]),
          _vm._v(" and "),
          _c("code", [_vm._v("gid")]),
          _vm._v(
            " fields in the archive.\nThis defaults to true when run as root, and false otherwise.  If\nfalse, then files and directories will be set with the owner and\ngroup of the user running the process.  This is similar to "
          ),
          _c("code", [_vm._v("-p")]),
          _vm._v(" in\n"),
          _c("code", [_vm._v("tar(1)")]),
          _vm._v(
            ", but ACLs and other system-specific data is never unpacked\nin this implementation, and modes are set by default already.\n[Alias: "
          ),
          _c("code", [_vm._v("p")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("uid")]),
          _vm._v(
            " Set to a number to force ownership of all extracted files and\nfolders, and all implicitly created directories, to be owned by the\nspecified user id, regardless of the "
          ),
          _c("code", [_vm._v("uid")]),
          _vm._v(" field in the archive.\nCannot be used along with "),
          _c("code", [_vm._v("preserveOwner")]),
          _vm._v(".  Requires also setting a\n"),
          _c("code", [_vm._v("gid")]),
          _vm._v(" option.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("gid")]),
          _vm._v(
            " Set to a number to force ownership of all extracted files and\nfolders, and all implicitly created directories, to be owned by the\nspecified group id, regardless of the "
          ),
          _c("code", [_vm._v("gid")]),
          _vm._v(" field in the archive.\nCannot be used along with "),
          _c("code", [_vm._v("preserveOwner")]),
          _vm._v(".  Requires also setting a\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(" option.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(" value for extracted\nentries. [Alias: "),
          _c("code", [_vm._v("m")]),
          _vm._v(", "),
          _c("code", [_vm._v("no-mtime")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("transform")]),
          _vm._v(" Provide a function that takes an "),
          _c("code", [_vm._v("entry")]),
          _vm._v(
            " object, and\nreturns a stream, or any falsey value.  If a stream is provided,\nthen that stream's data will be written instead of the contents of\nthe archive entry.  If a falsey value is provided, then the entry is\nwritten to disk as normal.  (To exclude items from extraction, use\nthe "
          ),
          _c("code", [_vm._v("filter")]),
          _vm._v(" option described above.)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onentry")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(entry)")]),
          _vm._v(" for each entry\nthat passes the filter.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The following options are mostly internal, but can be modified in some\nadvanced use cases, such as re-using caches between runs."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("maxReadSize")]),
          _vm._v(" The maximum buffer size for "),
          _c("code", [_vm._v("fs.read()")]),
          _vm._v(" operations.\nDefaults to 16 MB.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("umask")]),
          _vm._v(" Filter the modes of entries like "),
          _c("code", [_vm._v("process.umask()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("dmode")]),
          _vm._v(" Default mode for directories")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("fmode")]),
          _vm._v(" Default mode for files")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("dirCache")]),
          _vm._v(" A Map object of which directories exist.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxMetaEntrySize")]),
          _vm._v(
            " The maximum size of meta entries that is\nsupported.  Defaults to 1 MB."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Note that using an asynchronous stream type with the "),
        _c("code", [_vm._v("transform")]),
        _vm._v("\noption will cause undefined behavior in sync extractions.\n"),
        _c(
          "a",
          {
            attrs: {
              href: "http://npm.im/minipass",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("MiniPass"), _c("OutboundLink")],
          1
        ),
        _vm._v("-based streams are designed for this\nuse case.")
      ]),
      _vm._v(" "),
      _c(
        "h3",
        { attrs: { id: "tar-t-options-filelist-callback-alias-tar-list" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#tar-t-options-filelist-callback-alias-tar-list" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" tar.t(options, fileList, callback) [alias: tar.list]")
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("List the contents of a tarball archive.")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("fileList")]),
        _vm._v(
          " is an array of paths to list from the tarball.  If\nno paths are provided, then all the entries are listed."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If the archive is gzipped, then tar will detect this and unzip it."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns an event emitter that emits "),
        _c("code", [_vm._v("entry")]),
        _vm._v(" events with\n"),
        _c("code", [_vm._v("tar.ReadEntry")]),
        _vm._v(" objects.  However, they don't emit "),
        _c("code", [_vm._v("'data'")]),
        _vm._v(" or "),
        _c("code", [_vm._v("'end'")]),
        _vm._v(
          "\nevents.  (If you want to get actual readable entries, use the\n"
        ),
        _c("code", [_vm._v("tar.Parse")]),
        _vm._v(" class instead.)")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " Extract files relative to the specified directory.  Defaults\nto "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(". [Alias: "),
          _c("code", [_vm._v("C")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("file")]),
          _vm._v(
            " The archive file to list.  If not specified, then a\nWritable stream is returned where the archive data should be\nwritten. [Alias: "
          ),
          _c("code", [_vm._v("f")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("sync")]),
          _vm._v(
            " Read the specified file synchronously.  (This has no effect\nwhen a file option isn't specified, because entries are emitted as\nfast as they are parsed from the stream anyway.)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("filter")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(path, entry)")]),
          _vm._v(" for each\nentry being listed.  Return "),
          _c("code", [_vm._v("true")]),
          _vm._v(" to emit the entry from the\narchive, or "),
          _c("code", [_vm._v("false")]),
          _vm._v(" to skip it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onentry")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(entry)")]),
          _vm._v(
            " for each entry\nthat passes the filter.  This is important for when both "
          ),
          _c("code", [_vm._v("file")]),
          _vm._v(" and\n"),
          _c("code", [_vm._v("sync")]),
          _vm._v(" are set, because it will be called synchronously.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxReadSize")]),
          _vm._v(" The maximum buffer size for "),
          _c("code", [_vm._v("fs.read()")]),
          _vm._v(" operations.\nDefaults to 16 MB.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noResume")]),
          _vm._v(" By default, "),
          _c("code", [_vm._v("entry")]),
          _vm._v(" streams are resumed immediately after\nthe call to "),
          _c("code", [_vm._v("onentry")]),
          _vm._v(".  Set "),
          _c("code", [_vm._v("noResume: true")]),
          _vm._v(
            " to suppress this\nbehavior.  Note that by opting into this, the stream will never\ncomplete until the entry data is consumed."
          )
        ])
      ]),
      _vm._v(" "),
      _c(
        "h3",
        { attrs: { id: "tar-u-options-filelist-callback-alias-tar-update" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#tar-u-options-filelist-callback-alias-tar-update"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" tar.u(options, fileList, callback) [alias: tar.update]")
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Add files to an archive if they are newer than the entry already in\nthe tarball archive."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("fileList")]),
        _vm._v(
          " is an array of paths to add to the tarball.  Adding a\ndirectory also adds its children recursively."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("An entry in "),
        _c("code", [_vm._v("fileList")]),
        _vm._v(" that starts with an "),
        _c("code", [_vm._v("@")]),
        _vm._v(
          " symbol is a tar archive\nwhose entries will be added.  To add a file that starts with "
        ),
        _c("code", [_vm._v("@")]),
        _vm._v(",\nprepend it with "),
        _c("code", [_vm._v("./")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("file")]),
          _vm._v(
            " Required. Write the tarball archive to the specified\nfilename. [Alias: "
          ),
          _c("code", [_vm._v("f")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("sync")]),
          _vm._v(
            " Act synchronously.  If this is set, then any provided file\nwill be fully written after the call to "
          ),
          _c("code", [_vm._v("tar.c")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " The current working directory for adding entries to the\narchive.  Defaults to "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(".  [Alias: "),
          _c("code", [_vm._v("C")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("prefix")]),
          _vm._v(" A path portion to prefix onto the entries in the archive.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("gzip")]),
          _vm._v(
            " Set to any truthy value to create a gzipped archive, or an\nobject with settings for "
          ),
          _c("code", [_vm._v("zlib.Gzip()")]),
          _vm._v(" [Alias: "),
          _c("code", [_vm._v("z")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("filter")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(path, stat)")]),
          _vm._v(" for each\nentry being added.  Return "),
          _c("code", [_vm._v("true")]),
          _vm._v(" to add the entry to the archive,\nor "),
          _c("code", [_vm._v("false")]),
          _vm._v(" to omit it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("portable")]),
          _vm._v(" Omit metadata that is system-specific: "),
          _c("code", [_vm._v("ctime")]),
          _vm._v(", "),
          _c("code", [_vm._v("atime")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(", "),
          _c("code", [_vm._v("gid")]),
          _vm._v(", "),
          _c("code", [_vm._v("uname")]),
          _vm._v(", "),
          _c("code", [_vm._v("gname")]),
          _vm._v(", "),
          _c("code", [_vm._v("dev")]),
          _vm._v(", "),
          _c("code", [_vm._v("ino")]),
          _vm._v(", and "),
          _c("code", [_vm._v("nlink")]),
          _vm._v(".  Note\nthat "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " is still included, because this is necessary for other\ntime-based operations.  Additionally, "
          ),
          _c("code", [_vm._v("mode")]),
          _vm._v(
            ' is set to a "reasonable\ndefault" for most unix systems, based on a '
          ),
          _c("code", [_vm._v("umask")]),
          _vm._v(" value of "),
          _c("code", [_vm._v("0o22")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped\nfrom absolute paths. [Alias: "),
          _c("code", [_vm._v("P")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxReadSize")]),
          _vm._v(" The maximum buffer size for "),
          _c("code", [_vm._v("fs.read()")]),
          _vm._v(" operations.\nDefaults to 16 MB.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noDirRecurse")]),
          _vm._v(
            " Do not recursively archive the contents of\ndirectories. [Alias: "
          ),
          _c("code", [_vm._v("n")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("follow")]),
          _vm._v(
            " Set to true to pack the targets of symbolic links.  Without\nthis option, symbolic links are archived as such. [Alias: "
          ),
          _c("code", [_vm._v("L")]),
          _vm._v(", "),
          _c("code", [_vm._v("h")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noPax")]),
          _vm._v(
            " Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " values for entries.\nNote that this prevents using other mtime-based features like\n"
          ),
          _c("code", [_vm._v("tar.update")]),
          _vm._v(" or the "),
          _c("code", [_vm._v("keepNewer")]),
          _vm._v(" option with the resulting tar archive.\n[Alias: "),
          _c("code", [_vm._v("m")]),
          _vm._v(", "),
          _c("code", [_vm._v("no-mtime")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("mtime")]),
          _vm._v(" Set to a "),
          _c("code", [_vm._v("Date")]),
          _vm._v(" object to force a specific "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(" for\neverything added to the archive.  Overridden by "),
          _c("code", [_vm._v("noMtime")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c(
        "h3",
        { attrs: { id: "tar-r-options-filelist-callback-alias-tar-replace" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#tar-r-options-filelist-callback-alias-tar-replace"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" tar.r(options, fileList, callback) [alias: tar.replace]")
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Add files to an existing archive.  Because later entries override\nearlier entries, this effectively replaces any existing entries."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("fileList")]),
        _vm._v(
          " is an array of paths to add to the tarball.  Adding a\ndirectory also adds its children recursively."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("An entry in "),
        _c("code", [_vm._v("fileList")]),
        _vm._v(" that starts with an "),
        _c("code", [_vm._v("@")]),
        _vm._v(
          " symbol is a tar archive\nwhose entries will be added.  To add a file that starts with "
        ),
        _c("code", [_vm._v("@")]),
        _vm._v(",\nprepend it with "),
        _c("code", [_vm._v("./")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("file")]),
          _vm._v(
            " Required. Write the tarball archive to the specified\nfilename. [Alias: "
          ),
          _c("code", [_vm._v("f")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("sync")]),
          _vm._v(
            " Act synchronously.  If this is set, then any provided file\nwill be fully written after the call to "
          ),
          _c("code", [_vm._v("tar.c")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " The current working directory for adding entries to the\narchive.  Defaults to "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(".  [Alias: "),
          _c("code", [_vm._v("C")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("prefix")]),
          _vm._v(" A path portion to prefix onto the entries in the archive.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("gzip")]),
          _vm._v(
            " Set to any truthy value to create a gzipped archive, or an\nobject with settings for "
          ),
          _c("code", [_vm._v("zlib.Gzip()")]),
          _vm._v(" [Alias: "),
          _c("code", [_vm._v("z")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("filter")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(path, stat)")]),
          _vm._v(" for each\nentry being added.  Return "),
          _c("code", [_vm._v("true")]),
          _vm._v(" to add the entry to the archive,\nor "),
          _c("code", [_vm._v("false")]),
          _vm._v(" to omit it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("portable")]),
          _vm._v(" Omit metadata that is system-specific: "),
          _c("code", [_vm._v("ctime")]),
          _vm._v(", "),
          _c("code", [_vm._v("atime")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(", "),
          _c("code", [_vm._v("gid")]),
          _vm._v(", "),
          _c("code", [_vm._v("uname")]),
          _vm._v(", "),
          _c("code", [_vm._v("gname")]),
          _vm._v(", "),
          _c("code", [_vm._v("dev")]),
          _vm._v(", "),
          _c("code", [_vm._v("ino")]),
          _vm._v(", and "),
          _c("code", [_vm._v("nlink")]),
          _vm._v(".  Note\nthat "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " is still included, because this is necessary for other\ntime-based operations.  Additionally, "
          ),
          _c("code", [_vm._v("mode")]),
          _vm._v(
            ' is set to a "reasonable\ndefault" for most unix systems, based on a '
          ),
          _c("code", [_vm._v("umask")]),
          _vm._v(" value of "),
          _c("code", [_vm._v("0o22")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped\nfrom absolute paths. [Alias: "),
          _c("code", [_vm._v("P")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxReadSize")]),
          _vm._v(" The maximum buffer size for "),
          _c("code", [_vm._v("fs.read()")]),
          _vm._v(" operations.\nDefaults to 16 MB.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noDirRecurse")]),
          _vm._v(
            " Do not recursively archive the contents of\ndirectories. [Alias: "
          ),
          _c("code", [_vm._v("n")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("follow")]),
          _vm._v(
            " Set to true to pack the targets of symbolic links.  Without\nthis option, symbolic links are archived as such. [Alias: "
          ),
          _c("code", [_vm._v("L")]),
          _vm._v(", "),
          _c("code", [_vm._v("h")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noPax")]),
          _vm._v(
            " Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " values for entries.\nNote that this prevents using other mtime-based features like\n"
          ),
          _c("code", [_vm._v("tar.update")]),
          _vm._v(" or the "),
          _c("code", [_vm._v("keepNewer")]),
          _vm._v(" option with the resulting tar archive.\n[Alias: "),
          _c("code", [_vm._v("m")]),
          _vm._v(", "),
          _c("code", [_vm._v("no-mtime")]),
          _vm._v("]")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("mtime")]),
          _vm._v(" Set to a "),
          _c("code", [_vm._v("Date")]),
          _vm._v(" object to force a specific "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(" for\neverything added to the archive.  Overridden by "),
          _c("code", [_vm._v("noMtime")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "low-level-api" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#low-level-api" } },
          [_vm._v("#")]
        ),
        _vm._v(" Low-Level API")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-pack" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#class-tar-pack" } },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.Pack")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("A readable tar stream.")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Has all the standard readable stream interface stuff.  "),
        _c("code", [_vm._v("'data'")]),
        _vm._v(" and\n"),
        _c("code", [_vm._v("'end'")]),
        _vm._v(" events, "),
        _c("code", [_vm._v("read()")]),
        _vm._v(" method, "),
        _c("code", [_vm._v("pause()")]),
        _vm._v(" and "),
        _c("code", [_vm._v("resume()")]),
        _vm._v(", etc.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "constructor-options" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#constructor-options" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" constructor(options)")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " The current working directory for creating the archive.\nDefaults to "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("prefix")]),
          _vm._v(" A path portion to prefix onto the entries in the archive.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("gzip")]),
          _vm._v(
            " Set to any truthy value to create a gzipped archive, or an\nobject with settings for "
          ),
          _c("code", [_vm._v("zlib.Gzip()")])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("filter")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(path, stat)")]),
          _vm._v(" for each\nentry being added.  Return "),
          _c("code", [_vm._v("true")]),
          _vm._v(" to add the entry to the archive,\nor "),
          _c("code", [_vm._v("false")]),
          _vm._v(" to omit it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("portable")]),
          _vm._v(" Omit metadata that is system-specific: "),
          _c("code", [_vm._v("ctime")]),
          _vm._v(", "),
          _c("code", [_vm._v("atime")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(", "),
          _c("code", [_vm._v("gid")]),
          _vm._v(", "),
          _c("code", [_vm._v("uname")]),
          _vm._v(", "),
          _c("code", [_vm._v("gname")]),
          _vm._v(", "),
          _c("code", [_vm._v("dev")]),
          _vm._v(", "),
          _c("code", [_vm._v("ino")]),
          _vm._v(", and "),
          _c("code", [_vm._v("nlink")]),
          _vm._v(".  Note\nthat "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " is still included, because this is necessary for other\ntime-based operations.  Additionally, "
          ),
          _c("code", [_vm._v("mode")]),
          _vm._v(
            ' is set to a "reasonable\ndefault" for most unix systems, based on a '
          ),
          _c("code", [_vm._v("umask")]),
          _vm._v(" value of "),
          _c("code", [_vm._v("0o22")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped\nfrom absolute paths.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("linkCache")]),
          _vm._v(
            " A Map object containing the device and inode value for\nany file whose nlink is > 1, to identify hard links."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("statCache")]),
          _vm._v(" A Map object that caches calls "),
          _c("code", [_vm._v("lstat")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("readdirCache")]),
          _vm._v(" A Map object that caches calls to "),
          _c("code", [_vm._v("readdir")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("jobs")]),
          _vm._v(
            " A number specifying how many concurrent jobs to run.\nDefaults to 4."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxReadSize")]),
          _vm._v(" The maximum buffer size for "),
          _c("code", [_vm._v("fs.read()")]),
          _vm._v(" operations.\nDefaults to 16 MB.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noDirRecurse")]),
          _vm._v(" Do not recursively archive the contents of\ndirectories.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("follow")]),
          _vm._v(
            " Set to true to pack the targets of symbolic links.  Without\nthis option, symbolic links are archived as such."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noPax")]),
          _vm._v(
            " Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " values for entries.\nNote that this prevents using other mtime-based features like\n"
          ),
          _c("code", [_vm._v("tar.update")]),
          _vm._v(" or the "),
          _c("code", [_vm._v("keepNewer")]),
          _vm._v(" option with the resulting tar archive.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("mtime")]),
          _vm._v(" Set to a "),
          _c("code", [_vm._v("Date")]),
          _vm._v(" object to force a specific "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(" for\neverything added to the archive.  Overridden by "),
          _c("code", [_vm._v("noMtime")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "add-path" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#add-path" } },
          [_vm._v("#")]
        ),
        _vm._v(" add(path)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Adds an entry to the archive.  Returns the Pack stream.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "write-path" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#write-path" } },
          [_vm._v("#")]
        ),
        _vm._v(" write(path)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Adds an entry to the archive.  Returns true if flushed.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "end" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#end" } }, [
          _vm._v("#")
        ]),
        _vm._v(" end()")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Finishes the archive.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-pack-sync" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-tar-pack-sync" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.Pack.Sync")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Synchronous version of "),
        _c("code", [_vm._v("tar.Pack")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-unpack" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-tar-unpack" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.Unpack")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A writable stream that unpacks a tar archive onto the file system."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("All the normal writable stream stuff is supported.  "),
        _c("code", [_vm._v("write()")]),
        _vm._v(" and\n"),
        _c("code", [_vm._v("end()")]),
        _vm._v(" methods, "),
        _c("code", [_vm._v("'drain'")]),
        _vm._v(" events, etc.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Note that all directories that are created will be forced to be\nwritable, readable, and listable by their owner, to avoid cases where\na directory prevents extraction of child entries by virtue of its\nmode."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("'close'")]),
        _vm._v(" is emitted when it's done writing stuff to the file system.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Most unpack errors will cause a "),
        _c("code", [_vm._v("warn")]),
        _vm._v(" event to be emitted.  If the\n"),
        _c("code", [_vm._v("cwd")]),
        _vm._v(
          " is missing, or not a directory, then an error will be emitted."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "constructor-options-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#constructor-options-2" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" constructor(options)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " Extract files relative to the specified directory.  Defaults\nto "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(".  If provided, this must exist and must be a\ndirectory.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("filter")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(path, entry)")]),
          _vm._v(" for each\nentry being unpacked.  Return "),
          _c("code", [_vm._v("true")]),
          _vm._v(" to unpack the entry from the\narchive, or "),
          _c("code", [_vm._v("false")]),
          _vm._v(" to skip it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("newer")]),
          _vm._v(
            " Set to true to keep the existing file on disk if it's newer\nthan the file in the archive."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("keep")]),
          _vm._v(
            " Do not overwrite existing files.  In particular, if a file\nappears more than once in an archive, later copies will not\noverwrite earlier copies."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths, paths containing "),
          _c("code", [_vm._v("..")]),
          _vm._v(", and\nextracting through symbolic links.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped from\nabsolute paths, "),
          _c("code", [_vm._v("..")]),
          _vm._v(
            " paths are not extracted, and any file whose\nlocation would be modified by a symbolic link is not extracted."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("unlink")]),
          _vm._v(
            " Unlink files before creating them.  Without this option,\ntar overwrites existing files, which preserves existing hardlinks.\nWith this option, existing hardlinks will be broken, as will any\nsymlink that would affect the location of an extracted file."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strip")]),
          _vm._v(
            " Remove the specified number of leading path elements.\nPathnames with fewer elements will be silently skipped.  Note that\nthe pathname is edited after applying the filter, but before\nsecurity checks."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("umask")]),
          _vm._v(" Filter the modes of entries like "),
          _c("code", [_vm._v("process.umask()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("dmode")]),
          _vm._v(" Default mode for directories")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("fmode")]),
          _vm._v(" Default mode for files")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("dirCache")]),
          _vm._v(" A Map object of which directories exist.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxMetaEntrySize")]),
          _vm._v(
            " The maximum size of meta entries that is\nsupported.  Defaults to 1 MB."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preserveOwner")]),
          _vm._v(" If true, tar will set the "),
          _c("code", [_vm._v("uid")]),
          _vm._v(" and "),
          _c("code", [_vm._v("gid")]),
          _vm._v(" of\nextracted entries to the "),
          _c("code", [_vm._v("uid")]),
          _vm._v(" and "),
          _c("code", [_vm._v("gid")]),
          _vm._v(
            " fields in the archive.\nThis defaults to true when run as root, and false otherwise.  If\nfalse, then files and directories will be set with the owner and\ngroup of the user running the process.  This is similar to "
          ),
          _c("code", [_vm._v("-p")]),
          _vm._v(" in\n"),
          _c("code", [_vm._v("tar(1)")]),
          _vm._v(
            ", but ACLs and other system-specific data is never unpacked\nin this implementation, and modes are set by default already."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("win32")]),
          _vm._v(
            " True if on a windows platform.  Causes behavior where\nfilenames containing "
          ),
          _c("code", [_vm._v("<|>?")]),
          _vm._v(
            " chars are converted to\nwindows-compatible values while being unpacked."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("uid")]),
          _vm._v(
            " Set to a number to force ownership of all extracted files and\nfolders, and all implicitly created directories, to be owned by the\nspecified user id, regardless of the "
          ),
          _c("code", [_vm._v("uid")]),
          _vm._v(" field in the archive.\nCannot be used along with "),
          _c("code", [_vm._v("preserveOwner")]),
          _vm._v(".  Requires also setting a\n"),
          _c("code", [_vm._v("gid")]),
          _vm._v(" option.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("gid")]),
          _vm._v(
            " Set to a number to force ownership of all extracted files and\nfolders, and all implicitly created directories, to be owned by the\nspecified group id, regardless of the "
          ),
          _c("code", [_vm._v("gid")]),
          _vm._v(" field in the archive.\nCannot be used along with "),
          _c("code", [_vm._v("preserveOwner")]),
          _vm._v(".  Requires also setting a\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(" option.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(" value for extracted\nentries.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("transform")]),
          _vm._v(" Provide a function that takes an "),
          _c("code", [_vm._v("entry")]),
          _vm._v(
            " object, and\nreturns a stream, or any falsey value.  If a stream is provided,\nthen that stream's data will be written instead of the contents of\nthe archive entry.  If a falsey value is provided, then the entry is\nwritten to disk as normal.  (To exclude items from extraction, use\nthe "
          ),
          _c("code", [_vm._v("filter")]),
          _vm._v(" option described above.)")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onentry")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(entry)")]),
          _vm._v(" for each entry\nthat passes the filter.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-unpack-sync" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-tar-unpack-sync" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.Unpack.Sync")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Synchronous version of "),
        _c("code", [_vm._v("tar.Unpack")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Note that using an asynchronous stream type with the "),
        _c("code", [_vm._v("transform")]),
        _vm._v(
          "\noption will cause undefined behavior in sync unpack streams.\n"
        ),
        _c(
          "a",
          {
            attrs: {
              href: "http://npm.im/minipass",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("MiniPass"), _c("OutboundLink")],
          1
        ),
        _vm._v("-based streams are designed for this\nuse case.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-parse" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#class-tar-parse" } },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.Parse")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A writable stream that parses a tar archive stream.  All the standard\nwritable stream stuff is supported."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If the archive is gzipped, then tar will detect this and unzip it."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Emits "),
        _c("code", [_vm._v("'entry'")]),
        _vm._v(" events with "),
        _c("code", [_vm._v("tar.ReadEntry")]),
        _vm._v(
          " objects, which are\nthemselves readable streams that you can pipe wherever."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Each "),
        _c("code", [_vm._v("entry")]),
        _vm._v(
          " will not emit until the one before it is flushed through,\nso make sure to either consume the data (with "
        ),
        _c("code", [_vm._v("on('data', ...)")]),
        _vm._v(" or\n"),
        _c("code", [_vm._v(".pipe(...)")]),
        _vm._v(") or throw it away with "),
        _c("code", [_vm._v(".resume()")]),
        _vm._v(" to keep the stream\nflowing.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "constructor-options-3" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#constructor-options-3" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" constructor(options)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns an event emitter that emits "),
        _c("code", [_vm._v("entry")]),
        _vm._v(" events with\n"),
        _c("code", [_vm._v("tar.ReadEntry")]),
        _vm._v(" objects.")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("filter")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(path, entry)")]),
          _vm._v(" for each\nentry being listed.  Return "),
          _c("code", [_vm._v("true")]),
          _vm._v(" to emit the entry from the\narchive, or "),
          _c("code", [_vm._v("false")]),
          _vm._v(" to skip it.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onentry")]),
          _vm._v(" A function that gets called with "),
          _c("code", [_vm._v("(entry)")]),
          _vm._v(" for each entry\nthat passes the filter.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "abort-error" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#abort-error" } },
          [_vm._v("#")]
        ),
        _vm._v(" abort(error)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Stop all parsing activities.  This is called when there are zlib\nerrors.  It also emits an unrecoverable warning with the error provided."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-readentry-extends-minipass" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-tar-readentry-extends-minipass" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.ReadEntry extends "),
        _c(
          "a",
          {
            attrs: {
              href: "http://npm.im/minipass",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("MiniPass"), _c("OutboundLink")],
          1
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A representation of an entry that is being read out of a tar archive."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("It has the following fields:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("extended")]),
          _vm._v(" The extended metadata object provided to the constructor.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("globalExtended")]),
          _vm._v(
            " The global extended metadata object provided to the\nconstructor."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("remain")]),
          _vm._v(
            " The number of bytes remaining to be written into the\nstream."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("blockRemain")]),
          _vm._v(
            " The number of 512-byte blocks remaining to be written\ninto the stream."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("ignore")]),
          _vm._v(" Whether this entry should be ignored.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("meta")]),
          _vm._v(
            " True if this represents metadata about the next entry, false\nif it represents a filesystem object."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "All the fields from the header, extended header, and global extended\nheader are added to the ReadEntry object.  So it has "
          ),
          _c("code", [_vm._v("path")]),
          _vm._v(", "),
          _c("code", [_vm._v("type")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("size")]),
          _vm._v(", "),
          _c("code", [_vm._v("mode")]),
          _vm._v(", and so on.")
        ])
      ]),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "constructor-header-extended-globalextended" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#constructor-header-extended-globalextended" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" constructor(header, extended, globalExtended)")
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Create a new ReadEntry object with the specified header, extended\nheader, and global extended header values."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-writeentry-extends-minipass" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-tar-writeentry-extends-minipass" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.WriteEntry extends "),
        _c(
          "a",
          {
            attrs: {
              href: "http://npm.im/minipass",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("MiniPass"), _c("OutboundLink")],
          1
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A representation of an entry that is being written from the file\nsystem into a tar archive."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Emits data for the Header, and for the Pax Extended Header if one is\nrequired, as well as any body data."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Creating a WriteEntry for a directory does not also create\nWriteEntry objects for all of the directory contents."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("It has the following fields:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("path")]),
          _vm._v(
            " The path field that will be written to the archive.  By\ndefault, this is also the path from the cwd to the file system\nobject."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("portable")]),
          _vm._v(" Omit metadata that is system-specific: "),
          _c("code", [_vm._v("ctime")]),
          _vm._v(", "),
          _c("code", [_vm._v("atime")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(", "),
          _c("code", [_vm._v("gid")]),
          _vm._v(", "),
          _c("code", [_vm._v("uname")]),
          _vm._v(", "),
          _c("code", [_vm._v("gname")]),
          _vm._v(", "),
          _c("code", [_vm._v("dev")]),
          _vm._v(", "),
          _c("code", [_vm._v("ino")]),
          _vm._v(", and "),
          _c("code", [_vm._v("nlink")]),
          _vm._v(".  Note\nthat "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " is still included, because this is necessary for other\ntime-based operations.  Additionally, "
          ),
          _c("code", [_vm._v("mode")]),
          _vm._v(
            ' is set to a "reasonable\ndefault" for most unix systems, based on a '
          ),
          _c("code", [_vm._v("umask")]),
          _vm._v(" value of "),
          _c("code", [_vm._v("0o22")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("myuid")]),
          _vm._v(
            " If supported, the uid of the user running the current\nprocess."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("myuser")]),
          _vm._v(" The "),
          _c("code", [_vm._v("env.USER")]),
          _vm._v(" string if set, or "),
          _c("code", [_vm._v("''")]),
          _vm._v(".  Set as the entry\n"),
          _c("code", [_vm._v("uname")]),
          _vm._v(" field if the file's "),
          _c("code", [_vm._v("uid")]),
          _vm._v(" matches "),
          _c("code", [_vm._v("this.myuid")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxReadSize")]),
          _vm._v(" The maximum buffer size for "),
          _c("code", [_vm._v("fs.read()")]),
          _vm._v(" operations.\nDefaults to 1 MB.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("linkCache")]),
          _vm._v(
            " A Map object containing the device and inode value for\nany file whose nlink is > 1, to identify hard links."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("statCache")]),
          _vm._v(" A Map object that caches calls "),
          _c("code", [_vm._v("lstat")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped\nfrom absolute paths.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " The current working directory for creating the archive.\nDefaults to "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("absolute")]),
          _vm._v(
            " The absolute path to the entry on the filesystem.  By\ndefault, this is "
          ),
          _c("code", [_vm._v("path.resolve(this.cwd, this.path)")]),
          _vm._v(", but it can be\noverridden explicitly.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("win32")]),
          _vm._v(
            " True if on a windows platform.  Causes behavior where paths\nreplace "
          ),
          _c("code", [_vm._v("\\")]),
          _vm._v(" with "),
          _c("code", [_vm._v("/")]),
          _vm._v(" and filenames containing the windows-compatible\nforms of "),
          _c("code", [_vm._v("<|>?:")]),
          _vm._v(" characters are converted to actual "),
          _c("code", [_vm._v("<|>?:")]),
          _vm._v(" characters\nin the archive.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noPax")]),
          _vm._v(
            " Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " values for entries.\nNote that this prevents using other mtime-based features like\n"
          ),
          _c("code", [_vm._v("tar.update")]),
          _vm._v(" or the "),
          _c("code", [_vm._v("keepNewer")]),
          _vm._v(" option with the resulting tar archive.")
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "constructor-path-options" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#constructor-path-options" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" constructor(path, options)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("path")]),
        _vm._v(" is the path of the entry as it is written in the archive.")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("portable")]),
          _vm._v(" Omit metadata that is system-specific: "),
          _c("code", [_vm._v("ctime")]),
          _vm._v(", "),
          _c("code", [_vm._v("atime")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(", "),
          _c("code", [_vm._v("gid")]),
          _vm._v(", "),
          _c("code", [_vm._v("uname")]),
          _vm._v(", "),
          _c("code", [_vm._v("gname")]),
          _vm._v(", "),
          _c("code", [_vm._v("dev")]),
          _vm._v(", "),
          _c("code", [_vm._v("ino")]),
          _vm._v(", and "),
          _c("code", [_vm._v("nlink")]),
          _vm._v(".  Note\nthat "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " is still included, because this is necessary for other\ntime-based operations.  Additionally, "
          ),
          _c("code", [_vm._v("mode")]),
          _vm._v(
            ' is set to a "reasonable\ndefault" for most unix systems, based on a '
          ),
          _c("code", [_vm._v("umask")]),
          _vm._v(" value of "),
          _c("code", [_vm._v("0o22")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("maxReadSize")]),
          _vm._v(" The maximum buffer size for "),
          _c("code", [_vm._v("fs.read()")]),
          _vm._v(" operations.\nDefaults to 1 MB.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("linkCache")]),
          _vm._v(
            " A Map object containing the device and inode value for\nany file whose nlink is > 1, to identify hard links."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("statCache")]),
          _vm._v(" A Map object that caches calls "),
          _c("code", [_vm._v("lstat")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped\nfrom absolute paths.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("cwd")]),
          _vm._v(
            " The current working directory for creating the archive.\nDefaults to "
          ),
          _c("code", [_vm._v("process.cwd()")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("absolute")]),
          _vm._v(
            " The absolute path to the entry on the filesystem.  By\ndefault, this is "
          ),
          _c("code", [_vm._v("path.resolve(this.cwd, this.path)")]),
          _vm._v(", but it can be\noverridden explicitly.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("win32")]),
          _vm._v(
            " True if on a windows platform.  Causes behavior where paths\nreplace "
          ),
          _c("code", [_vm._v("\\")]),
          _vm._v(" with "),
          _c("code", [_vm._v("/")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " values for entries.\nNote that this prevents using other mtime-based features like\n"
          ),
          _c("code", [_vm._v("tar.update")]),
          _vm._v(" or the "),
          _c("code", [_vm._v("keepNewer")]),
          _vm._v(" option with the resulting tar archive.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("umask")]),
          _vm._v(
            " Set to restrict the modes on the entries in the archive,\nsomewhat like how umask works on file creation.  Defaults to\n"
          ),
          _c("code", [_vm._v("process.umask()")]),
          _vm._v(" on unix systems, or "),
          _c("code", [_vm._v("0o22")]),
          _vm._v(" on Windows.")
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "warn-message-data" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#warn-message-data" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" warn(message, data)")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("If strict, emit an error with the provided message.")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Othewise, emit a "),
        _c("code", [_vm._v("'warn'")]),
        _vm._v(" event with the provided message and data.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-writeentry-sync" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-tar-writeentry-sync" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.WriteEntry.Sync")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Synchronous version of tar.WriteEntry")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-writeentry-tar" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-tar-writeentry-tar" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.WriteEntry.Tar")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A version of tar.WriteEntry that gets its data from a tar.ReadEntry\ninstead of from the filesystem."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "constructor-readentry-options" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#constructor-readentry-options" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" constructor(readEntry, options)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("readEntry")]),
        _vm._v(" is the entry being read out of another archive.")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("The following options are supported:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("portable")]),
          _vm._v(" Omit metadata that is system-specific: "),
          _c("code", [_vm._v("ctime")]),
          _vm._v(", "),
          _c("code", [_vm._v("atime")]),
          _vm._v(",\n"),
          _c("code", [_vm._v("uid")]),
          _vm._v(", "),
          _c("code", [_vm._v("gid")]),
          _vm._v(", "),
          _c("code", [_vm._v("uname")]),
          _vm._v(", "),
          _c("code", [_vm._v("gname")]),
          _vm._v(", "),
          _c("code", [_vm._v("dev")]),
          _vm._v(", "),
          _c("code", [_vm._v("ino")]),
          _vm._v(", and "),
          _c("code", [_vm._v("nlink")]),
          _vm._v(".  Note\nthat "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " is still included, because this is necessary for other\ntime-based operations.  Additionally, "
          ),
          _c("code", [_vm._v("mode")]),
          _vm._v(
            ' is set to a "reasonable\ndefault" for most unix systems, based on a '
          ),
          _c("code", [_vm._v("umask")]),
          _vm._v(" value of "),
          _c("code", [_vm._v("0o22")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("preservePaths")]),
          _vm._v(" Allow absolute paths.  By default, "),
          _c("code", [_vm._v("/")]),
          _vm._v(" is stripped\nfrom absolute paths.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("strict")]),
          _vm._v(" Treat warnings as crash-worthy errors.  Default false.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("onwarn")]),
          _vm._v(" A function that will get called with "),
          _c("code", [_vm._v("(code, message, data)")]),
          _vm._v(' for\nany warnings encountered.  (See "Warnings and Errors")')
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("noMtime")]),
          _vm._v(" Set to true to omit writing "),
          _c("code", [_vm._v("mtime")]),
          _vm._v(
            " values for entries.\nNote that this prevents using other mtime-based features like\n"
          ),
          _c("code", [_vm._v("tar.update")]),
          _vm._v(" or the "),
          _c("code", [_vm._v("keepNewer")]),
          _vm._v(" option with the resulting tar archive.")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-header" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-tar-header" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.Header")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("A class for reading and writing header blocks.")]),
      _vm._v(" "),
      _c("p", [_vm._v("It has the following fields:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("nullBlock")]),
          _vm._v(" True if decoding a block which is entirely composed of\n"),
          _c("code", [_vm._v("0x00")]),
          _vm._v(
            " null bytes.  (Useful because tar files are terminated by\nat least 2 null blocks.)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("cksumValid")]),
          _vm._v(
            " True if the checksum in the header is valid, false\notherwise."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("needPax")]),
          _vm._v(
            " True if the values, as encoded, will require a Pax\nextended header."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("path")]),
          _vm._v(" The path of the entry.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("mode")]),
          _vm._v(
            " The 4 lowest-order octal digits of the file mode.  That is,\nread/write/execute permissions for world, group, and owner, and the\nsetuid, setgid, and sticky bits."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("uid")]),
          _vm._v(" Numeric user id of the file owner")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("gid")]),
          _vm._v(" Numeric group id of the file owner")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("size")]),
          _vm._v(" Size of the file in bytes")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("mtime")]),
          _vm._v(" Modified time of the file")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("cksum")]),
          _vm._v(
            " The checksum of the header.  This is generated by adding all\nthe bytes of the header block, treating the checksum field itself as\nall ascii space characters (that is, "
          ),
          _c("code", [_vm._v("0x20")]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("type")]),
          _vm._v(
            " The human-readable name of the type of entry this represents,\nor the alphanumeric key if unknown."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("typeKey")]),
          _vm._v(
            " The alphanumeric key for the type of entry this header\nrepresents."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("linkpath")]),
          _vm._v(" The target of Link and SymbolicLink entries.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("uname")]),
          _vm._v(" Human-readable user name of the file owner")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("gname")]),
          _vm._v(" Human-readable group name of the file owner")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("devmaj")]),
          _vm._v(" The major portion of the device number.  Always "),
          _c("code", [_vm._v("0")]),
          _vm._v(" for\nfiles, directories, and links.")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("devmin")]),
          _vm._v(" The minor portion of the device number.  Always "),
          _c("code", [_vm._v("0")]),
          _vm._v(" for\nfiles, directories, and links.")
        ]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("atime")]), _vm._v(" File access time.")]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("ctime")]), _vm._v(" File change time.")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "constructor-data-offset-0" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#constructor-data-offset-0" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" constructor(data, [offset=0])")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("data")]),
        _vm._v(
          " is optional.  It is either a Buffer that should be interpreted\nas a tar Header starting at the specified offset and continuing for\n512 bytes, or a data object of keys and values to set on the header\nobject, and eventually encode as a tar Header."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "decode-block-offset" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#decode-block-offset" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" decode(block, offset)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Decode the provided buffer starting at the specified offset.")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Buffer length must be greater than 512 bytes.")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "set-data" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#set-data" } },
          [_vm._v("#")]
        ),
        _vm._v(" set(data)")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Set the fields in the data object.")]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "encode-buffer-offset" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#encode-buffer-offset" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" encode(buffer, offset)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Encode the header fields into the buffer at the specified offset."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Returns "),
        _c("code", [_vm._v("this.needPax")]),
        _vm._v(
          " to indicate whether a Pax Extended Header is\nrequired to properly encode the specified data."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-tar-pax" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#class-tar-pax" } },
          [_vm._v("#")]
        ),
        _vm._v(" class tar.Pax")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "An object representing a set of key-value pairs in an Pax extended\nheader entry."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It has the following fields.  Where the same name is used, they have\nthe same semantics as the tar.Header field of the same name."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("global")]),
          _vm._v(
            " True if this represents a global extended header, or false\nif it is for a single entry."
          )
        ]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("atime")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("charset")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("comment")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("ctime")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("gid")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("gname")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("linkpath")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("mtime")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("path")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("size")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("uid")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("uname")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("dev")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("ino")])]),
        _vm._v(" "),
        _c("li", [_c("code", [_vm._v("nlink")])])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "constructor-object-global" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#constructor-object-global" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" constructor(object, global)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Set the fields set in the object.  "),
        _c("code", [_vm._v("global")]),
        _vm._v(" is a boolean that defaults\nto false.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "encode" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#encode" } }, [
          _vm._v("#")
        ]),
        _vm._v(" encode()")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Return a Buffer containing the header and body for the Pax extended\nheader entry, or "
        ),
        _c("code", [_vm._v("null")]),
        _vm._v(" if there is nothing to encode.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "encodebody" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#encodebody" } },
          [_vm._v("#")]
        ),
        _vm._v(" encodeBody()")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Return a string representing the body of the pax extended header\nentry."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "encodefield-fieldname" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#encodefield-fieldname" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" encodeField(fieldName)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Return a string representing the key/value encoding for the specified\nfieldName, or "
        ),
        _c("code", [_vm._v("''")]),
        _vm._v(" if the field is unset.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "tar-pax-parse-string-extended-global" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tar-pax-parse-string-extended-global" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" tar.Pax.parse(string, extended, global)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Return a new Pax object created by parsing the contents of the string\nprovided."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If the "),
        _c("code", [_vm._v("extended")]),
        _vm._v(
          " object is set, then also add the fields from that\nobject.  (This is necessary because multiple metadata entries can\noccur in sequence.)"
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "tar-types" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#tar-types" } },
          [_vm._v("#")]
        ),
        _vm._v(" tar.types")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("A translation table for the "),
        _c("code", [_vm._v("type")]),
        _vm._v(" field in tar headers.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tar-types-name-get-code" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tar-types-name-get-code" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" tar.types.name.get(code)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Get the human-readable name for a given alphanumeric code.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tar-types-code-get-name" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tar-types-code-get-name" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" tar.types.code.get(name)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Get the alphanumeric code for a given human-readable name.")
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}