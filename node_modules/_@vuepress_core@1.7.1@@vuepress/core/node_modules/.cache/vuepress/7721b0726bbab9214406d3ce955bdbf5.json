{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/saxes/README.md?vue&type=template&id=cc7afd70&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/saxes/README.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJzYXhlcyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc2F4ZXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBzYXhlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBIHNheC1zdHlsZSBub24tdmFsaWRhdGluZyBwYXJzZXIgZm9yIFhNTC4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTYXhlcyBpcyBhIGZvcmsgb2YgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3Mvc2F4LWpzIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJzYXgiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgMS4yLjQuIEFsbCBtZW50aW9uc1xub2Ygc2F4IGluIHRoaXMgcHJvamVjdCdzIGRvY3VtZW50YXRpb24gYXJlIHJlZmVyZW5jZXMgdG8gc2F4IDEuMi40LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJEZXNpZ25lZCB3aXRoICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vbm9kZWpzLm9yZy8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIm5vZGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaW4gbWluZCwgYnV0IHNob3VsZCB3b3JrIGZpbmUgaW4gdGhlXG5icm93c2VyIG9yIG90aGVyIENvbW1vbkpTIGltcGxlbWVudGF0aW9ucy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiU2F4ZXMgZG9lcyBub3Qgc3VwcG9ydCBOb2RlIHZlcnNpb25zIG9sZGVyIHRoYW4gMTAuIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJub3RhYmxlLWRpZmZlcmVuY2VzLWZyb20tc2F4IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNub3RhYmxlLWRpZmZlcmVuY2VzLWZyb20tc2F4IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTm90YWJsZSBEaWZmZXJlbmNlcyBmcm9tIFNheC4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICdTYXhlcyBhaW1zIHRvIGJlIG11Y2ggc3RyaWN0ZXIgdGhhbiBzYXggd2l0aCByZWdhcmRzIHRvIFhNTFxud2VsbC1mb3JtZWRuZXNzLiBTYXgsIGV2ZW4gaW4gaXRzIHNvLWNhbGxlZCAic3RyaWN0IG1vZGUiLCBpcyBub3Qgc3RyaWN0LiBJdFxuc2lsZW50bHkgYWNjZXB0cyBzdHJ1Y3R1cmVzIHRoYXQgYXJlIG5vdCB3ZWxsLWZvcm1lZCBYTUwuIFByb2plY3RzIHRoYXQgbmVlZFxuYmV0dGVyIGNvbXBsaWFuY2Ugd2l0aCB3ZWxsLWZvcm1lZG5lc3MgY29uc3RyYWludHMgY2Fubm90IHVzZSBzYXggYXMtaXMuJwogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQ29uc2VxdWVudGx5LCBzYXhlcyBkb2VzIG5vdCBzdXBwb3J0IEhUTUwsIG9yIHBzZXVkby1YTUwsIG9yIGJhZCBYTUwuIFNheGVzXG53aWxsIHJlcG9ydCB3ZWxsLWZvcm1lZG5lc3MgZXJyb3JzIGluIGFsbCB0aGVzZSBjYXNlcyBidXQgaXQgd29uJ3QgdHJ5IHRvXG5leHRyYWN0IGRhdGEgZnJvbSBtYWxmb3JtZWQgZG9jdW1lbnRzIGxpa2Ugc2F4IGRvZXMuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlNheGVzIGlzIG11Y2ggbXVjaCBmYXN0ZXIgdGhhbiBzYXgsIG1vc3RseSBiZWNhdXNlIG9mIGEgc3Vic3RhbnRpYWwgcmVkZXNpZ25cbm9mIHRoZSBpbnRlcm5hbCBwYXJzaW5nIGxvZ2ljLiBUaGUgc3BlZWQgaW1wcm92ZW1lbnQgaXMgbm90IG1lcmVseSBkdWUgdG9cbnJlbW92aW5nIGZlYXR1cmVzIHRoYXQgd2VyZSBzdXBwb3J0ZWQgYnkgc2F4LiBUaGF0IGhlbHBlZCBhIGJpdCwgYnV0IHNheGVzXG5hZGRzIHNvbWUgZXhwZW5zaXZlIGNoZWNrcyBpbiBpdHMgYWltIGZvciBjb25mb3JtYW5jZSB3aXRoIHRoZSBYTUxcbnNwZWNpZmljYXRpb24uIFJlZGVzaWduaW5nIHRoZSBwYXJzaW5nIGxvZ2ljIGlzIHdoYXQgYWNjb3VudHMgZm9yIG1vc3Qgb2YgdGhlXG5wZXJmb3JtYW5jZSBpbXByb3ZlbWVudC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiU2F4ZXMgZG9lcyBub3QgYWltIHRvIHN1cHBvcnQgYW50aXF1YXRlZCBwbGF0Zm9ybXMuIFdlIHdpbGwgbm90IHBvbGx1dGUgdGhlXG5zb3VyY2Ugb3IgdGhlIGRlZmF1bHQgYnVpbGQgd2l0aCBzdXBwb3J0IGZvciBhbnRpcXVhdGVkIHBsYXRmb3Jtcy4gSWYgeW91IHdhbnRcbnN1cHBvcnQgZm9yIElFIDExLCB5b3UgYXJlIHdlbGNvbWUgdG8gcHJvZHVjZSBhIFBSIHRoYXQgYWRkcyBhICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImVtIiwgW192bS5fdigibmV3IGJ1aWxkIildKSwKICAgICAgICAgICAgX3ZtLl92KCJcbnRyYW5zcGlsZWQgdG8gRVM1LiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlNheGVzIGhhbmRsZXMgZXJyb3JzIGRpZmZlcmVudGx5IGZyb20gc2F4OiBpdCBwcm92aWRlcyBhIGRlZmF1bHQgb25lcnJvclxuaGFuZGxlciB3aGljaCB0aHJvd3MuIFlvdSBjYW4gcmVwbGFjZSBpdCB3aXRoIHlvdXIgb3duIGhhbmRsZXIgaWYgeW91IHdhbnQuIElmXG55b3VyIGhhbmRsZXIgZG9lcyBub3RoaW5nLCB0aGVyZSBpcyBubyAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVzdW1lIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgbWV0aG9kIHRvIGNhbGwuIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiVGhlcmUncyBubyAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTdHJlYW0iKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJyBBUEkuIEEgcmV2YW1wZWQgQVBJIG1heSBiZSBpbnRyb2R1Y2VkIGxhdGVyLiAoSXQgaXMgc3RpbGxcbmEgInN0cmVhbWluZyBwYXJzZXIiIGluIHRoZSBnZW5lcmFsIHNlbnNlIHRoYXQgeW91IHdyaXRlIGEgY2hhcmFjdGVyIHN0cmVhbSB0b1xuaXQuKScKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJTYXhlcyBkb2VzIG5vdCBoYXZlIGZhY2lsaXRpZXMgZm9yIGxpbWl0aW5nIHRoZSBzaXplIHRoZSBkYXRhIGNodW5rcyBwYXNzZWQgdG9cbmV2ZW50IGhhbmRsZXJzLiBTZWUgdGhlIEZBUSBlbnRyeSBmb3IgbW9yZSBkZXRhaWxzLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb25mb3JtYW5jZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29uZm9ybWFuY2UiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbmZvcm1hbmNlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlNheGVzIHN1cHBvcnRzOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLXhtbC0yMDA4MTEyNi8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJYTUwgMS4wIGZpZnRoIGVkaXRpb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L1JFQy14bWwxMS0yMDA2MDgxNi8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJYTUwgMS4xIHNlY29uZCBlZGl0aW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9SRUMteG1sLW5hbWVzLTIwMDkxMjA4LyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIk5hbWVzcGFjZXMgaW4gWE1MIDEuMCAoVGhpcmQgRWRpdGlvbikiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvUkVDLXhtbC1uYW1lczExLTIwMDYwODE2LyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIk5hbWVzcGFjZXMgaW4gWE1MIDEuMSAoU2Vjb25kIEVkaXRpb24pIiksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImxpbWl0YXRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNsaW1pdGF0aW9ucyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTGltaXRhdGlvbnMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIGlzIGEgbm9uLXZhbGlkYXRpbmcgcGFyc2VyIHNvIGl0IG9ubHkgdmVyaWZpZXMgd2hldGhlciB0aGUgZG9jdW1lbnQgaXNcbndlbGwtZm9ybWVkLiBXZSBkbyBhaW0gdG8gcmFpc2UgZXJyb3JzIGZvciBhbGwgbWFsZm9ybWVkIGNvbnN0cnVjdHNcbmVuY291bnRlcmVkLiBIb3dldmVyLCB0aGlzIHBhcnNlciBkb2VzIG5vdCB0aG9yb3VnbHkgcGFyc2UgdGhlIGNvbnRlbnRzIG9mXG5EVERzLiBTbyBtb3N0IG1hbGZvcm1lZG5lc3MgZXJyb3JzIGNhdXNlZCBieSBlcnJvcnMgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImluIERURHMiKV0pLAogICAgICAgIF92bS5fdigiIGNhbm5vdCBiZVxucmVwb3J0ZWQuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmVnYXJkaW5nLWRvY3R5cGUtYW5kLWVudGl0eSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcmVnYXJkaW5nLWRvY3R5cGUtYW5kLWVudGl0eSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlZ2FyZGluZyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjwhRE9DVFlQRSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPCFFTlRJVFkiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBwYXJzZXIgd2lsbCBoYW5kbGUgdGhlIGJhc2ljIFhNTCBlbnRpdGllcyBpbiB0ZXh0IG5vZGVzIGFuZCBhdHRyaWJ1dGVcbnZhbHVlczogIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCImYW1wOyAmbHQ7ICZndDsgJmFwb3M7ICZxdW90OyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gSXQncyBwb3NzaWJsZSB0byBkZWZpbmUgYWRkaXRpb25hbFxuZW50aXRpZXMgaW4gWE1MIGJ5IHB1dHRpbmcgdGhlbSBpbiB0aGUgRFRELiBUaGlzIHBhcnNlciBkb2Vzbid0IGRvIGFueXRoaW5nIHdpdGhcbnRoYXQuIElmIHlvdSB3YW50IHRvIGxpc3RlbiB0byB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkb2N0eXBlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGV2ZW50LCBhbmQgdGhlbiBmZXRjaCB0aGVcbmRvY3R5cGVzLCBhbmQgcmVhZCB0aGUgZW50aXRpZXMgYW5kIGFkZCB0aGVtIHRvICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFyc2VyLkVOVElUSUVTIildKSwKICAgICAgICBfdm0uX3YoIiwgdGhlbiBiZSBteVxuZ3Vlc3QuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZG9jdW1lbnRhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZG9jdW1lbnRhdGlvbiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRG9jdW1lbnRhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBzb3VyY2UgY29kZSBjb250YWlucyBKU0RPQyBjb21tZW50cy4gVXNlIHRoZW0uIFdoYXQgZm9sbG93cyBpcyBhIGJyaWVmXG5zdW1tYXJ5IG9mIHdoYXQgaXMgYXZhaWxhYmxlLiBUaGUgZmluYWwgYXV0aG9yaXR5IGlzIHRoZSBzb3VyY2UgY29kZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoIlBBWSBDTE9TRSBBVFRFTlRJT04gVE8gV0hBVCBJUyBQVUJMSUMgQU5EIFdIQVQgSVMgUFJJVkFURS4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBtb3ZlIHRvIFR5cGVTY3JpcHQgbWFrZXMgaXQgc28gdGhhdCBldmVyeXRoaW5nIGlzIG5vdyBmb3JtYWxseSBwcml2YXRlLFxucHJvdGVjdGVkLCBvciBwdWJsaWMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIklmIHlvdSB1c2UgYW55dGhpbmcgbm90IHB1YmxpYywgdGhhdCdzIGF0IHlvdXIgb3duIHBlcmlsLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHRoZXJlJ3MgYSBtaXN0YWtlIGluIHRoZSBkb2N1bWVudGF0aW9uLCByYWlzZSBhbiBpc3N1ZS4gSWYgeW91IGp1c3QgYXNzdW1lLFxueW91IG1heSBhc3N1bWUgaW5jb3JyZWN0bHkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic3VtbWFyeS11c2FnZS1pbmZvcm1hdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3VtbWFyeS11c2FnZS1pbmZvcm1hdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN1bW1hcnkgVXNhZ2UgSW5mb3JtYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJleGFtcGxlIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNleGFtcGxlIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgRXhhbXBsZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWphdmFzY3JpcHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4ga2V5d29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ2YXIiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgc2F4ZXMgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiPSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJyZXF1aXJlIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHN0cmluZyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCciLi9saWIvc2F4ZXMiJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiwiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiAgcGFyc2VyICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG9wZXJhdG9yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIj0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4ga2V5d29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJuZXciKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY2xhc3MtbmFtZSIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJzYXhlcyIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIlNheGVzUGFyc2VyIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cbnBhcnNlciIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJvbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBzdHJpbmciIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdignImVycm9yIicpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiwiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4ga2V5d29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJmdW5jdGlvbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcGFyYW1ldGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiAgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY29tbWVudCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIvLyBhbiBlcnJvciBoYXBwZW5lZC4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIn0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxucGFyc2VyIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIm9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHN0cmluZyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCcidGV4dCInKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIsIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGtleXdvcmQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZnVuY3Rpb24iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHBhcmFtZXRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ0IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4gICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGNvbW1lbnQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLy8gZ290IHNvbWUgdGV4dC4gIHQgaXMgdGhlIHN0cmluZyBvZiB0ZXh0LiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigifSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5wYXJzZXIiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigib24iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gc3RyaW5nIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoJyJvcGVudGFnIicpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiwiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4ga2V5d29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJmdW5jdGlvbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcGFyYW1ldGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIm5vZGUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiAgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY29tbWVudCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCcvLyBvcGVuZWQgYSB0YWcuICBub2RlIGhhcyAibmFtZSIgYW5kICJhdHRyaWJ1dGVzIicpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigifSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5wYXJzZXIiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigib24iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gc3RyaW5nIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoJyJlbmQiJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBrZXl3b3JkIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZ1bmN0aW9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiAgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY29tbWVudCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIi8vIHBhcnNlciBzdHJlYW0gaXMgZG9uZSwgYW5kIHJlYWR5IHRvIGhhdmUgbW9yZSBzdHVmZiB3cml0dGVuIHRvIGl0LiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigifSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cbnBhcnNlciIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ3cml0ZSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBzdHJpbmciIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiJzx4bWw+SGVsbG8sIDx3aG8gbmFtZT1cIndvcmxkXCI+d29ybGQ8L3dobz4hPC94bWw+JyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiY2xvc2UiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiY29uc3RydWN0b3ItYXJndW1lbnRzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjb25zdHJ1Y3Rvci1hcmd1bWVudHMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb25zdHJ1Y3RvciBBcmd1bWVudHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiU2V0dGluZ3Mgc3VwcG9ydGVkOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigieG1sbnMiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAtIEJvb2xlYW4uIElmICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRydWUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiwgdGhlbiBuYW1lc3BhY2VzIGFyZSBzdXBwb3J0ZWQuIERlZmF1bHRcbmlzICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZhbHNlIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicG9zaXRpb24iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAtIEJvb2xlYW4uIElmICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZhbHNlIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIsIHRoZW4gZG9uJ3QgdHJhY2sgbGluZS9jb2wvcG9zaXRpb24uIFVuc2V0IGlzXG50cmVhdGVkIGFzICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0cnVlIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIERlZmF1bHQgaXMgdW5zZXQuIEN1cnJlbnRseSwgc2V0dGluZyB0aGlzIHRvICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZhbHNlIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgb25seVxucmVzdWx0cyBpbiBhIGNvc21ldGljIGNoYW5nZTogdGhlIGVycm9ycyByZXBvcnRlZCBkbyBub3QgY29udGFpbiBwb3NpdGlvblxuaW5mb3JtYXRpb24uIHNheC1qcyB3b3VsZCBsaXRlcmFsbHkgdHVybiBvZmYgdGhlIHBvc2l0aW9uLWNvbXB1dGluZyBsb2dpYyBpZlxudGhpcyBmbGFnIHdhcyBzZXQgdG8gZmFsc2UuIFRoZSBub3Rpb24gd2FzIHRoYXQgaXQgd291bGQgb3B0aW1pemVcbmV4ZWN1dGlvbi4gSW4gc2F4ZXMgYXQgbGVhc3QgaXQgdHVybnMgb3V0IHRoYXQgY29udGludWFsbHkgdGVzdGluZyB0aGlzIGZsYWdcbmNhdXNlcyBhIGNvc3QgdGhhdCBvZmZzZXRzIHRoZSBiZW5lZml0cyBvZiB0dXJuaW5nIG9mZiB0aGlzIGxvZ2ljLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaWxlTmFtZSIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIC0gU3RyaW5nLiBTZXQgYSBmaWxlIG5hbWUgZm9yIGVycm9yIHJlcG9ydGluZy4gVGhpcyBpcyB1c2VmdWwgb25seVxud2hlbiB0cmFja2luZyBwb3NpdGlvbnMuIFlvdSBtYXkgbGVhdmUgaXQgdW5zZXQuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZyYWdtZW50IildKSwKICAgICAgICAgICAgX3ZtLl92KCIgLSBCb29sZWFuLiBJZiAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0cnVlIildKSwKICAgICAgICAgICAgX3ZtLl92KCIsIHBhcnNlIHRoZSBYTUwgYXMgYW4gWE1MIGZyYWdtZW50LiBEZWZhdWx0IGlzXG4iKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmYWxzZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImFkZGl0aW9uYWxOYW1lc3BhY2VzIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgLSBBIHBsYWluIG9iamVjdCB3aG9zZSBrZXksIHZhbHVlIHBhaXJzIGRlZmluZVxubmFtZXNwYWNlcyBrbm93biBiZWZvcmUgcGFyc2luZyB0aGUgWE1MIGZpbGUuIEl0IGlzIG5vdCBsZWdhbCB0byBwYXNzXG5iaW5kaW5ncyBmb3IgdGhlIG5hbWVzcGFjZXMgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoJyJ4bWwiJyldKSwKICAgICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignInhtbG5zIicpXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImRlZmF1bHRYTUxWZXJzaW9uIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgLSBUaGUgZGVmYXVsdCB2ZXJzaW9uIG9mIHRoZSBYTUwgc3BlY2lmaWNhdGlvbiB0byB1c2UgaWZcbnRoZSBkb2N1bWVudCBjb250YWlucyBubyBYTUwgZGVjbGFyYXRpb24uIElmIHRoZSBkb2N1bWVudCBkb2VzIGNvbnRhaW4gYW4gWE1MXG5kZWNsYXJhdGlvbiwgdGhlbiB0aGlzIHNldHRpbmcgaXMgaWdub3JlZC4gTXVzdCBiZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignIjEuMCInKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBvciAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCciMS4xIicpXSksCiAgICAgICAgICAgIF92bS5fdigiLiBUaGVcbmRlZmF1bHQgaXMgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignIjEuMCInKV0pLAogICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmb3JjZVhNTFZlcnNpb24iKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiAtIEJvb2xlYW4uIEEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gZm9yY2UgdGhlIFhNTFxudmVyc2lvbiB1c2VkIGZvciBwYXJzaW5nIHRvIHRoZSB2YWx1ZSBvZiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGVmYXVsdFhNTFZlcnNpb24iKV0pLAogICAgICAgICAgICBfdm0uX3YoIi4gV2hlbiB0aGlzIGZsYWdcbmlzICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRydWUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGVmYXVsdFhNTFZlcnNpb24iKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBtdXN0IGJlIHNwZWNpZmllZC4gSWYgdW5zcGVjaWZpZWQsIHRoZVxuZGVmYXVsdCB2YWx1ZSBvZiB0aGlzIGZsYWcgaXMgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZhbHNlIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJFeGFtcGxlOiBzdXBwb3NlIHlvdSBhcmUgcGFyc2luZyBhIGRvY3VtZW50IHRoYXQgaGFzIGFuIFhNTCBkZWNsYXJhdGlvblxuc3BlY2lmeWluZyBYTUwgdmVyc2lvbiAxLjEuIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiSWYgeW91IHNldCAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkZWZhdWx0WE1MVmVyc2lvbiIpXSksCiAgICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoJyIxLjAiJyldKSwKICAgICAgICAgICAgX3ZtLl92KCIgd2l0aG91dCBzZXR0aW5nXG4iKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmb3JjZVhNTFZlcnNpb24iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiB0aGVuIHRoZSBYTUwgZGVjbGFyYXRpb24gd2lsbCBvdmVycmlkZSB0aGUgdmFsdWUgb2ZcbiIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImRlZmF1bHRYTUxWZXJzaW9uIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgYW5kIHRoZSBkb2N1bWVudCB3aWxsIGJlIHBhcnNlZCBhY2NvcmRpbmcgdG8gWE1MIDEuMS4iKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIklmIHlvdSBzZXQgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZGVmYXVsdFhNTFZlcnNpb24iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCciMS4wIicpXSksCiAgICAgICAgICAgIF92bS5fdigiIGFuZCBzZXQgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9yY2VYTUxWZXJzaW9uIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgdG9cbiIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRydWUiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiwgdGhlbiB0aGUgWE1MIGRlY2xhcmF0aW9uIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIGRvY3VtZW50IHdpbGwgYmVcbnBhcnNlZCBhY2NvcmRpbmcgdG8gWE1MIDEuMC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibWV0aG9kcyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbWV0aG9kcyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIE1ldGhvZHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid3JpdGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgLSBXcml0ZSBieXRlcyBvbnRvIHRoZSBzdHJlYW0uIFlvdSBkb24ndCBoYXZlIHRvIHBhc3MgdGhlIHdob2xlIGRvY3VtZW50XG5pbiBvbmUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3cml0ZSIpXSksCiAgICAgICAgX3ZtLl92KCIgY2FsbC4gWW91IGNhbiByZWFkIHlvdXIgc291cmNlIGNodW5rIGJ5IGNodW5rIGFuZCBjYWxsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid3JpdGUiKV0pLAogICAgICAgIF92bS5fdigiXG53aXRoIGVhY2ggY2h1bmsuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNsb3NlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gQ2xvc2UgdGhlIHN0cmVhbS4gT25jZSBjbG9zZWQsIG5vIG1vcmUgZGF0YSBtYXkgYmUgd3JpdHRlbiB1bnRpbCBpdCBpc1xuZG9uZSBwcm9jZXNzaW5nIHRoZSBidWZmZXIsIHdoaWNoIGlzIHNpZ25hbGVkIGJ5IHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVuZCIpXSksCiAgICAgICAgX3ZtLl92KCIgZXZlbnQuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicHJvcGVydGllcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJvcGVydGllcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJvcGVydGllcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUaGUgcGFyc2VyIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibGluZSIpXSksCiAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY29sdW1uIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb2x1bW5JbmRleCIpXSksCiAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicG9zaXRpb24iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgLSBJbmRpY2F0aW9ucyBvZiB0aGUgcG9zaXRpb24gaW4gdGhlXG5YTUwgZG9jdW1lbnQgd2hlcmUgdGhlIHBhcnNlciBjdXJyZW50bHkgaXMgbG9va2luZy4gVGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY29sdW1uSW5kZXgiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcHJvcGVydHlcbmNvdW50cyBjb2x1bW5zIGFzIGlmIGluZGV4aW5nIGludG8gYSBKYXZhU2NyaXB0IHN0cmluZywgd2hlcmVhcyB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb2x1bW4iKV0pLAogICAgICAgIF92bS5fdigiXG5wcm9wZXJ0eSBjb3VudHMgVW5pY29kZSBjaGFyYWN0ZXJzLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjbG9zZWQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgLSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlIHBhcnNlciBjYW4gYmUgd3JpdHRlbiB0by4gIElmXG5pdCdzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidHJ1ZSIpXSksCiAgICAgICAgX3ZtLl92KCIsIHRoZW4gd2FpdCBmb3IgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVhZHkiKV0pLAogICAgICAgIF92bS5fdigiIGV2ZW50IHRvIHdyaXRlIGFnYWluLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcHQiKV0pLAogICAgICAgIF92bS5fdigiIC0gQW55IG9wdGlvbnMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ4bWxEZWNsIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gVGhlIFhNTCBkZWNsYXJhdGlvbiBmb3IgdGhpcyBkb2N1bWVudC4gSXQgY29udGFpbnMgdGhlIGZpZWxkc1xuIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2ZXJzaW9uIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJlbmNvZGluZyIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RhbmRhbG9uZSIpXSksCiAgICAgICAgX3ZtLl92KCIuIFRoZXkgYXJlIGFsbCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInVuZGVmaW5lZCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBiZWZvcmVcbmVuY291bnRlcmluZyB0aGUgWE1MIGRlY2xhcmF0aW9uLiBJZiB0aGV5IGFyZSB1bmRlZmluZWQgYWZ0ZXIgdGhlIFhNTFxuZGVjbGFyYXRpb24sIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIHdhcyBub3Qgc2V0IGJ5IHRoZSBkZWNsYXJhdGlvbi4gVGhlcmUgaXMgbm9cbmV2ZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgWE1MIGRlY2xhcmF0aW9uLiBJbiBhIHdlbGwtZm9ybWVkIGRvY3VtZW50LCB0aGUgWE1MXG5kZWNsYXJhdGlvbiBtYXkgYmUgcHJlY2VkZWQgb25seSBieSBhbiBvcHRpb25hbCBCT00uIFNvIGJ5IHRoZSB0aW1lIGFueSBldmVudFxuZ2VuZXJhdGVkIGJ5IHRoZSBwYXJzZXIgaGFwcGVucywgdGhlIGRlY2xhcmF0aW9uIGhhcyBiZWVuIHByb2Nlc3NlZCBpZiBwcmVzZW50XG5hdCBhbGwuIE90aGVyd2lzZSwgeW91IGhhdmUgYSBtYWxmb3JtZWQgZG9jdW1lbnQsIGFuZCBhcyBzdGF0ZWQgYWJvdmUsIHlvdVxuY2Fubm90IHJlbHkgb24gdGhlIHBhcnNlciBkYXRhISIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImVycm9yLWhhbmRsaW5nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNlcnJvci1oYW5kbGluZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRXJyb3IgSGFuZGxpbmciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgcGFyc2VyIGNvbnRpbnVlcyB0byBwYXJzZSBldmVuIHVwb24gZW5jb3VudGVyaW5nIGVycm9ycywgYW5kIGRvZXMgaXRzIGJlc3RcbnRvIGNvbnRpbnVlIHJlcG9ydGluZyBlcnJvcnMuIFlvdSBzaG91bGQgaGVlZCBhbGwgZXJyb3JzIHJlcG9ydGVkLiBBZnRlciBhblxuZXJyb3IsIGhvd2V2ZXIsIHNheGVzIG1heSBpbnRlcnByZXQgeW91ciBkb2N1bWVudCBpbmNvcnJlY3RseS4gRm9yIGluc3RhbmNlXG4iCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoJzxmb28gYT1iYz0iZCIvPicpXSksCiAgICAgICAgX3ZtLl92KCIgaXMgaW52YWxpZCBYTUwuIERpZCB5b3UgbWVhbiB0byBoYXZlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignPGZvbyBhPSJiYz1kIi8+JyldKSwKICAgICAgICBfdm0uX3YoIiBvclxuIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCc8Zm9vIGE9ImIiIGM9ImQiLz4nKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgb3Igc29tZSBvdGhlciB2YXJpYXRpb24/ICBGb3IgdGhlIHNha2Ugb2YgY29udGludWluZyB0b1xucHJvdmlkZSBlcnJvcnMsIHNheGVzIHdpbGwgY29udGludWUgcGFyc2luZyB0aGUgZG9jdW1lbnQsIGJ1dCB0aGUgc3RydWN0dXJlIGl0XG5yZXBvcnRzIG1heSBiZSBpbmNvcnJlY3QuIEl0IGlzIG9ubHkgYWZ0ZXIgdGhlIGVycm9ycyBhcmUgZml4ZWQgaW4gdGhlIGRvY3VtZW50XG50aGF0IHNheGVzIGNhbiBwcm92aWRlIGEgcmVsaWFibGUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIGRvY3VtZW50LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGF0IGxlYXZlcyB5b3Ugd2l0aCB0d28gcnVsZXMgb2YgdGh1bWIgd2hlbiB1c2luZyBzYXhlczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJQYXkgYXR0ZW50aW9uIHRvIHRoZSBlcnJvcnMgdGhhdCBzYXhlcyByZXBvcnQuIFRoZSBkZWZhdWx0ICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvbmVycm9yIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgaGFuZGxlclxudGhyb3dzLCBzbyBieSBkZWZhdWx0LCB5b3UgY2Fubm90IG1pc3MgZXJyb3JzLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJPTkNFIEFOIEVSUk9SIEhBUyBCRUVOIEVOQ09VTlRFUkVELCBTVE9QIFJFTFlJTkcgT04gVEhFIEVWRU5UIEhBTkRMRVJTIE9USEVSXG5USEFOICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib25lcnJvciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEFzIGV4cGxhaW5lZCBhYm92ZSwgd2hlbiBzYXhlcyBydW5zIGludG8gYSB3ZWxsLWZvcm1lZG5lc3NcbnByb2JsZW0sIGl0IG1ha2VzIGEgZ3Vlc3MgaW4gb3JkZXIgdG8gY29udGludWUgcmVwb3J0aW5nIG1vcmUgZXJyb3JzLiBUaGUgZ3Vlc3Ncbm1heSBiZSB3cm9uZy4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZXZlbnRzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNldmVudHMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBFdmVudHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVG8gbGlzdGVuIHRvIGFuIGV2ZW50LCBvdmVycmlkZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9uPGV2ZW50bmFtZT4iKV0pLAogICAgICAgIF92bS5fdigiLiBUaGUgbGlzdCBvZiBzdXBwb3J0ZWQgZXZlbnRzXG5hcmUgYWxzbyBpbiB0aGUgZXhwb3J0ZWQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJFVkVOVFMiKV0pLAogICAgICAgIF92bS5fdigiIGFycmF5LiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNlZSB0aGUgSlNET0MgY29tbWVudHMgaW4gdGhlIHNvdXJjZSBjb2RlIGZvciBhIGRlc2NyaXB0aW9uIG9mIGVhY2ggc3VwcG9ydGVkXG5ldmVudC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwYXJzaW5nLXhtbC1mcmFnbWVudHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3BhcnNpbmcteG1sLWZyYWdtZW50cyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBhcnNpbmcgWE1MIEZyYWdtZW50cyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBYTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBkZWZpbmUgYW55IG1ldGhvZCBieSB3aGljaCB0byBwYXJzZSBYTUxcbmZyYWdtZW50cy4gSG93ZXZlciwgdGhlcmUgYXJlIHVzYWdlIHNjZW5hcmlvcyBpbiB3aGljaCBpdCBpcyBkZXNpcmFibGUgdG8gcGFyc2VcbmZyYWdtZW50cy4gSW4gb3JkZXIgdG8gYWxsb3cgdGhpcywgc2F4ZXMgcHJvdmlkZXMgdGhyZWUgaW5pdGlhbGl6YXRpb24gb3B0aW9ucy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSWYgeW91IHBhc3MgdGhlIG9wdGlvbiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZyYWdtZW50OiB0cnVlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRvIHRoZSBwYXJzZXIgY29uc3RydWN0b3IsIHRoZSBwYXJzZXJcbndpbGwgZXhwZWN0IGFuIFhNTCBmcmFnbWVudC4gSXQgZXNzZW50aWFsbHkgc3RhcnRzIHdpdGggYSBwYXJzaW5nIHN0YXRlXG5lcXVpdmFsZW50IHRvIHRoZSBvbmUgaXQgd291bGQgYmUgaW4gaWYgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCdwYXJzZXIud3JpdGUoIjxmb28iPiknKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaGFkIGJlZW4gY2FsbGVkXG5yaWdodCBhZnRlciBpbml0aWFsaXphdGlvbi4gSW4gb3RoZXIgd29yZHMsIGl0IGV4cGVjdHMgY29udGVudCB3aGljaCBpc1xuYWNjZXB0YWJsZSBpbnNpZGUgYW4gZWxlbWVudC4gVGhpcyBhbHNvIHR1cm5zIG9mZiB3ZWxsLWZvcm1lZG5lc3MgY2hlY2tzIHRoYXRcbmFyZSBpbmFwcHJvcHJpYXRlIHdoZW4gcGFyc2luZyBhIGZyYWdtZW50LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgb3B0aW9uICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYWRkaXRpb25hbE5hbWVzcGFjZXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYWxsb3dzIHlvdSB0byBkZWZpbmUgYWRkaXRpb25hbCBwcmVmaXgtdG8tVVJJXG5iaW5kaW5ncyBrbm93biBiZWZvcmUgcGFyc2luZyBzdGFydHMuIFlvdSB3b3VsZCB1c2UgdGhpcyBvdmVyICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVzb2x2ZVByZWZpeCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpZlxueW91IGhhdmUgYXQgdGhlIHJlYWR5IGEgc2VyaWVzIG9mIG5hbWVzcGFjZXMgYmluZGluZ3MgdG8gdXNlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgb3B0aW9uICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVzb2x2ZVByZWZpeCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBhbGxvd3MgeW91IHRvIHBhc3MgYSBmdW5jdGlvbiB3aGljaCBzYXhlcyB3aWxsIHVzZSBpZlxuaXQgaXMgdW5hYmxlIHRvIHJlc29sdmUgYSBuYW1lc3BhY2UgcHJlZml4IGJ5IGl0c2VsZi4gWW91IHdvdWxkIHVzZSB0aGlzIG92ZXJcbiIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYWRkaXRpb25hbE5hbWVzcGFjZXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaW4gYSBjb250ZXh0IHdoZXJlIGdldHRpbmcgYSBjb21wbGV0ZSBsaXN0IG9mIGRlZmluZWRcbm5hbWVzcGFjZXMgaXMgb25lcm91cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiTm90ZSB0aGF0IHlvdSBjYW4gdXNlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYWRkaXRpb25hbE5hbWVzcGFjZXMiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlc29sdmVQcmVmaXgiKV0pLAogICAgICAgIF92bS5fdigiIHRvZ2V0aGVyIGlmIHlvdVxud2FudC4gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhZGRpdGlvbmFsTmFtZXNwYWNlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgYXBwbGllcyBiZWZvcmUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZXNvbHZlUHJlZml4IildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIG9wdGlvbnMgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhZGRpdGlvbmFsTmFtZXNwYWNlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVzb2x2ZVByZWZpeCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBhcmUgcmVhbGx5IG1lYW50IHRvIGJlXG51c2VkIGZvciBwYXJzaW5nIGZyYWdtZW50cy4gSG93ZXZlciwgc2F4ZXMgd29uJ3QgcHJldmVudCB5b3UgZnJvbSB1c2luZyB0aGVtXG53aXRoICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZnJhZ21lbnQ6IGZhbHNlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBOb3RlIHRoYXQgaWYgeW91IGRvIHRoaXMsIHlvdXIgZG9jdW1lbnQgbWF5IHBhcnNlXG53aXRob3V0IGVycm9ycyBhbmQgeWV0IGJlIG1hbGZvcm1lZCBiZWNhdXNlIHRoZSBkb2N1bWVudCBjYW4gcmVmZXIgdG8gbmFtZXNwYWNlc1xud2hpY2ggYXJlIG5vdCBkZWZpbmVkICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImluIildKSwKICAgICAgICBfdm0uX3YoIiB0aGUgZG9jdW1lbnQuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk9mIGNvdXJzZSwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhZGRpdGlvbmFsTmFtZXNwYWNlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVzb2x2ZVByZWZpeCIpXSksCiAgICAgICAgX3ZtLl92KCIgYXJlIHVzZWQgb25seSBpZiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInhtbG5zIildKSwKICAgICAgICBfdm0uX3YoIlxuaXMgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0cnVlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBJZiB5b3UgYXJlIHBhcnNpbmcgYSBmcmFnbWVudCB0aGF0IGRvZXMgbm90IHVzZSBuYW1lc3BhY2VzLCB0aGVyZSdzXG5ubyBwb2ludCBpbiBzZXR0aW5nIHRoZXNlIG9wdGlvbnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicGVyZm9ybWFuY2UtdGlwcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcGVyZm9ybWFuY2UtdGlwcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBlcmZvcm1hbmNlIFRpcHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJzYXhlcyB3b3JrcyBmYXN0ZXIgb24gZmlsZXMgdGhhdCB1c2UgbmV3bGluZXMgKCIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlxcdTAwMEEiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIikgYXMgZW5kIG9mIGxpbmVcbm1hcmtlcnMgdGhhbiBmaWxlcyB0aGF0IHVzZSBvdGhlciBlbmQgb2YgbGluZSBtYXJrZXJzIChsaWtlICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJcXHIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBvclxuIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiXFxyXFxuIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIpLiBUaGUgWE1MIHNwZWNpZmljYXRpb24gcmVxdWlyZXMgdGhhdCBjb25mb3JtYW50IGFwcGxpY2F0aW9ucyBiZWhhdmVcbmFzIGlmIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIHRvIGJlIHRyZWF0ZWQgYXMgZW5kIG9mIGxpbmUgY2hhcmFjdGVycyBhcmVcbmNvbnZlcnRlZCB0byAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiXFx1MDAwQSIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIHByaW9yIHRvIHBhcnNpbmcuIFRoZSBvcHRpbWFsIGNvZGUgcGF0aCBmb3Igc2F4ZXMgaXMgYVxuZmlsZSBpbiB3aGljaCBhbGwgZW5kIG9mIGxpbmUgY2hhcmFjdGVycyBhcmUgYWxyZWFkeSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiXFx1MDAwQSIpXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRvbid0IHNwbGl0IFVuaWNvZGUgc3RyaW5ncyB5b3UgZmVlZCB0byBzYXhlcyBhY3Jvc3Mgc3Vycm9nYXRlcy4gV2hlbiB5b3Vcbm5haXZlbHkgc3BsaXQgYSBzdHJpbmcgaW4gSmF2YVNjcmlwdCwgeW91IHJ1biB0aGUgcmlzayBvZiBzcGxpdHRpbmcgYSBVbmljb2RlXG5jaGFyYWN0ZXIgaW50byB0d28gc3Vycm9nYXRlcy4gZS5nLiAgSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIlxuZWFjaCBjb250YWluIGhhbGYgb2YgYSBzaW5nbGUgVW5pY29kZSBjaGFyYWN0ZXI6ICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoJ2NvbnN0IGEgPSAiXFx1ezFGNEE5fSJbMF07IGNvbnN0IGIgPSAiXFx1ezFGNEE5fSJbMV0nKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgSWYgeW91IGZlZWQgc3VjaCBzcGxpdCBzdXJyb2dhdGVzIHRvIHZlcnNpb25zIG9mXG5zYXhlcyBwcmlvciB0byA0LCB5b3UnZCBnZXQgZXJyb3JzLiBTYXhlcyB2ZXJzaW9uIDQgYW5kIG92ZXIgYXJlIGFibGUgdG9cbmRldGVjdCB3aGVuIGEgY2h1bmsgb2YgZGF0YSBlbmRzIHdpdGggYSBzdXJyb2dhdGUgYW5kIGNhcnJ5IG92ZXIgdGhlIHN1cnJvZ2F0ZVxudG8gdGhlIG5leHQgY2h1bmsuIEhvd2V2ZXIgdGhpcyBvcGVyYXRpb24gZW50YWlscyBzbGljaW5nIGFuZCBjb25jYXRlbmF0aW5nXG5zdHJpbmdzLiBJZiB5b3UgY2FuIGZlZWQgeW91ciBkYXRhIGluIGEgd2F5IHRoYXQgZG9lcyBub3Qgc3BsaXQgc3Vycm9nYXRlcyxcbnlvdSBzaG91bGQgZG8gaXQuIChPYnZpb3VzbHksIGZlZWRpbmcgYWxsIHRoZSBkYXRhIGF0IG9uY2Ugd2l0aCBhIHNpbmdsZSB3cml0ZVxuaXMgZmFzdGVzdC4pIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRvbid0IHNldCBldmVudCBoYW5kbGVycyB5b3UgZG9uJ3QgbmVlZC4gU2F4ZXMgaGFzIGFsd2F5cyBhaW1lZCB0byBhdm9pZCBkb2luZ1xud29yayB0aGF0IHdpbGwganVzdCBiZSB0b3NzZWQgYXdheSBidXQgZnV0dXJlIGltcHJvdmVtZW50cyBob3BlIHRvIGRvIHRoaXNcbm1vcmUgYWdncmVzc2l2ZWx5LiBPbmUgd2F5IHNheGVzIGtub3dzIHdoZXRoZXIgb3Igbm90IHNvbWUgZGF0YSBpcyBuZWVkZWQgaXNcbmJ5IGNoZWNraW5nIHdoZXRoZXIgYSBoYW5kbGVyIGhhcyBiZWVuIHNldCBmb3IgYSBzcGVjaWZpYyBldmVudC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZmFxIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmYXEiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBGQVEiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJRLiBXaHkgaGFzIHNheGVzIGRyb3BwZWQgc3VwcG9ydCBmb3IgbGltaXRpbmcgdGhlIHNpemUgb2YgZGF0YSBjaHVua3MgcGFzc2VkIHRvXG5ldmVudCBoYW5kbGVycz8iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQS4gV2l0aCBzYXggeW91IGNvdWxkIHNldCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk1BWF9CVUZGRVJfTEVOR1RIIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRvIGNhdXNlIHRoZSBwYXJzZXIgdG8gbGltaXQgdGhlXG5zaXplIG9mIGRhdGEgY2h1bmtzIHBhc3NlZCB0byBldmVudCBoYW5kbGVycy4gU28gaWYgeW91IHJhbiBpbnRvIGEgc3BhbiBvZiB0ZXh0XG5hYm92ZSB0aGUgbGltaXQsIG11bHRpcGxlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidGV4dCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBldmVudHMgd2l0aCBzbWFsbGVyIGRhdGEgY2h1bmtzIHdlcmUgZmlyZWRcbmluc3RlYWQgb2YgYSBzaW5nbGUgZXZlbnQgd2l0aCBhIGxhcmdlIGNodW5rLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhvd2V2ZXIsIHRoYXQgZnVuY3Rpb25hbGl0eSBoYWQgc29tZSBwcm9ibGVtYXRpYyBjaGFyYWN0ZXJpc3RpY3MuIEl0IGhhZCBhblxuYXJiaXRyYXJ5IGRlZmF1bHQgdmFsdWUuIEl0IHdhcyBsaWJyYXJ5LXdpZGUgc28gYWxsIHBhcnNlcnMgY3JlYXRlZCBmcm9tIGFcbnNpbmdsZSBpbnN0YW5jZSBvZiB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzYXgiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgbGlicmFyeSBzaGFyZWQgaXQuIFRoaXMgY291bGQgcG90ZW50aWFsbHkgY2F1c2VcbmNvbmZsaWN0cyBhbW9uZyBsaWJyYXJpZXMgcnVubmluZyBpbiB0aGUgc2FtZSBWTSBidXQgdXNpbmcgc2F4IGZvciBkaWZmZXJlbnRcbnB1cnBvc2VzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXNlIGlzc3VlcyBjb3VsZCBoYXZlIGJlZW4gZWFzaWx5IGZpeGVkLCBidXQgdGhlcmUgd2VyZSBsYXJnZXIgaXNzdWVzLiBUaGVcbmJ1ZmZlciBsaW1pdCBhcmJpdHJhcmlseSBhcHBsaWVkIHRvIHNvbWUgZXZlbnRzIGJ1dCBub3Qgb3RoZXJzLiBJdCB3b3VsZCBzcGxpdFxuIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0ZXh0IildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjZGF0YSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2NyaXB0IildKSwKICAgICAgICBfdm0uX3YoIiBldmVudHMuIEhvd2V2ZXIsIGlmIGEgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb21tZW50IildKSwKICAgICAgICBfdm0uX3YoIixcbiIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZG9jdHlwZSIpXSksCiAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYXR0cmlidXRlIildKSwKICAgICAgICBfdm0uX3YoIiBvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd2VyZSBtb3JlIHRoYW4gdGhlXG5saW1pdCwgdGhlIHBhcnNlciB3b3VsZCBnZW5lcmF0ZSBhbiBlcnJvciBhbmQgeW91IHdlcmUgbGVmdCBwaWNraW5nIHVwIHRoZVxucGllY2VzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IHdhcyBub3QgaW50dWl0aXZlIHRvIHVzZS4gWW91J2QgdGhpbmsgc2V0dGluZyB0aGUgbGltaXQgdG8gMUsgd291bGQgcHJldmVudFxuY2h1bmtzIGJpZ2dlciB0aGFuIDFLIHRvIGJlIHBhc3NlZCB0byBldmVudCBoYW5kbGVycy4gQnV0IHRoYXQgd2FzIG5vdCB0aGVcbmNhc2UuIEEgY29tbWVudCBpbiB0aGUgc291cmNlIGNvZGUgdG9sZCB5b3UgdGhhdCB5b3UgbWlnaHQgZ28gb3ZlciB0aGUgbGltaXQgaWZcbnlvdSBwYXNzZWQgbGFyZ2UgY2h1bmtzIHRvICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid3JpdGUiKV0pLAogICAgICAgIF92bS5fdigiLiBTbyBpZiB5b3Ugd2FudCBhIDFLIGxpbWl0LCBkb24ndCBwYXNzIDY0S1xuY2h1bmtzIHRvICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid3JpdGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIEZhaXIgZW5vdWdoLiBZb3Uga25vdyB3aGF0IGxpbWl0IHlvdSB3YW50IHNvIHlvdSBjYW5cbmNvbnRyb2wgdGhlIHNpemUgb2YgdGhlIGRhdGEgeW91IHBhc3MgdG8gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3cml0ZSIpXSksCiAgICAgICAgX3ZtLl92KCIuIFNvIHlvdSBsaW1pdCB0aGUgY2h1bmtzIHRvXG4iKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndyaXRlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRvIDFLIGF0IGEgdGltZS4gRXZlbiBpZiB5b3UgZG8gdGhpcywgeW91ciBldmVudCBoYW5kbGVycyBtYXkgZ2V0IGRhdGFcbmNodW5rcyB0aGF0IGFyZSAySyBpbiBzaXplLiBTdXBwb3NlIG9uIHRoZSBwcmV2aW91cyAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndyaXRlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRoZSBwYXJzZXIgaGFzXG5qdXN0IGZpbmlzaGVkIHByb2Nlc3NpbmcgYW4gb3BlbiB0YWcsIHNvIGl0IGlzIHJlYWR5IGZvciB0ZXh0LiBZb3VyICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid3JpdGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbnBhc3NlcyAxSyBvZiB0ZXh0LiBZb3UgYXJlIG5vdCBhYm92ZSB0aGUgbGltaXQgeWV0LCBzbyBubyBldmVudCBpcyBnZW5lcmF0ZWRcbnlldC4gVGhlIG5leHQgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3cml0ZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBwYXNzZXMgYW5vdGhlciAxSyBvZiB0ZXh0LiBJdCBzbyBoYXBwZW5zIHRoYXQgc2F4IGNoZWNrc1xuYnVmZmVyIGxpbWl0cyBvbmx5IG9uY2UgcGVyICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid3JpdGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIGFmdGVyIHRoZSBjaHVuayBvZiBkYXRhIGhhcyBiZWVuXG5wcm9jZXNzZWQuIE5vdyB5b3UndmUgaGl0IHRoZSBsaW1pdCBhbmQgeW91IGdldCBhICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidGV4dCIpXSksCiAgICAgICAgX3ZtLl92KCIgZXZlbnQgd2l0aCAySyBvZlxuZGF0YS4gU28gZXZlbiBpZiB5b3UgbGltaXQgeW91ciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndyaXRlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGNhbGxzIHRvIHRoZSBidWZmZXIgbGltaXQgeW91J3ZlIHNldCxcbnlvdSBtYXkgc3RpbGwgZ2V0IGV2ZW50cyB3aXRoIGNodW5rcyBhdCB0d2ljZSB0aGUgYnVmZmVyIHNpemUgbGltaXQgeW91J3ZlXG5zcGVjaWZpZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2UgbWF5IGNvbnNpZGVyIHJlaW5zdGF0aW5nIGFuIGVxdWl2YWxlbnQgZnVuY3Rpb25hbGl0eSwgcHJvdmlkZWQgdGhhdCBpdFxuYWRkcmVzc2VzIHRoZSBpc3N1ZXMgYWJvdmUgYW5kIGRvZXMgbm90IGNhdXNlIGEgaHVnZSBwZXJmb3JtYW5jZSBkcm9wIGZvclxudXNlLWNhc2Ugc2NlbmFyaW9zIHRoYXQgZG9uJ3QgbmVlZCBpdC4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}