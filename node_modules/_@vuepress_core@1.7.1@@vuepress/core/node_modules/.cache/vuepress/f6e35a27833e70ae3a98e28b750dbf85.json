{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/@babel/preset-modules/README.md?vue&type=template&id=3336674e&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/@babel/preset-modules/README.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}