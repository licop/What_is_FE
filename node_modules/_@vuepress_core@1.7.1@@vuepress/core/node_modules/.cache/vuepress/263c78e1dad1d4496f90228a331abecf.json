{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/request-promise-native/README.md?vue&type=template&id=35529c27&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/request-promise-native/README.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiaHR0cDovL3Byb21pc2VzYXBsdXMuY29tLyIgfSB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9wcm9taXNlcy1hcGx1cy5naXRodWIuaW8vcHJvbWlzZXMtc3BlYy9hc3NldHMvbG9nby1zbWFsbC5wbmciLAogICAgICAgICAgICBhbGlnbjogInJpZ2h0IiwKICAgICAgICAgICAgYWx0OiAiUHJvbWlzZXMvQSsgbG9nbyIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJyZXF1ZXN0LXByb21pc2UtbmF0aXZlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZXF1ZXN0LXByb21pc2UtbmF0aXZlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVxdWVzdC1Qcm9taXNlLU5hdGl2ZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL2dpdHRlci5pbS9yZXF1ZXN0L3JlcXVlc3QtcHJvbWlzZT91dG1fc291cmNlPWJhZGdlJnV0bV9tZWRpdW09YmFkZ2UmdXRtX2NhbXBhaWduPXByLWJhZGdlJnV0bV9jb250ZW50PWJhZGdlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvZ2l0dGVyLWpvaW5fY2hhdC1ibHVlLnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSZtYXhBZ2U9MjU5MjAwMCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJHaXR0ZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vdHJhdmlzLWNpLm9yZy9yZXF1ZXN0L3JlcXVlc3QtcHJvbWlzZS1uYXRpdmUiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby90cmF2aXMvcmVxdWVzdC9yZXF1ZXN0LXByb21pc2UtbmF0aXZlL21hc3Rlci5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUmbWF4QWdlPTI1OTIwMDAiLAogICAgICAgICAgICAgICAgYWx0OiAiQnVpbGQgU3RhdHVzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2NvdmVyYWxscy5pby9yL3JlcXVlc3QvcmVxdWVzdC1wcm9taXNlLW5hdGl2ZSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2ltZy5zaGllbGRzLmlvL2NvdmVyYWxscy9yZXF1ZXN0L3JlcXVlc3QtcHJvbWlzZS1uYXRpdmUuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlJm1heEFnZT0yNTkyMDAwIiwKICAgICAgICAgICAgICAgIGFsdDogIkNvdmVyYWdlIFN0YXR1cyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kYXZpZC1kbS5vcmcvcmVxdWVzdC9yZXF1ZXN0LXByb21pc2UtbmF0aXZlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZGF2aWQvcmVxdWVzdC9yZXF1ZXN0LXByb21pc2UtbmF0aXZlLnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSZtYXhBZ2U9MjU5MjAwMCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJEZXBlbmRlbmN5IFN0YXR1cyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvbnBtL3JlcXVlc3QtcHJvbWlzZS1uYXRpdmUiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvbnBtL3JlcXVlc3QtcHJvbWlzZS1uYXRpdmUvYmFkZ2Uuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlJm1heEFnZT0yNTkyMDAwIiwKICAgICAgICAgICAgICAgIGFsdDogIktub3duIFZ1bG5lcmFiaWxpdGllcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJkZXByZWNhdGVkIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNkZXByZWNhdGVkIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEZXByZWNhdGVkISIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBcyBvZiBGZWIgMTF0aCAyMDIwLCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJjb2RlIiwgW192bS5fdigicmVxdWVzdCIpXSksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIGZ1bGx5IGRlcHJlY2F0ZWQuIE5vIG5ldyBjaGFuZ2VzIGFyZSBleHBlY3RlZCB0byBsYW5kLiBJbiBmYWN0LCBub25lIGhhdmUgbGFuZGVkIGZvciBzb21lIHRpbWUuIFRoaXMgcGFja2FnZSBpcyBhbHNvIGRlcHJlY2F0ZWQgYmVjYXVzZSBpdCBkZXBlbmRzIG9uICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVxdWVzdCIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkZ5aSwgaGVyZSBpcyB0aGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9yZXF1ZXN0L3JlcXVlc3QvaXNzdWVzLzMxNDIiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCJyZWFzb25pbmcgb2YgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVxdWVzdCIpXSksCiAgICAgICAgICAgIF92bS5fdigiJ3MgZGVwcmVjYXRpb24iKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgYW5kIGEgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9yZXF1ZXN0L3JlcXVlc3QvaXNzdWVzLzMxNDMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImxpc3Qgb2YgYWx0ZXJuYXRpdmUgbGlicmFyaWVzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIHBhY2thZ2UgaXMgc2ltaWxhciB0byAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVxdWVzdC1wcm9taXNlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImNvZGUiLCBbX3ZtLl92KCJyZXF1ZXN0LXByb21pc2UiKV0pLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgYnV0IHVzZXMgbmF0aXZlIEVTNisgcHJvbWlzZXMuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlBsZWFzZSByZWZlciB0byB0aGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3JlcXVlc3QtcHJvbWlzZSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiIGRvY3VtZW50YXRpb24iKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIEV2ZXJ5dGhpbmcgYXBwbGllcyB0byAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZS1uYXRpdmUiKV0pLAogICAgICAgIF92bS5fdigiIGV4Y2VwdCB0aGUgZm9sbG93aW5nOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkluc3RlYWQgb2YgdXNpbmcgQmx1ZWJpcmQgcHJvbWlzZXMgdGhpcyBsaWJyYXJ5IHVzZXMgbmF0aXZlIEVTNisgcHJvbWlzZXMuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk5hdGl2ZSBFUzYrIHByb21pc2VzIG1heSBoYXZlIGZld2VyIGZlYXR1cmVzIHRoYW4gQmx1ZWJpcmQgcHJvbWlzZXMgZG8uIEluIHBhcnRpY3VsYXIsIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuZmluYWxseSguLi4pIildKSwKICAgICAgICAgIF92bS5fdigiIG1ldGhvZCB3YXMgbm90IGluY2x1ZGVkIHVudGlsIE5vZGUgdjEwLiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaW5zdGFsbGF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNpbnN0YWxsYXRpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEluc3RhbGxhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUaGlzIG1vZHVsZSBpcyBpbnN0YWxsZWQgdmlhIG5wbToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJucG0gaW5zdGFsbCAtLXNhdmUgcmVxdWVzdFxubnBtIGluc3RhbGwgLS1zYXZlIHJlcXVlc3QtcHJvbWlzZS1uYXRpdmVcbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZXF1ZXN0IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIGRlZmluZWQgYXMgYSBwZWVyLWRlcGVuZGVuY3kgYW5kIHRodXMgaGFzIHRvIGJlIGluc3RhbGxlZCBzZXBhcmF0ZWx5LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogIm1pZ3JhdGlvbi1mcm9tLXJlcXVlc3QtcHJvbWlzZS10by1yZXF1ZXN0LXByb21pc2UtbmF0aXZlIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjbWlncmF0aW9uLWZyb20tcmVxdWVzdC1wcm9taXNlLXRvLXJlcXVlc3QtcHJvbWlzZS1uYXRpdmUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgTWlncmF0aW9uIGZyb20gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVxdWVzdC1wcm9taXNlLW5hdGl2ZSIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJHbyB0aHJvdWdoIHRoZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9yZXF1ZXN0L3JlcXVlc3QtcHJvbWlzZSNtaWdyYXRpb24tZnJvbS12My10by12NCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIm1pZ3JhdGlvbiBpbnN0cnVjdGlvbnMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHRvIHVwZ3JhZGUgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiB2NC4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkVuc3VyZSB0aGF0IHlvdSBkb24ndCB1c2UgQmx1ZWJpcmQtc3BlY2lmaWMgZmVhdHVyZXMgb24gdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgeW91ciByZXF1ZXN0IGNhbGxzLiBJbiBwYXJ0aWN1bGFyLCB5b3UgY2FuJ3QgdXNlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5maW5hbGx5KC4uLikiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW55bW9yZS4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIllvdSBhcmUgZG9uZS4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvbnRyaWJ1dGluZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29udHJpYnV0aW5nIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb250cmlidXRpbmciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVG8gc2V0IHVwIHlvdXIgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQ6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJjbG9uZSB0aGUgcmVwbyB0byB5b3VyIGRlc2t0b3AsIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoImluIHRoZSBzaGVsbCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY2QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gdGhlIG1haW4gZm9sZGVyLCIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJoaXQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBpbnN0YWxsIildKSwKICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJoaXQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBpbnN0YWxsIGd1bHAgLWciKV0pLAogICAgICAgICAgX3ZtLl92KCIgaWYgeW91IGhhdmVuJ3QgaW5zdGFsbGVkIGd1bHAgZ2xvYmFsbHkgeWV0LCBhbmQiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigicnVuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJndWxwIGRldiIpXSksCiAgICAgICAgICBfdm0uX3YoIi4gKE9yIHJ1biAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9kZSAuL25vZGVfbW9kdWxlcy8uYmluL2d1bHAgZGV2IildKSwKICAgICAgICAgIF92bS5fdigiIGlmIHlvdSBkb24ndCB3YW50IHRvIGluc3RhbGwgZ3VscCBnbG9iYWxseS4pIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ3VscCBkZXYiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd2F0Y2hlcyBhbGwgc291cmNlIGZpbGVzIGFuZCBpZiB5b3Ugc2F2ZSBzb21lIGNoYW5nZXMgaXQgd2lsbCBsaW50IHRoZSBjb2RlIGFuZCBleGVjdXRlIGFsbCB0ZXN0cy4gVGhlIHRlc3QgY292ZXJhZ2UgcmVwb3J0IGNhbiBiZSB2aWV3ZWQgZnJvbSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi4vY292ZXJhZ2UvbGNvdi1yZXBvcnQvaW5kZXguaHRtbCIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIklmIHlvdSB3YW50IHRvIGRlYnVnIGEgdGVzdCB5b3Ugc2hvdWxkIHVzZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImd1bHAgdGVzdC13aXRob3V0LWNvdmVyYWdlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRvIHJ1biBhbGwgdGVzdHMgd2l0aG91dCBvYnNjdXJpbmcgdGhlIGNvZGUgYnkgdGhlIHRlc3QgY292ZXJhZ2UgaW5zdHJ1bWVudGF0aW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNoYW5nZS1oaXN0b3J5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjaGFuZ2UtaGlzdG9yeSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlIEhpc3RvcnkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInYxLjAuOSAoMjAyMC0wNy0yMSlcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTZWN1cml0eSBmaXg6IGJ1bXBlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZS1jb3JlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB3aGljaCBidW1wcyAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxvZGFzaCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJeNC4xNy4xOSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZm9sbG93aW5nICIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5ucG1qcy5jb20vYWR2aXNvcmllcy8xNTIzIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJ0aGlzIGFkdmlzb3J5IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInYxLjAuOCAoMjAxOS0xMS0wMylcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTZWN1cml0eSBmaXg6IGJ1bXBlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZS1jb3JlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB3aGljaCBidW1wcyAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxvZGFzaCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJeNC4xNy4xNSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIFNlZSAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zbnlrLmlvL3Z1bG4vc2VhcmNoP3E9bG9kYXNoJnR5cGU9bnBtIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJ2dWxuZXJhYmlsdHkgcmVwb3J0cyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIuXG4iKSwKICAgICAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIihUaGFua3MgdG8gQGF3LWRhdmlkc29uIGZvciByZXBvcnRpbmcgdGhpcyBpbiBpc3N1ZSAiKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9yZXF1ZXN0L3JlcXVlc3QtcHJvbWlzZS1uYXRpdmUvaXNzdWVzLzQ5IiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiIzQ5IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX3YoIi4pIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInYxLjAuNyAoMjAxOS0wMi0xNClcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDb3JyZWN0ZWQgbWlzdGFrZW5seSBzZXQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0b3VnaC1jb29raWUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHZlcnNpb24sIG5vdyAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIl4yLjMuMyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIoVGhhbmtzIHRvIEBldm9jYXRldXIgZm9yIHBvaW50aW5nIHRoaXMgb3V0LikiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiSWYgeW91IGluc3RhbGxlZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZS1uYXRpdmVAMS4wLjYiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHBsZWFzZSBtYWtlIHN1cmUgYWZ0ZXIgdGhlIHVwZ3JhZGUgdGhhdCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZS1uYXRpdmUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHVzZSB0aGUgc2FtZSBwaHlzaWNhbCBjb3B5IG9mICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG91Z2gtY29va2llIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInYxLjAuNiAoMjAxOS0wMi0xNClcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJVc2luZyBzdHJpY3RlciAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRvdWdoLWNvb2tpZUB+Mi4zLjMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRvIGF2b2lkIGluc3RhbGxpbmcgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0b3VnaC1jb29raWVAMyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgd2hpY2ggaW50cm9kdWNlcyBicmVha2luZyBjaGFuZ2VzXG4iKSwKICAgICAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIihUaGFua3MgdG8gQGphc29ubWl0IGZvciBwdWxsIHJlcXVlc3QgIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vcmVxdWVzdC9yZXF1ZXN0LXByb21pc2UtbmF0aXZlL3B1bGwvMzMvIiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiIzMzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiU2VjdXJpdHkgZml4OiBidW1wZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsb2Rhc2giKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiXjQuMTcuMTEiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCBzZWUgIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc255ay5pby92dWxuL3NlYXJjaD9xPWxvZGFzaCZ0eXBlPW5wbSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigidnVsbmVyYWJpbHR5IHJlcG9ydHMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigidjEuMC41ICgyMDE3LTA5LTIyKVxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlVwZ3JhZGVkICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG91Z2gtY29va2llIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byBhIHZlcnNpb24gd2l0aG91dCByZWdleCBEb1MgdnVsbmVyYWJpbGl0eVxuIiksCiAgICAgICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIoVGhhbmtzIHRvIEBzb3BoaWVrbG0gZm9yICIpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdC1wcm9taXNlLW5hdGl2ZS9wdWxsLzEzIiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigicHVsbCByZXF1ZXN0ICMxMyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInYxLjAuNCAoMjAxNy0wNS0wNylcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJGaXggdGhhdCBhbGxvd3MgdG8gdXNlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG91Z2gtY29va2llIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBmb3IgIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vcmVxdWVzdC9yZXF1ZXN0LXByb21pc2UjaW5jbHVkZS1hLWNvb2tpZSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiY29va2llIGNyZWF0aW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInYxLjAuMyAoMjAxNi0wOC0wOClcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJSZW5hbWVkIGludGVybmFsbHkgdXNlZCBwYWNrYWdlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQHJlcXVlc3QvcHJvbWlzZS1jb3JlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlcXVlc3QtcHJvbWlzZS1jb3JlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBiZWNhdXNlIHRoZXJlIHdoZXJlICIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdC1wcm9taXNlL2lzc3Vlcy8xMzciLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoInRvbyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vcmVxdWVzdC9yZXF1ZXN0LXByb21pc2UvaXNzdWVzLzE0MSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigibWFueSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaXNzdWVzIHdpdGggdGhlIHNjb3BlZCBwYWNrYWdlIG5hbWUiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInYxLjAuMiAoMjAxNi0wNy0xOClcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkZpeCBmb3IgdXNpbmcgd2l0aCBtb2R1bGUgYnVuZGxlcnMgbGlrZSBXZWJwYWNrIGFuZCBCcm93c2VyaWZ5IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJ2MS4wLjEgKDIwMTYtMDctMTcpXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiRml4ZWQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJAcmVxdWVzdC9wcm9taXNlLWNvcmUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHZlcnNpb24gZm9yIHNhZmVyIHZlcnNpb25pbmciKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoInYxLjAuMCAoMjAxNi0wNy0xNSlcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJJbml0aWFsIHZlcnNpb24gc2ltaWxhciB0byAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVxdWVzdC1wcm9taXNlIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX2MoImNvZGUiLCBbX3ZtLl92KCJyZXF1ZXN0LXByb21pc2UiKV0pLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdjQiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJsaWNlbnNlLWlzYyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbGljZW5zZS1pc2MiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIExpY2Vuc2UgKElTQykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSW4gY2FzZSB5b3UgbmV2ZXIgaGVhcmQgYWJvdXQgdGhlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTQ19saWNlbnNlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJJU0MgbGljZW5zZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgaXQgaXMgZnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gdGhlIE1JVCBsaWNlbnNlLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTZWUgdGhlICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiTElDRU5TRSIgfSB9LCBbX3ZtLl92KCJMSUNFTlNFIGZpbGUiKV0pLAogICAgICAgIF92bS5fdigiIGZvciBkZXRhaWxzLiIpCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}