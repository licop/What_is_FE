{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/css-tree/CHANGELOG.md?vue&type=template&id=16310a80&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/css-tree/CHANGELOG.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h2", { attrs: { id: "_1-0-0-alpha-37-october-22-2019" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-37-october-22-2019" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.37 (October 22, 2019)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Bumped "),
          _c("code", [_vm._v("source-map")]),
          _vm._v(" version to "),
          _c("code", [_vm._v("^0.6.1")]),
          _vm._v(
            " to fix source map generation inconsistency across node.js versions due to mappings sorting bug and v8 moving to "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://v8.dev/blog/array-sort",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("a stable Array#sort"), _c("OutboundLink")],
            1
          ),
          _vm._v(" ("),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/mozilla/source-map/commit/f35a2e4212dd025cb5e1fc219e7ac8a4b96c2cc9",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("fix commit"), _c("OutboundLink")],
            1
          ),
          _vm._v(" in "),
          _c("code", [_vm._v("source-map")]),
          _vm._v(")")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-36-october-13-2019" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-36-october-13-2019" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.36 (October 13, 2019)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Dropped support for Node < 8")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated dev deps (fixed "),
          _c("code", [_vm._v("npm audit")]),
          _vm._v(" issues)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Reworked build pipeline\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Package provides "),
              _c("code", [_vm._v("dist/csstree.js")]),
              _vm._v(" and "),
              _c("code", [_vm._v("dist/csstree.min.js")]),
              _vm._v(" now (instead of single "),
              _c("code", [_vm._v("dist/csstree.js")]),
              _vm._v(" that was a min version)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Bundle size (min version) reduced from 191Kb to 158Kb due to some optimisations"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Definition syntax\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Renamed "),
              _c("code", [_vm._v("grammar")]),
              _vm._v(" into "),
              _c("code", [_vm._v("definitionSyntax")]),
              _vm._v(" (named per spec)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("compact")]),
              _vm._v(" option to "),
              _c("code", [_vm._v("generate()")]),
              _vm._v(" method to avoid formatting (spaces) when possible")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("dump()")]),
              _vm._v(" method to produce syntaxes in compact form by default")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-35-october-7-2019" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-35-october-7-2019" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.35 (October 7, 2019)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Walker\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Changed implementation to avoid runtime compilation due to CSP issues (see #91, #109)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("find()")]),
              _vm._v(", "),
              _c("code", [_vm._v("findLast()")]),
              _vm._v(" and "),
              _c("code", [_vm._v("findAll()")]),
              _vm._v(" methods (e.g. "),
              _c("code", [
                _vm._v(
                  "csstree.find(ast, node => node.type === 'ClassSelector')"
                )
              ]),
              _vm._v(")")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-34-july-27-2019" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-34-july-27-2019" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.34 (July 27, 2019)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Tokenizer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("isBOM()")]),
              _vm._v(" function")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("charCodeCategory()")]),
              _vm._v(" function")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("firstCharOffset()")]),
              _vm._v(" function (use "),
              _c("code", [_vm._v("isBOM()")]),
              _vm._v(" instead)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("CHARCODE")]),
              _vm._v(" dictionary")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("INPUT_STREAM_CODE*")]),
              _vm._v(" dictionaries")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Allowed comments in matching value (just ignore them like whitespaces)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Increased iteration count in value matching from 10k up to 15k"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed missed "),
              _c("code", [_vm._v("debugger")]),
              _vm._v(" (#104)")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-33-july-11-2019" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-33-july-11-2019" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.33 (July 11, 2019)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Fixed low priority productions matching by changing an approach for robust one (#103)"
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-32-july-11-2019" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-32-july-11-2019" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.32 (July 11, 2019)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Fixed low priority productions matching in long "),
              _c("code", [_vm._v("||-")]),
              _vm._v(" and "),
              _c("code", [_vm._v("&&-")]),
              _vm._v(" groups (#103)")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-31-july-11-2019" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-31-july-11-2019" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.31 (July 11, 2019)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Bumped "),
          _c("code", [_vm._v("mdn/data")]),
          _vm._v(" to "),
          _c("code", [_vm._v("2.0.4")]),
          _vm._v(" (#99)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://drafts.csswg.org/css-values-4/#numeric-ranges",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("bracketed range notation"), _c("OutboundLink")],
                1
              ),
              _vm._v(" support and related refactoring")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("<number-zero-one>")]),
              _vm._v(", "),
              _c("code", [_vm._v("<number-one-or-greater>")]),
              _vm._v(" and "),
              _c("code", [_vm._v("<positive-integer>")]),
              _vm._v(
                " from generic types. In fact, types moved to patch, because those types can be expressed in a regular grammar due to bracketed range notation implemented"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added support for multiple token string matching")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Improved "),
              _c("code", [_vm._v("<custom-ident>")]),
              _vm._v(
                " production matching to claim the keyword only if no other unfulfilled production can claim it (#101)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Improved "),
              _c("code", [_vm._v("<length>")]),
              _vm._v(
                ' production matching to claim "unitless zero" only if no other unfulfilled production can claim it'
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Changed lexer's constructor to prevent generic types override when used"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed large "),
              _c("code", [_vm._v("||")]),
              _vm._v("- and "),
              _c("code", [_vm._v("&&")]),
              _vm._v(
                "-group matching, matching continues from the beginning on term match (#85)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed checking that value has "),
              _c("code", [_vm._v("var()")]),
              _vm._v(
                " occurrences when value is a string (such values can't be matched on syntax currently and fail with specific error that can be used for ignorance in validation tools)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed "),
              _c("code", [_vm._v("<declaration-value>")]),
              _vm._v(" and "),
              _c("code", [_vm._v("<any-value>")]),
              _vm._v(
                " matching when a value contains a function, parentheses or braces"
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-30-july-3-2019" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-30-july-3-2019" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.30 (July 3, 2019)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Bumped "),
          _c("code", [_vm._v("mdn/data")]),
          _vm._v(" to "),
          _c("code", [_vm._v("~2.0.3")]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _vm._v("Removed type removals from "),
              _c("code", [_vm._v("mdn/data")]),
              _vm._v(
                " due to lack of some generic types and specific lexer restictions (since lexer was reworked, see below)"
              )
            ]),
            _vm._v(" "),
            _c("li", [_vm._v("Reduced and updated patches")])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Tokenizer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Reworked tokenizer itself to compliment "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://drafts.csswg.org/css-syntax/#tokenization",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("CSS Syntax Module Level 3"), _c("OutboundLink")],
                1
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("Tokenizer")]),
              _vm._v(" class splitted into several abstractions:\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("TokenStream")]),
                  _vm._v(" class")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("OffsetToLocation")]),
                  _vm._v(" class")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("tokenize()")]),
                  _vm._v(" function that creates "),
                  _c("code", [_vm._v("TokenStream")]),
                  _vm._v(" instance for given string or updates a "),
                  _c("code", [_vm._v("TokenStream")]),
                  _vm._v(" instance passed as second parameter")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Removed "),
                  _c("code", [_vm._v("Tokenizer")]),
                  _vm._v(" class")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("Raw")]),
              _vm._v(" token type")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Renamed "),
              _c("code", [_vm._v("Identifier")]),
              _vm._v(" token type to "),
              _c("code", [_vm._v("Ident")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added token types: "),
              _c("code", [_vm._v("Hash")]),
              _vm._v(", "),
              _c("code", [_vm._v("BadString")]),
              _vm._v(", "),
              _c("code", [_vm._v("BadUrl")]),
              _vm._v(", "),
              _c("code", [_vm._v("Delim")]),
              _vm._v(", "),
              _c("code", [_vm._v("Percentage")]),
              _vm._v(", "),
              _c("code", [_vm._v("Dimension")]),
              _vm._v(", "),
              _c("code", [_vm._v("Colon")]),
              _vm._v(", "),
              _c("code", [_vm._v("Semicolon")]),
              _vm._v(", "),
              _c("code", [_vm._v("Comma")]),
              _vm._v(", "),
              _c("code", [_vm._v("LeftSquareBracket")]),
              _vm._v(", "),
              _c("code", [_vm._v("RightSquareBracket")]),
              _vm._v(", "),
              _c("code", [_vm._v("LeftParenthesis")]),
              _vm._v(", "),
              _c("code", [_vm._v("RightParenthesis")]),
              _vm._v(", "),
              _c("code", [_vm._v("LeftCurlyBracket")]),
              _vm._v(", "),
              _c("code", [_vm._v("RightCurlyBracket")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Replaced "),
              _c("code", [_vm._v("Punctuator")]),
              _vm._v(" with "),
              _c("code", [_vm._v("Delim")]),
              _vm._v(
                " token type, that excludes specific characters with its own token type like "
              ),
              _c("code", [_vm._v("Colon")]),
              _vm._v(", "),
              _c("code", [_vm._v("Semicolon")]),
              _vm._v(" etc")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("findCommentEnd")]),
              _vm._v(", "),
              _c("code", [_vm._v("findStringEnd")]),
              _vm._v(", "),
              _c("code", [_vm._v("findDecimalNumberEnd")]),
              _vm._v(", "),
              _c("code", [_vm._v("findNumberEnd")]),
              _vm._v(", "),
              _c("code", [_vm._v("findEscapeEnd")]),
              _vm._v(", "),
              _c("code", [_vm._v("findIdentifierEnd")]),
              _vm._v(" and "),
              _c("code", [_vm._v("findUrlRawEnd")]),
              _vm._v(" helper function")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("SYMBOL_TYPE")]),
              _vm._v(", "),
              _c("code", [_vm._v("PUNCTUATION")]),
              _vm._v(" and "),
              _c("code", [_vm._v("STOP_URL_RAW")]),
              _vm._v(" dictionaries")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("isDigit")]),
              _vm._v(", "),
              _c("code", [_vm._v("isHexDigit")]),
              _vm._v(", "),
              _c("code", [_vm._v("isUppercaseLetter")]),
              _vm._v(", "),
              _c("code", [_vm._v("isLowercaseLetter")]),
              _vm._v(", "),
              _c("code", [_vm._v("isLetter")]),
              _vm._v(", "),
              _c("code", [_vm._v("isNonAscii")]),
              _vm._v(", "),
              _c("code", [_vm._v("isNameStart")]),
              _vm._v(", "),
              _c("code", [_vm._v("isName")]),
              _vm._v(", "),
              _c("code", [_vm._v("isNonPrintable")]),
              _vm._v(", "),
              _c("code", [_vm._v("isNewline")]),
              _vm._v(", "),
              _c("code", [_vm._v("isWhiteSpace")]),
              _vm._v(", "),
              _c("code", [_vm._v("isValidEscape")]),
              _vm._v(", "),
              _c("code", [_vm._v("isIdentifierStart")]),
              _vm._v(", "),
              _c("code", [_vm._v("isNumberStart")]),
              _vm._v(", "),
              _c("code", [_vm._v("consumeEscaped")]),
              _vm._v(", "),
              _c("code", [_vm._v("consumeName")]),
              _vm._v(", "),
              _c("code", [_vm._v("consumeNumber")]),
              _vm._v(" and "),
              _c("code", [_vm._v("consumeBadUrlRemnants")]),
              _vm._v(" helper functions")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parser\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Changed parsing algorithms to work with new token type set"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("HexColor")]),
              _vm._v(
                " consumption in way to relax checking a value, i.e. now "
              ),
              _c("code", [_vm._v("value")]),
              _vm._v(" is a sequence of one or more name chars")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("&")]),
              _vm._v(" as a property hack")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Relaxed "),
              _c("code", [_vm._v("var()")]),
              _vm._v(
                " parsing to only check that a first arguments is an identifier (not a custom property name as before)"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Reworked syntax matching to relay on token set only (having AST is optional now)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Extended "),
              _c("code", [_vm._v("Lexer#match()")]),
              _vm._v(", "),
              _c("code", [_vm._v("Lexer#matchType()")]),
              _vm._v(" and "),
              _c("code", [_vm._v("Lexer#matchProperty()")]),
              _vm._v(
                " methods to take a string as value, beside AST as a value"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Extended "),
              _c("code", [_vm._v("Lexer#match()")]),
              _vm._v(
                " method to take a string as a syntax, beside of syntax descriptor"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Reworked generic types:\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Removed "),
                  _c("code", [_vm._v("<attr()>")]),
                  _vm._v(", "),
                  _c("code", [_vm._v("<url>")]),
                  _vm._v(" (moved to patch) and "),
                  _c("code", [_vm._v("<progid>")]),
                  _vm._v(" types")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added types:\n"),
                  _c("ul", [
                    _c("li", [
                      _vm._v("Related to token types: "),
                      _c("code", [_vm._v("<ident-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<function-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<at-keyword-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<hash-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<string-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<bad-string-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<url-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<bad-url-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<delim-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<number-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<percentage-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<dimension-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<whitespace-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<CDO-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<CDC-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<colon-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<semicolon-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<comma-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<[-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<]-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<(-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<)-token>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<{-token>")]),
                      _vm._v(" and "),
                      _c("code", [_vm._v("<}-token>")])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Complex types: "),
                      _c("code", [_vm._v("<an-plus-b>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<urange>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<custom-property-name>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<declaration-value>")]),
                      _vm._v(", "),
                      _c("code", [_vm._v("<any-value>")]),
                      _vm._v(" and "),
                      _c("code", [_vm._v("<zero>")])
                    ])
                  ])
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Renamed "),
                  _c("code", [_vm._v("<unicode-range>")]),
                  _vm._v(" to "),
                  _c("code", [_vm._v("<urange>")]),
                  _vm._v(" as per spec")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Renamed "),
                  _c("code", [_vm._v("<expression>")]),
                  _vm._v(" (IE legacy extension) to "),
                  _c("code", [_vm._v("<-ms-legacy-expression>")]),
                  _vm._v(" and may to be removed in next releases")
                ])
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-29-may-30-2018" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-29-may-30-2018" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.29 (May 30, 2018)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Syntax matching was completely reworked. Now it's token-based and uses state machine. Public API has not changed. However, some internal data structures have changed. Most significal change in syntax match result tree structure, it's became token-based instead of node-based."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Grammar\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Changed grammar tree format:\n"),
                  _c("ul", [
                    _c("li", [
                      _vm._v("Added "),
                      _c("code", [_vm._v("Token")]),
                      _vm._v(" node type to represent a single code point ("),
                      _c("code", [_vm._v("<delim-token>")]),
                      _vm._v(")")
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Added "),
                      _c("code", [_vm._v("Multiplier")]),
                      _vm._v(" that wraps a single node ("),
                      _c("code", [_vm._v("term")]),
                      _vm._v(" property)")
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Added "),
                      _c("code", [_vm._v("AtKeyword")]),
                      _vm._v(" to represent "),
                      _c("code", [_vm._v("<at-keyword-token>")])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Removed "),
                      _c("code", [_vm._v("Slash")]),
                      _vm._v(" and "),
                      _c("code", [_vm._v("Percent")]),
                      _vm._v(" node types, they are replaced for a node with "),
                      _c("code", [_vm._v("Token")]),
                      _vm._v(" type")
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Changed "),
                      _c("code", [_vm._v("Function")]),
                      _vm._v(" to represent "),
                      _c("code", [_vm._v("<function-token>")]),
                      _vm._v(" with no children")
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Removed "),
                      _c("code", [_vm._v("multiplier")]),
                      _vm._v(" property from "),
                      _c("code", [_vm._v("Group")])
                    ])
                  ])
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Changed "),
                  _c("code", [_vm._v("generate()")]),
                  _vm._v(" method:\n"),
                  _c("ul", [
                    _c("li", [
                      _vm._v("Method takes an "),
                      _c("code", [_vm._v("options")]),
                      _vm._v(" as second argument now ("),
                      _c("code", [
                        _vm._v("generate(node, forceBraces, decorator)")
                      ]),
                      _vm._v(" -> "),
                      _c("code", [_vm._v("generate(node, options)")]),
                      _vm._v("). Two options are supported: "),
                      _c("code", [_vm._v("forceBraces")]),
                      _vm._v(" and "),
                      _c("code", [_vm._v("decorator")])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v(
                        "When a second parameter is a function it treats as "
                      ),
                      _c("code", [_vm._v("decorate")]),
                      _vm._v(" option value, i.e. "),
                      _c("code", [_vm._v("generate(node, fn)")]),
                      _vm._v(" -> "),
                      _c("code", [_vm._v("generate(node, { decorate: fn })")])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v(
                        "Decorate function invokes with additional parameter – a reference to a node"
                      )
                    ])
                  ])
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Tokenizer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Renamed "),
              _c("code", [_vm._v("Atrule")]),
              _vm._v(" const to "),
              _c("code", [_vm._v("AtKeyword")])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-28-february-19-2018" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-28-february-19-2018" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.28 (February 19, 2018)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Renamed "),
          _c("code", [_vm._v("lexer.grammar.translate()")]),
          _vm._v(" method into "),
          _c("code", [_vm._v("generate()")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<'-webkit-font-smoothing'>")]),
          _vm._v(" and "),
          _c("code", [_vm._v("<'-moz-osx-font-smoothing'>")]),
          _vm._v(" syntaxes (#75)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added vendor keywords for "),
          _c("code", [_vm._v("<'overflow'>")]),
          _vm._v(" property syntax (#76)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Pinned "),
          _c("code", [_vm._v("mdn-data")]),
          _vm._v(" to "),
          _c("code", [_vm._v("~1.1.0")]),
          _vm._v(" and fixed issues with some updated property syntaxes")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-27-january-14-2018" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-27-january-14-2018" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.27 (January 14, 2018)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Generator\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Changed node's "),
              _c("code", [_vm._v("generate()")]),
              _vm._v(
                " methods invocation, methods now take a node as a single argument and context (i.e. "
              ),
              _c("code", [_vm._v("this")]),
              _vm._v(") that have methods: "),
              _c("code", [_vm._v("chunk()")]),
              _vm._v(", "),
              _c("code", [_vm._v("node()")]),
              _vm._v(" and "),
              _c("code", [_vm._v("children()")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Renamed "),
              _c("code", [_vm._v("translate()")]),
              _vm._v(" to "),
              _c("code", [_vm._v("generate()")]),
              _vm._v(" and changed to take "),
              _c("code", [_vm._v("options")]),
              _vm._v(" argument")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("translateMarkup(ast, enter, leave)")]),
              _vm._v(" method, use "),
              _c("code", [
                _vm._v("generate(ast, { decorator: (handlers) => { ... }})")
              ]),
              _vm._v(" instead")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("translateWithSourceMap(ast)")]),
              _vm._v(", use "),
              _c("code", [_vm._v("generate(ast, { sourceMap: true })")]),
              _vm._v(" instead")
            ]),
            _vm._v(" "),
            _c("li", [_vm._v("Changed to support for children as an array")])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Walker\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("walk()")]),
              _vm._v(" to take an "),
              _c("code", [_vm._v("options")]),
              _vm._v(" argument instead of handler, with "),
              _c("code", [_vm._v("enter")]),
              _vm._v(", "),
              _c("code", [_vm._v("leave")]),
              _vm._v(", "),
              _c("code", [_vm._v("visit")]),
              _vm._v(" and "),
              _c("code", [_vm._v("reverse")]),
              _vm._v(" options ("),
              _c("code", [_vm._v("walk(ast, fn)")]),
              _vm._v(" is still works and equivalent to "),
              _c("code", [_vm._v("walk(ast, { enter: fn })")]),
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("walkUp(ast, fn)")]),
              _vm._v(", use "),
              _c("code", [_vm._v("walk(ast, { leave: fn })")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("walkRules(ast, fn)")]),
              _vm._v(", use "),
              _c("code", [_vm._v("walk(ast, { visit: 'Rule', enter: fn })")]),
              _vm._v(" instead")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("walkRulesRight(ast, fn)")]),
              _vm._v(", use "),
              _c("code", [
                _vm._v("walk(ast, { visit: 'Rule', reverse: true, enter: fn })")
              ]),
              _vm._v(" instead")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("walkDeclarations(ast, fn)")]),
              _vm._v(", use "),
              _c("code", [
                _vm._v("walk(ast, { visit: 'Declaration', enter: fn })")
              ]),
              _vm._v(" instead")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Changed to support for children as array in most cases ("
              ),
              _c("code", [_vm._v("reverse: true")]),
              _vm._v(" will fail on arrays since they have no "),
              _c("code", [_vm._v("forEachRight()")]),
              _vm._v(" method)")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Misc\n"),
          _c("ul", [
            _c("li", [
              _vm._v("List\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("List#forEach()")]),
                  _vm._v(" method")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("List#forEachRight()")]),
                  _vm._v(" method")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("List#filter()")]),
                  _vm._v(" method")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Changed "),
                  _c("code", [_vm._v("List#map()")]),
                  _vm._v(" method to return a "),
                  _c("code", [_vm._v("List")]),
                  _vm._v(" instance instead of "),
                  _c("code", [_vm._v("Array")])
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("List#push()")]),
                  _vm._v(" method, similar to "),
                  _c("code", [_vm._v("List#appendData()")]),
                  _vm._v(" but returns nothing")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("List#pop()")]),
                  _vm._v(" method")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("List#unshift()")]),
                  _vm._v(" method, similar to "),
                  _c("code", [_vm._v("List#prependData()")]),
                  _vm._v(" but returns nothing")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("List#shift()")]),
                  _vm._v(" method")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("List#prependList()")]),
                  _vm._v(" method")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Changed "),
                  _c("code", [_vm._v("List#insert()")]),
                  _vm._v(", "),
                  _c("code", [_vm._v("List#insertData()")]),
                  _vm._v(", "),
                  _c("code", [_vm._v("List#appendList()")]),
                  _vm._v(" and "),
                  _c("code", [_vm._v("List#insertList()")]),
                  _vm._v(
                    " methods to return a list that performed an operation"
                  )
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("keyword()")]),
              _vm._v(" method\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Changed "),
                  _c("code", [_vm._v("name")]),
                  _vm._v(" field to include a vendor prefix")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("basename")]),
                  _vm._v(" field to contain a name without a vendor prefix")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("custom")]),
                  _vm._v(" field that contain a "),
                  _c("code", [_vm._v("true")]),
                  _vm._v(" when keyword is a custom property reference")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("property()")]),
              _vm._v(" method\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Changed "),
                  _c("code", [_vm._v("name")]),
                  _vm._v(" field to include a vendor prefix")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("basename")]),
                  _vm._v(
                    " field to contain a name without any prefixes, i.e. a hack and a vendor prefix"
                  )
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("vendorPrefix()")]),
              _vm._v(" method")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("isCustomProperty()")]),
              _vm._v(" method")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha-26-november-9-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha-26-november-9-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha.26 (November 9, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Tokenizer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Tokenizer#isBalanceEdge()")]),
              _vm._v(" method")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("Tokenizer.endsWith()")]),
              _vm._v(" method")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parser\n"),
          _c("ul", [
            _c("li", [_vm._v("Made the parser tolerant to errors by default")]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("tolerant")]),
              _vm._v(" parser option (no parsing modes anymore)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("property")]),
              _vm._v(
                " parser option (a value parsing does not depend on property name anymore)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Canceled error for a handing semicolon in a block")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Canceled error for unclosed "),
              _c("code", [_vm._v("Brackets")]),
              _vm._v(", "),
              _c("code", [_vm._v("Function")]),
              _vm._v(" and "),
              _c("code", [_vm._v("Parentheses")]),
              _vm._v(" when EOF is reached")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Fixed error when prelude ends with a comment for at-rules with custom prelude consumer"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Relaxed at-rule parsing:\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Canceled error when EOF is reached after a prelude")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v(
                    "Canceled error for an at-rule with custom block consumer when at-rule has no block (just don't apply consumer in that case)"
                  )
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v(
                    "Canceled error on at-rule parsing when it occurs outside prelude or block (at-rule is converting to "
                  ),
                  _c("code", [_vm._v("Raw")]),
                  _vm._v(" node)")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v(
                    "Allowed for any at-rule to have a prelude and a block, even if it's invalid per at-rule syntax (the responsibility for this check is moved to lexer, since it's possible to construct a AST with such errors)"
                  )
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Made a declaration value a safe parsing point (i.e. error on value parsing lead to a value is turning into "
              ),
              _c("code", [_vm._v("Raw")]),
              _vm._v(" node, not a declaration as before)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Excluded surrounding white spaces and comments from a "),
              _c("code", [_vm._v("Raw")]),
              _vm._v(" node that represents a declaration value")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("Value")]),
              _vm._v(" parse handler to return a node only with type "),
              _c("code", [_vm._v("Value")]),
              _vm._v(" (previously it returned a "),
              _c("code", [_vm._v("Raw")]),
              _vm._v(" node in some cases)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed issue with "),
              _c("code", [_vm._v("onParseError()")]),
              _vm._v(
                " is not invoked for errors occured on selector or declaration value parsing in some cases"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed using of "),
              _c("code", [_vm._v("onParseError()")]),
              _vm._v(" to stop parsing if handler throws an exception")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("grammar.walk()")]),
              _vm._v(
                " to invoke passed handler on entering to node rather than on leaving the node"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Improved "),
              _c("code", [_vm._v("grammar.walk()")]),
              _vm._v(" to take a walk handler pair as an object, i.e. "),
              _c("code", [_vm._v("walk(node, { enter: fn, leave: fn })")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("Lexer#match*()")]),
              _vm._v(" methods to take a node of any type, but with a "),
              _c("code", [_vm._v("children")]),
              _vm._v(" field")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Lexer#match(syntax, node)")]),
              _vm._v(" method")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed "),
              _c("code", [_vm._v("Lexer#matchType()")]),
              _vm._v(
                " method to stop return a positive result for the CSS wide keywords"
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha25-october-9-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha25-october-9-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha25 (October 9, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parser\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added fallback node as argument to "),
              _c("code", [_vm._v("onParseError()")]),
              _vm._v(" handler")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Fixed raw consuming in tolerant mode when selector is invalid (greedy consuming and redundant warnings)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Fixed exception in tolerant mode caused by unknown at-rule with unclosed block"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed handling of semicolons:\n"),
              _c("ul", [
                _c("li", [
                  _vm._v(
                    "Hanging semicolon inside declaration blocks raise an error or turns into a "
                  ),
                  _c("code", [_vm._v("Raw")]),
                  _vm._v(" node in tolerant mode instead of being ignored")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Semicolon outside of declaration blocks opens a "),
                  _c("code", [_vm._v("Rule")]),
                  _vm._v(" node as part of selector instead of being ignored")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Aligned "),
              _c("code", [_vm._v("parseAtrulePrelude")]),
              _vm._v(" behaviour to "),
              _c("code", [_vm._v("parseRulePrelude")]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _vm._v("Removed "),
                  _c("code", [_vm._v("Raw")]),
                  _vm._v(" node wraping into "),
                  _c("code", [_vm._v("AtrulePrelude")]),
                  _vm._v(" when "),
                  _c("code", [_vm._v("parseAtrulePrelude")]),
                  _vm._v(" is disabled")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v(
                    "Removed error emitting when at-rule has a custom prelude customer but no prelude is found (it should be validated by a lexer later)"
                  )
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Generator\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Fixed performance issue with "),
              _c("code", [_vm._v("translateWithSourceMap()")]),
              _vm._v(
                ", flattening the string (because of mixing building string and indexing into it) turned it into a quadratic algorithm (approximate numbers can be found in "
              ),
              _c(
                "a",
                {
                  attrs: {
                    href:
                      "https://gist.github.com/lahmatiy/ea25d0e623d88ca9848384b5707d52d9",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("the quiz created by this case"), _c("OutboundLink")],
                1
              ),
              _vm._v(")")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added support for a single solidus hack for "),
          _c("code", [_vm._v("property()")])
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Minor fixes for custom errors")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha24-september-14-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha24-september-14-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha24 (September 14, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Improved CSSTree to be stable for standart build-in objects extension (#58)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parser\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Renamed rule's "),
              _c("code", [_vm._v("selector")]),
              _vm._v(" to "),
              _c("code", [_vm._v("prelude")]),
              _vm._v(". The reasons: "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://www.w3.org/TR/css-syntax-3/#qualified-rule",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("spec names this part so"), _c("OutboundLink")],
                1
              ),
              _vm._v(", and this branch can contain not only a selector ("),
              _c("code", [_vm._v("SelectorList")]),
              _vm._v(") but also a raw payload ("),
              _c("code", [_vm._v("Raw")]),
              _vm._v("). What's changed:\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Renamed "),
                  _c("code", [_vm._v("Rule.selector")]),
                  _vm._v(" to "),
                  _c("code", [_vm._v("Rule.prelude")])
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Renamed "),
                  _c("code", [_vm._v("parseSelector")]),
                  _vm._v(" parser option to "),
                  _c("code", [_vm._v("parseRulePrelude")])
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Removed option for selector parse in "),
                  _c("code", [_vm._v("SelectorList")])
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Fixed undefined positions in a error when match a syntax to empty or white space only value"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Improved "),
              _c("code", [_vm._v("Lexer#checkStructure()")]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _vm._v(
                    "Return a warning as an object with node reference and message"
                  )
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v(
                    "No exception on unknown node type, return a warning instead"
                  )
                ])
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha23-september-10-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha23-september-10-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha23 (September 10, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("Tokenizer#getRawLength()")]),
          _vm._v(
            "'s false positive balance match to the end of input in some cases (#56)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rename walker's entry point methods to be the same as CSSTree exposed methods (i.e. "
          ),
          _c("code", [_vm._v("walk()")]),
          _vm._v(", "),
          _c("code", [_vm._v("walkUp()")]),
          _vm._v(" etc)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Rename at-rule's "),
          _c("code", [_vm._v("expression")]),
          _vm._v(" to "),
          _c("code", [_vm._v("prelude")]),
          _vm._v(" (since "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.w3.org/TR/css-syntax-3/#at-rule",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("spec names it so"), _c("OutboundLink")],
            1
          ),
          _vm._v(")\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("AtruleExpression")]),
              _vm._v(" node type → "),
              _c("code", [_vm._v("AtrulePrelude")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("Atrule.expression")]),
              _vm._v(" field → "),
              _c("code", [_vm._v("Atrule.prelude")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("parseAtruleExpression")]),
              _vm._v(" parser's option → "),
              _c("code", [_vm._v("parseAtrulePrelude")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("atruleExpression")]),
              _vm._v(" parse context → "),
              _c("code", [_vm._v("atrulePrelude")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("atruleExpression")]),
              _vm._v(" walk context reference → "),
              _c("code", [_vm._v("atrulePrelude")])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha22-september-8-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha22-september-8-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha22 (September 8, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parser\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Fixed exception on parsing of unclosed "),
              _c("code", [_vm._v("{}-block")]),
              _vm._v(" in tolerant mode")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added tolerant mode support for "),
              _c("code", [_vm._v("DeclarationList")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Added standalone entry point, i.e. default parser can be used via "
              ),
              _c("code", [_vm._v("require('css-tree/lib/parser')")]),
              _vm._v(" (#47)")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Generator\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Changed generator to produce "),
              _c("code", [_vm._v("+n")]),
              _vm._v(" when "),
              _c("code", [_vm._v("AnPlusB.a")]),
              _vm._v(" is "),
              _c("code", [_vm._v("+1")]),
              _vm._v(' to be "round-trip" with parser')
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Added standalone entry point, i.e. default generators can be used via "
              ),
              _c("code", [_vm._v("require('css-tree/lib/generator')")])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Walker\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Added standalone entry point, i.e. default walkers can be used via "
              ),
              _c("code", [_vm._v("require('css-tree/lib/walker')")]),
              _vm._v(" (#47)")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("default")]),
              _vm._v(" keyword to the list of invalid values for "),
              _c("code", [_vm._v("<custom-ident>")]),
              _vm._v(" (since it reversed per "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://www.w3.org/TR/css-values/#custom-idents",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("spec"), _c("OutboundLink")],
                1
              ),
              _vm._v(")")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Convertors ("),
          _c("code", [_vm._v("toPlainObject()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("fromPlainObject()")]),
          _vm._v(") moved to "),
          _c("code", [_vm._v("lib/convertor")]),
          _vm._v(" (entry point is "),
          _c("code", [_vm._v("require('css-tree/lib/convertor')")]),
          _vm._v(")")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha21-september-5-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha21-september-5-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha21 (September 5, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Tokenizer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Raw")]),
              _vm._v(" token type")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Improved tokenization of "),
              _c("code", [_vm._v("url()")]),
              _vm._v(" with raw as url to be more spec complient")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Tokenizer#balance")]),
              _vm._v(" array computation on token layout")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Tokenizer#getRawLength()")]),
              _vm._v(" to compute a raw length with respect of block balance")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Tokenizer#getTokenStart(offset)")]),
              _vm._v(" method to get token start offset by token index")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("idx")]),
              _vm._v(" and "),
              _c("code", [_vm._v("balance")]),
              _vm._v(" fields to each token of "),
              _c("code", [_vm._v("Tokenizer#dump()")]),
              _vm._v(" method result")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parser\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("onParseError")]),
              _vm._v(" option")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Reworked node parsers that consume a "),
              _c("code", [_vm._v("Raw")]),
              _vm._v(" node to use a new approach. Since now a "),
              _c("code", [_vm._v("Raw")]),
              _vm._v(" node builds in "),
              _c("code", [_vm._v("parser#Raw()")]),
              _vm._v(" function only")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed semantic of "),
              _c("code", [_vm._v("parser#Raw()")]),
              _vm._v(
                ", it takes 5 parameters now (it might to be changed in future)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("parser#tolerantParse()")]),
              _vm._v(
                " to pass a start token index to fallback function instead of source offset"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed "),
              _c("code", [_vm._v("AtruleExpression")]),
              _vm._v(" consuming in tolerant mode")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Atrule handler to convert an empty "),
              _c("code", [_vm._v("AtruleExpression")]),
              _vm._v(" node into "),
              _c("code", [_vm._v("null")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("AtruleExpression")]),
              _vm._v(
                " handler to always return a node (before it could return a "
              ),
              _c("code", [_vm._v("null")]),
              _vm._v(" in some cases)")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Fixed comma match node for "),
              _c("code", [_vm._v("#")]),
              _vm._v(" multiplier")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added reference name to "),
              _c("code", [_vm._v("SyntaxReferenceError")])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Additional fixes on custom errors")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Reduced possible corruption of base config by "),
          _c("code", [_vm._v("syntax.fork()")])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha20-august-28-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha20-august-28-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha20 (August 28, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Tokenizer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Atrule")]),
              _vm._v(" token type ("),
              _c("code", [_vm._v("<at-rule-token>")]),
              _vm._v(" per spec)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Function")]),
              _vm._v(" token type ("),
              _c("code", [_vm._v("<function-token>")]),
              _vm._v(" per spec)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("Url")]),
              _vm._v(" token type")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Replaced "),
              _c("code", [_vm._v("Tokenizer#getTypes()")]),
              _vm._v(" method with "),
              _c("code", [_vm._v("Tokenizer#dump()")]),
              _vm._v(" to get all tokens as an array")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Renamed "),
              _c("code", [_vm._v("Tokenizer.TYPE.Whitespace")]),
              _vm._v(" to "),
              _c("code", [_vm._v("Tokenizer.TYPE.WhiteSpace")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Renamed "),
              _c("code", [_vm._v("Tokenizer.findWhitespaceEnd()")]),
              _vm._v(" to "),
              _c("code", [_vm._v("Tokenizer.findWhiteSpaceEnd()")])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parser\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Added initial implementation of tollerant mode (turn on by passing "
              ),
              _c("code", [_vm._v("tolerant: true")]),
              _vm._v(
                " option). In this mode parse errors are never occour and any invalid part of CSS turns into a "
              ),
              _c("code", [_vm._v("Raw")]),
              _vm._v(" node. Current safe points: "),
              _c("code", [_vm._v("Atrule")]),
              _vm._v(", "),
              _c("code", [_vm._v("AtruleExpression")]),
              _vm._v(", "),
              _c("code", [_vm._v("Rule")]),
              _vm._v(", "),
              _c("code", [_vm._v("Selector")]),
              _vm._v(" and "),
              _c("code", [_vm._v("Declaration")]),
              _vm._v(
                ". Feature is experimental and further improvements are planned."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("Atrule.expression")]),
              _vm._v(" to contain a "),
              _c("code", [_vm._v("AtruleExpression")]),
              _vm._v(" node or "),
              _c("code", [_vm._v("null")]),
              _vm._v(" only (other node types is wrapping into a "),
              _c("code", [_vm._v("AtruleExpression")]),
              _vm._v(" node)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Renamed "),
              _c("code", [_vm._v("AttributeSelector.operator")]),
              _vm._v(" to "),
              _c("code", [_vm._v("AttributeSelector.matcher")])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Generator\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("translate()")]),
              _vm._v(
                " method is now can take a function as second argument, that recieves every generated chunk. When no function is passed, default handler is used, it concats all the chunks and method returns a string."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Used "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://github.com/mdn/data",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("mdn/data"), _c("OutboundLink")],
                1
              ),
              _vm._v(
                " package as source of lexer's grammar instead of local dictionaries"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("x")]),
              _vm._v(" unit to "),
              _c("code", [_vm._v("<resolution>")]),
              _vm._v(" generic type")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Improved match tree:\n"),
              _c("ul", [
                _c("li", [_vm._v("Omited Group (sequences) match nodes")]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Omited empty match nodes (for terms with "),
                  _c("code", [_vm._v("zero or more")]),
                  _vm._v(" multipliers)")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("ASTNode")]),
                  _vm._v(" node type to contain a reference to AST node")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v(
                    "Fixed node duplication (uncompleted match were added to tree)"
                  )
                ]),
                _vm._v(" "),
                _c("li", [_vm._v("Added AST node reference in match nodes")]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added comma match node by "),
                  _c("code", [_vm._v("#")]),
                  _vm._v(" multiplier")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Grammar\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Changed "),
                  _c("code", [_vm._v("translate()")]),
                  _vm._v(
                    " function to get a handler as third argument (optional). That handler recieves result of node traslation and can be used for decoration purposes. See "
                  ),
                  _c(
                    "a",
                    {
                      attrs: {
                        href:
                          "https://github.com/csstree/docs/blob/04c65af44477b5ea05feb373482898122b2a4528/docs/syntax.html#L619-L627",
                        target: "_blank",
                        rel: "noopener noreferrer"
                      }
                    },
                    [_vm._v("example"), _c("OutboundLink")],
                    1
                  )
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("SyntaxParseError")]),
                  _vm._v(" to grammar export")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v(
                    "Reworked group and multipliers representation in syntax tree:\n"
                  ),
                  _c("ul", [
                    _c("li", [
                      _vm._v("Replaced "),
                      _c("code", [_vm._v("Sequence")]),
                      _vm._v(" for "),
                      _c("code", [_vm._v("Group")]),
                      _vm._v(" node type ("),
                      _c("code", [_vm._v("Sequence")]),
                      _vm._v(" node type removed)")
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Added "),
                      _c("code", [_vm._v("explicit")]),
                      _vm._v(" boolean property for "),
                      _c("code", [_vm._v("Group")])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v(
                        "Only groups can have a multiplier now (other node types is wrapping into a single term implicit group when multiplier is applied)"
                      )
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Renamed "),
                      _c("code", [_vm._v("nonEmpty")]),
                      _vm._v(" Group's property to "),
                      _c("code", [_vm._v("disallowEmpty")])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v(
                        "Added optimisation for syntax tree by dropping redundant root "
                      ),
                      _c("code", [_vm._v("Group")]),
                      _vm._v(" when it contains a single "),
                      _c("code", [_vm._v("Group")]),
                      _vm._v(" term (return this "),
                      _c("code", [_vm._v("Group")]),
                      _vm._v(" as a result)")
                    ])
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed lexer's match functionality\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Changed "),
                  _c("code", [_vm._v("Lexer#matchProperty()")]),
                  _vm._v(" and "),
                  _c("code", [_vm._v("Lexer#matchType()")]),
                  _vm._v(
                    " to return an object instead of match tree. A match tree stores in "
                  ),
                  _c("code", [_vm._v("matched")]),
                  _vm._v(
                    " field when AST is matched to grammar successfully, otherwise an error in "
                  ),
                  _c("code", [_vm._v("error")]),
                  _vm._v(
                    " field. The result object also has some methods to test AST node against a match tree: "
                  ),
                  _c("code", [_vm._v("getTrace()")]),
                  _vm._v(", "),
                  _c("code", [_vm._v("isType()")]),
                  _vm._v(", "),
                  _c("code", [_vm._v("isProperty()")]),
                  _vm._v(" and "),
                  _c("code", [_vm._v("isKeyword()")])
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Added "),
                  _c("code", [_vm._v("Lexer#matchDeclaration()")]),
                  _vm._v(" method")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Removed "),
                  _c("code", [_vm._v("Lexer#lastMatchError")]),
                  _vm._v(" (error stores in match result object in "),
                  _c("code", [_vm._v("error")]),
                  _vm._v(" field)")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Added initial implementation of search for AST segments (new lexer methods: "
              ),
              _c("code", [_vm._v("Lexer#findValueSegments()")]),
              _vm._v(", "),
              _c("code", [_vm._v("Lexer#findDeclarationValueSegments()")]),
              _vm._v(" and "),
              _c("code", [_vm._v("Lexer#findAllSegments")]),
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("SyntaxReferenceError")]),
              _vm._v(" for unknown property and type references")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed field in resulting object of "),
          _c("code", [_vm._v("property()")]),
          _vm._v(" function: "),
          _c("code", [_vm._v("variable")]),
          _vm._v(" → "),
          _c("code", [_vm._v("custom")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed issue with readonly properties (e.g. "),
          _c("code", [_vm._v("line")]),
          _vm._v(" and "),
          _c("code", [_vm._v("column")]),
          _vm._v(") of "),
          _c("code", [_vm._v("Error")]),
          _vm._v(" and exception on attempt to write in iOS Safari")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha19-april-24-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha19-april-24-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha19 (April 24, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Extended "),
          _c("code", [_vm._v("List")]),
          _vm._v(" class with new methods:\n"),
          _c("ul", [
            _c("li", [_c("code", [_vm._v("List#prepend(item)")])]),
            _vm._v(" "),
            _c("li", [_c("code", [_vm._v("List#prependData(data)")])]),
            _vm._v(" "),
            _c("li", [_c("code", [_vm._v("List#insertData(data)")])]),
            _vm._v(" "),
            _c("li", [_c("code", [_vm._v("List#insertList(list)")])]),
            _vm._v(" "),
            _c("li", [_c("code", [_vm._v("List#replace(item, itemOrList)")])])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha18-april-3-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha18-april-3-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha18 (April 3, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("atrule")]),
          _vm._v(" walk context (#39)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed a result of generate method for "),
          _c("code", [_vm._v("AnPlusB")]),
          _vm._v(", "),
          _c("code", [_vm._v("AttributeSelector")]),
          _vm._v(", "),
          _c("code", [_vm._v("Function")]),
          _vm._v(", "),
          _c("code", [_vm._v("MediaFeature")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Ratio")]),
          _vm._v(" ("),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/csstree/csstree/commit/1e9587710efa8e9338bcf0bc794b4b45f286231d",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("1e95877"), _c("OutboundLink")],
            1
          ),
          _vm._v(")")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed typo in "),
          _c("code", [_vm._v("List")]),
          _vm._v(" exception messages (@strarsis, #42)")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Improved tokenizer to convert an input to a string")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha17-march-13-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha17-march-13-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha17 (March 13, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Implemented new concept of "),
          _c("code", [_vm._v("syntax")]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _vm._v("Changed main "),
              _c("code", [_vm._v("exports")]),
              _vm._v(" to expose a default syntax")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Defined initial "),
              _c("a", { attrs: { href: "lib/syntax/default.js" } }, [
                _vm._v("CSS syntax")
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("createSyntax()")]),
              _vm._v(" method to create a new syntax from scratch")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("fork()")]),
              _vm._v(
                " method to create a new syntax based on given via extension"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parser\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("mediaQueryList")]),
              _vm._v(" and "),
              _c("code", [_vm._v("mediaQuery")]),
              _vm._v(" parsing contexts")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("CDO")]),
              _vm._v(" and "),
              _c("code", [_vm._v("CDC")]),
              _vm._v(" node types")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Implemented additional declaration property prefix hacks ("
              ),
              _c("code", [_vm._v("#")]),
              _vm._v(" and "),
              _c("code", [_vm._v("+")]),
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("li", [_vm._v("Added support for UTF-16LE BOM")]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added support for "),
              _c("code", [_vm._v("@font-face")]),
              _vm._v(" at-rule")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("chroma()")]),
              _vm._v(" to legacy IE filter functions")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Improved "),
              _c("code", [_vm._v("HexColor")]),
              _vm._v(" to consume hex only")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Improved support for "),
              _c("code", [_vm._v("\\0")]),
              _vm._v(" and "),
              _c("code", [_vm._v("\\9")]),
              _vm._v(" hacks (#2)")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Relaxed number check for "),
              _c("code", [_vm._v("Ratio")]),
              _vm._v(" terms\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("Allowed fractal values as a "),
                  _c("code", [_vm._v("Ratio")]),
                  _vm._v(" term")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Disallowed zero number as a "),
                  _c("code", [_vm._v("Ratio")]),
                  _vm._v(" term")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed important clause parsing\n"),
              _c("ul", [
                _c("li", [
                  _vm._v(
                    "Allowed any identifier for important (to support hacks like "
                  ),
                  _c("code", [_vm._v("!ie")]),
                  _vm._v(")")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Store "),
                  _c("code", [_vm._v("true")]),
                  _vm._v(" for "),
                  _c("code", [_vm._v("important")]),
                  _vm._v(" field in case identifier equals to "),
                  _c("code", [_vm._v("important")]),
                  _vm._v(" and string otherwise")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Fixed parse error formatted message rendering to take into account tabs"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed exposing of "),
              _c("code", [_vm._v("Parser")]),
              _vm._v(" class")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Removed "),
              _c("code", [_vm._v("readSelectorSequence()")]),
              _vm._v(", "),
              _c("code", [_vm._v("readSequenceFallback()")]),
              _vm._v(" and "),
              _c("code", [_vm._v("readSelectorSequenceFallback")]),
              _vm._v(" methods")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Used single universal sequence consumer for "),
              _c("code", [_vm._v("AtruleExpression")]),
              _vm._v(", "),
              _c("code", [_vm._v("Selector")]),
              _vm._v(" and "),
              _c("code", [_vm._v("Value")])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Generator\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Reworked generator to use auto-generated functions based on syntax definition (additional work to be done in next releases)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("translateMarkup(ast, before, after)")]),
              _vm._v(" method for complex cases")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Reworked "),
              _c("code", [_vm._v("translateWithSourceMap")]),
              _vm._v(" to be more flexible (based on "),
              _c("code", [_vm._v("translateMarkup")]),
              _vm._v(", additional work to be done in next releases)")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Walker\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Reworked walker to use auto-generated function based on syntax definition (additional work to be done in next releases)"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Lexer\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Prepared for better extensibility (additional work to be done in next releases)"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("checkStructure(ast)")]),
              _vm._v(
                " method to check AST structure based on syntax definition"
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Update syntax dictionaries to latest "),
              _c("code", [_vm._v("mdn/data")]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _vm._v("Add missing "),
                  _c("code", [_vm._v("<'offset-position'>")]),
                  _vm._v(" syntax")
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("Extended "),
                  _c("code", [_vm._v("<position>")]),
                  _vm._v(" property with "),
                  _c("code", [_vm._v("-webkit-sticky")]),
                  _vm._v(" (@sergejmueller, #37)")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [_vm._v("Improved mismatch error position")])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented script ("),
          _c("code", [_vm._v("gen:syntax")]),
          _vm._v(") to generate AST format reference page ("),
          _c("code", [_vm._v("docs/ast.md")]),
          _vm._v(") using syntax definition")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha16-february-12-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha16-february-12-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha16 (February 12, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Exposed "),
          _c("code", [_vm._v("Parser")]),
          _vm._v(" class")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("startOffset")]),
          _vm._v(" option to "),
          _c("code", [_vm._v("Tokenizer")]),
          _vm._v(" (constructor and "),
          _c("code", [_vm._v("setSource()")]),
          _vm._v(" method)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added fallback functions for default ("),
          _c("code", [_vm._v("readSequenceFallback")]),
          _vm._v(") and selector ("),
          _c("code", [_vm._v("readSelectorSequenceFallback")]),
          _vm._v(") sequence readers")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed edge cases for "),
          _c("code", [_vm._v("AnPlusB")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed wrong whitespace ignoring in "),
          _c("code", [_vm._v("Selector")]),
          _vm._v(" consumer")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha15-february-8-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha15-february-8-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha15 (February 8, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed broken "),
          _c("code", [_vm._v("atruleExpression")]),
          _vm._v(" context")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed vendor prefix detection in "),
          _c("code", [_vm._v("keyword()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("property()")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("property()")]),
          _vm._v(" to not lowercase custom property names")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("variable")]),
          _vm._v(" boolean flag in "),
          _c("code", [_vm._v("property()")]),
          _vm._v(" result")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed "),
          _c("code", [_vm._v("scanner")]),
          _vm._v(" into "),
          _c("code", [_vm._v("tokenizer")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Ranamed "),
          _c("code", [_vm._v("syntax")]),
          _vm._v(" into "),
          _c("code", [_vm._v("lexer")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Moved "),
          _c("code", [_vm._v("docs/*.html")]),
          _vm._v(" files to "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/csstree/docs",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("csstree/docs"), _c("OutboundLink")],
            1
          ),
          _vm._v(" repo")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("element()")]),
          _vm._v(" function for "),
          _c("code", [_vm._v("Value")]),
          _vm._v(" context ("),
          _c("code", [_vm._v("-moz-element()")]),
          _vm._v(" supported as well)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Merged "),
          _c("code", [_vm._v("Universal")]),
          _vm._v(" node type into "),
          _c("code", [_vm._v("Type")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed node types:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("Id")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("IdSelector")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("Class")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("ClassSelector")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("Type")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("TypeSelector")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("Attribute")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("AttributeSelector")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("PseudoClass")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("PseudoClassSelector")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("PseudoElement")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("PseudoElementSelector")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("Hash")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("HexColor")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("Space")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("WhiteSpace")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("An+B")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("AnPlusB")])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("Progid")]),
          _vm._v(" node type")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Relaxed "),
          _c("code", [_vm._v("MediaQuery")]),
          _vm._v(
            " consumer to not validate syntax on parse and to include whitespaces in children sequence as is"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("WhiteSpace.value")]),
          _vm._v(" property to store whitespace sequence")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Implemented parser options to specify what should be parsed in details (when option is "
          ),
          _c("code", [_vm._v("false")]),
          _vm._v(" some part of CSS represents as balanced "),
          _c("code", [_vm._v("Raw")]),
          _vm._v("):\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("parseAtruleExpression")]),
              _vm._v(" – to parse at-rule expressions ("),
              _c("code", [_vm._v("true")]),
              _vm._v(" by default)")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("parseSelector")]),
              _vm._v(" – to parse rule's selector ("),
              _c("code", [_vm._v("true")]),
              _vm._v(" by default)")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("parseValue")]),
              _vm._v(" - to parse declaration's value ("),
              _c("code", [_vm._v("true")]),
              _vm._v(" by default)")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("parseCustomProperty")]),
              _vm._v(" – to parse value and fallback of custom property ("),
              _c("code", [_vm._v("false")]),
              _vm._v(" by default)")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Changed tokenization to stick leading hyphen minus to identifier token"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed selector parsing:\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Don't convert spaces into descendant combinator")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Don't validate selector structure on parsing (selectors may be checked by lexer later)"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Initial refactoring of "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/csstree/csstree/blob/master/docs",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("docs"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Various improvements and fixes")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha14-february-3-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha14-february-3-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha14 (February 3, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Implemented "),
          _c("code", [_vm._v("DeclarationList")]),
          _vm._v(", "),
          _c("code", [_vm._v("MediaQueryList")]),
          _vm._v(", "),
          _c("code", [_vm._v("MediaQuery")]),
          _vm._v(", "),
          _c("code", [_vm._v("MediaFeature")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Ratio")]),
          _vm._v(" node types")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented "),
          _c("code", [_vm._v("declarationList")]),
          _vm._v(" context (useful to parse HTML "),
          _c("code", [_vm._v("style")]),
          _vm._v(" attribute content)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented custom consumers for "),
          _c("code", [_vm._v("@import")]),
          _vm._v(", "),
          _c("code", [_vm._v("@media")]),
          _vm._v(", "),
          _c("code", [_vm._v("@page")]),
          _vm._v(" and "),
          _c("code", [_vm._v("@supports")]),
          _vm._v(" at-rules")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented "),
          _c("code", [_vm._v("atrule")]),
          _vm._v(" option for "),
          _c("code", [_vm._v("parse()")]),
          _vm._v(" config, is used for "),
          _c("code", [_vm._v("atruleExpession")]),
          _vm._v(" context to specify custom consumer for at-rule if any")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("Scanner#skipWS()")]),
          _vm._v(", "),
          _c("code", [_vm._v("Scanner#eatNonWS()")]),
          _vm._v(", "),
          _c("code", [_vm._v("Scanner#consume()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Scanner#consumeNonWS()")]),
          _vm._v(" helper methods")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Added custom consumers for known functional-pseudos, consume unknown functional-pseudo content as balanced "
          ),
          _c("code", [_vm._v("Raw")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Allowed any "),
          _c("code", [_vm._v("PseudoElement")]),
          _vm._v(" to be a functional-pseudo (#33)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Improved walker implementations to reduce GC thrashing by reusing cursors"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("Atrule.block")]),
          _vm._v(" to contain a "),
          _c("code", [_vm._v("Block")]),
          _vm._v(" node type only if any")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("Block.loc")]),
          _vm._v(" positions to include curly brackets")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("Atrule.expression")]),
          _vm._v(" to store a "),
          _c("code", [_vm._v("null")]),
          _vm._v(" if no expression")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed parser to use "),
          _c("code", [_vm._v("StyleSheet")]),
          _vm._v(" node type only for top level node (when context is "),
          _c("code", [_vm._v("stylesheet")]),
          _vm._v(", that's by default)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("Parentheses")]),
          _vm._v(", "),
          _c("code", [_vm._v("Brackets")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Function")]),
          _vm._v(" consumers to use passed sequence reader instead of its own")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("Value")]),
          _vm._v(" and "),
          _c("code", [_vm._v("AtruleExpression")]),
          _vm._v(
            " consumers to use common sequence reader (that reader was used by "
          ),
          _c("code", [_vm._v("Value")]),
          _vm._v(" consumer before)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Changed default sequence reader to exclude storage of spaces around "
          ),
          _c("code", [_vm._v("Comma")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed processing of custom properties:\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Consume declaration value as balanced "),
              _c("code", [_vm._v("Raw")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Consume "),
              _c("code", [_vm._v("var()")]),
              _vm._v(" fallback value as balanced "),
              _c("code", [_vm._v("Raw")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Validate first argument of "),
              _c("code", [_vm._v("var()")]),
              _vm._v(" starts with double dash")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Custom property's value and fallback includes spaces around"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("Nth")]),
          _vm._v(" to have a "),
          _c("code", [_vm._v("loc")]),
          _vm._v(" property")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("SelectorList.loc")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Selector.loc")]),
          _vm._v(" positions to exclude spaces")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed issue Browserify build fail with "),
          _c("code", [_vm._v("default-syntax.json")]),
          _vm._v(" is not found error (#32, @philschatz)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Disallowed "),
          _c("code", [_vm._v("Type")]),
          _vm._v(
            " selector starting with dash (parser throws an error in this case now)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Disallowed empty selectors for "),
          _c("code", [_vm._v("Rule")]),
          _vm._v(" (not sure if it's correct but looks reasonable)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v(">>")]),
          _vm._v(
            " combinator support until any browser support (no signals about that yet)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("PseudoElement.legacy")]),
          _vm._v(" property")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed special case for "),
          _c("code", [_vm._v(":before")]),
          _vm._v(", "),
          _c("code", [_vm._v(":after")]),
          _vm._v(", "),
          _c("code", [_vm._v(":first-letter")]),
          _vm._v(" and "),
          _c("code", [_vm._v(":first-line")]),
          _vm._v(" to represent them as "),
          _c("code", [_vm._v("PseudoElement")]),
          _vm._v(", now those pseudos are represented as "),
          _c("code", [_vm._v("PseudoClass")]),
          _vm._v(" nodes")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed deprecated "),
          _c("code", [_vm._v("Syntax#match()")]),
          _vm._v(" method")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Parser was splitted into modules and related changes, one step closer to an extensible parser"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Various fixes and improvements, all changes have negligible impact on performance"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha13-january-19-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha13-january-19-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha13 (January 19, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Changed location storing in "),
          _c("code", [_vm._v("SyntaxMatchError")]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _vm._v("Changed property to store mismatch offset to "),
              _c("code", [_vm._v("mismatchOffset")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("offset")]),
              _vm._v(" property to store bad node offset in source CSS if any")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Added "),
              _c("code", [_vm._v("loc")]),
              _vm._v(" property that stores bad node "),
              _c("code", [_vm._v("loc")]),
              _vm._v(" if any")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha12-january-19-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha12-january-19-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha12 (January 19, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("Syntax#matchProperty()")]),
          _vm._v(
            " method to always return a positive result for custom properties since syntax is never defined for them (#31)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented "),
          _c("code", [_vm._v("fromPlainObject()")]),
          _vm._v(" and "),
          _c("code", [_vm._v("toPlainObject()")]),
          _vm._v(
            " to convert plain object to AST or AST to plain object (currently converts "
          ),
          _c("code", [_vm._v("List")]),
          _vm._v(" <-> "),
          _c("code", [_vm._v("Array")]),
          _vm._v(")")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha11-january-18-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha11-january-18-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha11 (January 18, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added support for "),
          _c("code", [_vm._v(":matches(<selector-list>)")]),
          _vm._v(" (#28)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added support for "),
          _c("code", [_vm._v(":has(<relative-selector-list>)")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added support for "),
          _c("code", [_vm._v("::slotted(<compound-selector>)")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented "),
          _c("code", [_vm._v("Brackets")]),
          _vm._v(" node type")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Implemented basic support for at-rule inside rule block (#24)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed "),
          _c("code", [_vm._v("Selector")]),
          _vm._v(" node type to "),
          _c("code", [_vm._v("SelectorList")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed "),
          _c("code", [_vm._v("SimpleSelector")]),
          _vm._v(" node type to "),
          _c("code", [_vm._v("Selector")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed "),
          _c("code", [_vm._v("UnicodeRange.name")]),
          _vm._v(" property to "),
          _c("code", [_vm._v("UnicodeRange.value")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Replaced "),
          _c("code", [_vm._v("Negation")]),
          _vm._v(" node type for regular "),
          _c("code", [_vm._v("PseudoClass")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Unified name of node property to store nested nodes, it always "
          ),
          _c("code", [_vm._v("children")]),
          _vm._v(" now:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("StyleSheet.rules")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("StyleSheet.children")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("SelectorList.selectors")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("SelectorList.children")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("Block.declarations")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("Block.children")])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("*.sequence")]),
              _vm._v(" -> "),
              _c("code", [_vm._v("*.children")])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed edge cases in parsing "),
          _c("code", [_vm._v("Hex")]),
          _vm._v(" and "),
          _c("code", [_vm._v("UnicodeRange")]),
          _vm._v(" when number not an integer")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("nth-")]),
          _vm._v(" pseudos parsing\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("An+B")]),
              _vm._v(" node type to represent expressions like "),
              _c("code", [_vm._v("2n + 1")]),
              _vm._v(" or "),
              _c("code", [_vm._v("-3n")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Fixed edge cases when "),
              _c("code", [_vm._v("a")]),
              _vm._v(" or "),
              _c("code", [_vm._v("b")]),
              _vm._v(" is not an integer")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("odd")]),
              _vm._v(" and "),
              _c("code", [_vm._v("even")]),
              _vm._v(" keywords processing, keywords are storing as "),
              _c("code", [_vm._v("Identifier")]),
              _vm._v(" node type now")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed "),
              _c("code", [_vm._v("Nth")]),
              _vm._v(" node type format to store a "),
              _c("code", [_vm._v("nth")]),
              _vm._v("-query and an optional "),
              _c("code", [_vm._v("selector")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Implemented "),
              _c("code", [_vm._v("of")]),
              _vm._v(" clause for "),
              _c("code", [_vm._v("nth-")]),
              _vm._v(" pseudos (a.e. "),
              _c("code", [_vm._v(":nth-child(2n + 1 of li, img)")]),
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Limited "),
              _c("code", [_vm._v("Nth")]),
              _vm._v(" parsing rules to "),
              _c("code", [_vm._v(":nth-child()")]),
              _vm._v(", "),
              _c("code", [_vm._v(":nth-last-child()")]),
              _vm._v(", "),
              _c("code", [_vm._v(":nth-of-type()")]),
              _vm._v(" and "),
              _c("code", [_vm._v(":nth-last-of-type()")]),
              _vm._v(" pseudos")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed the way to store locations\n"),
          _c("ul", [
            _c("li", [
              _vm._v("Renamed "),
              _c("code", [_vm._v("info")]),
              _vm._v(" node property to "),
              _c("code", [_vm._v("loc")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Changed format of "),
              _c("code", [_vm._v("loc")]),
              _vm._v(" to store "),
              _c("code", [_vm._v("start")]),
              _vm._v(" and "),
              _c("code", [_vm._v("end")]),
              _vm._v(" positions")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha10-january-11-2017" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha10-january-11-2017" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha10 (January 11, 2017)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Reworked "),
          _c("code", [_vm._v("Scanner")]),
          _vm._v(" to be a single point to its functionality")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Exposed "),
          _c("code", [_vm._v("Scanner")]),
          _vm._v(" class to be useful for external projects")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("walk()")]),
          _vm._v(" function behaviour to traverse AST nodes in natural order")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented "),
          _c("code", [_vm._v("walkUp()")]),
          _vm._v(
            " function to traverse AST nodes from deepest to parent (behaves as "
          ),
          _c("code", [_vm._v("walk()")]),
          _vm._v(" before)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha9-december-21-2016" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha9-december-21-2016" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha9 (December 21, 2016)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<angle>")]),
          _vm._v(" generic according to specs that allow a "),
          _c("code", [_vm._v("<number>")]),
          _vm._v(" equals to zero to be used as valid value (#30)")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha8-november-11-2016" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha8-november-11-2016" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha8 (November 11, 2016)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("Scanner#skip()")]),
          _vm._v(" issue method when cursor is moving to the end of source")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Simplified "),
          _c("code", [_vm._v("Progid")]),
          _vm._v(" node")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Changed behaviour for bad selector processing, now parsing fails instead of selector ignoring"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("<id-selector>")]),
          _vm._v(" generic syntax")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c("code", [_vm._v("q")]),
          _vm._v(" unit for "),
          _c("code", [_vm._v("<length>")]),
          _vm._v(" generic syntax")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Refactored syntax parser (performance)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Reduced startup time by implementing lazy syntax parsing (default syntax doesn't parse on module load)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Updated syntax dictionaries and used "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/mdn/data",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("mdn/data")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" instead of "),
          _c("code", [_vm._v("Template:CSSData")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed "),
          _c("code", [_vm._v("syntax.stringify()")]),
          _vm._v(" method to "),
          _c("code", [_vm._v("syntax.translate()")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Simplified generic syntax functions, those functions receive a single AST node for checking and should return "
          ),
          _c("code", [_vm._v("true")]),
          _vm._v(" or "),
          _c("code", [_vm._v("false")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added exception for values that contains "),
          _c("code", [_vm._v("var()")]),
          _vm._v(", those values are always valid for now")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added more tests and increase code coverage to "),
          _c("code", [_vm._v("98.5%")])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha7-october-7-2016" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha7-october-7-2016" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha7 (October 7, 2016)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Added support for explicit descendant combinator ("),
          _c("code", [_vm._v(">>")]),
          _vm._v(")")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Implemented "),
          _c("code", [_vm._v("Type")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Universal")]),
          _vm._v(" type nodes")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Improved "),
          _c("code", [_vm._v("Number")]),
          _vm._v(" parsing by including sign and exponent (#26)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parse "),
          _c("code", [_vm._v("before")]),
          _vm._v(", "),
          _c("code", [_vm._v("after")]),
          _vm._v(", "),
          _c("code", [_vm._v("first-letter")]),
          _vm._v(" and "),
          _c("code", [_vm._v("first-line")]),
          _vm._v(" pseudos with single colon as "),
          _c("code", [_vm._v("PseudoElement")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("FunctionalPseudo")]),
          _vm._v(" node type to "),
          _c("code", [_vm._v("PseudoClass")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed attribute selector name parsing (namespace edge cases)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed location calculation for specified offset when "),
          _c("code", [_vm._v("eof")]),
          _vm._v(" is reached")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Added more non-standard colors (#25)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed obsolete "),
          _c("code", [_vm._v("Syntax#getAll()")]),
          _vm._v(" method")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed various edge cases, code clean up and performance improvements"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_1-0-0-alpha6-september-23-2016" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_1-0-0-alpha6-september-23-2016" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 1.0.0-alpha6 (September 23, 2016)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("More accurate positions for syntax mismatch errors")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Added "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://webkit.org/blog/3709/using-the-system-font-in-web-content/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("apple")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" specific font keywords (#20)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Changed "),
          _c("code", [_vm._v("Property")]),
          _vm._v(" node stucture from object to string")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Renamed "),
          _c("code", [_vm._v("Ruleset")]),
          _vm._v(" node type to "),
          _c("code", [_vm._v("Rule")])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Removed "),
          _c("code", [_vm._v("Argument")]),
          _vm._v(" node type")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("Dimension")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Percentage")]),
          _vm._v(" position computation")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Fixed bad selector parsing (temporary solution)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fixed location computation for CSS with very long lines that may lead to really long parsing with "
          ),
          _c("code", [_vm._v("positions:true")]),
          _vm._v(" (even freeze)")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fixed "),
          _c("code", [_vm._v("line")]),
          _vm._v(" and "),
          _c("code", [_vm._v("column")]),
          _vm._v(" computation for "),
          _c("code", [_vm._v("SyntaxMatch")]),
          _vm._v(" error")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Improved performance of parsing and translation. Now CSSTree is under 10ms in "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/postcss/benchmark",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("PostCSS benchmark"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}