{"remainingRequest":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js??ref--1-0!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??ref--1-1!/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js??ref--1-2!/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/regexpp/README.md?vue&type=template&id=47e90af7&","dependencies":[{"path":"/Users/licop/Documents/GitHub/What_is_FE/docs/前端框架/react/hook/react-hook-demo/node_modules/regexpp/README.md","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/licop/Documents/GitHub/What_is_FE/node_modules/_@vuepress_markdown-loader@1.7.1@@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJyZWdleHBwIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNyZWdleHBwIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgcmVnZXhwcCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3JlZ2V4cHAiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vdi9yZWdleHBwLnN2ZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICJucG0gdmVyc2lvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cDovL3d3dy5ucG10cmVuZHMuY29tL3JlZ2V4cHAiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vZG0vcmVnZXhwcC5zdmciLAogICAgICAgICAgICAgICAgYWx0OiAiRG93bmxvYWRzL21vbnRoIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vbXlzdGljYXRlYS9yZWdleHBwL2FjdGlvbnMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL215c3RpY2F0ZWEvcmVnZXhwcC93b3JrZmxvd3MvQ0kvYmFkZ2Uuc3ZnIiwKICAgICAgICAgICAgICAgIGFsdDogIkJ1aWxkIFN0YXR1cyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9jb2RlY292LmlvL2doL215c3RpY2F0ZWEvcmVnZXhwcCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2NvZGVjb3YuaW8vZ2gvbXlzdGljYXRlYS9yZWdleHBwL2JyYW5jaC9tYXN0ZXIvZ3JhcGgvYmFkZ2Uuc3ZnIiwKICAgICAgICAgICAgICAgIGFsdDogImNvZGVjb3YiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZGF2aWQtZG0ub3JnL215c3RpY2F0ZWEvcmVnZXhwcCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6ICJodHRwczovL2RhdmlkLWRtLm9yZy9teXN0aWNhdGVhL3JlZ2V4cHAuc3ZnIiwKICAgICAgICAgICAgICAgIGFsdDogIkRlcGVuZGVuY3kgU3RhdHVzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXJzZXIgZm9yIEVDTUFTY3JpcHQuIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICLwn5K/LWluc3RhbGxhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIj8J+Svy1pbnN0YWxsYXRpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIPCfkr8gSW5zdGFsbGF0aW9uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCIkICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIm5wbSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJpbnN0YWxsIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIHJlZ2V4cHBcbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygidWwiLCBbX2MoImxpIiwgW192bS5fdigicmVxdWlyZSBOb2RlLmpzIDggb3IgbmV3ZXIuIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIvCfk5YtdXNhZ2UiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI/Cfk5YtdXNhZ2UiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIPCfk5YgVXNhZ2UiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtdHMgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdHMiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4ga2V5d29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJpbXBvcnQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigieyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuICAgICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGNvbnN0YW50IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFTVCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiwiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiAgICBSZWdFeHBQYXJzZXIiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIsIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4gICAgUmVnRXhwVmFsaWRhdG9yIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuICAgIFJlZ0V4cFZpc2l0b3IiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIsIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4gICAgcGFyc2VSZWdFeHBMaXRlcmFsIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuICAgIHZhbGlkYXRlUmVnRXhwTGl0ZXJhbCIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiwiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiAgICB2aXNpdFJlZ0V4cEFTVFxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigifSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBrZXl3b3JkIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZyb20iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gc3RyaW5nIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoJyJyZWdleHBwIicpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwYXJzZXJlZ2V4cGxpdGVyYWwtc291cmNlLW9wdGlvbnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3BhcnNlcmVnZXhwbGl0ZXJhbC1zb3VyY2Utb3B0aW9ucyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIHBhcnNlUmVnRXhwTGl0ZXJhbChzb3VyY2UsIG9wdGlvbnM/KSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJQYXJzZSBhIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsIHRoZW4gbWFrZSBBU1Qgb2JqZWN0LiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIGlzIGVxdWl2YWxlbnQgdG8gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuZXcgUmVnRXhwUGFyc2VyKG9wdGlvbnMpLnBhcnNlTGl0ZXJhbChzb3VyY2UpIildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUGFyYW1ldGVyczoiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RyaW5nIHwgUmVnRXhwIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIikgVGhlIHNvdXJjZSBjb2RlIHRvIHBhcnNlLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib3B0aW9ucz8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogInNyYy9wYXJzZXIudHMjTDUzOSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlZ0V4cFBhcnNlci5PcHRpb25zIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgb3B0aW9ucyB0byBwYXJzZS4iKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUmV0dXJuOiIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFtfYygibGkiLCBbX3ZtLl92KCJUaGUgQVNUIG9mIHRoZSByZWd1bGFyIGV4cHJlc3Npb24uIildKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidmFsaWRhdGVyZWdleHBsaXRlcmFsLXNvdXJjZS1vcHRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN2YWxpZGF0ZXJlZ2V4cGxpdGVyYWwtc291cmNlLW9wdGlvbnMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiB2YWxpZGF0ZVJlZ0V4cExpdGVyYWwoc291cmNlLCBvcHRpb25zPykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVmFsaWRhdGUgYSBnaXZlbiByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbC4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIGlzIGVxdWl2YWxlbnQgdG8gIiksCiAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICBfdm0uX3YoIm5ldyBSZWdFeHBWYWxpZGF0b3Iob3B0aW9ucykudmFsaWRhdGVMaXRlcmFsKHNvdXJjZSkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQYXJhbWV0ZXJzOiIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic291cmNlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgc291cmNlIGNvZGUgdG8gdmFsaWRhdGUuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcHRpb25zPyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic3JjL3ZhbGlkYXRvci50cyNMMTI3IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmVnRXhwVmFsaWRhdG9yLk9wdGlvbnMiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBvcHRpb25zIHRvIHZhbGlkYXRlLiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInZpc2l0cmVnZXhwYXN0LWFzdC1oYW5kbGVycyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdmlzaXRyZWdleHBhc3QtYXN0LWhhbmRsZXJzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgdmlzaXRSZWdFeHBBU1QoYXN0LCBoYW5kbGVycykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVmlzaXQgZWFjaCBub2RlIG9mIGEgZ2l2ZW4gQVNULiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoaXMgaXMgZXF1aXZhbGVudCB0byAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5ldyBSZWdFeHBWaXNpdG9yKGhhbmRsZXJzKS52aXNpdChhc3QpIildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUGFyYW1ldGVyczoiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImFzdCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic3JjL2FzdC50cyNMNCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFTVC5Ob2RlIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgQVNUIHRvIHZpc2l0LiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaGFuZGxlcnMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogInNyYy92aXNpdG9yLnRzI0wyMDQiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSZWdFeHBWaXNpdG9yLkhhbmRsZXJzIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgY2FsbGJhY2tzLiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInJlZ2V4cHBhcnNlciIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmVnZXhwcGFyc2VyIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZWdFeHBQYXJzZXIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJuZXctcmVnZXhwcGFyc2VyLW9wdGlvbnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI25ldy1yZWdleHBwYXJzZXItb3B0aW9ucyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIG5ldyBSZWdFeHBQYXJzZXIob3B0aW9ucz8pIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBhcmFtZXRlcnM6IildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcHRpb25zPyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic3JjL3BhcnNlci50cyNMNTM5IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmVnRXhwUGFyc2VyLk9wdGlvbnMiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBvcHRpb25zIHRvIHBhcnNlLiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInBhcnNlci1wYXJzZWxpdGVyYWwtc291cmNlLXN0YXJ0LWVuZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcGFyc2VyLXBhcnNlbGl0ZXJhbC1zb3VyY2Utc3RhcnQtZW5kIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgcGFyc2VyLnBhcnNlTGl0ZXJhbChzb3VyY2UsIHN0YXJ0PywgZW5kPykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUGFyc2UgYSByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbC4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQYXJhbWV0ZXJzOiIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic291cmNlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgc291cmNlIGNvZGUgdG8gcGFyc2UuIEUuZy4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCciL2FiYy9nIicpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdGFydD8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51bWJlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBzdGFydCBpbmRleCBpbiB0aGUgc291cmNlIGNvZGUuIERlZmF1bHQgaXMgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIwIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVuZD8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51bWJlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBlbmQgaW5kZXggaW4gdGhlIHNvdXJjZSBjb2RlLiBEZWZhdWx0IGlzICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic291cmNlLmxlbmd0aCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlJldHVybjoiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbX2MoImxpIiwgW192bS5fdigiVGhlIEFTVCBvZiB0aGUgcmVndWxhciBleHByZXNzaW9uLiIpXSldKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAicGFyc2VyLXBhcnNlcGF0dGVybi1zb3VyY2Utc3RhcnQtZW5kLXVmbGFnIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwYXJzZXItcGFyc2VwYXR0ZXJuLXNvdXJjZS1zdGFydC1lbmQtdWZsYWciIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHBhcnNlci5wYXJzZVBhdHRlcm4oc291cmNlLCBzdGFydD8sIGVuZD8sIHVGbGFnPykiKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUGFyc2UgYSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybi4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQYXJhbWV0ZXJzOiIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic291cmNlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgc291cmNlIGNvZGUgdG8gcGFyc2UuIEUuZy4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCciYWJjIicpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdGFydD8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51bWJlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBzdGFydCBpbmRleCBpbiB0aGUgc291cmNlIGNvZGUuIERlZmF1bHQgaXMgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIwIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVuZD8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51bWJlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBlbmQgaW5kZXggaW4gdGhlIHNvdXJjZSBjb2RlLiBEZWZhdWx0IGlzICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic291cmNlLmxlbmd0aCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ1RmxhZz8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJvb2xlYW4iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgZmxhZyB0byBlbmFibGUgVW5pY29kZSBtb2RlLiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJSZXR1cm46IildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUaGUgQVNUIG9mIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybi4iKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInBhcnNlci1wYXJzZWZsYWdzLXNvdXJjZS1zdGFydC1lbmQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3BhcnNlci1wYXJzZWZsYWdzLXNvdXJjZS1zdGFydC1lbmQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBwYXJzZXIucGFyc2VGbGFncyhzb3VyY2UsIHN0YXJ0PywgZW5kPykiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUGFyc2UgYSByZWd1bGFyIGV4cHJlc3Npb24gZmxhZ3MuIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUGFyYW1ldGVyczoiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RyaW5nIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIikgVGhlIHNvdXJjZSBjb2RlIHRvIHBhcnNlLiBFLmcuICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignImdpbSInKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RhcnQ/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJudW1iZXIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgc3RhcnQgaW5kZXggaW4gdGhlIHNvdXJjZSBjb2RlLiBEZWZhdWx0IGlzICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJlbmQ/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJudW1iZXIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgZW5kIGluZGV4IGluIHRoZSBzb3VyY2UgY29kZS4gRGVmYXVsdCBpcyAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZS5sZW5ndGgiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJSZXR1cm46IildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUaGUgQVNUIG9mIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gZmxhZ3MuIildKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJyZWdleHB2YWxpZGF0b3IiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlZ2V4cHZhbGlkYXRvciIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVnRXhwVmFsaWRhdG9yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAibmV3LXJlZ2V4cHZhbGlkYXRvci1vcHRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNuZXctcmVnZXhwdmFsaWRhdG9yLW9wdGlvbnMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBuZXcgUmVnRXhwVmFsaWRhdG9yKG9wdGlvbnMpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBhcmFtZXRlcnM6IildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcHRpb25zIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJzcmMvdmFsaWRhdG9yLnRzI0wxMjciIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSZWdFeHBWYWxpZGF0b3IuT3B0aW9ucyIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIikgVGhlIG9wdGlvbnMgdG8gdmFsaWRhdGUuIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJ2YWxpZGF0b3ItdmFsaWRhdGVsaXRlcmFsLXNvdXJjZS1zdGFydC1lbmQiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3ZhbGlkYXRvci12YWxpZGF0ZWxpdGVyYWwtc291cmNlLXN0YXJ0LWVuZCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgdmFsaWRhdG9yLnZhbGlkYXRlTGl0ZXJhbChzb3VyY2UsIHN0YXJ0LCBlbmQpIikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlZhbGlkYXRlIGEgcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwuIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUGFyYW1ldGVyczoiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RyaW5nIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIikgVGhlIHNvdXJjZSBjb2RlIHRvIHZhbGlkYXRlLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RhcnQ/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJudW1iZXIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgc3RhcnQgaW5kZXggaW4gdGhlIHNvdXJjZSBjb2RlLiBEZWZhdWx0IGlzICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJlbmQ/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJudW1iZXIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgZW5kIGluZGV4IGluIHRoZSBzb3VyY2UgY29kZS4gRGVmYXVsdCBpcyAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZS5sZW5ndGgiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAidmFsaWRhdG9yLXZhbGlkYXRlcGF0dGVybi1zb3VyY2Utc3RhcnQtZW5kLXVmbGFnIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjdmFsaWRhdG9yLXZhbGlkYXRlcGF0dGVybi1zb3VyY2Utc3RhcnQtZW5kLXVmbGFnIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHZhbGlkYXRvci52YWxpZGF0ZVBhdHRlcm4oc291cmNlLCBzdGFydCwgZW5kLCB1RmxhZykiKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVmFsaWRhdGUgYSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybi4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQYXJhbWV0ZXJzOiIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic291cmNlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgc291cmNlIGNvZGUgdG8gdmFsaWRhdGUuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdGFydD8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51bWJlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBzdGFydCBpbmRleCBpbiB0aGUgc291cmNlIGNvZGUuIERlZmF1bHQgaXMgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIwIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVuZD8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51bWJlciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBlbmQgaW5kZXggaW4gdGhlIHNvdXJjZSBjb2RlLiBEZWZhdWx0IGlzICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic291cmNlLmxlbmd0aCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ1RmxhZz8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJvb2xlYW4iKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgZmxhZyB0byBlbmFibGUgVW5pY29kZSBtb2RlLiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInZhbGlkYXRvci12YWxpZGF0ZWZsYWdzLXNvdXJjZS1zdGFydC1lbmQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3ZhbGlkYXRvci12YWxpZGF0ZWZsYWdzLXNvdXJjZS1zdGFydC1lbmQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiB2YWxpZGF0b3IudmFsaWRhdGVGbGFncyhzb3VyY2UsIHN0YXJ0LCBlbmQpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlZhbGlkYXRlIGEgcmVndWxhciBleHByZXNzaW9uIGZsYWdzLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBhcmFtZXRlcnM6IildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzb3VyY2UiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN0cmluZyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBzb3VyY2UgY29kZSB0byB2YWxpZGF0ZS4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN0YXJ0PyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnVtYmVyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIikgVGhlIHN0YXJ0IGluZGV4IGluIHRoZSBzb3VyY2UgY29kZS4gRGVmYXVsdCBpcyAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjAiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZW5kPyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnVtYmVyIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIikgVGhlIGVuZCBpbmRleCBpbiB0aGUgc291cmNlIGNvZGUuIERlZmF1bHQgaXMgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzb3VyY2UubGVuZ3RoIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJyZWdleHB2aXNpdG9yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNyZWdleHB2aXNpdG9yIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZWdFeHBWaXNpdG9yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAibmV3LXJlZ2V4cHZpc2l0b3ItaGFuZGxlcnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI25ldy1yZWdleHB2aXNpdG9yLWhhbmRsZXJzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgbmV3IFJlZ0V4cFZpc2l0b3IoaGFuZGxlcnMpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBhcmFtZXRlcnM6IildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJoYW5kbGVycyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic3JjL3Zpc2l0b3IudHMjTDIwNCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlZ0V4cFZpc2l0b3IuSGFuZGxlcnMiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIFRoZSBjYWxsYmFja3MuIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAidmlzaXRvci12aXNpdC1hc3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Zpc2l0b3ItdmlzaXQtYXN0IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgdmlzaXRvci52aXNpdChhc3QpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlZhbGlkYXRlIGEgcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwuIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUGFyYW1ldGVyczoiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImFzdCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKCIpLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic3JjL2FzdC50cyNMNCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFTVC5Ob2RlIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiKSBUaGUgQVNUIHRvIHZpc2l0LiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIvCfk7AtY2hhbmdlbG9nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiPwn5OwLWNoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIg8J+TsCBDaGFuZ2Vsb2ciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vbXlzdGljYXRlYS9yZWdleHBwL3JlbGVhc2VzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiR2l0SHViIFJlbGVhc2VzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICLwn427LWNvbnRyaWJ1dGluZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIj8J+Nuy1jb250cmlidXRpbmciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIPCfjbsgQ29udHJpYnV0aW5nIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIldlbGNvbWUgY29udHJpYnV0aW5nISIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlBsZWFzZSB1c2UgR2l0SHViJ3MgSXNzdWVzL1BScy4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImRldmVsb3BtZW50LXRvb2xzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNkZXZlbG9wbWVudC10b29scyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERldmVsb3BtZW50IFRvb2xzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJucG0gdGVzdCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBydW5zIHRlc3RzIGFuZCBtZWFzdXJlcyBjb3ZlcmFnZS4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnBtIHJ1biBidWlsZCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBjb21waWxlcyBUeXBlU2NyaXB0IHNvdXJjZSBjb2RlIHRvICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpbmRleC5qcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImluZGV4LmpzLm1hcCIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpbmRleC5kLnRzIildKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJucG0gcnVuIGNsZWFuIildKSwKICAgICAgICAgIF92bS5fdigiIHJlbW92ZXMgdGhlIHRlbXBvcmFyeSBmaWxlcyB3aGljaCBhcmUgY3JlYXRlZCBieSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnBtIHRlc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJucG0gcnVuIGJ1aWxkIildKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJucG0gcnVuIGxpbnQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcnVucyBFU0xpbnQuIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBydW4gdXBkYXRlOnRlc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdXBkYXRlcyB0ZXN0IGZpeHR1cmVzLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJucG0gcnVuIHVwZGF0ZTppZHMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdXBkYXRlcyAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3JjL3VuaWNvZGUvaWRzLnRzIildKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJucG0gcnVuIHdhdGNoIildKSwKICAgICAgICAgIF92bS5fdigiIHJ1bnMgdGVzdHMgd2l0aCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLS13YXRjaCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBvcHRpb24uIikKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}